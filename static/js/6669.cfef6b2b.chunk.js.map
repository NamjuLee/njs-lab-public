{"version":3,"file":"static/js/6669.cfef6b2b.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-color/ColorSpace/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Renderer/Base/Base.ts","njslab/Workshop/workshop-color/base/NRenderer/Renderer/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Scene/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Common/index.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Vector3.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Point3.ts","njslab/Workshop/workshop-color/base/NRenderer/Geometry/Arrow.ts","njslab/Workshop/workshop-color/base/NRenderer/index.ts","njslab/Workshop/workshop-color/base/util/index.ts"],"sourcesContent":["import * as THREE from 'three'\r\n\r\nimport { NRenderer, Point3, Arrow, Vector3, getSlider, getCheckBox, getDropdown } from '../base';\r\n\r\n\r\nimport { ColorUtility, getColorCosineSimilarity, getColorDistance, getColorDifferenceByDeltaE } from '../../../../lib/NJSCore'\r\n\r\n// import { RendererThree } from './base/RendererThree';\r\n// import { getCheckBox } from '../../Workshop/workshop-vector-dynamics/base/util'\r\n\r\nexport class Solution {\r\n\r\n    public div: HTMLDivElement\r\n    public renderer: NRenderer;\r\n    public m: number[] = [0, 0];\r\n    public t: number = 0.0;\r\n    public pts: Point[] = [];\r\n    public p: Point = undefined;\r\n\r\n    public divColB: HTMLDivElement;\r\n    public divColorResultText: HTMLDivElement;\r\n    public colorValueT = [255, 0 , 0];\r\n    public colorValue = [4, 12 , 0];\r\n    public resolution = 15;\r\n\r\n    public colorSpaces = ['RGB', 'LAB' ,'HSV', 'HSL'];\r\n    public colorSpaceSelected = 'RGB';\r\n    public needGrid = false\r\n\r\n    constructor(div: HTMLDivElement) {\r\n        this.div = div;\r\n        this.renderer = new NRenderer(div.id);\r\n        this.renderer.showGrid = false;\r\n        this.renderer.updateBinding = () => this.render();\r\n        this.renderer.onMouseClick = (e) => this.mouseClick(e);\r\n\r\n        this.initDom();\r\n        this.init();\r\n    }\r\n    public initDom() {\r\n        const div = document.createElement('div');\r\n        div.style.position = 'absolute';\r\n        div.style.margin = '15px';\r\n        this.div.appendChild(div);\r\n\r\n        // const resetBtn = document.createElement('button');\r\n        // resetBtn.textContent = 'reset';\r\n        // resetBtn.onclick = () => {\r\n        //     this.reset();\r\n        //     this.init();\r\n        // }\r\n        // div.append(resetBtn);\r\n\r\n\r\n        const cBox = getCheckBox('Grid');\r\n        div.append(cBox.div);\r\n        cBox.checkBox.checked = false;\r\n        cBox.checkBox.onchange = () => {\r\n            this.needGrid = cBox.checkBox.checked;\r\n            this.updateColor();\r\n        }\r\n\r\n      \r\n\r\n        // const axis = getCheckBox('axis');\r\n        // div.append(axis.div);\r\n        // axis.checkBox.checked = true;\r\n        // axis.checkBox.onchange = () => {\r\n        //     this.renderer.showAxis = axis.checkBox.checked;\r\n\r\n        // }\r\n\r\n        this.renderer.renderer.axis.scale.x = 51;\r\n        this.renderer.renderer.axis.scale.y = 51;\r\n        this.renderer.renderer.axis.scale.z = 51;\r\n        this.renderer.renderer.camera.far = 500;\r\n        \r\n        this.renderer.renderer.camera.position.set(900, -300, 700)\r\n        this.renderer.renderer.controls.target.set(255 * 0.5, 255 * 0.5, 255 * 0.5)\r\n\r\n\r\n\r\n        const geometry = new THREE.BoxGeometry( 255, 255, 255 );\r\n        const wireframe = new THREE.EdgesGeometry( geometry );\r\n        const line = new THREE.LineSegments( wireframe );\r\n        line.position.set(255 * 0.5, 255 * 0.5, 255 * 0.5)\r\n        // @ts-expect-error\r\n        line.material.color.r = 0.5; line.material.color.g = 0.5; line.material.color.b = 0.5;\r\n        // @ts-expect-error\r\n        line.material.depthTest = false;\r\n        // @ts-expect-error\r\n        line.material.opacity = 0.25;\r\n        // @ts-expect-error\r\n        line.material.transparent = true;\r\n        this.renderer.renderer.scene.add( line );\r\n\r\n\r\n\r\n\r\n        const rlType = getSlider(`r: ${Math.floor(this.colorValue[0])}`, 0, this.resolution)\r\n        rlType.slider.defaultValue = `${this.colorValue[0]}`;\r\n        div.appendChild(rlType.div);\r\n        rlType.slider.oninput = () => {\r\n            const value = parseInt(rlType.slider.value);\r\n            this.colorValue[0] = value;\r\n            rlType.text.textContent = 'r: ' + value\r\n            this.updateColor();\r\n            cBox.checkBox.checked = false;\r\n        };\r\n\r\n        const glType = getSlider(`g: ${Math.floor(this.colorValue[1])}`, 0, this.resolution)\r\n        glType.slider.defaultValue = `${this.colorValue[1]}`;\r\n        div.appendChild(glType.div);\r\n        glType.slider.oninput = () => {\r\n            const value = parseInt(glType.slider.value);\r\n            this.colorValue[1] = value;\r\n            glType.text.textContent = 'g: ' + value\r\n            this.updateColor();\r\n            cBox.checkBox.checked = false;\r\n        };\r\n\r\n        const blType = getSlider(`b: ${Math.floor(this.colorValue[2])}`, 0, this.resolution)\r\n        blType.slider.defaultValue = `${this.colorValue[2]}`;\r\n        div.appendChild(blType.div);\r\n        blType.slider.oninput = () => {\r\n            const value = parseInt(blType.slider.value);\r\n            this.colorValue[2] = value;\r\n            blType.text.textContent = 'b: ' + value\r\n            this.updateColor();\r\n            cBox.checkBox.checked = false;\r\n        };\r\n\r\n        // const divColorContainer = document.createElement('div');\r\n        // divColorContainer.style.display = 'flex';\r\n        // div.appendChild(divColorContainer);\r\n\r\n        // const divColA = document.createElement('div');\r\n        // divColA.style.background = `rgba(${this.colorValueT[0]}, ${this.colorValueT[1]}, ${this.colorValueT[2]})`;\r\n        // divColA.style.width = '50px';\r\n        // divColA.style.height = '50px';\r\n        // divColorContainer.appendChild(divColA);\r\n\r\n        // this.divColB = document.createElement('div');\r\n        // this.divColB.style.background = `rgba(${this.colorValue[0]}, ${this.colorValue[1]}, ${this.colorValue[2]})`;\r\n        // this.divColB.style.width = '50px';\r\n        // this.divColB.style.height = '50px';\r\n        // divColorContainer.appendChild(this.divColB);\r\n\r\n        // this.divColorResultText = document.createElement('div');\r\n        // this.divColorResultText.style.fontSize = 'large';\r\n        // this.divColorResultText.style.margin = '4px';\r\n        // // divColorResultText.style.display = 'flex';\r\n        // div.appendChild(this.divColorResultText);\r\n\r\n        // const colorSpace = getSlider(`Space: RGB`, 0, 5)\r\n        // colorSpace.slider.defaultValue = `${this.colorValue[2]}`;\r\n        // div.appendChild(colorSpace.div);\r\n        // colorSpace.slider.oninput = () => {\r\n        //     const value = parseInt(colorSpace.slider.value);\r\n            \r\n        //     this.updateColor();\r\n        //     // this.colorValue[2] = value;\r\n        //     // colorSpace.text.textContent = 'Color Type: ' + value\r\n        //     // this.updateColor();\r\n        //     // cBox.checkBox.checked = false;\r\n        // };\r\n\r\n\r\n        const dropMenu = getDropdown(this.colorSpaces, (colorSpace)=> {\r\n            // console.log({colorSpace})\r\n            this.colorSpaceSelected = colorSpace;\r\n            this.updateColor();\r\n        })\r\n        div.appendChild(dropMenu);\r\n    }\r\n    public reset() {\r\n        this.renderer.reset();\r\n        this.t = 0.0;\r\n        this.pts = [];\r\n        this.p = undefined;\r\n    }\r\n    public updateColor() {\r\n        // this.p.pt.mesh.position.set(this.colorValue[0], this.colorValue[1], this.colorValue[2]);\r\n        // this.p.pt.material.color.set(new THREE.Color(this.colorValue[0] / 255, this.colorValue[1] / 255, this.colorValue[2] / 255));\r\n\r\n        // const result = getColorCosineSimilarity(this.colorValue, this.colorValueT);\r\n        // const resultDis = getColorDistance(this.colorValue, this.colorValueT);\r\n        // const resultDisLab = getColorDifferenceByDeltaE(this.colorValue, this.colorValueT);\r\n\r\n        // this.divColB.style.background = `rgba(${this.colorValue[0]}, ${this.colorValue[1]}, ${this.colorValue[2]})`;\r\n\r\n        // const resultText = {result, resultDis, resultDisLab}\r\n\r\n        // this.divColorResultText.innerHTML = `\r\n        //     CosineSimilarity: ${resultText.result.toFixed(2)} <br/> \r\n        //     Distance: ${resultText.resultDis.toFixed(2)} <br/> \r\n        //     DeltaE: ${resultText.resultDisLab.toFixed(2)}\r\n        //     ` // JSON.stringify(resultText)\r\n\r\n        // // console.log(resultText)\r\n\r\n        this.renderer.reset()\r\n\r\n\r\n        this.init();\r\n        // this.arrow.update();\r\n    }\r\n    public colorProjection(r: number, g: number, b: number) {\r\n        if (this.colorSpaceSelected === 'LAB') {\r\n            const col = ColorUtility.rgb2lab(r,g,b)\r\n            return col\r\n        }\r\n\r\n        if (this.colorSpaceSelected === 'HSV') {\r\n            const col = ColorUtility.RGB2HSV(r,g,b).map( d => d * 255)\r\n            // console.log(col)\r\n            return col\r\n        }\r\n        if (this.colorSpaceSelected === 'HSL') {\r\n            const col = ColorUtility.RGB2HSL(r,g,b).map( d => d * 255)\r\n            return col\r\n        }\r\n\r\n\r\n        return [r,g,b]\r\n    }\r\n    public init() {\r\n\r\n        const num = this.resolution;\r\n\r\n        if (this.needGrid) {\r\n\r\n            const interval = 255 / (num - 1);\r\n            for(let z = 0; z < num; z++) {\r\n                for(let y = 0; y < num; y++) {\r\n                    for(let x = 0; x < num; x++) {\r\n    \r\n                        let r = x * interval;\r\n                        let g = y * interval;\r\n                        let b = z * interval;\r\n\r\n\r\n                        [r,g,b] = this.colorProjection(r,g,b)\r\n                \r\n                        this.p = new Point(r,g,b, 0, -2, 2);\r\n                        this.pts.push(this.p);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            // this.p = new Point(this.colorValueT[0], this.colorValueT[1], this.colorValueT[2], 0, -2, 2)\r\n            // this.pts.push(this.p);\r\n\r\n            // const r = this.colorValue[0];\r\n            // const g = this.colorValue[1];\r\n            // const b = this.colorValue[2];\r\n            // this.p = new Point(r,g,b, 0, -2, 2)\r\n            // this.pts.push(this.p);\r\n\r\n            const interval = 255 / (num - 1);\r\n            for(let z = 0; z < num; z++) {\r\n                for(let y = 0; y < num; y++) {\r\n                    for(let x = 0; x < num; x++) {\r\n\r\n                        if (x === this.colorValue[0] || y === this.colorValue[1] || z === this.colorValue[2]) {\r\n                            let r = x * interval;\r\n                            let g = y * interval;\r\n                            let b = z * interval;\r\n\r\n                            [r,g,b] = this.colorProjection(r,g,b)\r\n                    \r\n                            this.p = new Point(r,g,b, 0, -2, 2);\r\n                            this.pts.push(this.p);\r\n                        }\r\n    \r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // this.updateColor();\r\n        // console.log(this.colorSpaceSelected)\r\n    }\r\n    public render(): void {\r\n\r\n\r\n        this.t += 0.001;\r\n    }\r\n    public mouseMove(e: MouseEvent): void {\r\n        // this.m[0] = x - this.canvas.width * 0.5;\r\n        // this.m[1] = y - this.canvas.height * 0.5;\r\n    }\r\n    public renderMouse(ctx) {\r\n        // ctx.fillStyle = '#eee';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.m[0], this.m[1], 3, 0, Math.PI * 2.0)\r\n        // ctx.closePath();\r\n        // ctx.fill();\r\n    }\r\n    public mouseClick(e: MouseEvent): void {\r\n\r\n        // const v = new Point(x - this.canvas.width * 0.5, y - this.canvas.height * 0.5, 0);\r\n        // this.pts.push(v);\r\n\r\n        const r = Math.random() * 255;\r\n        const g = Math.random() * 255;\r\n        const b = Math.random() * 255;\r\n        this.p = new Point(r,g,b, 0, -2, 2)\r\n        this.pts.push(this.p);\r\n\r\n    }\r\n    public destroy() {\r\n        // console.log('des')\r\n        try {\r\n            while (this.div !== undefined && this.div.lastElementChild !== undefined) {\r\n                this.div.removeChild(this.div.lastElementChild);\r\n            }\r\n        } catch (error) { }\r\n        this.renderer.destroy();\r\n    }\r\n}\r\n\r\nclass Point {\r\n    public vec: Vector3;\r\n    public velocity: Vector3;\r\n    public force: Vector3 = new Vector3(0,0,0);\r\n    public mass = 10;\r\n    public r: number = 10;\r\n\r\n    public pt: Point3;\r\n\r\n    constructor(x, y, z ,ux = 0, uy = 0, uz = 0) {\r\n        this.vec =      new Vector3(x, y, z)\r\n        this.velocity = new Vector3(ux, uy, uz)\r\n\r\n        this.pt = new Point3(this.vec, 7);\r\n        this.pt.onClick = (e) => this.onClick(e)\r\n        this.pt.material.color.set(new THREE.Color(x / 255, y / 255, z / 255 ))\r\n    }\r\n    public onClick(e) {\r\n        // console.log(e);\r\n    }\r\n    // public render(ctx: CanvasRenderingContext2D) {\r\n    //     ctx.beginPath();\r\n    //     ctx.arc(this.vec.x, this.vec.y, this.r, 0, Math.PI * 2.0)\r\n    //     ctx.closePath();\r\n    //     ctx.fill()\r\n    // }\r\n    \r\n}\r\n\r\n\r\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nexport class RendererThreeVectorSandboxBase {\n    public canvas: HTMLCanvasElement;\n    public hostDiv: HTMLElement;\n    public ctx: CanvasRenderingContext2D;\n    public t: number = 0.0;\n    public camera: THREE.PerspectiveCamera;\n    public scene: THREE.Scene;\n    public renderer: THREE.WebGLRenderer;\n    public controls: OrbitControls;\n    private requestFrame: number;\n    constructor(id: string) {\n        this.hostDiv = document.getElementById(id);\n        this.initCanvas();\n    }\n    private initCanvas() {\n        this.scene = new THREE.Scene();\n        this.setBG(null)\n        this.scene.castShadow = true;\n\n        THREE.Object3D.DEFAULT_UP.set(0, 0, 1);\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(this.hostDiv.clientWidth / this.hostDiv.clientHeight);\n        this.renderer.domElement.id = 'Three';\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n        this.hostDiv.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(30, this.hostDiv.clientWidth / this.hostDiv.clientHeight, 1, 5000);\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.camera.position.set(20, -20, 20);\n        this.controls.update();\n\n        this.canvas = this.renderer.domElement;\n\n        this.init();\n    }\n    public setBG(hexColor: string | null) {\n        if (hexColor!== null) {\n            this.scene.background = new THREE.Color(hexColor);\n        } else {\n            this.scene.background = null;\n        }\n    }\n    private init() {\n        this.eventBind();\n\n    }\n    private eventBind() {\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.mouseDownPre(e);\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.mouseUpPre(e);\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.mouseMovePre(e);\n        this.renderer.domElement.addEventListener('click', (e: MouseEvent) => this.mouseClickPre(e))\n\n        window.addEventListener('resize', () => this.onWindowResize());\n\n    }\n    private onWindowResize() {\n        this.camera.aspect = this.hostDiv.clientWidth / this.hostDiv.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n    }\n    private loop = () => {\n        this.requestFrame = requestAnimationFrame(this.loop);\n        this.controls.update();\n        this.update(this.scene);\n        this.renderer.render(this.scene, this.camera);\n        this.t += 0.01;\n\n        // console.log('rendering...');\n    }\n    // .............................................................................\n    public start() {\n        this.loop();\n    }\n    public mouseDownPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseUpPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseMovePre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDragPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public update(scene: THREE.Scene) {\n        // console.log(e);\n    }\n    public destroy() {\n        window.removeEventListener('resize', () => this.onWindowResize());\n        cancelAnimationFrame(this.requestFrame);\n        this.requestFrame = undefined;\n        while (this.hostDiv.lastChild) {\n            this.hostDiv.removeChild(this.hostDiv.lastChild);\n        }\n    }\n}\n\n\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { RendererThreeVectorSandboxBase } from './Base/Base'\n\nexport class RendererThreeVecSandbox extends RendererThreeVectorSandboxBase {\n    public sandboxVector: NRenderer\n    public pointLight: THREE.PointLight\n\n    public rayCaster = new THREE.Raycaster();\n    public mouse = new THREE.Vector2();\n    public m = new THREE.Vector3();\n\n    public sphere: THREE.Mesh;\n    public ground: THREE.Mesh;\n\n    public axis: THREE.AxesHelper;\n    public grid: THREE.GridHelper;\n\n\n    constructor(sandboxVector: NRenderer, id: string = 'main', color = '#00000000') {\n        super(id)\n        THREE.Object3D.DEFAULT_UP.set(0, 1, 0);\n        this.sandboxVector = sandboxVector;\n        // this.setBG(color);\n\n        this.initPost();\n        this.start();\n    }\n    public initPost() {\n\n        const ambientLight = new THREE.AmbientLight(0x555555);\n        this.scene.add(ambientLight);\n\n        this.pointLight = new THREE.PointLight(0xffffff, 100);\n        this.pointLight.position.x = 10;\n        this.pointLight.castShadow = true;\n        this.scene.add(this.pointLight);\n\n        this.axis = new THREE.AxesHelper(5);\n        this.axis.position.z = 0.001;\n        // this.axis.rotation.y = -Math.PI / 2;\n        this.scene.add(this.axis);\n\n        const sizeGrid = 50\n        this.grid = new THREE.GridHelper(sizeGrid, 100, 0x444444, 0x323232);\n        this.grid.rotation.x = -Math.PI / 2;\n        this.scene.add(this.grid);\n\n        const geometry = new THREE.PlaneGeometry(sizeGrid, sizeGrid);\n        const materialG = new THREE.MeshBasicMaterial({color: 0x010101, side: THREE.DoubleSide, \n            transparent: true, opacity: 0\n        });\n        this.ground = new THREE.Mesh(geometry, materialG);\n        // this.ground.rotation.x = -Math.PI / 2; // Rotate to make it flat\n        // this.ground.position.set(0,-1,0)\n        this.scene.add(this.ground);\n\n        \n        // @ts-ignore\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const geometrySphere = new THREE.SphereGeometry(0.05, 50, 50);\n        const objectSphere = new THREE.Mesh(geometrySphere, material);\n        objectSphere.translateX(1)\n        this.sphere = objectSphere\n        this.scene.add(objectSphere);\n\n\n        // let geometry = new THREE.SphereGeometry(1, 50, 50);\n        // let object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(-1)\n        // this.add(object);\n\n        // geometry = new THREE.SphereGeometry(1, 50, 50);\n        // object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(1)\n        // this.add(object);\n        // this.setBGT();\n    }\n    public reset() {\n\n    }\n    set showGrid(v: boolean) {\n        this.grid.visible = v;\n    }\n    set showAxis(v: boolean) {\n        this.axis.visible = v;\n    }\n    public picking(e: MouseEvent, arrayMesh) {\n        this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n        this.rayCaster.setFromCamera(this.mouse, this.camera);\n\n        const intersects = this.rayCaster.intersectObjects([ ...arrayMesh]);\n        if (intersects.length > 0) {\n            // console.log(intersects[0].object);\n            // console.log(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            this.m.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z);\n\n            if (intersects[0].object !== this.sphere) {\n                this.sphere.position.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            }\n            // console.log(intersects[0].object.userData);\n            return { \n                intersects, \n                ground: undefined \n            };\n\n        }\n\n        const intersectGround = this.rayCaster.intersectObjects([this.ground]);\n        if (intersectGround.length > 0) {\n            // console.log(intersectGround)\n            this.m.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z);\n            this.sphere.position.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z)\n            return {intersects: undefined, ground :intersectGround};\n        }\n\n        return undefined;\n    }\n    public update(scene: THREE.Scene) {\n        this.updatePost(scene)\n\n        // if (this.sandboxVector.scene) {\n        //     this.sandboxVector.scene.mesh.forEach((m: THREE.Mesh, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //     })\n\n        //     this.sandboxVector.scene.arrayArrow.forEach((m: THREE.ArrowHelper, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //         const vec = new THREE.Vector3(this.sandboxVector.scene.arrayPoint[i].velocity.x, this.sandboxVector.scene.arrayPoint[i].velocity.y, this.sandboxVector.scene.arrayPoint[i].velocity.z)\n        //         const len = vec.length() * 0.5\n        //         m.setLength(len, 0.1,  0.1)\n        //         m.setDirection(vec)\n        //     })\n\n        //     this.sandboxVector.scene.arrayLineMesh.forEach((ln, i) => {\n        //         const lnObj = this.sandboxVector.scene.arrayLine[i];\n        //         ln.geometry.attributes.position.setXYZ(0, lnObj.p0.vec.x, lnObj.p0.vec.y, lnObj.p0.vec.z);\n        //         ln.geometry.attributes.position.setXYZ(1, lnObj.p1.vec.x, lnObj.p1.vec.y, lnObj.p1.vec.z);\n        //         ln.geometry.attributes.position.needsUpdate = true;\n        //     })\n        // }\n\n        const matrix = new THREE.Matrix4();\n        matrix.makeRotationY(Math.PI * 0.011);\n        this.pointLight.position.applyMatrix4(matrix);\n    }\n    public updatePost = (scene: THREE.Scene) => { \n        \n    }\n    // .................................................... Event\n    public onMouseClick = (e) => {}\n    public mouseClickPre(e: MouseEvent): void {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n\n        if (intersect.intersects && intersect.intersects[0]) {\n            // console.log('---------------');\n            intersect.intersects[0].object.userData.onClick(intersect.intersects[0])\n        }\n\n        // this.sandboxVector.common.updateSelectedData(intersect);\n        // this.onMouseClick({e, intersect});\n    }\n    public onMouseMove = (e) => {}\n    public mouseMovePre= (e: MouseEvent) => {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n        this.onMouseMove({e, intersect});\n    }\n\n}\n","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Scene {\n    public sandboxVector: SandboxVector;\n    public scene: THREE.Scene;\n\n    mesh: THREE.Mesh[] = [];\n    // arrayPoint: any = [];\n    // arrayArrow: any = [];\n\n    // arrayLine: any = []\n    // arrayLineMesh: THREE.Mesh[]  = []\n\n    constructor(sandboxVector: SandboxVector) {\n        this.sandboxVector = sandboxVector;\n        this.scene = sandboxVector.renderer.scene;\n    }\n    public reset() {\n        for (let i = this.mesh.length - 1; i >= 0; i--) {\n            let obj = this.mesh[i];\n            this.scene.remove(obj);\n        }\n\n        // for (let i = this.arrayArrow.length - 1; i >= 0; i--) {\n        //     let obj = this.arrayArrow[i];\n        //     this.scene.remove(obj);\n        // }\n\n        // this.mesh = [];\n        // this.arrayPoint = [];\n        // this.arrayArrow = [];\n\n        // this.arrayLine = []\n        // //    this.initPost()\n    }\n    public add(mesh: THREE.Mesh, picking = true) {\n        this.scene.add(mesh);\n        if (picking) {\n            this.mesh.push(mesh)\n        }\n    }\n    public remove(mesh: THREE.Mesh) {\n        this.scene.remove(mesh);\n        this.mesh.splice(this.mesh.indexOf(mesh), 1);\n    }\n    // public addArrow(vec, velocity) {\n    //     const arrowHelper = new THREE.ArrowHelper(velocity, vec, 1, '#f00');\n    //     this.arrayArrow.push(arrowHelper)\n    //     this.scene.add(arrowHelper);\n    // }\n    // public addPoint(v: any) {\n    //     // @ts-ignore\n    //     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n    //     const geometry = new THREE.SphereGeometry(0.1, 20, 20);\n    //     const object = new THREE.Mesh(geometry, material);\n    //     object.translateX(v.vec.x);\n    //     object.translateY(v.vec.z);\n    //     object.translateZ(v.vec.y);\n    //     this.add(object, v);\n    //     this.addArrow(v.vec, v.velocity);\n\n    // }\n    // public addLine(ln: any) {\n    //     this.arrayLine.push(ln)\n\n    //     const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n\n    //     const points = [];\n    //     points.push( new THREE.Vector3(ln.p0.vec.x, ln.p0.vec.y, ln.p0.vec.z ) );\n    //     points.push( new THREE.Vector3(ln.p1.vec.x, ln.p1.vec.y, ln.p1.vec.z ) );\n\n    //     const geometry = new THREE.BufferGeometry().setFromPoints( points );\n    //     const line = new THREE.Line( geometry, material );\n    //     // @ts-ignore\n    //     this.arrayLineMesh.push(line)\n    //     this.scene.add(line)\n    // }\n}","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Common {\n    public app: SandboxVector\n    constructor(app: SandboxVector) {\n        this.app = app;\n    }\n    public pick() {\n\n    }\n}","export class Vector3 {\n    public x: number = 0.0;\n    public y: number = 0.0;\n    public z: number = 0.0;\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\n// ..................................................................\nexport const xAxis = () => {\n    return new Vector3(1, 0, 0);\n}\nexport const yAxis = () => {\n    return new Vector3(0, 1, 0);\n}\nexport const zAxis = () => {\n    return new Vector3(0, 0, 1);\n}\nexport const zero = () => {\n    return new Vector3(0, 0, 0);\n}\nexport const origin = () => {\n    return new Vector3(0, 0, 0);\n}\n// ..................................................................\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nexport const distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\nexport const dotProduct = (v1: Vector3, v2: Vector3) => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\nexport const crossProduct = (v1: Vector3, v2: Vector3) => {\n    return new Vector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n}\nexport const normalize = (v: Vector3) => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.0001) {\n        return new Vector3(v.x, v.y, v.z);\n    }\n    return new Vector3(v.x / len, v.y / len, v.z / len);\n}\nexport const length = (v: Vector3) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n}\n\n// ..................................................................\nexport const multiply = (v: Vector3, s: number) => {\n    return scale(v, s);\n}\nexport const scale = (v: Vector3, s: number) => {\n    return new Vector3(v.x * s, v.y * s, v.z * s);\n}\nexport const sub = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\n}\nexport const add = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\n}\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { Vector3 } from './Vector3'\n\nexport class Point3 {\n    // private _x: number;\n    // private _y: number;\n    // private _z: number;\n\n    public vec: Vector3;\n    public radius: number = 0.5;\n\n    public material: THREE.MeshBasicMaterial;\n    public geometry: THREE.SphereGeometry;\n    public mesh: THREE.Mesh;\n\n    // constructor(x: number, y: number, z: number, radius = 0.1) {\n    constructor(v: Vector3, radius = 0.1) {\n        // this._x = x;\n        // this._y = y;\n        // this._z = z;\n        this.vec = v;\n        this.radius = radius;\n        this.init();\n    }\n    // public get x () { return this._x; }\n    // public set x (v) { this._x = v; this.updateVec();}\n    // public get y () { return this._y; }\n    // public set y (v) { this._y = v; this.updateVec();}\n    // public get z () { return this._z; }\n    // public set z (v) { this._z = v; this.updateVec();}\n    // public set(x: number, y: number, z: number) {\n    //     this._x = x; this._y = y; this._z = z;\n    //     this.updateVec();\n    // }\n    public destroy() {\n        NRenderer.app.scene.remove(this.mesh);\n    }\n    public onClick(data: any) {\n\n        this.update();\n    }\n    // ...........................................................\n    public update() {\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n    }\n    private init() {\n        this.material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        this.geometry = new THREE.SphereGeometry(this.radius, 20, 20);\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n        this.mesh.userData = this;\n        NRenderer.app.scene.add(this.mesh);\n    }   \n}","import { Vector3 } from '../';\nimport * as THREE from 'three';\nimport { NRenderer } from '..';\n\nexport class Arrow {\n    public vec: Vector3;\n    public dir: Vector3;\n    public meshArrow: THREE.ArrowHelper;\n    constructor(vec: Vector3, dir: Vector3) {\n        this.vec = vec;\n        this.dir = dir;\n        this.init();\n    }\n    public onClick(data: any) {\n        console.log(data)\n        /* */\n    }\n    public update() {\n        this.meshArrow.position.x = this.vec.x;\n        this.meshArrow.position.y = this.vec.y;\n        this.meshArrow.position.z = this.vec.z;\n        \n        const dir = new THREE.Vector3(this.dir.x, this.dir.y, this.dir.z);\n        const len = dir.length();\n        \n        this.meshArrow.setLength(len, 0.1,  0.1);\n        this.meshArrow.setDirection(dir.normalize());\n    }\n    private init() {\n        const dir = new THREE.Vector3(this.dir.x, this.dir.y, this.dir.z);\n        const len = dir.length();\n\n        this.meshArrow = new THREE.ArrowHelper(\n            dir.normalize(), \n            new THREE.Vector3(this.vec.x, this.vec.y, this.vec.z), \n            len, '#f00'\n        );\n\n        // console.log(len)\n        // this.meshArrow.setLength(len, 0.1,  0.1)\n        // this.meshArrow.setDirection(dir);\n        // this.arrayArrow.push(arrowHelper)\n\n        this.meshArrow.userData = this;\n        // @ts-ignore\n        NRenderer.app.scene.add(this.meshArrow);\n    }\n}","import { RendererThreeVecSandbox } from './Renderer';\nimport { Scene } from './Scene';\nimport { Common } from './Common';\n\nexport * from './Geometry';\n\nexport class NRenderer {\n    public static app: NRenderer;\n    public id: string;\n    public renderer: RendererThreeVecSandbox;\n    public common: Common;\n    public scene: Scene;\n    public themeColor = '#222';\n\n    constructor(id: string, themeColor = '#00000000') {\n        NRenderer.app = this;\n        this.id = id;\n        this.themeColor = themeColor;\n\n        this.initRenderer();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n    private initRenderer() {\n        this.renderer = new RendererThreeVecSandbox(this, this.id, this.themeColor);\n        this.renderer.updatePost = (scene) => this.updateBinding();\n        this.renderer.onMouseMove = (e) => this.onMouseMove(e);\n        this.renderer.onMouseClick = (e) => this.onMouseClick(e);\n        this.scene = new Scene(this);\n        this.common = new Common(this)\n\n    }\n    public set showAxis(v){\n        this.renderer.showAxis = v;\n    }\n    public set showGrid(v) {\n        this.renderer.showGrid = v;\n    }\n    public reset() {\n        this.renderer.reset();\n        this.scene.reset();\n\n        this.start();\n    }\n    // ..........................\n    public start() {\n        // TODO: \n    }\n    public updateBinding() {\n        // TODO: \n    }\n    public onMouseMove(e: any) { }\n    public onMouseClick(e: any) { }\n}","export const getSlider = (title: string, min: number, max: number) => {\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = `${min}`;\n    slider.max = `${max}`;\n\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(slider);\n    div.appendChild(text);\n    return {\n        div, slider, text\n    }\n};\nexport const getCheckBox = (title: string) => {\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const checkBox = document.createElement('input');\n    checkBox.type = 'checkbox';\n    checkBox.defaultChecked = false;\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(checkBox);\n    div.appendChild(text);\n\n    return {\n        div, checkBox\n    }\n};\n\n\n\n\nexport const getDropdown = (items = [\"Link 1\", \"Link 2\", \"Link 3\"], callBack: (param: string)=> void) => {\n\n    const dropdown = document.createElement('div');\n    dropdown.classList.add('dropdown');\n\n    const dropdownToggle = document.createElement('button');\n    dropdownToggle.classList.add('dropdown-toggle');\n    dropdownToggle.textContent = 'Dropdown Menu';\n    dropdown.appendChild(dropdownToggle);\n\n    const dropdownMenu = document.createElement('div');\n    dropdownMenu.classList.add('dropdown-menu');\n    dropdown.appendChild(dropdownMenu);\n\n    items.forEach(item => {\n        const anchor = document.createElement('a');\n        anchor.href = \"#\";\n        anchor.textContent = item;\n        anchor.addEventListener('click', (event) => {\n            event.preventDefault();\n            // console.log(`Selected: ${item}`);\n            dropdownToggle.textContent = `Selected: ${item}`\n            dropdownMenu.style.display = 'none';\n            callBack(item);\n        });\n        dropdownMenu.appendChild(anchor);\n    });\n\n\n\n    dropdownToggle.addEventListener('click', () => {\n        dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';\n    });\n\n    window.addEventListener('click', (event) => {\n        // @ts-expect-error\n        if (!event.target.matches('.dropdown-toggle')) {\n            if (dropdownMenu.style.display === 'block') {\n                dropdownMenu.style.display = 'none';\n            }\n        }\n    });\n\n    document.body.style.fontFamily = 'Arial, sans-serif';\n\n    dropdown.style.position = 'relative';\n    dropdown.style.display = 'inline-block';\n\n    // dropdownToggle.style.backgroundColor = '#3498db';\n    // dropdownToggle.style.color = 'white';\n    dropdownToggle.style.padding = '10px 20px';\n    dropdownToggle.style.border = 'none';\n    dropdownToggle.style.cursor = 'pointer';\n\n    dropdownToggle.addEventListener('mouseover', () => {\n        dropdownToggle.style.backgroundColor = '#eee';\n    });\n\n    dropdownToggle.addEventListener('mouseout', () => {\n        dropdownToggle.style.backgroundColor = '#ccc';\n    });\n\n    dropdownMenu.style.display = 'none';\n    dropdownMenu.style.position = 'absolute';\n    dropdownMenu.style.backgroundColor = '#ccc';\n    dropdownMenu.style.boxShadow = '0px 8px 16px 0px rgba(0,0,0,0.2)';\n    dropdownMenu.style.zIndex = '1';\n\n    dropdownMenu.querySelectorAll('a').forEach(anchor => {\n        anchor.style.color = 'black';\n        anchor.style.padding = '12px 16px';\n        anchor.style.textDecoration = 'none';\n        anchor.style.display = 'block';\n\n        anchor.addEventListener('mouseover', () => {\n            anchor.style.backgroundColor = '#f1f1f1';\n        });\n\n        anchor.addEventListener('mouseout', () => {\n            anchor.style.backgroundColor = '#ccc';\n        });\n    });\n\n    // container.appendChild(dropdown);\n    return dropdown;\n};"],"names":["Solution","constructor","div","renderer","m","t","pts","p","undefined","divColB","divColorResultText","colorValueT","colorValue","resolution","colorSpaces","colorSpaceSelected","needGrid","this","NRenderer","id","showGrid","updateBinding","render","onMouseClick","e","mouseClick","initDom","init","document","createElement","style","position","margin","appendChild","cBox","getCheckBox","append","checkBox","checked","onchange","updateColor","axis","scale","x","y","z","camera","far","set","controls","target","geometry","THREE","wireframe","line","material","color","r","g","b","depthTest","opacity","transparent","scene","add","rlType","getSlider","Math","floor","slider","defaultValue","oninput","value","parseInt","text","textContent","glType","blType","dropMenu","getDropdown","colorSpace","reset","colorProjection","ColorUtility","map","d","num","interval","Point","push","mouseMove","renderMouse","ctx","random","destroy","lastElementChild","removeChild","error","ux","uy","uz","vec","velocity","force","Vector3","mass","pt","Point3","onClick","RendererThreeVectorSandboxBase","canvas","hostDiv","requestFrame","loop","requestAnimationFrame","update","getElementById","initCanvas","setBG","castShadow","antialias","alpha","setPixelRatio","clientWidth","clientHeight","domElement","shadowMap","enabled","setSize","OrbitControls","hexColor","background","eventBind","onmousedown","mouseDownPre","onmouseup","mouseUpPre","onmousemove","mouseMovePre","addEventListener","mouseClickPre","window","onWindowResize","aspect","updateProjectionMatrix","start","mouseDClickPre","mouseDragPre","removeEventListener","cancelAnimationFrame","lastChild","RendererThreeVecSandbox","sandboxVector","super","pointLight","rayCaster","mouse","sphere","ground","grid","updatePost","onMouseMove","intersect","picking","mesh","initPost","ambientLight","rotation","PI","materialG","side","geometrySphere","objectSphere","translateX","v","visible","showAxis","arrayMesh","offsetX","offsetY","setFromCamera","intersects","intersectObjects","length","point","object","intersectGround","matrix","makeRotationY","applyMatrix4","userData","Scene","i","obj","remove","splice","indexOf","Common","app","pick","radius","data","Arrow","dir","meshArrow","console","log","len","setLength","setDirection","normalize","themeColor","common","initRenderer","title","min","max","display","type","defaultChecked","items","callBack","dropdown","classList","dropdownToggle","dropdownMenu","forEach","item","anchor","href","event","preventDefault","matches","body","fontFamily","padding","border","cursor","backgroundColor","boxShadow","zIndex","querySelectorAll","textDecoration"],"sourceRoot":""}