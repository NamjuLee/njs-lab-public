{"version":3,"file":"static/js/5794.78671f8c.chunk.js","mappings":"gPAEaA,EAAQ,WAGjB,WAAYC,IAAe,oBAFpBA,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUA,EAGfE,KAAKF,QAAQG,MAAMC,QAAU,OAC7BF,KAAKF,QAAQG,MAAME,WAAa,SAEhC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIH,MAAMM,WAAa,OACvBH,EAAIH,MAAMO,YAAc,OACxBJ,EAAIH,MAAMQ,gBAAkB,OAC5BL,EAAIH,MAAMS,MAAQ,SAClBN,EAAIH,MAAMU,OAAS,SAEnBX,KAAKF,QAAQc,YAAYR,GAKzBJ,KAAKD,SAAW,IAAIc,EAAST,GAG7BU,QAAQC,IAAIf,KAAKD,SAGrB,CAMC,OANA,+BACD,WAEI,IADAC,KAAKD,SAASiB,UACPhB,KAAKF,QAAQmB,kBAChBjB,KAAKF,QAAQoB,YAAYlB,KAAKF,QAAQmB,iBAE9C,KAAC,EAlCgB,GAqCRJ,EAAQ,0CAUjB,WAAYT,GAAW,IAAD,EAiDL,OAjDK,gBAClB,cAAMA,IAVVe,SAAoCC,EAAS,EAC7CC,SAAW,EAAI,EAGfC,OAAC,IACDC,OAAC,IACDb,WAAK,IACLC,YAAM,EAKF,EAAKa,OAAOvB,MAAMwB,SAAW,WAE7B,EAAKD,OAAOvB,MAAMS,MAAQ,OAC1B,EAAKc,OAAOvB,MAAMU,OAAS,QAO3Be,EAAAA,EAAAA,IAAc,qFAAqFC,MAAM,SAACR,GACtGL,QAAQC,IAAII,GACZ,EAAKA,IAAMA,EAEX,EAAKG,EAAI,IACT,EAAKC,EAAI,IACT,EAAKb,MAAQ,IACb,EAAKC,OAAQ,GAiBjB,IAYA,EAAKiB,QAAQ,CACjB,CA0CC,OA1CA,8BACD,SAAcC,GAGV7B,KAAK6B,IAAIC,OACT9B,KAAK6B,IAAIE,UAA8B,GAApB/B,KAAKwB,OAAOd,MAAkC,GAArBV,KAAKwB,OAAOb,QACxDX,KAAK6B,IAAIG,OAAOhC,KAAKqB,UAClBrB,KAAKmB,KACJnB,KAAK6B,IAAII,UAAUjC,KAAKmB,IAAuB,IAAjBnB,KAAKmB,IAAIT,MAAgC,IAAlBV,KAAKmB,IAAIR,QAGlEG,QAAQC,IAAIf,KAAKsB,EAAGtB,KAAKuB,EAAGvB,KAAKU,MAAOV,KAAKW,QAE7CkB,EAAIK,YACJL,EAAIM,KAAKnC,KAAKsB,EAAGtB,KAAKuB,EAAGvB,KAAKU,MAAOV,KAAKW,QAC1CkB,EAAIO,YACJP,EAAIQ,UAAY,EAEhBR,EAAIS,SAGJtC,KAAK6B,IAAIU,SAGb,GAAC,uBACD,SAAiBjB,EAAWC,GACxB,GACH,qBACD,SAAeD,EAAWC,GACtB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,wBACD,SAAkBD,EAAWC,GACzB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,qBACD,SAAeiB,GACX,KACH,EAtGgB,CAASC,EAAAA,G","sources":["njslab/Lab/image-distortion/index.ts"],"sourcesContent":["import { RendererCanvas, getImgFromURL } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost; \r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1200px';\r\n        div.style.height = '1000px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n\r\n        console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    img: HTMLImageElement | undefined = undefined\r\n    rotation = 0.0;\r\n\r\n\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n\r\n        this.canvas.style.position = 'relative';\r\n\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n        // getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/person/HaminHaram.jpg').then( (img: HTMLImageElement) => {\r\n        getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/MITBuilding7_small.jpg').then( (img: HTMLImageElement) => {\r\n            console.log(img)\r\n            this.img = img;\r\n\r\n            this.x = 100\r\n            this.y = 100\r\n            this.width = 100; //+img.style.width;\r\n            this.height =100; // +img.style.height;\r\n            \r\n            // this.canvas.width = img.width;\r\n            // this.canvas.height = img.height;\r\n\r\n            \r\n            // this.hostDiv.style.width = img.width + 'px';\r\n            // this.hostDiv.style.height = img.height + 'px';\r\n\r\n            // this.ctx.canvas.width = img.width;\r\n            // this.ctx.canvas.height = img.height;\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc(100, 100, 150, 0, Math.PI * 2);\r\n            // this.ctx.closePath();\r\n            // this.ctx.fill()\r\n            // this.ctx.drawImage(img, 0, 0);\r\n            // this.hostDiv.appendChild(img)\r\n        });\r\n\r\n        // const divRotate = document.createElement('div');\r\n        // this.hostDiv.appendChild(divRotate);\r\n        // divRotate.textContent = 'rotate';\r\n        // divRotate.style.position = 'absolute';\r\n        // divRotate.style.color = 'aqua';\r\n\r\n        // divRotate.onclick = () => {\r\n        // }\r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width * 0.5, this.canvas.height * 0.5)\r\n        this.ctx.rotate(this.rotation)\r\n        if(this.img) {\r\n            this.ctx.drawImage(this.img, -this.img.width * 0.5, -this.img.height * 0.5);\r\n        }\r\n\r\n        console.log(this.x, this.y, this.width, this.height);\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.x, this.y, this.width, this.height);\r\n        ctx.closePath();\r\n        ctx.lineWidth = 5;\r\n\r\n        ctx.stroke();\r\n\r\n        \r\n        this.ctx.restore();\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent): void {\r\n        // TODO\r\n    }\r\n}"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","console","log","destroy","lastElementChild","removeChild","img","undefined","rotation","x","y","canvas","position","getImgFromURL","then","start","ctx","save","translate","rotate","drawImage","beginPath","rect","closePath","lineWidth","stroke","restore","k","RendererCanvas"],"sourceRoot":""}