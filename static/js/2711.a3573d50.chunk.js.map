{"version":3,"file":"static/js/2711.a3573d50.chunk.js","mappings":"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","sources":["njslab/Lab/Network-Grid/Graph.ts","njslab/Lab/Network-Grid/index.ts"],"sourcesContent":["import { NVector3 } from '../../../lib/NJSCore';\r\n\r\nexport class GridGraph {\r\n\r\n    width: number;\r\n    height: number;\r\n    nodes: Node[] = [];\r\n    edges: Edge[] = [];\r\n    dt: number = 0.0;\r\n\r\n    mouse: NVector3 = new NVector3(0, 0);\r\n\r\n    damping = 0.96;\r\n    gravity = -0.032;\r\n    timeStep = 0.16; // 0.316; // 0.18; // 0.26;\r\n    groundZ = -9.26;\r\n\r\n    capture: Node | undefined = undefined;\r\n\r\n    constructor(width: number, height: number) {\r\n\r\n        this.Init(width, height);\r\n    }\r\n    Init(width: number, height: number) {\r\n        this.InitGridR(width, height);\r\n        this.nodes[0].fixed = true;\r\n        this.nodes[9].fixed = true;\r\n        this.nodes[this.nodes.length - 1].fixed = true;\r\n        this.nodes[this.nodes.length - 1 - 9].fixed = true;\r\n    }\r\n    updateOptionA(v: number) {\r\n        this.damping = v * 0.1;\r\n        console.log(this.damping, 'damping');\r\n    }\r\n    updateOptionB(v: number) {\r\n        this.timeStep = v * 0.05;\r\n        console.log(this.timeStep, 'timeStep');\r\n    }\r\n    updateOptionC(v: number) {\r\n        // this.gravity = v * 0.1;\r\n        // console.log(this.gravity, 'gravity');\r\n    }\r\n    InitGridR(width: number, height: number, xNum: number = 10, yNum: number = 10) {\r\n        const xOff = 0;\r\n        const yOff = 0;\r\n        const xInterval = (width / xNum) + 1;\r\n        const yInterval = (height / yNum) + 1;\r\n        const nbase = this.nodes.length;\r\n        for (let i = 0; i < yNum; ++i) {\r\n            for (let j = 0; j < xNum; ++j) {\r\n                let x = xOff + xInterval * j - width * 0.5;\r\n                let y = yOff + yInterval * i - height * 0.5;\r\n                this.AddNode(new NVector3(x, 0, y), NVector3.Zero(), 1.0);\r\n                // this.nodes.push(new Node(new NVector3(x, y), new NVector3(0, 0), 1));\r\n            }\r\n        }\r\n        for (let j = 0; j < yNum; ++j) {\r\n            for (let i = 0; i < xNum; ++i) {\r\n                let k = j * xNum + i;\r\n\r\n                if (i !== 0) { this.AddEdge(this.nodes[nbase + k - 1], this.nodes[nbase + k]); }\r\n                if (j !== 0) { this.AddEdge(this.nodes[nbase + k - xNum], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== 0) {this.AddEdge(this.nodes[nbase + k - xNum - 1], this.nodes[nbase + k]); }\r\n\r\n                // if (i !== 0 && j !== yNum - 1) {this.AddEdge(this.nodes[nbase + k + xNum - 1], this.nodes[nbase + k]); }\r\n            }\r\n        }\r\n    }\r\n    public Clear() {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n    public AddNode(_p0: NVector3, _u0: NVector3, _mass: number): Node {\r\n        const n = new Node(_p0, _u0, _mass);\r\n        this.nodes.push(n);\r\n        return n;\r\n    }\r\n    public AddEdge(n0: Node, n1: Node): Edge {\r\n        const e = new Edge(n0, n1);\r\n        this.edges.push(e);\r\n        return e;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        console.log('move', x, y);\r\n    }\r\n    MouseDClick(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        const n = this.FindNode(this.mouse);\r\n        if (n) {\r\n            n.fixed = !n.fixed;\r\n        }\r\n        console.log('click', x, y);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        this.capture = this.FindNode(this.mouse);\r\n        if (this.capture) {\r\n            this.capture.fixed = true;\r\n            this.capture.isCapture = true;\r\n        }\r\n        console.log('down', x, y, this.capture);\r\n    }\r\n    MouseLeftClick(x: number, y: number) {\r\n        console.log('click', x, y, this.capture);\r\n    }\r\n    MouseUp(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.isCapture = false;\r\n            this.capture = undefined;\r\n        }\r\n        console.log('up', x, y);\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        this.mouse.x = x;\r\n        this.mouse.y = y;\r\n        if (this.capture) {\r\n            this.capture.v.x = x;\r\n            this.capture.v.y = y;\r\n        }\r\n        console.log('drag', x, y);\r\n    }\r\n    Render(ctx?: CanvasRenderingContext2D) {\r\n\r\n        this.dt += 0.1;\r\n        this.Move(this.mouse.x, this.mouse.y, this.mouse.z, this.damping, 0, this.timeStep, this.groundZ, 1);\r\n\r\n        // for (let e of this.edges) { e.Render(ctx); }\r\n        // for (let n of this.nodes) { n.Render(ctx, this.mouse); }\r\n    }\r\n    FindNode(mv: NVector3) {\r\n        for (let n of this.nodes) {\r\n            if (n.v.Distance(mv) < n.m + 3) {\r\n                return n;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    public Move(x: number, y: number, z: number, damping: number, g: number = 0, dt: number = 0.01, groundZ: number = -10, step: number = 1) {\r\n        const atr = new NVector3(x, y, z);\r\n        for (let i = 0; i < step; ++i) {\r\n            for (const n of this.nodes) {\r\n                \r\n                // const dv: NVector3 = atr - n.p;\r\n                //  L = dv.Length;\r\n                // dv.Unitize();\r\n                // n.f = dv * Math.Exp(-0.1 * L * L) * 0.1 + Vector3d.ZAxis * g;\r\n\r\n                const dv = NVector3.Sub(atr, n.v);\r\n                const L = dv.Length();\r\n                dv.Unitize();\r\n                n.f = NVector3.Add(NVector3.Scale(dv, Math.exp(-0.1 * L * L) * 0.1), (NVector3.Scale(NVector3.YAxis(), g)));\r\n            }\r\n            for (const e of this.edges) { e.ApplySpringForce(); }\r\n            for (const n of this.nodes) { n.Move(dt, damping, groundZ); }\r\n        }\r\n    }\r\n}\r\nexport class Edge {\r\n    n0: Node;\r\n    n1: Node;\r\n    public targetLength: number = 0.0;\r\n    public springConstant: number = 0.8; // 1; // 0.8;\r\n    constructor(n0: Node, n1: Node) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.targetLength = this.n0.v.Distance(this.n1.v) * 1;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#ff0000';\r\n\r\n        if (NVector3.Distance(this.n0.v, this.n1.v) < this.targetLength * 2) {\r\n\r\n            ctx.strokeStyle = '#0000ff';\r\n            // this.n0.isShort = true;\r\n            // this.n1.isShort = true;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.n0.v.x, this.n0.v.y);\r\n        ctx.lineTo(this.n1.v.x, this.n1.v.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    public ApplySpringForce() {\r\n        // Vector3d dp = n1.p - n0.p;\r\n        // double dist = dp.Length;\r\n        // dp.Unitize();\r\n\r\n        // n0.f += dp * (dist - TargetLength) * SpringConstant;\r\n        // n1.f -= dp * (dist - TargetLength) * SpringConstant;\r\n\r\n        // const dp: NVector3 = NVector3.Sub(this.n1.p, this.n0.p);\r\n        // const dist:number = dp.Length();\r\n        // dp.Unitize();\r\n\r\n        let dp = NVector3.Sub(this.n1.v, this.n0.v);\r\n        let dist = dp.Length();\r\n        dp.Unitize();\r\n\r\n        const length = NVector3.Scale(dp, (dist - this.targetLength) * this.springConstant);\r\n        this.n0.f = NVector3.Add(this.n0.f, length);\r\n        this.n1.f = NVector3.Sub(this.n1.f, length);\r\n\r\n    }\r\n}\r\nexport class Node {\r\n    public nNodes: Node[] = [];\r\n    public v: NVector3 = NVector3.Origin();\r\n    public f: NVector3 = NVector3.Origin();\r\n    public u: NVector3 = NVector3.Origin();\r\n    public m: number = 0.0;\r\n\r\n    public fixed: boolean = false;\r\n    public isCapture: boolean = false;\r\n    constructor(_p0: NVector3, _u0: NVector3, _mass: number) {\r\n        this.v = new NVector3(_p0.x, _p0.y, _p0.z);\r\n        this.u = new NVector3(_u0.x, _u0.y, _u0.z);\r\n        this.m = _mass;\r\n    }\r\n    public Move(dt: number, damping: number, groundZ: number = 0.0) {\r\n        if (this.fixed || this.isCapture) { return; }\r\n\r\n        // u *= damping;\r\n        // u += f * (dt / m);\r\n        // p += u * dt;\r\n\r\n        // this.u = NVector3.Scale(this.u , damping );\r\n        // this.u = NVector3.Add( this.u,  NVector3.Scale(this.f, dt / this.m));\r\n        // this.p  = NVector3.Add(this.p, NVector3.Scale(this.u, dt));\r\n\r\n        this.u.Mult(damping);\r\n        this.u.Add(NVector3.Scale(this.f, dt / this.m));\r\n\r\n        const v = NVector3.Scale(this.u, dt);\r\n        // this.v.Add( );\r\n        this.v.x += v.x;\r\n        this.v.y += v.y;\r\n\r\n        // if (this.p.y < groundZ) {\r\n        //     this.p.y = groundZ;\r\n        //     if (this.u.y < 0.0) {this.u.y = -this.u.y; }\r\n        // }\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D, m: NVector3) {\r\n        ctx.beginPath();\r\n\r\n        if (m.Distance(this.v) < this.m + 3) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 6, 0.0, Math.PI * 2);\r\n        } else {\r\n            ctx.fillStyle = '#f90000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 3, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        if (this.fixed) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.arc(this.v.x, this.v.y, this.m + 7.5, 0.0, Math.PI * 2);\r\n        }\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../../lib';\r\n\r\nimport { GridGraph } from './Graph';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight;\r\n    pointer = new THREE.Vector2();\r\n    raycaster = new THREE.Raycaster();\r\n    sphere: THREE.Mesh;\r\n\r\n    mesh: THREE.Points;\r\n\r\n    graph: GridGraph;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.25);\r\n        this.scene.add(ambientLight);\r\n\r\n        this.pointLight = new THREE.PointLight(0xffffff, 0.75);\r\n        this.pointLight.position.x = 10;\r\n        this.pointLight.castShadow = true;\r\n        this.scene.add(this.pointLight);\r\n\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.raycaster.params.Points.threshold = 0.8;\r\n        this.raycaster.far = 1000;\r\n\r\n        const sphereGeometry = new THREE.SphereGeometry(0.1, 32, 32);\r\n        const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        this.sphere = sphere;\r\n        this.scene.add(sphere);\r\n\r\n        this.graph = new GridGraph(20, 20);\r\n\r\n\r\n\r\n\r\n        const vertices = [];\r\n        const color = [];\r\n\r\n\r\n\r\n        for (let i = 0; i < this.graph.nodes.length; ++i) {\r\n            const x = this.graph.nodes[i].v.x;\r\n            const y = this.graph.nodes[i].v.y;\r\n            const z = this.graph.nodes[i].v.z;\r\n            vertices.push(x, y, z);\r\n\r\n            // this.graph.AddNode(x, y, z);\r\n\r\n            color.push(0.5, 0.5, 0.5);\r\n\r\n\r\n        }\r\n        // for (let i = 0; i < 10 -1; ++i) {\r\n\r\n        //     this.graph.AddEdge(this.graph.nodes[i], this.graph.nodes[i+1])\r\n        // }\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\r\n        const material = new THREE.PointsMaterial({\r\n            // color: 0x00fff0 , \r\n            vertexColors: true,\r\n            size: 2,\r\n        });\r\n        const points = new THREE.Points(geometry, material);\r\n        geometry.computeBoundingSphere();\r\n        this.scene.add(points);\r\n        this.mesh = points;\r\n        this.start();\r\n\r\n\r\n    }\r\n    public mouseMove(e: MouseEvent): void {\r\n        this.pointer.x = (e.offsetX / this.hostDiv.clientWidth) * 2 - 1;\r\n        this.pointer.y = - (e.offsetY / this.hostDiv.clientHeight) * 2 + 1;\r\n    }\r\n    public mouseDown(e: MouseEvent): void {\r\n        this.pointer.x = (e.offsetX / this.hostDiv.clientWidth) * 2 - 1;\r\n        this.pointer.y = - (e.offsetY / this.hostDiv.clientHeight) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera(this.pointer, this.camera);\r\n        const intersections = this.raycaster.intersectObjects([this.mesh], false);\r\n        const intersection = (intersections.length) > 0 ? intersections[0] : null;\r\n\r\n        if (intersection !== null) {\r\n            // console.log(intersection.index);\r\n            this.sphere.position.set(intersection.point.x, intersection.point.y + 1, intersection.point.z);\r\n            // this.mesh.geometry.attributes.position.setXYZ(intersection.index ,intersection.point.x, intersection.point.y + 1, intersection.point.z);\r\n            this.graph.nodes[intersection.index].v.y += 5; \r\n        }\r\n        // this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        // this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        // this.mesh.geometry.computeVertexNormals();\r\n        // console.log('click')\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        // this.graph.Move(this.sphere.position.x, this.sphere.position.y, this.sphere.position.z, 0.998, 0, 0.001);\r\n        this.graph.Render();\r\n\r\n        let numVertices = this.mesh.geometry.attributes.position.count;\r\n        for (let i = 0; i < numVertices; i++) {\r\n            let o = this.mesh.geometry.attributes.position;\r\n\r\n            // let x = o.getX(i);\r\n            // let y = o.getY(i);\r\n            // let z = o.getZ(i)\r\n\r\n            let x = this.graph.nodes[i].v.x;\r\n            let y = this.graph.nodes[i].v.y;\r\n            let z = this.graph.nodes[i].v.z;\r\n\r\n            // y = Math.sin(9 * x * z + this.t * 5)\r\n\r\n            // y = y < 0 ? 0 : y;\r\n\r\n            // let p = new THREE.Vector3(x, y, z);\r\n\r\n            this.mesh.geometry.attributes.position.setXYZ(i, x, y, z);\r\n\r\n            this.mesh.geometry.attributes.color.setXYZ(i, 0.3, 0.3, 0.3);\r\n        }\r\n\r\n\r\n\r\n        this.raycaster.setFromCamera(this.pointer, this.camera);\r\n        const intersections = this.raycaster.intersectObjects([this.mesh], false);\r\n        const intersection = (intersections.length) > 0 ? intersections[0] : null;\r\n\r\n        if (intersection !== null) {\r\n            // console.log(intersection.index);\r\n            this.sphere.position.set(intersection.point.x, intersection.point.y, intersection.point.z);\r\n\r\n\r\n        }\r\n\r\n\r\n        this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        this.mesh.geometry.computeVertexNormals();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n"],"names":["GridGraph","width","height","nodes","edges","dt","mouse","NVector3","damping","gravity","timeStep","groundZ","capture","undefined","this","Init","InitGridR","fixed","length","v","console","log","xNum","yNum","xOff","yOff","xInterval","yInterval","nbase","i","j","x","y","AddNode","k","AddEdge","_p0","_u0","_mass","n","Node","push","n0","n1","e","Edge","FindNode","isCapture","ctx","Move","z","mv","Distance","m","g","step","atr","dv","L","Length","Unitize","f","Math","exp","ApplySpringForce","targetLength","springConstant","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","dp","dist","nNodes","u","Mult","Add","fillStyle","arc","PI","fill","Solution","id","pointLight","pointer","THREE","raycaster","sphere","mesh","graph","camera","position","set","ambientLight","scene","add","castShadow","params","Points","threshold","far","sphereGeometry","sphereMaterial","color","vertices","geometry","setAttribute","material","vertexColors","size","points","computeBoundingSphere","start","offsetX","hostDiv","clientWidth","offsetY","clientHeight","setFromCamera","intersections","intersectObjects","intersection","point","index","Render","numVertices","attributes","count","setXYZ","needsUpdate","computeVertexNormals","RendererThree"],"sourceRoot":""}