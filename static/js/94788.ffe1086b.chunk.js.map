{"version":3,"file":"static/js/94788.ffe1086b.chunk.js","mappings":"8JACO,MAAMA,EAYTC,YAAYC,GAAa,KAXzBC,YAAM,OACNC,UAAI,OACJC,SAAG,OACHC,EAAY,EAAI,KAEhBC,YAAM,OACNC,WAAK,OACLC,cAAQ,OAERC,OAAiB,EAAE,KACnBC,MAAgB,EAEZC,KAAKC,WAAWX,EACpB,CACAW,WAAWX,GACP,MAAME,EAAOU,SAASC,eAAeb,GACjCE,IAAQQ,KAAKR,KAAOA,GAExBQ,KAAKJ,MAAQ,IAAIQ,EAAAA,IACjBJ,KAAKJ,MAAMS,WAAa,IAAID,EAAAA,IAAY,EAAG,EAAG,GAC9CJ,KAAKJ,MAAMU,YAAa,EAExBN,KAAKL,OAAS,IAAIS,EAAAA,IAAwB,GAAIG,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KACzFT,KAAKL,OAAOe,SAASC,IAAI,EAAG,EAAGX,KAAKF,QAGpC,MAAMc,EAAe,IAAIR,EAAAA,IAAmB,SAAU,IACtDQ,EAAaN,YAAa,EAC1BN,KAAKJ,MAAMiB,IAAID,GAEf,MAAME,EAAa,IAAIV,EAAAA,IAAiB,SAAU,IAClDU,EAAWR,YAAa,EACxBN,KAAKJ,MAAMiB,IAAIC,GAEfd,KAAKH,SAAW,IAAIO,EAAAA,IAAoB,CAAEW,WAAW,EAAMC,OAAO,IAClEhB,KAAKH,SAASoB,cAAcjB,KAAKR,KAAK0B,YAAclB,KAAKR,KAAK2B,cAC9DnB,KAAKH,SAASuB,WAAW9B,GAAK,QAC9BU,KAAKH,SAASwB,QAAQrB,KAAKR,KAAK0B,YAAalB,KAAKR,KAAK2B,cACvDnB,KAAKR,KAAK8B,YAAYtB,KAAKH,SAASuB,YACpCpB,KAAKuB,MACT,CACAA,OACIvB,KAAKwB,YACLxB,KAAKyB,MACT,CACAD,YACIxB,KAAKH,SAASuB,WAAWM,YAAeC,GAAkB3B,KAAK4B,UAAUD,GACzE3B,KAAKH,SAASuB,WAAWS,UAAaF,GAAkB3B,KAAK8B,QAAQH,GACrE3B,KAAKH,SAASuB,WAAWW,YAAeJ,GAAkB3B,KAAKgC,UAAUL,EAC7E,CACAC,UAAUD,GACNM,QAAQC,IAAIP,EAChB,CACAG,QAAQH,GACJM,QAAQC,IAAIP,EAChB,CACAK,UAAUL,GACNM,QAAQC,IAAIP,EAChB,CACAF,OACIU,uBAAsB,KAAQnC,KAAKyB,MAAM,IACzCzB,KAAKoC,SACLpC,KAAKH,SAASwC,OAAOrC,KAAKJ,MAAOI,KAAKL,QACtCK,KAAKN,GAAK,GAMd,CACA0C,SACI,E,eCjED,MAAME,EA+ETjD,YAAYkD,GAA4B,KA5ExCC,WAAU,mVAaVC,WAAU,0SAYVC,wBAAkB,OAClBC,qBAAe,OACfC,mBAAa,OAEbC,gBAAU,OACVC,WAAK,OACLC,eAAS,OAETC,WAAK,OACLC,WAAK,OACLC,UAAI,OACJC,WAAK,OAELC,mBAAa,OACbC,eAAS,OACTC,oBAAc,OAEd5D,EAAY,EAAI,KAEhB6D,WAAqB,GAAG,KAExBC,kBAAY,OACZC,gBAAU,OAEVC,SAAG,OAEHC,WAAK,OAGLC,cAAQ,OACRC,UAAI,OACJC,cAAQ,OAERC,UAAI,OACJC,SAAmB,EAAM,KACzBC,SAAmB,EAAM,KACzBC,YAAsB,EAAM,KAC5BC,QAAkB,EAAM,KACxBC,QAAkB,EAAM,KAExBC,UAAoB,EAAM,KAE1BC,IAAgB,IAAIC,EAAAA,GAAS,EAAG,EAAG,GAAG,KACtCC,MAAkB,IAAID,EAAAA,GAAS,EAAG,EAAG,GAAG,KAGxCE,MAAgB,EAAI,KACpBC,OAAiB,EAAI,KACrBC,OAAiB,EAAI,KACrBC,IAAc,EAAI,KAClBrC,yBAAmB,EAEfvC,KAAKuC,oBAAsBA,EAC3BvC,KAAKsE,IAAM,IAAIC,EAAAA,GAAS,EAAG,EAAG,GAC9BvE,KAAKwE,MAAQ,IAAID,EAAAA,GAAS,EAAG,EAAG,GAChCvE,KAAK6C,WAAa,WAClB7C,KAAKqD,UAAYwB,EAAAA,GAAAA,eACjB7E,KAAKoD,cAAgB,KACrBpD,KAAKuD,WAA6C,EAAhCuB,KAAKC,MAAsB,EAAhBD,KAAKE,UAClChF,KAAKsD,eAAiB,KAAyB,GAAhBwB,KAAKE,SACpChF,KAAK2D,MAAQ,IAAIvD,EAAAA,IACjBJ,KAAKuB,MACT,CACAA,OACIvB,KAAKiF,UACL,MAAMC,EAAOlF,KAAKmF,WAClBnF,KAAKoF,WAAWF,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAEvClF,KAAKqF,eACLrF,KAAKsF,eACLtF,KAAKuF,WACLvF,KAAKwF,KACT,CACAP,UACIjF,KAAKmD,MAAQsC,EAAAA,GAAAA,0CAAyD,KAAM,EAAG,KAC/EzF,KAAKkD,KAAO,GACZ,IAAK,IAAIwC,EAAI,EAAGA,EAAI1F,KAAKmD,MAAMwC,SAAUD,EACrC1F,KAAKkD,KAAK0C,KAAK,IAAIC,EAAAA,IAAQ7F,KAAKmD,MAAMuC,GAAGI,EAAG9F,KAAKmD,MAAMuC,GAAGK,EAAG/F,KAAKmD,MAAMuC,GAAGM,GAEnF,CACAb,WACI,IAAIc,EAAY,GAAQC,EAAS,GAAQC,EAAQ,GAAInG,KAAKgD,MAAQ,GAClE,IAAK,IAAI0C,EAAI,EAAGA,EAAI1F,KAAKkD,KAAKyC,SAAUD,EAAG,CACvCO,EAAUL,KAAK5F,KAAKkD,KAAKwC,GAAGI,EAAG9F,KAAKkD,KAAKwC,GAAGK,EAAG/F,KAAKkD,KAAKwC,GAAGM,GAC5D,IAAII,EAAMvB,EAAAA,GAAAA,0BAAuC7E,KAAKqD,UAAW,GAAsB,GAAhByB,KAAKE,UAC5EkB,EAAON,KAAKQ,EAAI,GAAK,IAAKA,EAAI,GAAK,IAAKA,EAAI,GAAK,IAAKA,EAAI,IAC1D,IAAIC,EAAW,KAAJX,EAEXS,EAAMP,KAAKS,GACX,MAAMC,EAAM,IAAIC,EAAKvG,KAAM0F,EAAG1F,KAAKkD,KAAKwC,GAAIU,EAAKC,GACjDrG,KAAKgD,MAAM4C,KAAKU,EACpB,CACA,MAAO,CAACL,EAAWC,EAAQC,EAC/B,CACAf,WAAWa,EAAqBC,EAAkBC,GAC9CnG,KAAK0C,mBAAqB,IAAItC,EAAAA,IAAsB,IAAIoG,aAAaP,GAAY,GACjFjG,KAAK2C,gBAAkB,IAAIvC,EAAAA,IAAsB,IAAIoG,aAAaN,GAAS,GAC3ElG,KAAK4C,cAAgB,IAAIxC,EAAAA,IAAsB,IAAIoG,aAAaL,GAAQ,EAC5E,CACAM,qBACIzG,KAAK8C,MAAQ,IAAI1C,EAAAA,IAEjBJ,KAAK4D,SAAW,IAAIxD,EAAAA,IACpBJ,KAAK4D,SAAS8C,aAAa,WAAY1G,KAAK0C,oBAC5C1C,KAAK4D,SAAS8C,aAAa,cAAe1G,KAAK2C,iBAC/C3C,KAAK4D,SAAS8C,aAAa,OAAQ1G,KAAK4C,eAExC,IACI+D,EAAI,wCADG,kBAGP7C,EAAW,IAAI1D,EAAAA,IAAqB,CACpCwG,SAAU,CACNC,MAAO,CAAEC,MAAO,IAAI1G,EAAAA,IAAY,WAChC2G,QAAS,CAAED,OAAO,IAAI1G,EAAAA,KAAsB4G,KAAKL,KAErDM,aAAcjH,KAAKwC,WACnB0E,eAAgBlH,KAAKyC,WACrB0E,UAAW,KAEfrD,EAASsD,aAAc,EAgBvBpH,KAAK6D,KAAO,IAAIzD,EAAAA,IAAaJ,KAAK4D,SAAUE,GAC5C9D,KAAKuC,oBAAoB8E,UAAUzH,MAAMiB,IAAIb,KAAK6D,MAKlD7D,KAAKyD,WAAa,IAAIrD,EAAAA,IACtB,MAAMkH,EAAc,IAAIlH,EAAAA,IAAwB,CAC5CyG,MAAO,SACPO,aAAa,EACbG,QAAS,GACTC,cAAc,IAGZC,EAAM,GACZzH,KAAKiD,MAAQ,GACb,IAAIyE,EAAW,EAEXC,EAAiB,GACjBC,EAAoB,GAExB,IAAK,IAAIlC,EAAI,EAAGA,EAAI1F,KAAKgD,MAAM2C,OAAS,IAAKD,EACzC,IAAK,IAAImC,EAAInC,EAAGmC,EAAI7H,KAAKgD,MAAM2C,SAAUkC,EACrC,GAAI7H,KAAKkD,KAAKwC,GAAGoC,WAAW9H,KAAKkD,KAAK2E,IAAM,IAAM,CAC9CJ,EAAI7B,KAAK5F,KAAKkD,KAAKwC,GAAI1F,KAAKkD,KAAK2E,IACjCF,EAAe/B,KAAK5F,KAAKkD,KAAKwC,IAC9BiC,EAAe/B,KAAK5F,KAAKkD,KAAK2E,IAK9B,MAAME,EAAK/H,KAAKgD,MAAM0C,GAAGU,IACnB4B,EAAKhI,KAAKgD,MAAM6E,GAAGzB,IACzBwB,EAAkBhC,KAAK,IAAIxF,EAAAA,IAAY2H,EAAG,GAAK,IAAKA,EAAG,GAAK,IAAKA,EAAG,GAAK,MACzEH,EAAkBhC,KAAK,IAAIxF,EAAAA,IAAY4H,EAAG,GAAK,IAAKA,EAAG,GAAK,IAAKA,EAAG,GAAK,MAEzEhI,KAAKiD,MAAM2C,KAAK,IAAIqC,EAAKjI,KAAM0H,EAAU1H,KAAKgD,MAAM0C,GAAI1F,KAAKgD,MAAM6E,GAAI,MACvEH,GACJ,CAIR1H,KAAKyD,WAAWiD,aAAa,WAAa,IAAItG,EAAAA,IAAsB,IAAIoG,aAAamB,GAAiB,IACtG3H,KAAKyD,WAAWiD,aAAa,cAAgB,IAAItG,EAAAA,IAAsB,IAAIoG,aAAaoB,GAAoB,IAE5G5H,KAAKwD,aAAe,IAAIpD,EAAAA,IAAmBJ,KAAKyD,WAAY6D,GAC5DtH,KAAK8C,MAAMjC,IAAIb,KAAKwD,cAGpBxD,KAAKuC,oBAAoB8E,UAAUzH,MAAMiB,IAAIb,KAAKwD,aACtD,CACA8B,eACItF,KAAK8D,SAAW,IAAI1D,EAAAA,GACxB,CACAmF,WAKI,CAEJC,MAEIxF,KAAK+D,KAAO/D,KAAK6D,KAAKE,KAEtB/D,KAAK6D,KAAU,IAAI7D,IAGvB,CAEAkI,SACIlI,KAAKN,GAAK,GACVM,KAAKmI,YACT,CAEAA,aACI,IAAK,IAAIzC,EAAI,EAAGA,EAAI1F,KAAKgD,MAAM2C,SAAUD,EAAK1F,KAAKgD,MAAM0C,GAAGwC,OAAOlI,KAAKN,GACxE,IAAK,IAAIgG,EAAI,EAAGA,EAAI1F,KAAKiD,MAAM0C,SAAUD,EAAK1F,KAAKiD,MAAMyC,GAAGwC,OAAOlI,KAAKN,GACxEM,KAAKyD,WAAW2E,WAAW1H,SAAS2H,aAAc,EAElDrI,KAAK0C,mBAAmB2F,aAAc,EACtCrI,KAAK4C,cAAcyF,aAAc,EAGjCrI,KAAK8C,MAAMwF,yBAAyB,IAAIzC,EAAAA,IAAQ,EAAG,EAAG,GAAI,GAC1D7F,KAAK8C,MAAMyF,SAASvC,GAAKhG,KAAKsD,eAY9BtD,KAAKwI,oBAIT,CACAA,qBACI,IAAIC,EAAK,EACT,IAAK,IAAI/C,EAAI,EAAGA,EAAI1F,KAAKgD,MAAM2C,OAAQD,GAAK1F,KAAKuD,WAAY,CACzD,MAAMmF,EAAM1I,KAAKgD,MAAM0C,GAAGiD,WAAa,GACjCC,EAAO5I,KAAKN,EAAIgJ,EAClBD,EAAK,IAAM,EACXzI,KAAKgD,MAAM0C,GAAGmD,UAA2B,KAAjB/D,KAAKgE,IAAIF,GAAgBF,EAAsB,KAAjB5D,KAAKiE,IAAIH,GAAgBF,EAAsB,KAAjB5D,KAAKgE,IAAIF,GAAgBF,GACtGD,EAAK,IAAM,EAClBzI,KAAKgD,MAAM0C,GAAGmD,UAA2B,KAAjB/D,KAAKgE,IAAIF,GAAgBF,EAAsB,KAAjB5D,KAAKiE,IAAIH,GAAgBF,EAAsB,KAAjB5D,KAAKiE,IAAIH,GAAgBF,GAE7G1I,KAAKgD,MAAM0C,GAAGmD,UAA2B,KAAjB/D,KAAKiE,IAAIH,GAAgBF,EAAsB,KAAjB5D,KAAKgE,IAAIF,GAAgBF,EAAsB,KAAjB5D,KAAKgE,IAAIF,GAAgBF,GAEjHD,GAEJ,CACJ,CAEAO,QAAQlD,EAAWC,GACf9D,QAAQC,IAAI4D,EAAGC,EAsBnB,CACAnE,UAAUqH,GAMN,CAEJjH,UAAUiH,GASN,EAnUK3G,EACF4G,SAAG,EAqUP,MAAM3C,EAeTlH,YAAY8J,EAA4BzD,EAAW0D,EAAYC,EAAaC,GAAY,KAdxFH,YAAM,OACNC,OAAC,OACDhD,SAAG,OACHmD,WAAK,OACLC,SAAG,OACHnD,UAAI,OACJ/G,QAAE,OACF2D,WAAK,OACL0F,gBAAU,OACVjJ,OAAC,OACD+J,WAAK,OAELC,gBAAU,EAGN1J,KAAKmJ,OAASA,EACdnJ,KAAKN,EAAI,EACTM,KAAKoJ,EAAIA,EACTpJ,KAAKV,GAAKoG,EACV1F,KAAKoG,IAAMiD,EACXrJ,KAAKqG,KAAOiD,EACZtJ,KAAKyJ,MAAQ,EAEbzJ,KAAK2I,WAAa7D,KAAKE,QAC3B,CACA6D,UAAU/C,EAAWC,EAAWC,GAC5BhG,KAAKoJ,EAAEO,KAAK3J,KAAKmJ,OAAOzG,mBAAmBkH,KAAK5J,KAAKV,KACrDU,KAAKoJ,EAAES,KAAK7J,KAAKmJ,OAAOzG,mBAAmBoH,KAAK9J,KAAKV,KACrDU,KAAKoJ,EAAEW,KAAK/J,KAAKmJ,OAAOzG,mBAAmBsH,KAAKhK,KAAKV,KACrDU,KAAKmJ,OAAOzG,mBAAmBuH,OAAOjK,KAAKV,GAAIU,KAAKoJ,EAAEtD,EAAIA,EAAG9F,KAAKoJ,EAAErD,EAAIA,EAAG/F,KAAKoJ,EAAEpD,EAAIA,EAC1F,CACAkE,MAAMZ,GACFtJ,KAAKqG,KAAOrG,KAAKmJ,OAAOvG,cAAcgH,KAAK5J,KAAKV,IAChDU,KAAKmJ,OAAOvG,cAAc+G,KAAK3J,KAAKV,GAAIU,KAAKqG,KAAOiD,EACxD,CACAa,aAAab,GACTtJ,KAAKqG,KAAOrG,KAAKmJ,OAAOvG,cAAcgH,KAAK5J,KAAKV,IAChDU,KAAKmJ,OAAOvG,cAAc+G,KAAK3J,KAAKV,GAAIgK,EAC5C,CACAc,SAASd,GAELtJ,KAAKmJ,OAAOvG,cAAc+G,KAAK3J,KAAKV,GAAIgK,GACxCtJ,KAAK0J,YAAa,EAClB1J,KAAKyJ,MAAQ,EACbzJ,KAAKN,EAAI,CACb,CACAwI,OAAOxI,GACEM,KAAK0J,aACV1J,KAAKN,GAAK,KACVM,KAAKmK,aAAaE,EAAAA,GAAAA,gBAAgCrK,KAAKyJ,OAASzJ,KAAK2I,YACrE3I,KAAKyJ,OAAS,IAEVzJ,KAAKN,EAAI,IACTM,KAAK0J,YAAa,EAClB1J,KAAKoK,SAAS,KAEtB,EAEG,MAAMnC,EAST5I,YAAY8J,EAA4BzD,EAAW4E,EAAUC,EAAUjB,GAAY,KAPnFH,YAAM,OACNmB,QAAE,OACFC,QAAE,OACFlE,UAAI,OACJ/G,QAAE,OACFqJ,gBAAU,EAGN3I,KAAKmJ,OAASA,EACdnJ,KAAKV,GAAKoG,EACV1F,KAAKsK,GAAKA,EACVtK,KAAKuK,GAAKA,EACVvK,KAAKqG,KAAOiD,EACZtJ,KAAK2I,WAAa7D,KAAKE,QAC3B,CACAkD,OAAOxI,GACH,ECtZD,MAAM8K,EAMTnL,YAAYgI,GAAuB,KALnCA,eAAS,OAEToD,UAA0B,GAAG,KAC7BC,wBAAkB,EAGd1K,KAAKqH,UAAYA,EACjBrH,KAAK0K,mBAAqB,IAAIpI,EAAmBtC,KACrD,CACAoC,SACIpC,KAAK0K,mBAAmBxC,QAC5B,CACAtG,UAAUD,GACN,CAEJG,QAAQH,GACJ,CAEJK,UAAUL,GACN,CAEJgJ,UAAUhJ,GACN,EC1BD,MAAMiJ,EAGTC,cACI,IAAID,EADc,uDAAG,UAEzB,CACAvL,cAAqC,IAAzBC,EAAU,uDAAG,UAAS,KALlC+H,eAAS,OACTyD,UAAI,EAKA9K,KAAKqH,UAAY,IAAIjI,EAAUE,GAC/BU,KAAK8K,KAAO,IAAIN,EAAKxK,KAAKqH,WAC1BrH,KAAK+K,YACL/K,KAAKgL,cACT,CACAD,YACI/K,KAAKqH,UAAUzF,UAAaD,GAAkB3B,KAAK8K,KAAKlJ,UAAUD,GAClE3B,KAAKqH,UAAUrF,UAAaL,GAAkB3B,KAAK8K,KAAK9I,UAAUL,GAClE3B,KAAKqH,UAAUvF,QAAWH,GAAkB3B,KAAK8K,KAAKhJ,QAAQH,EAClE,CACAqJ,eACIhL,KAAKqH,UAAUjF,OAAS,IAAMpC,KAAK8K,KAAK1I,QAC5C,E","sources":["njslab/app-legacy/Implementation/Apps/AppThree/AppThreeGlobeNetwork/ThreeCore/index.ts","njslab/app-legacy/Implementation/Apps/AppThree/AppThreeGlobeNetwork/Core/GlobeNetworkAThree.ts","njslab/app-legacy/Implementation/Apps/AppThree/AppThreeGlobeNetwork/Core/Core.ts","njslab/app-legacy/Implementation/Apps/AppThree/AppThreeGlobeNetwork/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nexport class ThreeCore {\r\n    canvas: HTMLCanvasElement;\r\n    host: HTMLElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    t: number = 0.0;\r\n\r\n    camera: THREE.PerspectiveCamera;\r\n    scene: THREE.Scene;\r\n    renderer: THREE.WebGLRenderer;\r\n\r\n    radius: number = 5;\r\n    angle: number = 0;\r\n    constructor(id: string) {\r\n        this.InitCanvas(id);\r\n    }\r\n    InitCanvas(id: string) {\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = new THREE.Color(0, 0, 0);\r\n        this.scene.castShadow = true;\r\n\r\n        this.camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 5000);\r\n        this.camera.position.set(0, 0, this.radius);\r\n        // this.camera.\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);\r\n        ambientLight.castShadow = true;\r\n        this.scene.add(ambientLight);\r\n\r\n        const pointLight = new THREE.PointLight(0xffffff, 0.8);\r\n        pointLight.castShadow = true;\r\n        this.scene.add(pointLight);\r\n\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        this.renderer.setPixelRatio(this.host.clientWidth / this.host.clientHeight);\r\n        this.renderer.domElement.id = 'Three';\r\n        this.renderer.setSize(this.host.clientWidth, this.host.clientHeight);\r\n        this.host.appendChild(this.renderer.domElement);\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.EventBind();\r\n        this.Loop();\r\n    }\r\n    EventBind() {\r\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.MouseDown(e);\r\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.MouseUp(e);\r\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.MouseMove(e);\r\n    }\r\n    MouseDown(e: MouseEvent) {\r\n        console.log(e);\r\n    }\r\n    MouseUp(e: MouseEvent) {\r\n        console.log(e);\r\n    }\r\n    MouseMove(e: MouseEvent) {\r\n        console.log(e);\r\n    }\r\n    Loop() {\r\n        requestAnimationFrame(() => { this.Loop(); });\r\n        this.Render();\r\n        this.renderer.render(this.scene, this.camera);\r\n        this.t += 0.01;\r\n        // this.camera.rotation.z += 0.001;\r\n\r\n        // this.camera.position.x = this.radius * Math.cos( this.angle );\r\n        // this.camera.position.y = this.radius * Math.sin( this.angle );\r\n        // this.angle += 0.01;\r\n    }\r\n    Render() {\r\n        //\r\n    }\r\n}","import { NumericalMotion, NVector3, NVectorUtility, ColorUtility } from '../../../../../NJSCore';\r\n// import { AppWallPaperGL } from '../../AppWallPaperGL';\r\nimport { Core } from './Core';\r\n// import { MouseEventData } from '../../../../../AppCoreWrapper/IOWrapper/EventInteraction/EventInteraction';\r\n// import { WallPaperBase } from '../Base/WallPaperBase';\r\nimport * as THREE from 'three';\r\nimport { Vector3 } from 'three';\r\n\r\nexport class GlobeNetworkAThree {\r\n    static geo: GlobeNetworkAThree;\r\n\r\n    shaderVert = `\r\n    attribute float size;\r\n    attribute vec3 customColor;\r\n    varying vec3 vColor;\r\n\r\n    void main() {\r\n        vColor = customColor;\r\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n        gl_PointSize = size * ( 300.0 / -mvPosition.z );\r\n        gl_Position = projectionMatrix * mvPosition;\r\n    }\r\n    `;\r\n\r\n    shaderFrag = `\r\n    uniform vec3 color;\r\n    uniform sampler2D texture;\r\n    varying vec3 vColor;\r\n\r\n\tvoid main() {\r\n        gl_FragColor = vec4(color * vColor, 1.0);\r\n        gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\r\n        if (gl_FragColor.a < ALPHATEST) discard;\r\n    }\r\n    `;\r\n\r\n    attributePositions: THREE.BufferAttribute;\r\n    attributeColors: THREE.BufferAttribute;\r\n    attributeSize: THREE.BufferAttribute;\r\n\r\n    currentHex: string;\r\n    globe: THREE.Group;\r\n    particles: THREE.Points;\r\n\r\n    nodes: Node[];\r\n    edges: Edge[];\r\n    vecs: Vector3[];\r\n    nVecs: NVector3[];\r\n\r\n    PARTICLE_SIZE: number;\r\n    DOT_COLOR: string;\r\n    SPEED_ROTATION: number;\r\n\r\n    t: number = 0.0;\r\n\r\n    I_STEP_ANI: number = 10;\r\n\r\n    lineSegments: THREE.LineSegments;\r\n    lineSegGeo: THREE.BufferGeometry;\r\n\r\n    box: THREE.Mesh;\r\n\r\n    mouse: THREE.Vector2;\r\n\r\n\r\n    geometry: THREE.BufferGeometry;\r\n    mesh: THREE.Object3D;\r\n    material: THREE.Material;\r\n\r\n    uuid: string;\r\n    isHover: boolean = false;\r\n    isLeave: boolean = false;\r\n    isSelected: boolean = false;\r\n    isDrag: boolean = false;\r\n    isMove: boolean = false;\r\n\r\n    hasPopup: boolean = false;\r\n\r\n    vec: NVector3 = new NVector3(0, 0, 0);\r\n    scale: NVector3 = new NVector3(1, 1, 1);\r\n\r\n    // t: number = 0.0;\r\n    tOver: number = 0.0;\r\n    tDown1: number = 0.0;\r\n    tDown2: number = 0.0;\r\n    tUp: number = 0.0;\r\n    geometryCoreWrapper: Core;\r\n    constructor(geometryCoreWrapper: Core) {\r\n        this.geometryCoreWrapper = geometryCoreWrapper;\r\n        this.vec = new NVector3(0, 0, 0);\r\n        this.scale = new NVector3(1, 1, 1);\r\n        this.currentHex = '0xff0000'; // ;this.mesh.material[0].emissive.getHex();\r\n        this.DOT_COLOR = ColorUtility.GetRandomHex(); //  '#7116b7';\r\n        this.PARTICLE_SIZE = 0.105;\r\n        this.I_STEP_ANI = Math.floor(Math.random() * 2) * 2;\r\n        this.SPEED_ROTATION = 0.0005 + Math.random() * 0.1;\r\n        this.mouse = new THREE.Vector2();\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.InitVec();\r\n        const buff = this.InitNode();\r\n        this.InitBuffer(buff[0], buff[1], buff[2]);\r\n\r\n        this.InitGeometry();\r\n        this.InitMaterial();\r\n        this.InitMesh();\r\n        this.Add();\r\n    }\r\n    InitVec() {\r\n        this.nVecs = NVectorUtility.GetSpherecVecs3dRandomWithThicknessOffset(1500, 1, 0.15);\r\n        this.vecs = [];\r\n        for (let i = 0; i < this.nVecs.length; ++i) {\r\n            this.vecs.push(new Vector3(this.nVecs[i].x, this.nVecs[i].y, this.nVecs[i].z));\r\n        }\r\n    }\r\n    InitNode() {\r\n        let positions = []; let colors = []; let sizes = []; this.nodes = [];\r\n        for (let i = 0; i < this.vecs.length; ++i) {\r\n            positions.push(this.vecs[i].x, this.vecs[i].y, this.vecs[i].z);\r\n            let col = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.2 + Math.random() * 0.7);\r\n            colors.push(col[0] / 255, col[1] / 255, col[2] / 255, col[3]);\r\n            let size = i * 0.0001; // this.PARTICLE_SIZE + (Math.random() - 0.5) * 0.15;\r\n            // let size = i + this.PARTICLE_SIZE + (Math.random() - 0.5) * 0.15;\r\n            sizes.push(size);\r\n            const dot = new Node(this, i, this.vecs[i], col, size);\r\n            this.nodes.push(dot);\r\n        }\r\n        return [positions, colors, sizes];\r\n    }\r\n    InitBuffer(positions: number[], colors: number[], sizes: number[]) {\r\n        this.attributePositions = new THREE.BufferAttribute(new Float32Array(positions), 3);\r\n        this.attributeColors = new THREE.BufferAttribute(new Float32Array(colors), 4);\r\n        this.attributeSize = new THREE.BufferAttribute(new Float32Array(sizes), 1);\r\n    }\r\n    async InitGeometry() {\r\n        this.globe = new THREE.Group();\r\n\r\n        this.geometry = new THREE.BufferGeometry();\r\n        this.geometry.setAttribute('position', this.attributePositions);\r\n        this.geometry.setAttribute('customColor', this.attributeColors);\r\n        this.geometry.setAttribute('size', this.attributeSize);\r\n\r\n        let file = 'dotTexture.png';\r\n        let path = `njslabSandboxStatic/three/img/${file}`;\r\n        // let path = `${location.origin}/njslabSandboxStatic/three/img/${file}`;\r\n        let material = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                color: { value: new THREE.Color(0xffffff) },\r\n                texture: { value: new THREE.TextureLoader().load(path) }\r\n            },\r\n            vertexShader: this.shaderVert,\r\n            fragmentShader: this.shaderFrag,\r\n            alphaTest: 0.9\r\n        });\r\n        material.transparent = true;\r\n\r\n        // let geometry = new THREE.BoxBufferGeometry(0.1, 0.1, 0.1);\r\n        // let box = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff }));\r\n        // AppWallPaperGL.app.canvasThree.scene.add(box);\r\n        // this.box = box;\r\n\r\n        // var wrap = new THREE.Points(geo, material);\r\n        // this.mesh = wrap;\r\n        // AppWallPaperGL.app.canvasThree.scene.add(wrap);\r\n\r\n        // let blendings = ['NoBlending', 'NormalBlending', 'AdditiveBlending', 'SubtractiveBlending', 'MultiplyBlending'];\r\n        // material.blending = THREE[blendings[2]];\r\n        // console.log(path);\r\n        // let material = new THREE.PointsMaterial({ color: 0x888888 }); // new THREE.ShaderMaterial();\r\n\r\n        this.mesh = new THREE.Points(this.geometry, material);\r\n        this.geometryCoreWrapper.threeCore.scene.add(this.mesh);\r\n        // this.globe.add(this.mesh);\r\n        // AppWallPaperGL.app.canvasThree.scene.add(this.mesh);\r\n\r\n        // Create white segments\r\n        this.lineSegGeo = new THREE.BufferGeometry();\r\n        const segmentsMat = new THREE.LineBasicMaterial({\r\n            color: 0xffffff,\r\n            transparent: true,\r\n            opacity: 0.3,\r\n            vertexColors: false\r\n        });\r\n        // segmentsMat.blending = THREE[blendings[4]];\r\n        const lns = [];\r\n        this.edges = [];\r\n        let theIndex = 0;\r\n\r\n        let linSegGeoArray = []\r\n        let linSegGeoColArray = []\r\n\r\n        for (let i = 0; i < this.nodes.length - 1; ++i) {\r\n            for (let j = i; j < this.nodes.length; ++j) {\r\n                if (this.vecs[i].distanceTo(this.vecs[j]) < 0.15) {\r\n                    lns.push(this.vecs[i], this.vecs[j]);\r\n                    linSegGeoArray.push(this.vecs[i]);\r\n                    linSegGeoArray.push(this.vecs[j]);\r\n\r\n                    // const c0 = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.7 + (Math.random() - 0.5) * 0.7);\r\n                    // const c1 = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.4 + (Math.random() - 0.5) * 0.3);\r\n\r\n                    const c0 = this.nodes[i].col;\r\n                    const c1 = this.nodes[j].col;\r\n                    linSegGeoColArray.push(new THREE.Color(c0[0] / 255, c0[1] / 255, c0[2] / 255));\r\n                    linSegGeoColArray.push(new THREE.Color(c1[0] / 255, c1[1] / 255, c1[2] / 255));\r\n\r\n                    this.edges.push(new Edge(this, theIndex, this.nodes[i], this.nodes[j], 0.01));\r\n                    theIndex++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.lineSegGeo.setAttribute('position' , new THREE.BufferAttribute(new Float32Array(linSegGeoArray), 3))\r\n        this.lineSegGeo.setAttribute('customColor' , new THREE.BufferAttribute(new Float32Array(linSegGeoColArray), 4))\r\n\r\n        this.lineSegments = new THREE.LineSegments(this.lineSegGeo, segmentsMat);\r\n        this.globe.add(this.lineSegments);\r\n        // this.mesh = this.globe;\r\n        // AppWallPaperGL.app.canvasThree.scene.add(this.globe);\r\n        this.geometryCoreWrapper.threeCore.scene.add(this.lineSegments);\r\n    }\r\n    InitMaterial() {\r\n        this.material = new THREE.MeshNormalMaterial();\r\n    }\r\n    InitMesh() {\r\n        // this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n        // // this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z); // = x; this.mesh.position.y = y; this.mesh.position.z = z;\r\n        // this.mesh.receiveShadow = true;\r\n        // this.mesh.castShadow = true;\r\n        // this.mesh.position.setX(Math.random() * 100);\r\n    }\r\n    Add() {\r\n        // console.log(AppVisThree.app.canvasThree);\r\n        this.uuid = this.mesh.uuid;\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.mesh['geo'] = this;\r\n        // this.geometryCoreWrapper. graphicsCoreWrapper.canvasWrapper.canvasThree.geometryCommon.Add(this);\r\n        // console.log(this);\r\n    }\r\n    // ............................................................................................\r\n    Update() {\r\n        this.t += 0.1;\r\n        this.UpdatePost();\r\n    }\r\n    // ............................................................................................\r\n    UpdatePost(): void {\r\n        for (let i = 0; i < this.nodes.length; ++i) { this.nodes[i].Update(this.t); }\r\n        for (let i = 0; i < this.edges.length; ++i) { this.edges[i].Update(this.t); }\r\n        this.lineSegGeo.attributes.position.needsUpdate = true;\r\n\r\n        this.attributePositions.needsUpdate = true;\r\n        this.attributeSize.needsUpdate = true;\r\n\r\n        // this.particles.rotation.x += 0.0005;\r\n        this.globe.setRotationFromAxisAngle(new Vector3(0, 1, 1), 1);\r\n        this.globe.rotation.z += this.SPEED_ROTATION; // 0.0005\r\n        // this.mesh.rotation.z += 1; // this.SPEED_ROTATION;\r\n        // this.mesh.setRotationFromAxisAngle(new Vector3(0,1,1), 1);\r\n        // this.mesh.rotation.set(0, 1, 0.5);\r\n        // this.mesh.setRotationFromQuaternion(new Vector3(0,1,1), 1);\r\n        // this.particles.rotation.z += 1;\r\n\r\n        // for (let i = 0; i < this.attributePositions.array.length; i++) {\r\n        //     this.attributePositions.setXYZ(i, Math.random(), Math.random(), Math.random());\r\n        // }\r\n        // this.mesh.position[0].setX(0.1 + this.mesh.position[0].clientX);\r\n\r\n        this.UpdateDotAnimation();\r\n        // AppWallPaperGL.app.canvasThree.camera.camera.rotateY(this.t * 0.001);\r\n        // this.segmentsGeom.verticesNeedUpdate = true;\r\n        // this.t += 0.05;\r\n    }\r\n    UpdateDotAnimation() {\r\n        let ii = 0;\r\n        for (let i = 0; i < this.nodes.length; i += this.I_STEP_ANI) {\r\n            const rnd = this.nodes[i].seedRandom - 0.5;\r\n            const theT = this.t * rnd;\r\n            if (ii % 3 === 0) {\r\n                this.nodes[i].Translate(Math.sin(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd);\r\n            } else if (ii % 3 === 1) {\r\n                this.nodes[i].Translate(Math.sin(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd);\r\n            } else {\r\n                this.nodes[i].Translate(Math.cos(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd);\r\n            }\r\n            ii++;\r\n            // this.nodes[i].Scale(Math.sin(theT) * 0.000005 * rnd * rnd);\r\n        }\r\n    }\r\n    //@ ts-ignore\r\n    Raycast(x: number, y: number): undefined {\r\n        console.log(x, y)\r\n        // const canvasThree = this.geometryCoreWrapper.graphicsCoreWrapper.model.graphicsCoreWrapper.canvasWrapper.canvasThree;\r\n        // this.mouse.x = (x / canvasThree.renderer.domElement.clientWidth) * 2 - 1;\r\n        // this.mouse.y = - (y / canvasThree.renderer.domElement.clientHeight) * 2 + 1;\r\n\r\n        // canvasThree.geometryCommon.raycaster.setFromCamera(this.mouse, canvasThree.camera.camera);\r\n        // const intersects = canvasThree.geometryCommon.raycaster.intersectObjects([this.mesh]);\r\n\r\n        // if (intersects.length > 0) {\r\n        //     // console.log(intersects[0]);\r\n        //     // console.log(pos[intersects[0].index]);\r\n\r\n        //     // this.attributePositions.setXYZ(intersects[0].index, 0.1, 0.1, 0.1); this.attributePositions.needsUpdate = true;\r\n        //     // this.attributeSize.setX(intersects[0].index, 1); this.attributeSize.needsUpdate = true;\r\n\r\n        //     // this.box.position.setX(intersects[0].point.x);\r\n        //     // this.box.position.setY(intersects[0].point.y);\r\n        //     // this.box.position.setZ(intersects[0].point.z);\r\n\r\n        //     return intersects[0].index;\r\n        // }\r\n        return undefined;\r\n    }\r\n    MouseDown(m: MouseEvent) {\r\n        // // console.log('down');\r\n\r\n        // const d = this.Raycast(m.x, m.y);\r\n\r\n        // // const d = this.Raycast(m.x, m.y);\r\n        // console.log(d);\r\n    }\r\n    MouseMove(m: MouseEvent) {\r\n        // // console.log('move');\r\n        // console.log(m.x, m.y);\r\n        // const d = this.Raycast(m.x, m.y);\r\n        // if (d) {\r\n        //     this.nodes[d].SetScale(Math.random());\r\n        //     // console.log(d.object.visible = false);\r\n        // }\r\n        // // const d = AppWallPaperGL.app.canvasThree.geometryCommon.Raycast(m.x, m.y);\r\n        // console.log(d);\r\n    }\r\n}\r\nexport class Node {\r\n    parent: GlobeNetworkAThree;\r\n    v: Vector3;\r\n    col: number[];\r\n    theta: number;\r\n    phi: number;\r\n    size: number;\r\n    id: number;\r\n    edges: Edge[];\r\n    seedRandom: number;\r\n    t: number;\r\n    tForR: number;\r\n\r\n    needUpdate: boolean;\r\n\r\n    constructor(parent: GlobeNetworkAThree, i: number, v: Vector3, c: number[], s: number) {\r\n        this.parent = parent;\r\n        this.t = 0.0;\r\n        this.v = v;\r\n        this.id = i;\r\n        this.col = c;\r\n        this.size = s;\r\n        this.tForR = 0.0;\r\n\r\n        this.seedRandom = Math.random();\r\n    }\r\n    Translate(x: number, y: number, z: number) {\r\n        this.v.setX(this.parent.attributePositions.getX(this.id));\r\n        this.v.setY(this.parent.attributePositions.getY(this.id));\r\n        this.v.setZ(this.parent.attributePositions.getZ(this.id));\r\n        this.parent.attributePositions.setXYZ(this.id, this.v.x + x, this.v.y + y, this.v.z + z);\r\n    }\r\n    Scale(s: number) {\r\n        this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, this.size + s);\r\n    }\r\n    ScalebyValue(s: number) {\r\n        this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, s);\r\n    }\r\n    SetScale(s: number) {\r\n        // this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, s);\r\n        this.needUpdate = true;\r\n        this.tForR = 0.0;\r\n        this.t = 0.0;\r\n    }\r\n    Update(t: number) {\r\n        if (!this.needUpdate) { return; }\r\n        this.t += 0.019;\r\n        this.ScalebyValue(NumericalMotion.easeOutElastic2(this.tForR) * this.seedRandom);\r\n        this.tForR += 0.01;\r\n\r\n        if (this.t > 1) {\r\n            this.needUpdate = false;\r\n            this.SetScale(0.1);\r\n        }\r\n    }\r\n}\r\nexport class Edge {\r\n\r\n    parent: GlobeNetworkAThree;\r\n    n0: Node;\r\n    n1: Node;\r\n    size: number;\r\n    id: number;\r\n    seedRandom: number;\r\n\r\n    constructor(parent: GlobeNetworkAThree, i: number, n0: Node, n1: Node, s: number) {\r\n        this.parent = parent;\r\n        this.id = i;\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.size = s;\r\n        this.seedRandom = Math.random();\r\n    }\r\n    Update(t: number) {\r\n        //\r\n    }\r\n}","import { ThreeCore } from '../ThreeCore';\r\nimport * as THREE from 'three';\r\n\r\nimport { GlobeNetworkAThree } from './GlobeNetworkAThree';\r\n\r\nexport class Core {\r\n    threeCore: ThreeCore;\r\n\r\n    boxMeshes: THREE.Mesh[] = [];\r\n    globeNetworkAThree: GlobeNetworkAThree;\r\n\r\n    constructor(threeCore: ThreeCore) {\r\n        this.threeCore = threeCore;\r\n        this.globeNetworkAThree = new GlobeNetworkAThree(this);\r\n    }\r\n    Render() {\r\n        this.globeNetworkAThree.Update();\r\n    }\r\n    MouseDown(e: MouseEvent) {\r\n        // console.log(e, 'core');\r\n    }\r\n    MouseUp(e: MouseEvent) {\r\n        // console.log(e, 'core');\r\n    }\r\n    MouseMove(e: MouseEvent) {\r\n        // console.log(e, 'core');\r\n    }\r\n    MouseDrag(e: MouseEvent) {\r\n        // console.log(e, 'core');\r\n    }\r\n}","import { ThreeCore } from './ThreeCore';\r\nimport { Core } from './Core/Core';\r\nexport class AppThreeGlobeNetwork {\r\n    threeCore: ThreeCore;\r\n    core: Core;\r\n    static Init(id: string = 'SandBox') {\r\n        new AppThreeGlobeNetwork(id);\r\n    }\r\n    constructor(id: string = 'SandBox') {\r\n        this.threeCore = new ThreeCore(id);\r\n        this.core = new Core(this.threeCore);\r\n        this.BindEvent();\r\n        this.BindRenderer();\r\n    }\r\n    BindEvent() {\r\n        this.threeCore.MouseDown = (e: MouseEvent) => this.core.MouseDown(e);\r\n        this.threeCore.MouseMove = (e: MouseEvent) => this.core.MouseMove(e);\r\n        this.threeCore.MouseUp = (e: MouseEvent) => this.core.MouseUp(e);\r\n    }\r\n    BindRenderer() {\r\n        this.threeCore.Render = () => this.core.Render();\r\n    }\r\n}\r\n"],"names":["ThreeCore","constructor","id","canvas","host","ctx","t","camera","scene","renderer","radius","angle","this","InitCanvas","document","getElementById","THREE","background","castShadow","window","innerWidth","innerHeight","position","set","ambientLight","add","pointLight","antialias","alpha","setPixelRatio","clientWidth","clientHeight","domElement","setSize","appendChild","Init","EventBind","Loop","onmousedown","e","MouseDown","onmouseup","MouseUp","onmousemove","MouseMove","console","log","requestAnimationFrame","Render","render","GlobeNetworkAThree","geometryCoreWrapper","shaderVert","shaderFrag","attributePositions","attributeColors","attributeSize","currentHex","globe","particles","nodes","edges","vecs","nVecs","PARTICLE_SIZE","DOT_COLOR","SPEED_ROTATION","I_STEP_ANI","lineSegments","lineSegGeo","box","mouse","geometry","mesh","material","uuid","isHover","isLeave","isSelected","isDrag","isMove","hasPopup","vec","NVector3","scale","tOver","tDown1","tDown2","tUp","ColorUtility","Math","floor","random","InitVec","buff","InitNode","InitBuffer","InitGeometry","InitMaterial","InitMesh","Add","NVectorUtility","i","length","push","Vector3","x","y","z","positions","colors","sizes","col","size","dot","Node","Float32Array","async","setAttribute","path","uniforms","color","value","texture","load","vertexShader","fragmentShader","alphaTest","transparent","threeCore","segmentsMat","opacity","vertexColors","lns","theIndex","linSegGeoArray","linSegGeoColArray","j","distanceTo","c0","c1","Edge","Update","UpdatePost","attributes","needsUpdate","setRotationFromAxisAngle","rotation","UpdateDotAnimation","ii","rnd","seedRandom","theT","Translate","sin","cos","Raycast","m","geo","parent","v","c","s","theta","phi","tForR","needUpdate","setX","getX","setY","getY","setZ","getZ","setXYZ","Scale","ScalebyValue","SetScale","NumericalMotion","n0","n1","Core","boxMeshes","globeNetworkAThree","MouseDrag","AppThreeGlobeNetwork","static","core","BindEvent","BindRenderer"],"sourceRoot":""}