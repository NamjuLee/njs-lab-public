{"version":3,"file":"static/js/5883.eb4d0b91.chunk.js","mappings":"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","sources":["njslab/Project/Project_03_SlowZone/01_JSAPI/Tint/FilterGLViewDarkForDarken.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/Drawing/index.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/DataTwitter.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/UI/index.ts","njslab/Project/Project_03_SlowZone/03_SlowZone/index.ts"],"sourcesContent":["import { NVector3, GLShaderCommon } from '../../../../../lib/NJSCore';\n\n// import { Mat3 } from '../../AppCore/GLUtility/Mat3';\n\nexport class FilterGLViewDarkForDarken {\n\n    gl: WebGLRenderingContext;\n    program: WebGLProgram;\n    fragmentShader: WebGLShader;\n    vertexShader: WebGLShader;\n    matrixLocation: WebGLProgram;\n    posBuffer: WebGLBuffer;\n    colBuffer: WebGLBuffer;\n    vertexs: Float32Array;\n\n    posLocAtt: number;\n    colLocAtt: number;\n    matLoc: WebGLUniformLocation;\n    colLoc: WebGLUniformLocation;\n    cVecLoc: WebGLUniformLocation;\n    mouseLoc: WebGLUniformLocation;\n    timeGL: WebGLUniformLocation;\n    // startTime: number;\n    // randomSeed: number;\n\n    vShader: WebGLShader;\n    fShader: WebGLShader;\n\n    v = `\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n    \n    varying vec4 f_color;\n\n    void main() {\n\n        vec2 mouse_distance = vec2(0,0) - (a_position.xy /vec2(2,2));\n        float red = 1.0 - length(mouse_distance);\n        f_color = vec4(a_position, 0, 1.0);\n    \n        // float dis = distance(vec2(a_position.xy), vec2(0,0));\n\n        // f_color = vec4(dis * 0.6, 0,0,1);\n        gl_Position = vec4( a_position, 0, 1);\n    }\n    `;\n\n    f = `\n    precision highp float;\n\n    varying vec4 f_color;\n    \n    void main() {\n        vec2 mouse_distance = vec2(0,0) - (f_color.xy /vec2(5,5));\n\n        float col =  length(mouse_distance*5.);\n        float val = 1.0 - length(mouse_distance*8.);\n        \n        gl_FragColor = vec4(0.19,0.19,0.19, col);\n\n    }\n    `;\n\n    positionAttribLocation: WebGLProgram;\n    colorAttribLocation: WebGLProgram;\n    translation: NVector3;\n    color: number[];\n    colArray: Float32Array;\n\n    constructor(gl: WebGLRenderingContext, xt: number = 100, yt: number = 100, zt: number = 0, xs: number = 1, ys: number = 1, zs: number = 1) {\n        this.gl = gl;\n        // this.translation = new NVector3(xt, yt, zt);\n        // this.angleInRadians = 0;\n        // this.scale = new NVector3(xs, ys, zs);\n        this.color = [Math.random(), Math.random(), Math.random(), 1];\n        this.InitShader();\n    }\n    InitShader() {\n        // let vShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.VERTEX_SHADER,'/shader/vsCanvas.glsl');\n        // let fShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.FRAGMENT_SHADER, '/shader/fsColor.glsl');\n\n        let vShader = GLShaderCommon.CreateShader(this.gl, this.gl.VERTEX_SHADER, this.v); // '/shader/vsCanvas.glsl');\n        let fShader = GLShaderCommon.CreateShader(this.gl, this.gl.FRAGMENT_SHADER, this.f); // '/shader/fsColor.glsl');\n\n        if (vShader && fShader) {\n            this.vShader = vShader;\n            this.fShader = fShader;\n            let program = GLShaderCommon.CreateProgram(this.gl, vShader, fShader);\n            if (program) { this.program = program; }\n        }\n\n        // this.InitVerext();\n    }\n    Render(gl: WebGLRenderingContext) {\n\n        let col = [0.1, 0, 0, 1];\n\n        this.vertexs = new Float32Array([\n            // left column\n            -1, -1, 1, 1, 1, 1,\n            - 1, 1, col[0], col[1], col[2], col[3],\n            1, -1, col[0], col[1], col[2], col[3],\n\n            -1, 1, 1, 1, 1, 1,\n            1, -1, col[0], col[1], col[2], col[3],\n            1, 1, col[0], col[1], col[2], col[3],\n\n        ]);\n\n        this.posBuffer = this.gl.createBuffer() as WebGLBuffer;\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.vertexs), gl.STATIC_DRAW);\n\n        this.posLocAtt = this.gl.getAttribLocation(this.program, 'a_position');\n        // Tell the attribute how to get data out of posBuffer (ARRAY_BUFFER)\n        let size = 2;          // 2 components per iteration\n        let type = gl.FLOAT;   // the data is 32bit floats\n        let normalize = false; // don't normalize the data\n        let stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;        // start at the beginning of the buffer\n        gl.vertexAttribPointer(this.posLocAtt, size, type, normalize, stride, offset);\n        gl.enableVertexAttribArray(this.posLocAtt);\n\n        // this.colLocAtt = this.gl.getAttribLocation(this.program, 'a_color');\n        // size = 4;          // 2 components per iteration\n        // type = gl.FLOAT;   // the data is 32bit floats\n        // normalize = false; // don't normalize the data\n        // stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        // offset = 2 * Float32Array.BYTES_PER_ELEMENT;        // start at the beginning of the buffer\n        // gl.vertexAttribPointer(this.colLocAtt, size, type, normalize, stride, offset);\n        // gl.enableVertexAttribArray(this.colLocAtt);\n\n        gl.useProgram(this.program);\n        let primitiveType = gl.TRIANGLES; // LINE_LOOP; // gl.TRIANGLE_STRIP;\n        offset = 0;\n        let count = 6; // this.vertexs.length * 0.5;\n        gl.drawArrays(primitiveType, offset, count);\n\n    }\n}","import * as THREE from 'three';\r\nimport { getJSONFromURL, hexToRGBANormalized, Vector3, getRandomHex } from 'njscore';\r\nimport { Solution } from '..';\r\nexport class Drawing {\r\n\r\n    solution: Solution;\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n    zones15: any = [];\r\n    routesMain: any = [];\r\n\r\n    meshTwitter: THREE.Points;\r\n    meshStreetOSM: THREE.LineSegments;\r\n    meshNode: THREE.Points;\r\n    meshTreated: THREE.LineSegments;\r\n    meshControl: THREE.LineSegments;\r\n    meshMainStreet: THREE.LineSegments;\r\n    meshZones30: THREE.Mesh[];\r\n    meshPolygon: THREE.Group;\r\n\r\n    polygonRingID = {};\r\n    polygonRings: THREE.Mesh;\r\n    yearForPolygonMesh: {};\r\n\r\n    selectedYear = 2009;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n\r\n        // const path = '/static/research/slow-zone/';\r\n        // getJSONFromURL(process.env.PUBLIC_URL + path + 'street_osm.geojson').then((data) => {\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshStreetOSM = this.LineSeg(this.streetOSM, [0, 1, 1]);\r\n            this.solution.start();\r\n        });\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/Paris-main-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesMain.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshMainStreet = this.LineSeg(this.routesMain, [1, 1, 0]);\r\n\r\n        });\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshTreated = this.LineSeg(this.routesTreated, [1, 0, 0]);\r\n        });\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshControl = this.LineSeg(this.routesControl, [0, 1, 0]);\r\n        });\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones-30.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshZones30 = this.renderMultiPolygon(this.solution.scene, this.zones30, [0, 1, 0]);\r\n        });\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/zones_15_innerouter_byyr_rings.json').then((geoJSON) => {\r\n\r\n            // console.log(geoJSON);\r\n\r\n            // for (let i = 0; i < geoJSON['features'].length; ++i) {\r\n            //     this.zones15.push(geoJSON['features'][i]['geometry']['coordinates']);\r\n            // }\r\n\r\n            this.polygonRings = this.renderCustomPolygon(geoJSON);\r\n            this.updateYear(this.selectedYear);\r\n\r\n\r\n            // console.log(geoJSON);\r\n\r\n            // this.meshAreaGon = renderCustomPolygon(this.scene, geoJSON);\r\n\r\n        });\r\n\r\n    }\r\n    public updateYear(year: number) {\r\n        this.selectedYear = year + 1;\r\n        if (this.yearForPolygonMesh !== undefined) {\r\n            for (let i = 2010; i < 2016; ++i) {\r\n\r\n                const ms = this.yearForPolygonMesh[i]; // as THREE.Mesh;\r\n                // console.log(ms);\r\n                ms.forEach(m => {\r\n                    m = m as THREE.Mesh;\r\n                    //     console.log(m)\r\n                    if (i < this.selectedYear) {\r\n                        m.visible = true;\r\n                        //     console.log('active', i)\r\n                    } else {\r\n                        m.visible = false;\r\n                        //     console.log('deactive', i)\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            }\r\n            // this.polygonRings.\r\n        }\r\n    }\r\n    public updateColor(c: string) {\r\n        //     console.log(c);\r\n        const col = hexToRGBANormalized(c);\r\n\r\n        //     console.log(col)\r\n\r\n        if (this.meshMainStreet !== undefined) {\r\n            if (this.solution.ui.isActiveMainStreet) {\r\n                let mat = this.meshMainStreet.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshStreetOSM !== undefined) {\r\n            if (this.solution.ui.isActive_streetOSM) {\r\n                let mat = this.meshStreetOSM.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.solution.ui.isActive_treated_st) {\r\n                let mat = this.meshTreated.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshControl !== undefined) {\r\n            if (this.solution.ui.isActive_control_st) {\r\n                let mat = this.meshControl.material as THREE.LineBasicMaterial;\r\n                mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n            }\r\n        }\r\n        if (this.meshZones30 !== undefined) {\r\n            if (this.solution.ui.isActive_zones_30) {\r\n                this.meshZones30.forEach((m) => {\r\n                    let mat = m.material as THREE.LineBasicMaterial;\r\n                    mat.color.r = col[0]; mat.color.g = col[1]; mat.color.b = col[2];\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n        if (this.solution.dataTwitter !== undefined) {\r\n            if (this.solution.ui.isActive_twitter) {\r\n                this.solution.dataTwitter.updateColor(col[0], col[1], col[2]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    public update() {\r\n\r\n        // return;\r\n\r\n        if (this.meshMainStreet !== undefined) {\r\n            if (this.solution.ui.isActiveMainStreet) { this.meshMainStreet.visible = true; } else { this.meshMainStreet.visible = false; }\r\n        }\r\n\r\n        if (this.meshStreetOSM !== undefined) {\r\n            if (this.solution.ui.isActive_streetOSM) { this.meshStreetOSM.visible = true; } else { this.meshStreetOSM.visible = false; }\r\n        }\r\n\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.solution.ui.isActive_treated_st) { this.meshTreated.visible = true; } else { this.meshTreated.visible = false; }\r\n        }\r\n\r\n        if (this.meshControl !== undefined) {\r\n            if (this.solution.ui.isActive_control_st) { this.meshControl.visible = true; } else { this.meshControl.visible = false; }\r\n        }\r\n\r\n        if (this.meshZones30 !== undefined) {\r\n            if (this.solution.ui.isActive_zones_30) {\r\n                this.meshZones30.forEach((m) => {\r\n                    m.visible = true;\r\n                })\r\n            } else {\r\n                this.meshZones30.forEach((m) => {\r\n                    m.visible = false;\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (this.solution.dataTwitter.mesh !== undefined) {\r\n            if (this.solution.ui.isActive_twitter) { this.solution.dataTwitter.mesh.visible = true; } else { this.solution.dataTwitter.mesh.visible = false; }\r\n        }\r\n\r\n    }\r\n\r\n    // ......................................... area polygon 2010 - 2015\r\n    public renderCustomPolygon(json: any) {\r\n        // console.log(json.value_mn_rescale);\r\n\r\n\r\n        const yearForPolygonID = {}\r\n\r\n        for (const [key, value] of Object.entries(json.yr)) {\r\n            const theValue = value as string;\r\n            if (theValue in yearForPolygonID) {\r\n                yearForPolygonID[theValue].push(+key)\r\n            } else {\r\n                yearForPolygonID[theValue] = [+key]\r\n            }\r\n        }\r\n\r\n        const yearForPolygonMesh = {}\r\n\r\n        //     console.log(yearForPolygonID)\r\n        this.polygonRingID = yearForPolygonID;\r\n\r\n        let count = 0;\r\n\r\n        for (const [theKey, theIDs] of Object.entries(this.polygonRingID)) {\r\n\r\n            //     console.log(theKey, theIDs)\r\n\r\n\r\n\r\n            const meshes = [];\r\n            //@ts-ignore\r\n            for (let k = 0; k < theIDs.length; ++k) {\r\n                const id = theIDs[k];\r\n\r\n                const value = json.value_mn_rescale[id];\r\n                // console.log(value);\r\n\r\n                const outPTs = []\r\n                for (let i = 0; i < json.outer_ring[id].length; ++i) {\r\n                    const [x, y] = this.solution.projectionToMercator(json.outer_ring[id][i][0], json.outer_ring[id][i][1]);\r\n                    outPTs.push(new Vector3(x, y))\r\n                }\r\n\r\n                const shape = new THREE.Shape(outPTs);\r\n                for (let i = 0; i < json.inner_rings[id].length; ++i) {\r\n\r\n                    const holePath = new THREE.Path();\r\n\r\n                    let [x, y] = this.solution.projectionToMercator(json.inner_rings[id][i][0][0], json.inner_rings[id][i][0][1]);\r\n                    holePath.moveTo(x, y);\r\n\r\n                    for (let j = 1; j < json.inner_rings[id][i].length; ++j) {\r\n                        let [x, y] = this.solution.projectionToMercator(json.inner_rings[id][i][j][0], json.inner_rings[id][i][j][1]);\r\n                        holePath.lineTo(x, y);\r\n                        // outPTs.push(new Vector3(x, y))\r\n                    }\r\n\r\n                    shape.holes.push(holePath)\r\n                }\r\n\r\n                let geometry = new THREE.ShapeGeometry(shape);\r\n                // console.log(count)\r\n                // console.log(geometry)\r\n\r\n                // const col = getRandomHex().split('#')[1];\r\n                // console.log(col)\r\n\r\n                const color = new THREE.Color(0xffffff);\r\n                color.setRGB(value, 0, 0)\r\n\r\n                let mat = new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide, color: color,\r\n                    transparent: true,\r\n                    opacity: 0.85\r\n                });\r\n\r\n                let mesh = new THREE.Mesh(geometry, mat);\r\n                mesh.translateY(count++ * 0.0001);\r\n                mesh.visible = true;\r\n                this.solution.scene.add(mesh);\r\n                mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n                meshes.push(mesh);\r\n            }\r\n\r\n\r\n            const theValue = theKey as string;\r\n            yearForPolygonMesh[theValue] = meshes;\r\n            // break\r\n\r\n        }\r\n\r\n        this.yearForPolygonMesh = yearForPolygonMesh;\r\n        //     console.log(yearForPolygonMesh);\r\n        return undefined;\r\n    }\r\n\r\n    // ----------------------------- polygon for 30 zone\r\n    public renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n\r\n        const meshes = [];\r\n        const positions = [];\r\n\r\n        for (let multi = 0; multi < paths.length; ++multi) {\r\n            const multiPolygon = paths[multi];\r\n\r\n            for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n                const polygon = multiPolygon[polyI];\r\n\r\n                if (polygon.length === 1) {\r\n                    const thePolygon = polygon[0];\r\n\r\n                    const shape = [];\r\n\r\n                    for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                        const [x, y] = this.solution.projectionToMercator(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                        positions.push(x, 0, y)\r\n\r\n                        shape.push(new THREE.Vector2(x, y));\r\n                    }\r\n\r\n\r\n                    let geometry = new THREE.ShapeGeometry(new THREE.Shape(shape));\r\n                    let mat = new THREE.MeshBasicMaterial({\r\n                        side: THREE.DoubleSide, color: 0x00ff00,\r\n                        transparent: true,\r\n                        opacity: 0.3\r\n                    });\r\n                    let mesh = new THREE.Mesh(geometry, mat);\r\n                    scene.add(mesh);\r\n                    meshes.push(mesh);\r\n                    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        return meshes;\r\n    };\r\n    public LineSeg(paths: any, color: number[]) {\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.LineBasicMaterial();\r\n        material.color.r = color[0];\r\n        material.color.g = color[1];\r\n        material.color.b = color[2];\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n        const indices = [];\r\n\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const route = paths[i]\r\n\r\n            for (let j = 0; j < route.length; ++j) {\r\n                for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                    const [x, y] = this.solution.projectionToMercator(route[j][k][0], route[j][k][1]);\r\n\r\n                    positions.push(x, 0, y)\r\n\r\n                    colors.push(color[0], color[1], color[2]);\r\n\r\n                    if (k < route[j].length - 1) {\r\n                        indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // console.log(xC / Count, yC / Count)\r\n        geometry.setIndex(indices);\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        // generateMorphTargets( geometry );\r\n\r\n        geometry.computeBoundingSphere();\r\n\r\n        const mesh = new THREE.LineSegments(geometry, material);\r\n        this.solution.scene.add(mesh);\r\n        return mesh;\r\n\r\n\r\n    }\r\n    public renderPoints = (paths: any, color: number[]) => {\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const route = paths[i]\r\n\r\n            for (let j = 0; j < route.length; ++j) {\r\n                for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                    const [x, y] = this.solution.projectionToMercator(route[j][k][0], route[j][k][1]);\r\n\r\n                    positions.push(x, 0, y)\r\n                    colors.push(color[0], color[1], color[2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        geometry.computeBoundingSphere();\r\n\r\n        const mesh = new THREE.Points(geometry, material);\r\n        this.solution.scene.add(mesh);\r\n        return mesh;\r\n\r\n    }\r\n\r\n    // ..............................\r\n    // public toggleRenderYearForPolygonMesh() {\r\n    //     if (this.yearForPolygonMesh[2010] !== undefined) {\r\n    //         console.log('1');\r\n    //         if (this.solution.ui.isActive_zones_buffer) {\r\n    //             console.log('2');\r\n    //             for (const [key, value] of Object.entries(this.yearForPolygonMesh)) {\r\n    //                 for (let i = 0; i < this.yearForPolygonMesh[key].length; ++i) {\r\n    //                     this.yearForPolygonMesh[key][i].visible = true;\r\n    //                 }\r\n    //                 console.log('3');\r\n    //             }\r\n    //         } else {\r\n    //             for (const [key, value] of Object.entries(this.yearForPolygonMesh)) {\r\n    //                 for (let i = 0; i < this.yearForPolygonMesh[key].length; ++i) {\r\n    //                     this.yearForPolygonMesh[key][i].visible = false;\r\n    //                 }\r\n    //                 console.log('4');\r\n    //             }\r\n\r\n    //         }\r\n    //     }\r\n    // }\r\n}","import * as THREE from 'three';\r\nimport { Solution } from './';\r\n\r\nimport { PARAM } from '../../../../App';\r\n\r\nimport { getJSONFromURL, } from 'njscore';\r\nexport class DataTwitter {\r\n    solution: Solution;\r\n    active: boolean = false;\r\n    dataRaw: any;\r\n    mesh: THREE.Points;\r\n    t = 0.0;\r\n\r\n    dataScale: number = 1;\r\n    colorScale: number = 1;\r\n\r\n    pos: Float32Array;\r\n\r\n    color: string = '#0ff';\r\n\r\n    material: THREE.PointsMaterial;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n\r\n        const fileName = 'real_data.json'\r\n        const path = '/static/research/slow-zone/';\r\n\r\n        let thePath = 'https://raw.githubusercontent.com/NamjuLee/data/master/Paris/twitter_data_2010-2015.json'; // process.env.PUBLIC_URL + path + fileName\r\n\r\n        if (PARAM.url) {\r\n            thePath = PARAM.url;\r\n        }\r\n\r\n        getJSONFromURL(thePath).then((data) => {\r\n            this.dataRaw = data;\r\n\r\n            this.initMesh('noNeighbsLog');\r\n        });\r\n\r\n    }\r\n    initMesh(key: string) {\r\n        const positions = [];\r\n        const colors = [];\r\n\r\n\r\n        const domain = this.dataRaw['meta']['domain_' + key]\r\n        // console.log(domain)\r\n\r\n        const selYear = domain[0]\r\n        // lat : 48.819493\r\n        // lon : 2.3554159\r\n        // noNeighbsLog : 0\r\n        // noNeighbsLogDensity : 0\r\n        // noNeighbsRaw : 0\r\n        // noNeighbsWins : 0\r\n        // noTwtsLog : 0\r\n        // noTwtsLogDensity : 0\r\n        // noTwtsRaw : 0\r\n        // noTwtsWins : 0\r\n        // noUsersLog : 0\r\n        // noUsersLogDensity : 0\r\n        // noUsersRaw : 0\r\n        // noUsersWins : 0\r\n        // treatmentCategory : 0\r\n        // year : 2010\r\n\r\n        for (let i = 0; i < this.dataRaw['cells'].length; ++i) {\r\n            const cell = this.dataRaw['cells'][i];\r\n            const [x, y] = this.solution.projectionToMercator(+cell['lon'], +cell['lat'])\r\n\r\n            let keyIndex = +cell[key]\r\n            keyIndex /= 2;\r\n\r\n            const color = [keyIndex, keyIndex, 0];\r\n\r\n            positions.push(x, keyIndex * this.dataScale, y)\r\n\r\n            colors.push(color[0], color[1], color[2]);\r\n\r\n        }\r\n        // this.meshStreetOSM = this.LineSeg(this.streetOSM, [0, 1, 1]);\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n        this.material = material;\r\n\r\n        this.pos = new Float32Array(positions)\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(this.pos, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        geometry.computeBoundingSphere();\r\n\r\n        this.mesh = new THREE.Points(geometry, material);\r\n        this.solution.scene.add(this.mesh);\r\n\r\n        //     console.log('done');\r\n        this.active = true;\r\n\r\n    }\r\n    updateColor(r: number, g: number, b: number) {\r\n        this.material.color.setRGB(r, g, b);\r\n    }\r\n    updateMesh(key: string) {\r\n        this.active = false;\r\n        this.removeMesh();\r\n        this.initMesh(key);\r\n    }\r\n    removeMesh() {\r\n        this.solution.scene.remove(this.mesh);\r\n    }\r\n    update() {\r\n        if (!this.active) { return; }\r\n        this.t += 0.05;\r\n        // if (this.solution.ui.isActive_twitter) {\r\n        this.updateAnimation();\r\n    }\r\n    updateAnimation() {\r\n\r\n        let numVertices = this.mesh.geometry.attributes.position.count;\r\n        for (let i = 0; i < numVertices; i++) {\r\n            let o = this.mesh.geometry.attributes.position;\r\n\r\n            let x = o.getX(i);\r\n            // let y = o.getY(i);\r\n            let z = o.getZ(i)\r\n\r\n            let y = this.pos[(i * 3) + 1] * this.dataScale;\r\n\r\n            y = y * (1 + Math.sin(x + y + this.t) * Math.cos(x + y + this.t))\r\n\r\n            y = y < 0.1 ? 0.1 : y;\r\n            // console.log(y)\r\n\r\n            let p = new THREE.Vector3(x, y, z);\r\n\r\n            this.mesh.geometry.attributes.position.setXYZ(i, p.x, p.y, p.z);\r\n\r\n            // if (intersection !== null) {\r\n            //     y = distanceTo(x, y, z, intersection.point.x, intersection.point.y, intersection.point.z) / 30\r\n            // }\r\n\r\n\r\n            const valNorm = y / this.colorScale;\r\n            this.mesh.geometry.attributes.color.setXYZ(i, valNorm, 1 - valNorm, 0);\r\n            // console.log(y)\r\n        }\r\n\r\n        // set to true each time you modify the positions:\r\n        this.mesh.geometry.attributes.position.needsUpdate = true;\r\n        this.mesh.geometry.attributes.color.needsUpdate = true;\r\n        this.mesh.geometry.computeVertexNormals();\r\n\r\n    }\r\n}","import { Solution } from '../';;\r\nexport class UI {\r\n    solution: Solution;\r\n    hostDiv: HTMLElement;\r\n\r\n    isActiveMainStreet = true;\r\n    isActive_streetOSM = false;\r\n    isActive_treated_st = false;\r\n    isActive_control_st = false;\r\n    isActive_zones_30 = false;\r\n    isActive_zones_buffer = false;\r\n    isActive_twitter = false;\r\n\r\n    year: number = 2010;\r\n\r\n    divCameraPos: HTMLElement;\r\n\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.hostDiv = solution.hostDiv;\r\n\r\n        // console.log(1);\r\n        if (this.solution.PARAM.local_ui !== undefined) {\r\n            if((this.solution.PARAM.local_ui as boolean) === true) {\r\n                this.appendUI();\r\n            }\r\n        } else {\r\n            this.appendUI();\r\n        }\r\n        \r\n    }\r\n    public appendUI() {\r\n\r\n        const mainMenu = document.createElement('div');\r\n        mainMenu.style.position = 'absolute';\r\n        mainMenu.style.margin = '5px';\r\n        this.hostDiv.append(mainMenu);\r\n\r\n\r\n        \r\n        const divCameraPos = document.createElement('dv');\r\n        divCameraPos.style.display = 'flex';\r\n        divCameraPos.style.marginBottom = '10px';\r\n        divCameraPos.textContent = 'pos target';\r\n        this.divCameraPos = divCameraPos;\r\n        mainMenu.append(divCameraPos);\r\n\r\n        // let checkBoxUIA = getCheckBox('high_low_connectedness_user');\r\n        // mainMenu.append(checkBoxUIA.div);\r\n        // checkBoxUIA.checkBox.onchange = () => {\r\n        //     if (checkBoxUIA.checkBox.checked === true){\r\n        //         this.isActive_high_low_connectedness_user = true;\r\n\r\n        //     } else {\r\n        //         this.isActive_high_low_connectedness_user = false;\r\n        //     }\r\n        // }\r\n        const divInputColor = document.createElement('input');\r\n        mainMenu.append(divInputColor)\r\n        divInputColor.type = 'color';\r\n        divInputColor.oninput = () => {\r\n            this.solution.drawing.updateColor(divInputColor.value);\r\n            // console.log(divInputColor.value)\r\n            // if (this.capture) {\r\n            //     const colArray = hex2RGBA(divInputColor.value)\r\n            //     // this.capture.opacity = +sl3.slider.value * 0.01;\r\n            //     this.capture.rgb = colArray;\r\n            // //     console.log(colArray)\r\n            // }\r\n        }\r\n\r\n        let checkBoxUIB = getCheckBox('main street');\r\n        mainMenu.append(checkBoxUIB.div);\r\n        checkBoxUIB.checkBox.checked = true;\r\n        checkBoxUIB.checkBox.onchange = () => {\r\n            if (checkBoxUIB.checkBox.checked === true) {\r\n                this.isActiveMainStreet = true;\r\n            } else {\r\n                this.isActiveMainStreet = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUI_OSM = getCheckBox('OSM street');\r\n        mainMenu.append(checkBoxUI_OSM.div);\r\n        checkBoxUI_OSM.checkBox.onchange = () => {\r\n            if (checkBoxUI_OSM.checkBox.checked === true) {\r\n                this.isActive_streetOSM = true;\r\n            } else {\r\n                this.isActive_streetOSM = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUIC = getCheckBox('treated street');\r\n        mainMenu.append(checkBoxUIC.div);\r\n        checkBoxUIC.checkBox.onchange = () => {\r\n            if (checkBoxUIC.checkBox.checked === true) {\r\n                this.isActive_treated_st = true;\r\n            } else {\r\n                this.isActive_treated_st = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUID = getCheckBox('control street');\r\n        mainMenu.append(checkBoxUID.div);\r\n        checkBoxUID.checkBox.onchange = () => {\r\n            if (checkBoxUID.checkBox.checked === true) {\r\n                this.isActive_control_st = true;\r\n            } else {\r\n                this.isActive_control_st = false;\r\n            }\r\n        }\r\n        let checkBoxUIE = getCheckBox('zones 30');\r\n        mainMenu.append(checkBoxUIE.div);\r\n        checkBoxUIE.checkBox.onchange = () => {\r\n            if (checkBoxUIE.checkBox.checked === true) {\r\n                this.isActive_zones_30 = true;\r\n            } else {\r\n                this.isActive_zones_30 = false;\r\n            }\r\n        }\r\n\r\n\r\n        let slider = getSlider('Year')\r\n        slider.div.style.marginTop = '25px';\r\n        slider.text.textContent = 'Year: 2019'\r\n        mainMenu.append(slider.div);\r\n\r\n        slider.slider.oninput = () => {\r\n            this.year = +slider.slider.value;\r\n            slider.text.textContent = 'Year: ' + slider.slider.value;\r\n            this.solution.drawing.updateYear(+slider.slider.value);\r\n        }\r\n\r\n\r\n        //  ..............................\r\n\r\n        let checkBoxUI_Node = getCheckBox('twitter data');\r\n        checkBoxUI_Node.div.style.marginTop = '25px';\r\n        mainMenu.append(checkBoxUI_Node.div);\r\n        checkBoxUI_Node.checkBox.onchange = () => {\r\n            if (checkBoxUI_Node.checkBox.checked === true) {\r\n                this.isActive_twitter = true;\r\n            } else {\r\n                this.isActive_twitter = false;\r\n            }\r\n        }\r\n        let sliderDataScale = getSlider('Scale', '1', '10');\r\n        sliderDataScale.text.textContent = 'Scale: 1'\r\n        mainMenu.append(sliderDataScale.div);\r\n        sliderDataScale.slider.defaultValue = '1';\r\n        sliderDataScale.slider.oninput = () => {\r\n            this.year = +sliderDataScale.slider.value;\r\n            sliderDataScale.text.textContent = 'Scale: ' + sliderDataScale.slider.value;\r\n            this.solution.dataTwitter.dataScale = +sliderDataScale.slider.value;\r\n        }\r\n        let sliderDataScaleColor = getSlider('Color', '1.', '50.');\r\n        sliderDataScaleColor.text.textContent = 'Color: 1'\r\n        mainMenu.append(sliderDataScaleColor.div);\r\n        sliderDataScaleColor.slider.defaultValue = '1';\r\n        sliderDataScaleColor.slider.oninput = () => {\r\n            this.year = +sliderDataScaleColor.slider.value;\r\n            sliderDataScaleColor.text.textContent = 'Color: ' + sliderDataScaleColor.slider.value;\r\n            this.solution.dataTwitter.colorScale = +sliderDataScaleColor.slider.value;\r\n        }\r\n\r\n        let checkBoxAni = getCheckBox('Animation');\r\n        checkBoxAni.checkBox.defaultChecked = true;\r\n        mainMenu.append(checkBoxAni.div);\r\n        checkBoxAni.checkBox.onchange = () => {\r\n            if (checkBoxAni.checkBox.checked === true) {\r\n                this.solution.dataTwitter.active = true;\r\n            } else {\r\n                this.solution.dataTwitter.active = false;\r\n            }\r\n            this.solution.dataTwitter.updateAnimation();\r\n        }\r\n\r\n        const theField = {\r\n            noNeighbsLog: 'noNeighbsLog',\r\n            noNeighbsLogDensity: 'noNeighbsLogDensity',\r\n            noNeighbsRaw: 'noNeighbsRaw',\r\n            noNeighbsWins: 'noNeighbsWins',\r\n            noTwtsLog: 'noTwtsLog',\r\n            noTwtsLogDensity: 'noTwtsLogDensity',\r\n            noTwtsRaw: 'noTwtsRaw',\r\n            noTwtsWins: 'noTwtsWins',\r\n            noUsersLog: 'noUsersLog',\r\n            noUsersLogDensity: 'noUsersLogDensity',\r\n            noUsersRaw: 'noUsersRaw',\r\n            noUsersWins: 'noUsersWins',\r\n            treatmentCategory: 'treatmentCategory',\r\n        }\r\n\r\n        const optionList = document.createElement('select');\r\n        mainMenu.append(optionList);\r\n        for (let i in theField) {\r\n            const option = document.createElement('option')\r\n            option.value = i;\r\n            option.textContent = i\r\n            optionList.appendChild(option)\r\n        }\r\n\r\n        optionList.onchange = (e) => {\r\n        //     console.log((e.target as any).value)\r\n            this.solution.dataTwitter.updateMesh((e.target as any).value);\r\n        };\r\n\r\n    }\r\n}\r\n\r\n\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};\r\n\r\nconst getSlider = (title: string, min: string = '2009', max: string = '2015') => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = min;\r\n    slider.max = max;\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider, text\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, MercatorProjection, getCSVFromURL, NJSCORE } from '../../../../lib';\r\nimport { getJSONFromURL, } from 'njscore';\r\n\r\nimport { FilterGLViewDarkForDarken } from '../01_JSAPI/Tint/FilterGLViewDarkForDarken';\r\nimport { Drawing } from './Drawing';\r\nimport { DataTwitter } from './DataTwitter';\r\n\r\nimport { UI } from './UI';\r\nexport class Solution extends RendererThree {\r\n\r\n    drawing: Drawing;\r\n    ui: UI;\r\n\r\n    meshAreaGon: THREE.Mesh;\r\n    meshPolygon2: THREE.Mesh;\r\n\r\n    pts: number[] = [];\r\n\r\n    dataTwitter: DataTwitter;\r\n\r\n    xOFf = -15478803.88731685;\r\n    yOFf = -4766681.448690384;\r\n    scale = 0.01;\r\n\r\n    PARAM: any;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        let paramURL = NJSCORE.BrowserUtility.getAllUrlParams();\r\n        this.PARAM = JSON.parse(JSON.stringify(paramURL));\r\n        // console.log(this.PARAM);\r\n\r\n\r\n        this.drawing = new Drawing(this);\r\n        this.dataTwitter = new DataTwitter(this);\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n        const d = new FilterGLViewDarkForDarken(glCtx, 0.5, 5);\r\n        d.Render(glCtx);\r\n\r\n\r\n\r\n        this.ui = new UI(this);\r\n        this.camera.position.set(0, 100, 100);\r\n\r\n\r\n    }\r\n    public projectionToMercator(lon: number, lat: number) {\r\n        const [xPro, yPro] = MercatorProjection(lon, lat);\r\n        return [\r\n            (xPro + this.xOFf) * this.scale,\r\n            (yPro + this.yOFf) * this.scale\r\n        ];\r\n    }\r\n\r\n    public update(scene: THREE.Scene) {\r\n        this.drawing.update();\r\n        this.dataTwitter?.update();\r\n\r\n        const pos = `Pos: ${this.camera.position.x}, ${this.camera.position.y}, ${this.camera.position.z}; Target: ${this.controls.target.x}, ${this.controls.target.y}, ${this.controls.target.z}`;\r\n        if (this.ui.divCameraPos !== undefined) {\r\n            this.ui.divCameraPos.textContent = pos;\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":["FilterGLViewDarkForDarken","gl","program","fragmentShader","vertexShader","matrixLocation","posBuffer","colBuffer","vertexs","posLocAtt","colLocAtt","matLoc","colLoc","cVecLoc","mouseLoc","timeGL","vShader","fShader","v","f","positionAttribLocation","colorAttribLocation","translation","color","colArray","this","Math","random","InitShader","GLShaderCommon","VERTEX_SHADER","FRAGMENT_SHADER","col","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","getAttribLocation","type","FLOAT","stride","BYTES_PER_ELEMENT","offset","vertexAttribPointer","enableVertexAttribArray","useProgram","primitiveType","TRIANGLES","drawArrays","Drawing","solution","streetOSM","routesTreated","routesControl","zones30","zones15","routesMain","meshTwitter","meshStreetOSM","meshNode","meshTreated","meshControl","meshMainStreet","meshZones30","meshPolygon","polygonRingID","polygonRings","yearForPolygonMesh","selectedYear","renderMultiPolygon","scene","paths","colorArray","meshes","positions","multi","length","multiPolygon","polyI","polygon","thePolygon","shape","i","projectionToMercator","x","y","push","THREE","geometry","mat","side","transparent","opacity","mesh","add","rotateOnAxis","PI","renderPoints","material","vertexColors","size","colors","route","j","k","setAttribute","computeBoundingSphere","getJSONFromURL","then","data","LineSeg","start","geoJSON","renderCustomPolygon","updateYear","year","undefined","forEach","m","visible","c","hexToRGBANormalized","ui","isActiveMainStreet","r","g","b","isActive_streetOSM","isActive_treated_st","isActive_control_st","isActive_zones_30","dataTwitter","isActive_twitter","updateColor","json","yearForPolygonID","Object","entries","yr","key","theValue","count","theKey","theIDs","id","value","value_mn_rescale","outPTs","outer_ring","Vector3","inner_rings","holePath","moveTo","lineTo","holes","setRGB","translateY","indices","floor","setIndex","DataTwitter","active","dataRaw","t","dataScale","colorScale","pos","thePath","PARAM","initMesh","cell","keyIndex","removeMesh","remove","updateAnimation","numVertices","attributes","position","o","getX","z","getZ","sin","cos","p","setXYZ","valNorm","needsUpdate","computeVertexNormals","UI","hostDiv","isActive_zones_buffer","divCameraPos","local_ui","appendUI","mainMenu","document","createElement","style","margin","append","display","marginBottom","textContent","divInputColor","oninput","drawing","checkBoxUIB","getCheckBox","div","checkBox","checked","onchange","checkBoxUI_OSM","checkBoxUIC","checkBoxUID","checkBoxUIE","slider","getSlider","marginTop","text","checkBoxUI_Node","sliderDataScale","defaultValue","sliderDataScaleColor","checkBoxAni","defaultChecked","optionList","noNeighbsLog","noNeighbsLogDensity","noNeighbsRaw","noNeighbsWins","noTwtsLog","noTwtsLogDensity","noTwtsRaw","noTwtsWins","noUsersLog","noUsersLogDensity","noUsersRaw","noUsersWins","treatmentCategory","option","appendChild","e","updateMesh","target","title","min","max","Solution","meshAreaGon","meshPolygon2","pts","xOFf","yOFf","scale","paramURL","NJSCORE","JSON","parse","stringify","light","camera","canvasGL","pointerEvents","mixBlendMode","width","clientWidth","height","clientHeight","glCtx","getContext","d","Render","set","lon","lat","MercatorProjection","xPro","yPro","update","controls","RendererThree"],"sourceRoot":""}