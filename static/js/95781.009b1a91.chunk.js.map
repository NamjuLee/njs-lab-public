{"version":3,"file":"static/js/95781.009b1a91.chunk.js","mappings":"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","sources":["njslab/app-legacy/Implementation/Demos/Demo12WebGL1/Core/index.ts","njslab/app-legacy/Implementation/Demos/Demo12WebGL1/Utility/GLShaderCommon.ts","njslab/app-legacy/Implementation/Demos/Demo12WebGL1/Geometry/Tri.ts","njslab/app-legacy/Implementation/Demos/Demo12WebGL1/index.ts"],"sourcesContent":["import { WebGL1 } from '..';\r\n\r\nexport class CoreWebgl {\r\n    app: WebGL1;\r\n\r\n    gl: WebGLRenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: WebGL1) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.divHost) {\r\n            this.app.divHost.appendChild(this.canvas);\r\n            this.canvas.width = this.app.divHost.clientWidth;\r\n            this.canvas.height = this.app.divHost.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl');\r\n        if (gl) { this.gl = gl; }\r\n\r\n        this.loop(this.gl);\r\n    }\r\n    loop(gl: WebGLRenderingContext) {\r\n        this.clear(gl);\r\n        // requestAnimationFrame(() => { this.loop(gl); });\r\n        // this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        // this.app.Loop(this.ctx);\r\n        console.log('working');\r\n    }\r\n    clear(gl: WebGLRenderingContext) {\r\n        gl.clearColor(0.5, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","\r\nexport class GLShaderCommon {\r\n\r\n    static getShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGLRenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGLRenderingContext, type: WebGLShader, shaderString: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGLRenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n\r\nexport class Tri {\r\n    v = `\r\n        attribute vec3 a_position;\r\n        uniform float uPointSize;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n            v_color = gl_Position;\r\n        }\r\n    `;\r\n    f = `\r\n        precision mediump float;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main(void) {\r\n            // finalColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n            // gl_FragColor = finalColor;\r\n            gl_FragColor = v_color + 0.5;\r\n        }\r\n    `;\r\n\r\n    gl: WebGLRenderingContext;\r\n\r\n    vShader: WebGLShader;\r\n    fShader: WebGLShader;\r\n\r\n    program: WebGLProgram;\r\n\r\n    aPositionLoc: number;\r\n    uPointSizeLoc: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this.gl = gl;\r\n        this.initShader(gl);\r\n    }\r\n    initShader(gl: WebGLRenderingContext) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, this.v);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, this.f);\r\n        if (vShader && fShader) {\r\n            this.vShader = vShader;\r\n            this.fShader = fShader;\r\n            let program = GLShaderCommon.createProgram(gl, this.vShader, this.fShader, true);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.aPositionLoc = gl.getAttribLocation(this.program, 'a_position');\r\n                this.uPointSizeLoc = gl.getUniformLocation(this.program, 'uPointSize');\r\n                gl.useProgram(null);\r\n                this.initGeo(gl);\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error');\r\n        }\r\n    }\r\n    initGeo(gl: WebGLRenderingContext) {\r\n        let aryVerts = new Float32Array([\r\n            0, 0.5, 0,\r\n            0.5, -0.5, 0,\r\n            -0.5, -0.5, 0\r\n        ]);\r\n        let bufVerts = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVerts);\r\n        gl.bufferData(gl.ARRAY_BUFFER, aryVerts, gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        gl.useProgram(this.program);\r\n        gl.uniform1f(this.uPointSizeLoc, 50.0);\r\n\r\n        // how its down without VAOs\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVerts);\r\n        gl.enableVertexAttribArray(this.aPositionLoc);\r\n        gl.vertexAttribPointer(this.aPositionLoc, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.gl.drawArrays(gl.TRIANGLES, 0, 3);\r\n    }\r\n    Dummy() {\r\n        //\r\n    }\r\n}","import { CoreWebgl } from './Core';\r\nimport { Tri } from './Geometry/Tri';\r\n\r\nexport class WebGL1 {\r\n    divHost: HTMLElement;\r\n    coreWebgl: CoreWebgl;\r\n    public static Init(id: string) {\r\n        new WebGL1(id);\r\n    }\r\n    constructor(id: string) {\r\n        const divHost = document.getElementById(id);\r\n        if (divHost) { this.divHost = divHost; }\r\n        this.coreWebgl = new CoreWebgl(this);\r\n\r\n        const d = new Tri(this.coreWebgl.gl);\r\n        d.Dummy();\r\n    }\r\n}"],"names":["CoreWebgl","constructor","app","gl","canvas","this","document","createElement","divHost","appendChild","width","clientWidth","height","clientHeight","getContext","loop","clear","console","log","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","GLShaderCommon","static","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertexShader","fragmentShader","needValidate","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","Tri","v","f","vShader","fShader","aPositionLoc","uPointSizeLoc","initShader","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","getAttribLocation","getUniformLocation","initGeo","aryVerts","Float32Array","bufVerts","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","uniform1f","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","Dummy","WebGL1","id","coreWebgl","getElementById"],"sourceRoot":""}