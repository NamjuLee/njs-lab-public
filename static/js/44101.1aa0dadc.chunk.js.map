{"version":3,"file":"static/js/44101.1aa0dadc.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Core/DefinitionIndeCanvasCore.ts","njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Definition/TFModel01HorsepowerAndMilesPerGallon.ts"],"sourcesContent":["import { IndependentPanelCanvas } from '../../../../../../../lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/IndependentPanelCanvas';\r\n\r\nimport { TFProject } from '..';\r\nexport class DefinitionIndeCanvasCore {\r\n    scene: TFProject;\r\n    indeCanvas: IndependentPanelCanvas;\r\n    mOffX = -12;\r\n    mOffY = -12;\r\n    constructor(scene: TFProject, width: number = 650, height: number = 350) {\r\n        this.scene = scene;\r\n        this.scene.definitions.push(this);\r\n        this.InitIndeCanvas(width, height);\r\n    }\r\n    InitIndeCanvas(width: number = 650, height: number = 350) {\r\n        if (this.scene.implementation.app.needUI) {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 50, 50, width, height, true);\r\n        } else {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 1, -25, width, height, true);\r\n        }\r\n        this.indeCanvas.title = 'TF Env';\r\n        this.indeCanvas.btnHam.isHidden = true;\r\n        this.indeCanvas.btnMini.isHidden = true;\r\n        this.indeCanvas.RenderIndependentCanvas = (ctx: CanvasRenderingContext2D) => (this.RenderIndependentCanvas(ctx));\r\n    }\r\n    get width() {\r\n        return this.indeCanvas.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.indeCanvas.canvas.height;\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    MouseMove(x: number, y: number) { /* */ }\r\n    MouseMovePre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMove(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDown(x: number, y: number) { /* */ }\r\n    MouseDownPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDown(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseUp(x: number, y: number) { /* */ }\r\n    MouseUpPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseUp(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDrag(x: number, y: number) { /* */ }\r\n    MouseDragPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDrag(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseLeftClick(x: number, y: number) { /* */ }\r\n    MouseLeftClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseLeftClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseMiddleClick(x: number, y: number) { /* */ }\r\n    MouseMiddleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMiddleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseRightClick(x: number, y: number) { /* */ }\r\n    MouseRightClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseRightClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDoubleClick(x: number, y: number) { /* */ }\r\n    MouseDoubleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDoubleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseWheel(x: number, y: number, v: number) { /* */ }\r\n    MouseWheelPre(x: number, y: number, v: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseWheel(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY, v);\r\n    }\r\n\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// // https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFModel01HorsepowerAndMilesPerGallon extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    // tfModel: ModelForHorsepowerGallon;\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n\r\n        TFDataUtility.getData().then((d: any) => {\r\n            // this.tfModel = new ModelForHorsepowerGallon();\r\n            // this.train(d);\r\n            this.train(d);\r\n\r\n\r\n        });\r\n\r\n    }\r\n    async train(d: any) {\r\n        const tensorData = convertToTensor(d);\r\n        // console.log(tensorData);\r\n        const { inputs, labels } = tensorData;\r\n        // console.log(inputs, labels);\r\n        const model = createModel();\r\n\r\n        tfvis.show.modelSummary({ name: 'Model Summary' }, model);\r\n        // Train the model\r\n        await trainModel(model, inputs, labels);\r\n        // console.log('Done Training');\r\n        testModel(model, d, tensorData);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n            // console.log(xx);\r\n            // console.log(yy);\r\n            // ............................ train\r\n            // this.tfModel.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        const curveX: number[] = [];\r\n        for (let x = -1; x <= 1; x += 0.05) {\r\n            curveX.push(x);\r\n        }\r\n    }\r\n}\r\n\r\nfunction testModel(model: tf.Sequential, inputData: any, normalizationData: any) {\r\n    const { inputMax, inputMin, labelMin, labelMax } = normalizationData;\r\n\r\n    // Generate predictions for a uniform range of numbers between 0 and 1;\r\n    // We un-normalize the data by doing the inverse of the min-max scaling\r\n    // that we did earlier.\r\n    const [xs, preds] = tf.tidy(() => {\r\n\r\n        const xs = tf.linspace(0, 1, 100);\r\n        const preds = model.predict(xs.reshape([100, 1])) as any;\r\n\r\n        const unNormXs = xs\r\n            .mul(inputMax.sub(inputMin))\r\n            .add(inputMin);\r\n\r\n        const unNormPreds = preds.mul(labelMax.sub(labelMin))\r\n            .add(labelMin);\r\n\r\n        // Un-normalize the data\r\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\r\n    });\r\n\r\n\r\n    const predictedPoints = Array.from(xs).map((val, i) => {\r\n        return { x: val, y: preds[i] };\r\n    });\r\n\r\n    const originalPoints = inputData.map((d: any) => ({\r\n        x: d.horsepower, y: d.mpg,\r\n    }));\r\n\r\n    tfvis.render.scatterplot(\r\n        { name: 'Model Predictions vs Original Data' },\r\n        { values: [originalPoints, predictedPoints], series: ['original', 'predicted'] },\r\n        {\r\n            xLabel: 'Horsepower',\r\n            yLabel: 'MPG',\r\n            height: 300\r\n        }\r\n    );\r\n}\r\n\r\n\r\nasync function trainModel(model: tf.Sequential, inputs: tf.Tensor<tf.Rank>, labels: tf.Tensor<tf.Rank>) {\r\n    // Prepare the model for training.\r\n    model.compile({\r\n        optimizer: tf.train.adam(),\r\n        loss: tf.losses.meanSquaredError,\r\n        metrics: ['mse'],\r\n    });\r\n\r\n    const batchSize = 32;\r\n    const epochs = 50;\r\n\r\n    return await model.fit(inputs, labels, {\r\n        batchSize,\r\n        epochs,\r\n        shuffle: true,\r\n        callbacks: tfvis.show.fitCallbacks(\r\n            { name: 'Training Performance' },\r\n            ['loss', 'mse'],\r\n            { height: 200, callbacks: ['onEpochEnd'] }\r\n        )\r\n    });\r\n}\r\n\r\n\r\nexport const createModel = () => {\r\n    // Create a sequential model\r\n    const model = tf.sequential();\r\n    // Add a single hidden layer\r\n    model.add(tf.layers.dense({\r\n        inputShape: [1],\r\n        units: 16,\r\n        useBias: true\r\n    }));\r\n    // Add an output layer\r\n    model.add(tf.layers.dense({\r\n        units: 1,\r\n        useBias: true\r\n    }));\r\n    return model;\r\n};\r\nexport const convertToTensor = (data: any) => {\r\n    // Wrapping these calculations in a tidy will dispose any\r\n    // intermediate tensors.\r\n\r\n    return tf.tidy(() => {\r\n        // Step 1. Shuffle the data\r\n        tf.util.shuffle(data);\r\n\r\n        // Step 2. Convert data to Tensor\r\n        const inputs = data.map((d: any) => d.horsepower);\r\n        const labels = data.map((d: any) => d.mpg);\r\n\r\n        const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\r\n        const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\r\n\r\n        // Step 3. Normalize the data to the range 0 - 1 using min-max scaling\r\n        const inputMax = inputTensor.max();\r\n        const inputMin = inputTensor.min();\r\n        const labelMax = labelTensor.max();\r\n        const labelMin = labelTensor.min();\r\n\r\n        const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\r\n        const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\r\n\r\n        return {\r\n            inputs: normalizedInputs,\r\n            labels: normalizedLabels,\r\n            // Return the min/max bounds so we can use them later.\r\n            inputMax,\r\n            inputMin,\r\n            labelMax,\r\n            labelMin,\r\n        };\r\n    });\r\n};"],"names":["DefinitionIndeCanvasCore","constructor","scene","width","height","indeCanvas","mOffX","mOffY","this","definitions","push","InitIndeCanvas","implementation","app","needUI","IndependentPanelCanvas","viewController","NUIWrapper","NUI","independentPanelWrapper","title","btnHam","isHidden","btnMini","RenderIndependentCanvas","ctx","canvas","Init","MouseMove","x","y","MouseMovePre","IsMouseInsidePanel","vec","HeadHeight","MouseDown","MouseDownPre","MouseUp","MouseUpPre","MouseDrag","MouseDragPre","MouseLeftClick","MouseLeftClickPre","MouseMiddleClick","MouseMiddleClickPre","MouseRightClick","MouseRightClickPre","MouseDoubleClick","MouseDoubleClickPre","MouseWheel","v","MouseWheelPre","TFModel01HorsepowerAndMilesPerGallon","tfProjct","super","xpos","ypos","xspeed","yspeed","xdirection","ydirection","rad","vs","selVec","undefined","TFDataUtility","then","d","train","async","tensorData","convertToTensor","inputs","labels","model","createModel","tfvis","name","compile","optimizer","tf","loss","metrics","batchSize","epochs","fit","shuffle","callbacks","trainModel","inputData","normalizationData","inputMax","inputMin","labelMin","labelMax","xs","preds","predict","reshape","unNormXs","mul","sub","add","unNormPreds","dataSync","predictedPoints","Array","from","map","val","i","originalPoints","horsepower","mpg","values","series","xLabel","yLabel","testModel","m","NVector3","MapX","MapY","length","MathUtility","GridLine","strokeStyle","xInterval","yInterval","lineWidth","x0","y0","x1","y1","beginPath","moveTo","lineTo","stroke","fillStyle","rect","closePath","fill","xx","yy","RenderLine","arc","Math","PI","font","textAlign","fillText","toFixed","curveX","inputShape","units","useBias","data","inputTensor","labelTensor","max","min","div"],"sourceRoot":""}