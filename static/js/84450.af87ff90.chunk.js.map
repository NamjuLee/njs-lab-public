{"version":3,"file":"static/js/84450.af87ff90.chunk.js","mappings":"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","sources":["njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/ColorUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/VectorUtil.ts","../node_modules/@turf/difference/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/TurfUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/DrawingPreest.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/constant.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/SceneManager.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/Base/GeometryBase.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/Math.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Geometry/index.ts","../node_modules/@turf/distance/index.ts","../node_modules/@turf/length/index.ts","../node_modules/@turf/area/index.ts","../node_modules/point-in-polygon-hao/dist/pointInPolygon.mjs","../node_modules/@turf/boolean-point-in-polygon/index.ts","../node_modules/@turf/points-within-polygon/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/HexmapDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Geometry/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Common/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ActiveCommander/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/MapboxGLWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/DeckGL/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/CanvasDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/UI/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/SceneState/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ApiWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/index.ts","../node_modules/@turf/invariant/index.ts"],"sourcesContent":["export const hex2RGB = (hex: string, isGray: boolean = false) => {\n    hex = hex.replace('#', '');\n    let r = parseInt(hex.substring(0, 2), 16);\n    let g = parseInt(hex.substring(2, 4), 16);\n    let b = parseInt(hex.substring(4, 6), 16);\n    if (isGray) {\n        let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\n        return [v, v, v];\n    } else {\n        return [r, g, b];\n    }\n}","export const distance = (v0: RVector3, v1: RVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n};\nexport const isInsideOfVecs = (v: RVector3, vecs: RVector3[]): boolean => {\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n    let x = v.x, y = v.y;\n    let inside = false;\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\n        let xi = vecs[i].x, yi = vecs[i].y;\n        let xj = vecs[j].x, yj = vecs[j].y;\n        let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nexport const isInsideEllipse = (cv: RVector3, m: RVector3, r0: number, r1: number, threshold: number = 5) => {\n    const x = Math.pow((m.x - cv.x), 2) / Math.pow(threshold + r0, 2);\n    const y = Math.pow((m.y - cv.y), 2) / Math.pow(threshold + r1, 2);\n    if (x + y <= 1) {\n        return true;\n    }\n    return false;\n};\nexport const closestPointOnLine = (pt: RVector3, p0: RVector3, p1: RVector3) => {\n    const A = p1.y - p0.y;\n    const B = p0.x - p1.x;\n    const C = p1.x * p0.y - p0.x * p1.y;\n    const dis = Math.abs(A * pt.x + B * pt.y + C) / Math.sqrt(A * A + B * B);\n    const proX = (B * (B * pt.x - A * pt.y) - A * C) / (A * A + B * B);\n    const proY = (A * (-B * pt.x + A * pt.y) - B * C) / (A * A + B * B);\n    return { x: proX, y: proY, dis: dis };\n};\nexport const getCosAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return dotProduct(normalize(v0), normalize(v1));\n};\nexport const getAngleByTwoVectorsRadian = (v0: RVector3, v1: RVector3): number => {\n    return Math.acos(getCosAngleByTwoVectors(v0, v1));\n};\nexport const getAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return getAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\n};\nexport const lengt = (v: RVector3): number => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n};\nexport const normalize = (v: RVector3): RVector3 => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.000001) {\n        return new RVector3(v.x, v.y, v.z);\n    }\n    return new RVector3(v.x / len, v.y / len, v.z / len);\n};\nexport const dotProduct = (v1: RVector3, v2: RVector3): number => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n};\nexport const crossProduct = (v1: RVector3, v2: RVector3): RVector3 => {\n    return new RVector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n};\nexport const divideByNum = (v0: RVector3, v1: RVector3, n: number = 5): RVector3[] => {\n    const vs: RVector3[] = [];\n    const xOff = (v1.x - v0.x) / n;\n    const yOff = (v1.y - v0.y) / n;\n    const zOff = (v1.z - v0.z) / n;\n    for (let j = 0; j < n; ++j) {\n        let x = v0.x + xOff * j;\n        let y = v0.y + yOff * j;\n        let z = v0.z + zOff * j;\n        vs.push(new RVector3(x, y, z));\n    }\n    return vs;\n};\nexport const getCenterVec = (vs: RVector3[]) => {\n    const v = new RVector3(0, 0, 0)\n\n    for (let i = 0; i < vs.length; ++i) {\n        v.x += vs[i].x;\n        v.y += vs[i].y;\n        v.lng += vs[i].lng;\n        v.lat += vs[i].lat;\n    }\n    \n    v.x /= vs.length;\n    v.y /= vs.length;\n    v.lng /= vs.length;\n    v.lat /= vs.length;\n    return v;\n};\nexport class RVector3 {\n    x: number = 0.0;\n    y: number = 0.0;\n    z: number = 0.0;\n    lng: number = 0.0;\n    lat: number = 0.0;\n    ele: number = 0.0;\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n};","import { Polygon, MultiPolygon, Feature, FeatureCollection } from \"geojson\";\nimport polygonClipping, { Geom } from \"polygon-clipping\";\nimport { polygon, multiPolygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\n\n/**\n * Finds the difference between multiple {@link Polygon|polygons} by clipping the subsequent polygon from the first.\n *\n * @name difference\n * @param {FeatureCollection<Polygon|MultiPolygon>} features input Polygon features\n * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)\n * @example\n * var polygon1 = turf.polygon([[\n *   [128, -26],\n *   [141, -26],\n *   [141, -21],\n *   [128, -21],\n *   [128, -26]\n * ]], {\n *   \"fill\": \"#F00\",\n *   \"fill-opacity\": 0.1\n * });\n * var polygon2 = turf.polygon([[\n *   [126, -28],\n *   [140, -28],\n *   [140, -20],\n *   [126, -20],\n *   [126, -28]\n * ]], {\n *   \"fill\": \"#00F\",\n *   \"fill-opacity\": 0.1\n * });\n *\n * var difference = turf.difference(turf.featureCollection([polygon1, polygon2]));\n *\n * //addToMap\n * var addToMap = [polygon1, polygon2, difference];\n */\nfunction difference(\n  features: FeatureCollection<Polygon | MultiPolygon>\n): Feature<Polygon | MultiPolygon> | null {\n  const geoms: Array<Geom> = [];\n\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least two features\");\n  }\n\n  const properties = features.features[0].properties || {};\n\n  const differenced = polygonClipping.difference(geoms[0], ...geoms.slice(1));\n  if (differenced.length === 0) return null;\n  if (differenced.length === 1) return polygon(differenced[0], properties);\n  return multiPolygon(differenced, properties);\n}\n\nexport { difference };\nexport default difference;\n","import { Polygon } from 'geojson'\nimport * as turf from '@turf/turf';\n\nexport const difference = (area: Polygon | any, polygons: Polygon[], boolean) => {\n    for (let i = 0; i < polygons.length; ++i) {\n        if (boolean[i]) {\n            // @ts-ignore\n            area = turf.difference(area, polygons[i]);\n        }\n    };\n    return area;\n};\n\nexport const computePathPolygon = (object: Polygon, projection: (lon: number, lat: number) => number[]): Path2D => {\n    const path = new Path2D();\n    let x, y;\n    for (let j = 0; j < object['geometry']['coordinates'].length; ++j) {\n        // if (j === 0) {\n        const pathOut = new Path2D();\n        for (let i = object['geometry']['coordinates'][j].length - 1; i > -1; --i) {\n\n            const p = object['geometry']['coordinates'][j][i];\n            if (i === object['geometry']['coordinates'][j].length - 1) {\n                const sp = projection(p[0], p[1])\n                pathOut.moveTo(sp[0], sp[1]);\n            } else {\n                const sp = projection(p[0], p[1])\n                pathOut.lineTo(sp[0], sp[1]);\n            }\n        }\n        pathOut.closePath();\n        path.addPath(pathOut);\n    }\n    return path;\n};\n","import { RVector3 } from './';\nexport const drawingPoint = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n    ctx.beginPath();\n    ctx.arc(x, y, 10, 0, Math.PI * 2.0);\n    ctx.closePath();\n    ctx.fill();\n};\nexport const renderControlPoint = (ctx: CanvasRenderingContext2D, vs: RVector3[], fillColor = 'rgba(200, 200, 200, 1.0)', strokeColor = 'rgba(50, 50, 50, 1.0)', lineWidth = 3 ) => {\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = lineWidth;\n    vs.forEach(v => {\n        ctx.beginPath();\n        ctx.arc(v.x, v.y, 8, 0, Math.PI * 2.0);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    });\n};","export const LANDUSE_TYPE_MAPPING = {\n  R: { text: 'Residential', color: '#ffff6e' },\n  B: { text: 'Business', color: '#f59700' },\n  X: { text: 'Residential & Business', color: '#FFC25F' },\n  A: { text: 'Agriculture', color: '#9EFF99' },\n  LIBRARY: { text: 'Library', color: '#04E762' },\n  SCHOOL: { text: 'School', color: '#95E06C' },\n  GOVERNMENT: { text: 'Government', color: '#D741A7' },\n  HEALTH: { text: 'Health', color: '#008BF8' },\n  COMMUNITY: { text: 'Community', color: '#00CECB' },\n  RELIGION: { text: 'Religion', color: '#9BFFFD' },\n  C: { text: 'Other CAI', color: '#D544CC' },\n  O: { text: 'Other BSLs', color: 'gray' }\n}\nexport const FUNDING_STATUS_MAPPING = {\n  None: {\n    text: 'Not assigned',\n    color: 'gray'\n  },\n  default: {\n    text: 'Default',\n    color: '#5287E6'\n  },\n  pending: {\n    text: 'Pending',\n    color: '#746CDD'\n  },\n  assigned: {\n    text: 'Assigned',\n    color: '#A355D4'\n  }\n}\nexport const TYPE_GEOMETRY = {\n  RECT: 'RECT',\n  CIRCLE: 'CIRCLE',\n  POLYGON: 'POLYGON',\n}","export class SceneManager {\n  private histories: any = [];\n  private currentIndex = -1;\n  public reset() {\n    this.histories = [];\n    this.currentIndex = -1;\n  }\n  public push(data: any) {\n    if (this.currentIndex < this.histories.length - 1) {\n      this.histories.splice(this.currentIndex + 1, this.histories.length);\n    }\n    this.histories.push(data);\n    this.currentIndex = this.histories.length - 1;\n  }\n  public getCurrentIndex() {\n    return this.currentIndex;\n  }\n  public getHistoryLength() {\n    return this.histories.length;\n  }\n  public getCurrentState() {\n    return { currentIndex: this.getCurrentIndex(), historyNum: this.getHistoryLength() };\n  }\n  public undo() {\n    if (this.currentIndex === 0) { return undefined; }\n    this.currentIndex--;\n    return this.histories[this.currentIndex];\n  }\n  public redo() {\n    this.currentIndex++;\n    this.currentIndex = this.currentIndex < this.histories.length ? this.currentIndex : this.histories.length - 1;\n    return this.histories[this.currentIndex];\n  }\n}","import * as turf from '@turf/turf';\nimport { Polygon, MultiPolygon, GeoJsonProperties, Feature, Point, MultiPoint, FeatureCollection } from 'geojson';\n\nimport { Scene } from '../../../Scene';\nimport { TYPE_GEOMETRY, getUUID } from '../../../lib';\n\nexport class GeometryBase {\n    public scene: Scene;\n    public TYPE = TYPE_GEOMETRY.RECT;\n    public t = 0.1;\n    public id: string;\n    public capturedVecId: number = -1;\n    public isHovered: boolean = false;\n    public hasAnimation: boolean = false;\n    public updateNeeded: boolean = false;\n    public captureNeeded: boolean = false;\n    public referPoint: any = [];\n    protected _isSelected: boolean = false;\n\n    public polygonTurfOriginal: Polygon;\n    public polygonTurfSubtracted: Polygon;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.id = getUUID();\n\n        this.scene.push(this);\n    }\n    public get isSelected() {\n        return this._isSelected;\n    }\n    public set isSelected(v: boolean) {\n        this._isSelected = v;\n    }\n    public isInside(x: number, y: number) {\n        return false;\n    }\n    public translate(x: number, y: number) {\n        \n    }\n    public removeVertexLastVertex() {\n        \n    }\n    public update() {\n\n    }\n    public onMouseUp() {\n        \n    }\n    public onMouseClick(e) {\n\n    }\n    public onMouseDoubleClick(e) {\n\n    }\n    public shiftType() {\n        \n    }\n    public updateGeoProjection() {\n\n    }\n    public updateGhostPos(x: number, y: number) {\n\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        this.update();\n        this.renderPost(ctx);\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n\n    }\n    public toJson() {\n        \n    }\n    public updateWidthHight(width: number, height: number) {\n\n    }\n    public remove(): void {\n        this.scene.remove(this);\n    }\n    public toggleHexmap() {\n\n    }\n}","export const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\n    let d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\n        let r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\nexport const remap = (val: number, oldMin: number, oldMax: number, newMin: number, newMax: number) => {\n    return (((val - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin;\n};\nexport const remapNormalize = (CValue: number[]) => {\n    let valueOut = []\n    let domain = getDomain(CValue);\n    for (let d of CValue) {\n        valueOut.push(((d - domain[0]) / (domain[1] - domain[0])));\n    }\n    return valueOut;\n};\nexport const getDomain = (doubleList: number[]) => {\n    let domain = [];\n    let Min = Number.MAX_VALUE, Max = Number.MIN_VALUE;\n    for (let d of doubleList) {\n        if (Min > d) { Min = d; }\n        if (Max < d) { Max = d; }\n    }\n    domain.push(Min);\n    domain.push(Max);\n    return domain;\n};","import { RVector3, } from '../../../../lib';\n\nexport class AreaGeometry {\n\n    public vec: RVector3;\n\n    public vsRect: RVector3[] = [];\n\n    public segR = 36;\n    public vsCircle: RVector3[] = [];\n\n    public width = 200;\n    public height = 200;\n\n    constructor(vec: RVector3, width: number, height: number) {\n        this.vec = vec;\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n    public initRect() {\n        const widthHalf = this.width * 0.5;\n        const heightHalf = this.height * 0.5;\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y - heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y - heightHalf));\n    }\n    public initCircleVec() {\n        this.vsCircle = [];\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            const v = new RVector3(this.vec.x + x, this.vec.y + y, 0);\n            this.vsCircle.push(v)\n        }\n    }\n    public updateScreen(toScreen: (x: number, y: number)=> number[]) {\n        // console.log('update screen pos');\n\n        let sp = toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = sp[0];\n        this.vec.y = sp[1];\n\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            sp = toScreen(this.vsRect[i].lng, this.vsRect[i].lat);\n            this.vsRect[i].x = sp[0];\n            this.vsRect[i].y = sp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            // console.log(this.vs[i].lng, this.vs[i].lat)\n            sp = toScreen(this.vsCircle[i].lng, this.vsCircle[i].lat);\n            this.vsCircle[i].x = sp[0];\n            this.vsCircle[i].y = sp[1];\n            // console.log(this.vsCircle[i].x, this.vsCircle[i].y);\n        }\n\n        this.width = Math.abs(this.vsRect[0].x - this.vsRect[2].x);\n        this.height = Math.abs(this.vsRect[0].y - this.vsRect[2].y);\n    }\n    public updateProjection(toMap: (x: number, y: number)=> number[]) {\n        // console.log('update map pos');\n        const mp = toMap(this.vec.x, this.vec.y);\n        this.vec.lng = mp[0];\n        this.vec.lat = mp[1];\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            let mp = toMap(this.vsRect[i].x, this.vsRect[i].y);\n            this.vsRect[i].lng = mp[0];\n            this.vsRect[i].lat = mp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            let mp = toMap(this.vsCircle[i].x, this.vsCircle[i].y);\n            this.vsCircle[i].lng = mp[0];\n            this.vsCircle[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        let xSum = 0;\n        let ySum = 0;\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            xSum += this.vsRect[i].x;\n            ySum += this.vsRect[i].y;\n        }\n        this.vec.x = xSum / this.vsRect.length;\n        this.vec.y = ySum / this.vsRect.length;\n    }\n    public updateScreenPosCircle() {\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            // const v = new RVector3(this.vec.x + x, this.host.vec.y + y, 0);\n            // const [mx, my] = this.scene.common.toMap(x, y);\n            // this.vec.lng = mx;\n            // this.vec.lat = my;\n            this.vsCircle[i].x = this.vec.x + x;\n            this.vsCircle[i].y = this.vec.y + y;\n        }\n        // console.log('updateCircle');\n    }\n    public reset() {\n        this.vsRect = [];\n        this.vsCircle = [];\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n}","import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, Coord, Units } from \"@turf/helpers\";\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Coord|coordinates} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin coordinate\n * @param {Coord} to destination coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two coordinates\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n\n  var a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\n\nexport { distance };\nexport default distance;\n","import { Feature, FeatureCollection, GeometryCollection } from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { Units } from \"@turf/helpers\";\nimport { segmentReduce } from \"@turf/meta\";\n\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nfunction length(\n  geojson: Feature<any> | FeatureCollection<any> | GeometryCollection,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  // Calculate distance from 2-vertex line segments\n  return segmentReduce(\n    geojson,\n    (previousValue, segment) => {\n      const coords = segment!.geometry.coordinates;\n      return previousValue! + distance(coords[0], coords[1], options);\n    },\n    0\n  );\n}\n\nexport { length };\nexport default length;\n","import { Feature, FeatureCollection, Geometry } from \"geojson\";\nimport { earthRadius } from \"@turf/helpers\";\nimport { geomReduce } from \"@turf/meta\";\n\n/**\n * Calculates the geodesic area in square meters of one or more polygons.\n *\n * @name area\n * @param {GeoJSON} geojson input polygon(s) as {@link Geometry}, {@link Feature}, or {@link FeatureCollection}\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson: Feature<any> | FeatureCollection<any> | Geometry) {\n  return geomReduce(\n    geojson,\n    (value, geom) => {\n      return value + calculateArea(geom);\n    },\n    0\n  );\n}\n\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom: Geometry): number {\n  let total = 0;\n  let i;\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonArea(geom.coordinates);\n    case \"MultiPolygon\":\n      for (i = 0; i < geom.coordinates.length; i++) {\n        total += polygonArea(geom.coordinates[i]);\n      }\n      return total;\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n      return 0;\n  }\n  return 0;\n}\n\nfunction polygonArea(coords: any) {\n  let total = 0;\n  if (coords && coords.length > 0) {\n    total += Math.abs(ringArea(coords[0]));\n    for (let i = 1; i < coords.length; i++) {\n      total -= Math.abs(ringArea(coords[i]));\n    }\n  }\n  return total;\n}\n\n/**\n * @private\n * A constant factor used to compute the area of a polygon.\n * It's derived from the square of the Earth's radius divided by 2.\n *\n * @type {number}\n */\nconst FACTOR = (earthRadius * earthRadius) / 2;\n\n/**\n * @private\n * A constant used for converting degrees to radians.\n * Represents the ratio of PI to 180.\n *\n * @type {number}\n */\nconst PI_OVER_180 = Math.PI / 180;\n\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords: number[][]): number {\n  const coordsLength = coords.length - 1;\n\n  if (coordsLength <= 2) return 0;\n  let total = 0;\n\n  let i = 0;\n  while (i < coordsLength) {\n    const lower = coords[i];\n    const middle = coords[i + 1 === coordsLength ? 0 : i + 1];\n    const upper =\n      coords[i + 2 >= coordsLength ? (i + 2) % coordsLength : i + 2];\n\n    const lowerX = lower[0] * PI_OVER_180;\n    const middleY = middle[1] * PI_OVER_180;\n    const upperX = upper[0] * PI_OVER_180;\n\n    total += (upperX - lowerX) * Math.sin(middleY);\n\n    i++;\n  }\n\n  return total * FACTOR;\n}\n\nexport { area };\nexport default area;\n","function pointInPolygon(p, polygon) {\n    var i = 0;\n    var ii = 0;\n    var k = 0;\n    var f = 0;\n    var u1 = 0;\n    var v1 = 0;\n    var u2 = 0;\n    var v2 = 0;\n    var currentP = null;\n    var nextP = null;\n\n    var x = p[0];\n    var y = p[1];\n\n    var numContours = polygon.length;\n    for (i; i < numContours; i++) {\n        ii = 0;\n        var contourLen = polygon[i].length - 1;\n        var contour = polygon[i];\n\n        currentP = contour[0];\n        if (currentP[0] !== contour[contourLen][0] &&\n            currentP[1] !== contour[contourLen][1]) {\n            throw new Error('First and last coordinates in a ring must be the same')\n        }\n\n        u1 = currentP[0] - x;\n        v1 = currentP[1] - y;\n\n        for (ii; ii < contourLen; ii++) {\n            nextP = contour[ii + 1];\n\n            v2 = nextP[1] - y;\n\n            if ((v1 < 0 && v2 < 0) || (v1 > 0 && v2 > 0)) {\n                currentP = nextP;\n                v1 = v2;\n                u1 = currentP[0] - x;\n                continue\n            }\n\n            u2 = nextP[0] - p[0];\n\n            if (v2 > 0 && v1 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f > 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v1 > 0 && v2 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f < 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v2 === 0 && v1 < 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 < 0) {\n                f = u1 * v2 - u2 * v1;\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 === 0) {\n                if (u2 <= 0 && u1 >= 0) {\n                    return 0\n                } else if (u1 <= 0 && u2 >= 0) {\n                    return 0\n                }\n            }\n            currentP = nextP;\n            v1 = v2;\n            u1 = u2;\n        }\n    }\n\n    if (k % 2 === 0) { return false }\n    return true\n}\n\nexport default pointInPolygon;\n","import pip from \"point-in-polygon-hao\";\nimport {\n  BBox,\n  Feature,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Coord } from \"@turf/helpers\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  point: Coord,\n  polygon: Feature<G, P> | G,\n  options: {\n    ignoreBoundary?: boolean;\n  } = {}\n) {\n  // validation\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n\n  const pt = getCoord(point);\n  const geom = getGeom(polygon);\n  const type = geom.type;\n  const bbox = polygon.bbox;\n  let polys: any[] = geom.coordinates;\n\n  // Quick elimination if point is not inside bbox\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  let result = false;\n  for (var i = 0; i < polys.length; ++i) {\n    const polyResult = pip(pt, polys[i]);\n    if (polyResult === 0) return options.ignoreBoundary ? false : true;\n    else if (polyResult) result = true;\n  }\n\n  return result;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt: number[], bbox: BBox) {\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n}\n\nexport { booleanPointInPolygon };\nexport default booleanPointInPolygon;\n","import type {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  MultiPolygon,\n  MultiPoint,\n  Point,\n  GeoJsonProperties,\n  Position,\n} from \"geojson\";\nimport { booleanPointInPolygon as pointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { featureCollection, multiPoint } from \"@turf/helpers\";\nimport { geomEach, featureEach, coordEach } from \"@turf/meta\";\n\n/**\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\n *\n * @name pointsWithinPolygon\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties,\n>(\n  points:\n    | Feature<Point | MultiPoint, P>\n    | FeatureCollection<Point | MultiPoint, P>,\n  polygons: Feature<G> | FeatureCollection<G> | G\n): FeatureCollection<Point | MultiPoint, P> {\n  const results: Feature<Point | MultiPoint, P>[] = [];\n  featureEach(points, function (point) {\n    let contained = false;\n    if (point.geometry.type === \"Point\") {\n      geomEach(polygons, function (polygon) {\n        if (pointInPolygon(point as Feature<Point, P>, polygon)) {\n          contained = true;\n        }\n      });\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin: Position[] = [];\n      geomEach(polygons, function (polygon) {\n        coordEach(point as Feature<MultiPoint>, function (pointCoord) {\n          if (pointInPolygon(pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n      if (contained) {\n        results.push(\n          multiPoint(pointsWithin, point.properties) as Feature<MultiPoint, P>\n        );\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return featureCollection(results);\n}\n\nexport { pointsWithinPolygon };\nexport default pointsWithinPolygon;\n","import * as turf from '@turf/turf';\n\nimport { Area } from '..';\n\nimport { LANDUSE_TYPE_MAPPING, TYPE_GEOMETRY, renderControlPoint, difference, computePathPolygon } from '../../../../lib';\n\nexport class Renderer {\n    public host: Area;\n    public pathCroppedArea: Path2D\n    constructor(host: Area) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderAreaBounding(ctx);\n        this.renderCroppedArea(ctx);\n\n        if (this.host.isHovered || this.host.isSelected) {\n            this.renderControlPoint(ctx);\n            this.renderDim(ctx);\n\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n        this.renderCenterPoint(ctx);\n        this.renderProperties(ctx);\n    }\n    private renderCenterPoint(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.vec.x - 5, this.host.vec.y);\n        ctx.lineTo(this.host.vec.x + 5, this.host.vec.y);\n        ctx.moveTo(this.host.vec.x, this.host.vec.y - 5);\n        ctx.lineTo(this.host.vec.x, this.host.vec.y + 5);\n        ctx.stroke();\n    }\n    private renderCroppedArea(ctx: CanvasRenderingContext2D) {\n        if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n            this.host.polygonTurfSubtracted = diff;\n            this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n            this.host.updateNeeded = false;\n            // console.log('updating');\n        }\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n\n        ctx.setLineDash([]);\n    }\n    private renderControlPoint(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = 'rgba(200, 200, 200, 1.0)';\n        ctx.strokeStyle = 'rgba(50, 50, 50, 1.0)';\n        ctx.lineWidth = 3;\n\n        renderControlPoint(ctx, this.host.geometry.vsRect);\n        renderControlPoint(ctx, this.host.transform.cVecGhost);\n\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            // ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.75);\n            let y = this.host.geometry.vec.y - 10;\n            ctx.fillText(`R1 : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            x = this.host.geometry.vec.x - 10;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.75);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n            ctx.fillText(`R2 : ${length.toFixed(5)} miles`, 0, 0);\n            ctx.restore();\n\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n            ctx.lineWidth = 0.5;\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vsRect[2].y);\n            ctx.lineTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n        } else {\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.5);\n            let y = this.host.geometry.vsRect[0].y + 25;\n            ctx.fillText(`W : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' });\n\n            x = this.host.geometry.vsRect[0].x - 25;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.5);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n\n            ctx.fillText(`H : ${length.toFixed(5)} miles`, 0, 0);\n\n            ctx.restore();\n        }\n\n        // ctx.globalCompositeOperation = 'source-over';\n        // ctx.stroke()\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n        } else {\n            ctx.rect(this.host.geometry.vsRect[3].x, this.host.geometry.vsRect[3].y, this.host.geometry.width, this.host.geometry.height);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, this.host.vec.x, this.host.vec.y - 90 - this.host.geometry.height * 0.5);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, this.host.vec.x, this.host.vec.y - 60 - this.host.geometry.height * 0.5);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n\n        this.host.referPoint = pts;\n\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n        // console.log(r, b, other)\n    }\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x + offset, this.host.geometry.vsRect[0].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x - offset, this.host.geometry.vsRect[1].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x - offset, this.host.geometry.vsRect[2].y - offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x + offset, this.host.geometry.vsRect[3].y - offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n}\n","import { RVector3, } from '../../../../lib';\nimport { Area } from '..';\n\nexport class Transform {\n    public host: Area;\n    public cVecGhost: RVector3[] = [];\n    constructor(host: Area) {\n        this.host = host;\n\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n\n        this.cVecGhost = [\n            new RVector3(this.host.vec.x - widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y + heighthHalf),\n            new RVector3(this.host.vec.x + widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y - heighthHalf),\n        ];\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n                this.host.geometry.vsRect[this.host.capturedVecId].x += preX;\n                this.host.geometry.vsRect[this.host.capturedVecId].y += preY;\n            }\n            // console.log(this.host.capturedVecId);\n            // console.log(this.host.capturedVecId)\n            if (this.host.capturedVecId === 0) {\n                this.host.geometry.vsRect[3].x = this.host.geometry.vsRect[0].x;\n                this.host.geometry.vsRect[1].y = this.host.geometry.vsRect[0].y;\n\n            } else if (this.host.capturedVecId === 1) {\n                this.host.geometry.vsRect[2].x = this.host.geometry.vsRect[1].x;\n                this.host.geometry.vsRect[0].y = this.host.geometry.vsRect[1].y;\n\n            } else if (this.host.capturedVecId === 2) {\n                this.host.geometry.vsRect[1].x = this.host.geometry.vsRect[2].x;\n                this.host.geometry.vsRect[3].y = this.host.geometry.vsRect[2].y;\n\n            } else if (this.host.capturedVecId === 3) {\n                this.host.geometry.vsRect[0].x = this.host.geometry.vsRect[3].x;\n                this.host.geometry.vsRect[2].y = this.host.geometry.vsRect[3].y;\n                ////\n            } else if (this.host.capturedVecId === 4) {\n                this.host.geometry.vsRect[3].x += preX; this.host.geometry.vsRect[0].x += preX;\n            } else if (this.host.capturedVecId === 5) {\n                this.host.geometry.vsRect[1].y += preY; this.host.geometry.vsRect[0].y += preY;\n            } else if (this.host.capturedVecId === 6) {\n                this.host.geometry.vsRect[1].x += preX; this.host.geometry.vsRect[2].x += preX;\n            } else if (this.host.capturedVecId === 7) {\n                this.host.geometry.vsRect[2].y += preY; this.host.geometry.vsRect[3].y += preY;\n            }\n\n\n            this.host.geometry.width = Math.abs(this.host.geometry.vsRect[0].x - this.host.geometry.vsRect[2].x);\n            this.host.geometry.height = Math.abs(this.host.geometry.vsRect[0].y - this.host.geometry.vsRect[2].y);\n\n            this.host.updateGeoProjection();\n            this.host.updateScreenPosCircle();\n            this.hexRebuild();\n            this.updateGhostVecs();\n            return;\n        }\n\n        this.host.vec.x += preX;\n        this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vsRect.length; ++i) {\n            this.host.geometry.vsRect[i].x += preX;\n            this.host.geometry.vsRect[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n        this.host.updateScreenPosCircle();\n        this.hexReposition(preX, preY);\n        this.updateGhostVecs();\n    }\n\n    public hexReposition(xOff: number, yOff: number) {\n        if (this.host.hexmap) {\n            this.host.hexmap.reposition(xOff, yOff);\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n    public hexRebuild() {\n        if (this.host.hexmap) {\n            this.host.initHex();\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n\n    public updateGhostVecs() {\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n        this.cVecGhost[0].x = this.host.vec.x - widthHalf;\n        this.cVecGhost[0].y = this.host.vec.y;\n        this.cVecGhost[1].x = this.host.vec.x;\n        this.cVecGhost[1].y = this.host.vec.y + heighthHalf;\n        this.cVecGhost[2].x = this.host.vec.x + widthHalf;\n        this.cVecGhost[2].y = this.host.vec.y;\n        this.cVecGhost[3].x = this.host.vec.x;\n        this.cVecGhost[3].y = this.host.vec.y - heighthHalf;\n    }\n}\n","import { RVector3, getCenterVec, isInsideOfVecs, distance, remap } from '..';\n\nimport { Polygon } from 'geojson';\n\nimport * as turf from '@turf/turf';\n\nexport class HexMapDynamic {\n    public listPixel: Hexbin[];\n    public rx: number;\n    public ry: number;\n    public ddx: number;\n    public ddy: number;\n    public v0: RVector3;\n    public v1: RVector3;\n    public ptsCenter: RVector3;\n    public pts: RVector3[][];\n    public offScale: number;\n\n    public toMap: (x: number, y: number) => number[];\n    public toScreen: (lng: number, lat: number) => number[];\n\n    public referPoint: any = [];\n\n    constructor(v0: RVector3, v1: RVector3, rx: number = 100, ry: number = 100, toMap: any, toScreen: any) {\n        this.toMap = toMap;\n        this.toScreen = toScreen;\n\n        this.listPixel = [];\n        this.rx = rx;\n        this.ry = ry;\n        this.offScale = 0.9;\n        this.v0 = v0;\n        this.v1 = v1;\n        this.ptsCenter = new RVector3(0, 0, 0);\n        this.ddx = (this.v1.x - this.v0.x) / (this.rx - 1.0);\n        this.ddy = (this.v1.y - this.v0.y) / (this.ry - 1.0);\n        // this.Built();\n        this.init();\n    }\n    public init() {\n        this.initGrid();\n        // this.ComputeAtt();\n        this.computeHex();\n        this.computeHexOff();\n        // this.ComputeGeoVec();\n    }\n    public initWithR(r: number) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinR(r);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initWithVecs(vs: RVector3[]) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinVecs(vs);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initGrid() {\n        this.pts = [];\n        for (let j = 0; j < this.ry; ++j) {\n            let y = this.v0.y + j * this.ddy;\n            let xArray: RVector3[] = [];\n            for (let i = 0; i < this.rx; ++i) {\n                let x = this.v0.x + i * this.ddx;\n\n                let vec = new RVector3(x, y, 0);\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n                xArray.push(vec);\n            }\n            this.pts.push(xArray);\n        }\n    }\n    // ComputeAtt() {\n    //     for (let j = 0; j < this.ry; ++j) {\n    //         for (let i = 0; i < this.rx; ++i) {\n    //             //    let d = this.pts[j][i].FadeExp(new RVector3(0,0,0), 0.0000001);\n    //             //    this.pts[j][i].Mult(d*d); \n    //             let p0 = RVector3.Attractor(this.pts[j][i], new RVector3(50, 50, 0), 2, 0.001);\n    //             let p1 = RVector3.Attractor(this.pts[j][i], new RVector3(-50, 0, 0), 8, 0.89);\n    //             let p2 = RVector3.Attractor(this.pts[j][i], new RVector3(-0, 0, 0), 5, 0.99);\n    //             // console.log(p)  \n    //             this.pts[j][i].Add(p0);\n    //             this.pts[j][i].Add(p1);\n    //             this.pts[j][i].Add(p2);\n    //         }\n    //     }\n    // }\n    public computeHex() {\n        this.listPixel = [];\n        let alter = true;\n        for (let j = 0; j < this.ry; j += 2) {\n            for (let i = 0; i < this.rx; i += 2) {\n                if (alter) {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 2]);\n                        p.bVec.push(this.pts[j + 3][i + 1]);\n                        p.bVec.push(this.pts[j + 2][i]);\n                        p.bVec.push(this.pts[j + 1][i]);\n                        // p.bVec.push(this.pts[j][i+1]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                } else {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 2]);\n                        p.bVec.push(this.pts[j + 1][i + 3]);\n                        p.bVec.push(this.pts[j + 2][i + 3]);\n                        p.bVec.push(this.pts[j + 3][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 1]);\n                        // p.vecs.push(this.pts[j][i+2]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                }\n            }\n            alter = !alter;\n        }\n        // console.log(\"done for grid\")\n        // this.InitGridNeighbor();\n    }\n    public filterWithinR(r: number) {\n        let c = new RVector3((this.v1.x + this.v0.x) * 0.5, (this.v1.y + this.v0.y) * 0.5, 0);\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (distance(c, cv) < r) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public filterWithinVecs(vs: RVector3[]) {\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (isInsideOfVecs(cv, vs)) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public computeHexOff() {\n        let i = this.listPixel.length;\n        while (i--) {\n            // let cv = getCenterVec(this.listPixel[i].bVec);\n            // this.listPixel[i].vec = cv;\n\n            // /*\n            // let goeCV = this.toMap(cv.x, cv.y);\n            // console.log(goeCV)\n\n            let value = 0;\n            // console.log(this.listPixel[i].bVec)\n\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas) {\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap !== undefined) {\n\n            // let boundGeoVecs: RVector3[] = [];\n            // for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n            //     let geoCVs = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n            //     boundGeoVecs.push(new RVector3(geoCVs[0], geoCVs[1], 0));\n            // }\n\n            // value += CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap.ForwardPropagation(new RVector3(goeCV[0], goeCV[1], 0), boundGeoVecs);\n            // console.log(value);\n            // }\n\n            // console.log(goeCV);\n            // let scale = MathUtility.GetRandomArbitrary(0.1, 0.6);\n\n            // let d = GeoData.d1000.slice(1, 50);\n            // let value = 0;\n            // for (let k = 0; k < d.length; ++k) {\n            //     // let r = 1; //MathUtility.GetRandomArbitrary(0.5, 20);\n            //     // let c = ColorUtility.HexToCanvasColor('#9400D3', MathUtility.GetRandomArbitrary(0.3, 1));\n            //     // CVPoint.GetPointByGeoPos(d[i][1], d[i][0], r, c)\n\n            //     let dv = CGeometry.GetScreenVecByGeoVec(new RVector3(d[k][1], d[k][0], 0))\n\n            //     if (dv.Distance(cv) < 50) {\n            //         value += 0.1;\n            //     }\n\n            //     // if (isInsideOfVecs(dv, this.listPixel[i].bVec)) {\n            //     //     value += 0.1;\n            //     // }\n            // }\n            this.listPixel[i].temp = value;\n\n            // console.log(this.listPixel[i].bVec)\n            // console.log(value)\n\n            // */\n\n        }\n        i = this.listPixel.length;\n        let minNum = Number.MAX_SAFE_INTEGER;\n        let maxNum = Number.MIN_SAFE_INTEGER;\n        while (i--) {\n            if (minNum > this.listPixel[i].temp) { minNum = this.listPixel[i].temp; }\n            if (maxNum < this.listPixel[i].temp) { maxNum = this.listPixel[i].temp; }\n        }\n\n        i = this.listPixel.length;\n        // while (i--) {\n        //     let cv = getCenterVec(this.listPixel[i].bVec);\n        //     for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n        //         let tv = this.listPixel[i].bVec[j];\n        //         let value = remap(this.listPixel[i].temp, minNum, maxNum, 0, 1);\n        //         // let x = ((tv.x - cv.x) * this.offScale) + cv.x;\n        //         // let y = ((tv.y - cv.y) * this.offScale) + cv.y;\n        //         let x = ((tv.x - cv.x) * value) + cv.x;\n        //         let y = ((tv.y - cv.y) * value) + cv.y;\n        //         this.listPixel[i].bVec[j] = new RVector3(x, y, 0);\n        //     }\n        // }\n    }\n    public computeGeoVec() {\n        let i = this.listPixel.length;\n        while (i--) {\n            for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n\n                // console.log(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y)\n\n                let v = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n                // this.listPixel[i].bVec[j].mPoint = v.clone();\n                this.listPixel[i].bVec[j].lng = v[0]; this.listPixel[i].bVec[j].lat = v[1];\n                this.listPixel[i].updateCenVec();\n            }\n        }\n    }\n    // ...................................................................\n    public render(ctx: CanvasRenderingContext2D) {\n        this.renderBins(ctx);\n        this.updatePre(100, 100);\n        // this.CVisPixels(ctx);\n        this.updatePost();\n\n    }\n    public updateGeoProjection() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n            }\n        }\n        // this.updatePolygonTurf();\n    }\n    public updateScreenPos() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const v = this.pts[i][j];\n                const sp = this.toScreen(v.lng, v.lat);\n                v.x = sp[0]; v.y = sp[1];\n            }\n        }\n        // this.cen\n    }\n    public reposition(xOff: number, yOff: number) {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                vec.x += xOff; vec.y += yOff;\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n            }\n        }\n        this.computeGeoVec();\n        this.updatePolygonTurf();\n    }\n    public updateActiveHexByBoudnary(boundary: any) {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            const bin = this.listPixel[i];\n            const p = turf.points([[bin.vec.lng, bin.vec.lat]]);\n            const v = turf.pointsWithinPolygon(p,boundary);\n            // console.log(v)\n            if (v['features'].length === 0) {\n                bin.isActive = false;\n            } else {\n                bin.isActive = true;\n            }\n            \n        }\n    }\n    public renderBins(ctx: CanvasRenderingContext2D) {\n        // console.log(this.listPixel);\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].renderPost(ctx);\n        }\n    }\n    public updatePre(x: number, y: number) {\n        let i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].isHover = false;\n            this.listPixel[i].isVisit = false;\n        }\n        i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].updateWithMouseInteraction(x, y);\n        }\n    }\n    public updatePost() {\n        // let i = this.listPixel.length;\n        // while (i--) {\n        //     this.listPixel[i].isHover = false;\n        //     this.listPixel[i].isVisit = false;\n        // }\n    }\n    public updatePolygonTurf() {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].updatePolygon();\n        }\n    }\n}\n\n\nexport class Hexbin {\n    public map: HexMapDynamic;\n    public vec: RVector3;\n    public nPix: Hexbin[] = [];\n    public bVec: RVector3[] = [];\n    public i: number = -1;\n    public j: number = -1;\n    public k: number = -1;\n    public id: number;\n    public color: string;\n\n    public strokeStyle: string;\n    public isVisit: boolean;\n    public isOver: boolean;\n    public data: {};\n    public temp: number;\n    public polygonTurfOriginal: Polygon | any;\n    public isActive: boolean = true;\n\n    constructor(map: HexMapDynamic, v: RVector3 = new RVector3(0, 0, 0), color: string = '#1267B0') {\n        this.map = map;\n        this.vec = v;\n        // this.geoVec = v;\n        this.updateGoeVec();\n        this.nPix = [];\n        this.bVec = [];\n        this.i = -1;\n        this.j = -1;\n        this.k = -1;\n        this.color = color; // ColorUtility.HexToCanvasColor(color, MathUtility.GetRandomArbitrary(0.01, 0.90));\n        // this.strokeStyle = ColorUtility.HexToCanvasColor('#ffffff', MathUtility.GetRandomArbitrary(0.5, 0.90));\n        // this.id = Hexbin.GetID();\n        this.isOver = false;\n        this.isVisit = false;\n\n        this.data = {};\n    }\n    public get isHover() {\n        return this.isOver;\n    }\n    public set isHover(v: boolean) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.nPix.length)\n        if (this.isVisit) { return; }\n        this.isOver = v;\n\n        if (!this.isOver) { return; }\n        for (let i = 0; i < this.nPix.length; ++i) {\n            this.nPix[i].isOver = v;\n            this.nPix[i].isVisit = v;\n        }\n\n    }\n    public updateWithMouseInteraction(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        // if (CGeometry.appDrawing.graphicApp.ACController.isViewChanging) {\n        this.updateScreenVec();\n        for (let i = 0; i < this.bVec.length; ++i) {\n            //  = CVPoint.GetScreenVec(this.bVec[i].mPoint)\n            // let v = this.map.toScreen(this.bVec[i].lng, this.bVec[i].lat);\n            // this.bVec[i].x = v[0]; this.bVec[i].y = v[1];\n        }\n        // }\n        this.isMouseInside(x, y);\n    }\n    public isMouseInside(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        if (this.isVisit) { return false; }\n        if (isInsideOfVecs(new RVector3(x, y, 0), this.bVec)) {\n            this.isHover = true; return true;\n        } else {\n            this.isHover = false; return false;\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.bVec)\n        // console.log(this.vec.x, this.vec.y)\n        // \n        // ctx.arc(this.vec.x, this.vec.y, 10, 0, 3.14, false)\n        // ctx.globalAlpha = 1;\n\n        if (this.map.referPoint) {\n            const pts = turf.pointsWithinPolygon(this.map.referPoint, this.polygonTurfOriginal)\n            // console.log(pts['features'].length);\n\n            let col = (pts['features'].length * 0.1);\n            // col = col > 1.0 ? 1.0 : 0.0;\n            // console.log(col)\n\n            ctx.beginPath();\n            ctx.arc(this.vec.x, this.vec.y, 1, 0, 2 * Math.PI, false);\n            ctx.closePath();\n            ctx.fillStyle = `rgba(${col}, 0, 0, 1)`; // ColorUtility.HexToCanvasColor('#ffffff', 0.2); //style.fillColor\n            ctx.fill();\n            ctx.lineWidth = 2\n            ctx.strokeStyle = 'black'\n            // ctx.stroke();\n            // ctx.globalCompositeOperation = 'multiply';\n            // ctx.globalCompositeOperation = COLORBLENDING.MULTIPLY;\n            ctx.lineWidth = 0.5;\n\n            // console.log(this.bVec);\n\n            ctx.beginPath();\n            ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            for (let i = 1; i < this.bVec.length; ++i) {\n                // console.log(this.bVec[i].x, this.bVec[i].y)\n                ctx.lineTo(this.bVec[i].x, this.bVec[i].y);\n            }\n            // ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            ctx.closePath();\n\n            if (this.isOver) {\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`;\n            } else {\n                // ctx.fillStyle = this.color; // ColorUtility.HexToCanvasColor(this.c, MathUtility.GetRandomArbitrary(0.1, 0.9));\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`; // CGeometry.appDrawing.cGeometryRender.themeDrawing.cpolylineStyle.normal.fillColor;\n\n            }\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n\n            ctx.stroke();\n            ctx.fill();\n\n            // ctx.globalCompositeOperation = 'source-over'; // COLORBLENDING.SOURCE_OVER;\n            // this.isCapturedbyPixel = false;\n        }\n    }\n    public updateGoeVec() {\n        let m = this.map.toMap(this.vec.x, this.vec.y);\n        this.vec.lng = m[0]; this.vec.lat = m[1];\n    }\n    public updateScreenVec() {\n        let p = this.map.toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = p[0]; this.vec.y = p[1];\n    }\n    public updateCenVec() {\n        if (!this.isActive) { return; }\n\n        this.vec = getCenterVec(this.bVec);\n        this.updateScreenVec();\n    }\n    public updatePolygon() {\n        // if (!this.isActive) { return; }\n\n        const pts = [];\n        for (let i = 0; i < this.bVec.length; i++) {\n            pts.push([this.bVec[i].lng, this.bVec[i].lat]);\n        }\n        pts.push([this.bVec[0].lng, this.bVec[0].lat]);\n\n        this.polygonTurfOriginal = turf.polygon([pts]);\n    }\n\n}","\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { RVector3, distance, isInsideOfVecs, isInsideEllipse, TYPE_GEOMETRY } from '../../../lib';\n\nimport { AreaGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\n\nimport { HexMapDynamic } from '../../../lib/util/HexmapDynamic';\n\nimport * as turf from '@turf/turf';\n\nexport class Area extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaGeometry;\n\n    public TYPE = TYPE_GEOMETRY.RECT;\n\n    public vec: RVector3;\n\n    public cp: RVector3[] = [];\n\n    public hexmap: HexMapDynamic | undefined = undefined;\n\n    constructor(scene: Scene, lng: number, lat: number, width: number = 400, height: number = 400, TYPE = TYPE_GEOMETRY.RECT) {\n        super(scene);\n\n        this.TYPE = TYPE;\n        const mp = this.scene.common.toScreen(lng, lat);\n\n        this.vec = new RVector3(mp[0], mp[1]);\n        this.geometry = new AreaGeometry(this.vec, width, height);\n\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n        this.updateGeoProjection();\n\n        // this.initHex();\n    }\n    public initHex() {\n        this.hexmap = new HexMapDynamic(\n            this.geometry.vsRect[0], this.geometry.vsRect[2], 16, 20,\n            this.scene.common.toMap,\n            this.scene.common.toScreen,\n        );\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.transform.cVecGhost.length; ++i) {\n            if (distance(this.transform.cVecGhost[i], (mVec)) < 12) {\n                this.capturedVecId = i + 4;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        for (let i = 0; i < this.geometry.vsRect.length; ++i) {\n            if (distance(this.geometry.vsRect[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            if (isInsideEllipse(this.vec, mVec, this.geometry.width * 0.5, this.geometry.height * 0.5)) {\n                this.isHovered = true;\n                return true;\n            }\n        } else {\n            if (isInsideOfVecs(mVec, this.geometry.vsRect)) {\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update() {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.updateScreenPos();\n            this.transform.updateGhostVecs();\n        }\n\n    }\n    public shiftType() {\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            this.TYPE = TYPE_GEOMETRY.RECT;\n        } else if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            this.TYPE = TYPE_GEOMETRY.CIRCLE;\n        }\n        this.updateGeoProjection();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n    public onMouseClick() {\n        this.isSelected = !this.isSelected;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n\n        if (this.hexmap) { \n            this.hexmap.referPoint = this.referPoint;\n            this.hexmap.render(ctx); \n        }\n    }\n    public updateScreenPos() {\n        this.geometry.updateScreen(this.scene.common.toScreen);\n\n        // console.log('screen');\n        if (this.hexmap) {\n            this.hexmap.updateScreenPos();\n        }\n    }\n    public updateScreenPosCircle() {\n        this.geometry.updateScreenPosCircle();\n\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n\n        // console.log('geo');\n\n        \n\n        this.updatePolygonTurf();\n\n        if (this.hexmap) {\n            this.hexmap.updateGeoProjection();\n        }\n\n\n        this.updateNeeded = true;\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: [{ lng: this.geometry.vsRect[0].lng, lat: this.geometry.vsRect[0].lat }, { lng: this.geometry.vsRect[2].lng, lat: this.geometry.vsRect[2].lat }],\n        }\n    }\n    private updatePolygonTurf() {\n        const pts = [];\n\n        if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            for (let i = 0; i < this.geometry.vsRect.length; i++) {\n                pts.push([this.geometry.vsRect[i].lng, this.geometry.vsRect[i].lat]);\n            }\n            pts.push([this.geometry.vsRect[0].lng, this.geometry.vsRect[0].lat]);\n        } else {\n            for (let i = 0; i < this.geometry.vsCircle.length; i++) {\n                pts.push([this.geometry.vsCircle[i].lng, this.geometry.vsCircle[i].lat]);\n            }\n            pts.push([this.geometry.vsCircle[0].lng, this.geometry.vsCircle[0].lat]);\n        }\n        // console.log(this.polygonTurfOriginal);\n        this.polygonTurfOriginal = turf.polygon([pts]) as any;\n\n\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.geometry.updateWidthHight(width, height);\n    }\n    public toggleHexmap() {\n        if (this.hexmap) {\n            this.hexmap = undefined\n        }else {\n            this.initHex();\n        }\n    }\n}\n","import { RVector3, closestPointOnLine } from '../../../../lib';\n\nexport class AreaPolygonGeometry {\n\n    public vs: RVector3[] = [];\n    public cv: RVector3 = new RVector3(0, 0, 0);\n\n    public v0: RVector3 = new RVector3(Number.MAX_VALUE, Number.MAX_VALUE);\n    public v1: RVector3 = new RVector3(Number.MIN_VALUE, Number.MIN_VALUE);\n\n    constructor() {\n\n    }\n\n    public push(x: number, y: number, lng: number, lat: number) {\n        const v = new RVector3(x, y, 0);\n        v.lat = lat;\n        v.lng = lng;\n        this.vs.push(v);\n        // console.log(this.vs);\n\n    }\n    public removeLast() {\n        this.vs.pop();\n    }\n    public updateScreen(toScreen: (x: number, y: number) => number[]) {\n        // console.log('update screen pos');\n        let sp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            sp = toScreen(this.vs[i].lng, this.vs[i].lat);\n            this.vs[i].x = sp[0];\n            this.vs[i].y = sp[1];\n        }\n        this.updateCenterVec();\n    }\n    private resetBoundary() {\n        this.v0.x = Number.MAX_VALUE; this.v0.y = Number.MAX_VALUE;\n        this.v1.x = Number.MIN_VALUE; this.v1.y = Number.MIN_VALUE;\n    }\n    public updateProjection(toMap: (x: number, y: number) => number[]) {\n        // console.log('update map pos');\n        let mp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            mp = toMap(this.vs[i].x, this.vs[i].y);\n            this.vs[i].lng = mp[0];\n            this.vs[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        this.resetBoundary();\n        let xSum = 0, ySum = 0;\n        for (let i = 0; i < this.vs.length; ++i) {\n            xSum += this.vs[i].x;\n            ySum += this.vs[i].y;\n\n            if (this.v0.x > this.vs[i].x) { this.v0.x = this.vs[i].x; }\n            if (this.v0.y > this.vs[i].y) { this.v0.y = this.vs[i].y; }\n            if (this.v1.x < this.vs[i].x) { this.v1.x = this.vs[i].x; }\n            if (this.v1.y < this.vs[i].y) { this.v1.y = this.vs[i].y; }\n        }\n        this.cv.x = xSum / this.vs.length;\n        this.cv.y = ySum / this.vs.length;\n    }\n    public removeVecByIndex(index: number) {\n        this.vs.splice(index, 1);\n    }\n    public insertVec(x: number, y: number) {\n        const mp = new RVector3(x, y);\n        const sel = { x: 0, y: 0, dis: Number.MAX_VALUE, id: -1 };\n\n        for(let i = 0 ; i < this.vs.length -1; ++i) {\n            const result = closestPointOnLine(mp, this.vs[i], this.vs[1+i]);\n            if (sel.dis > result.dis) {\n                sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = i;\n            }\n        }\n        const result = closestPointOnLine(mp, this.vs[this.vs.length -1], this.vs[0]);\n        if (sel.dis > result.dis) {\n            sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = this.vs.length -1;\n        }\n\n        if (sel.dis < 10) {\n            this.vs.splice(sel.id + 1, 0, new RVector3(sel.x, sel.y));\n            // console.log('insertPT');\n            return true;\n        }\n        return false;\n    }\n    public toJson() {\n        const vs = [];\n        for (let i = 0; i < this.vs.length; ++i) {\n            vs.push({ lng: this.vs[i].lng, lat: this.vs[i].lat });\n        }\n        return vs;\n    }\n}","import * as turf from '@turf/turf';\nimport { renderControlPoint, difference, computePathPolygon, LANDUSE_TYPE_MAPPING, getAngleByTwoVectorsRadian, RVector3, normalize } from '../../../../lib';\nimport { AreaPolygon } from '..';\n\n\nexport class Renderer {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        // console.log(this.host.capturedVecId, this.host.isSelected, this.host.isHovered);\n        if (this.host.geometry.vs.length > 0) {\n            this.renderAreaBounding(ctx);\n            this.renderCroppedArea(ctx);\n            this.renderProperties(ctx);\n        }\n\n\n        if (this.host.underConstruction || this.host.isHovered || this.host.isSelected) {\n            renderControlPoint(ctx, this.host.geometry.vs);\n            this.renderDim(ctx);\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n\n\n        if (this.host.capturedVecId > -1) {\n            ctx.beginPath();\n            ctx.arc(this.host.geometry.vs[this.host.capturedVecId].x, this.host.geometry.vs[this.host.capturedVecId].y, 10, 0, Math.PI * 2.0);\n            ctx.closePath();\n            ctx.fill();\n        }\n\n    }\n    public renderCroppedArea(ctx: CanvasRenderingContext2D) {\n\n        if (this.host.geometry.vs.length < 3) {\n            this.pathCroppedArea = new Path2D();\n            this.pathCroppedArea.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n            for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n                this.pathCroppedArea.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n            }\n            this.pathCroppedArea.closePath();\n            // console.log(this.host.geometry.vs.length);\n            this.host.updateNeeded = true;\n\n        } else {\n            if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n                const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n                this.host.polygonTurfSubtracted = diff;\n                this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n                this.host.updateNeeded = false;\n                // console.log('updating');\n            }\n        }\n\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n        ctx.setLineDash([]);\n    }\n\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v1.y + offset);\n\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v1.y + offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n        for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n            ctx.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        if (this.host.geometry.vs.length < 3) { return; }\n        // console.log(this.host.geometry.vs, this.host.polygonTurfSubtracted)\n        // if (this.host.polygonTurfSubtracted === undefined) { return; }\n\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        // console.log(area)\n        const x = this.host.geometry.v0.x + ((this.host.geometry.v1.x - this.host.geometry.v0.x) * 0.5);\n        const y = this.host.geometry.v0.y;\n\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, x, y - 90);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, x, y - 60);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, x - 120, y - 25);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, x + 28, y - 25);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, x + 140, y - 25);\n        // console.log(r, b, other)\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = 'rgb(0, 128, 0)';\n        // ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        const vs = this.host.geometry.vs;\n\n        let v0 = new RVector3(1, 0, 0);\n\n        for (let i = 0; i < vs.length - 1; ++i) {\n\n            let line = turf.lineString([[vs[i].lng, vs[i].lat], [vs[1 + i].lng, vs[1 + i].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[i].x + ((vs[i + 1].x - vs[i].x) * 0.5);\n            let y = vs[i].y + ((vs[i + 1].y - vs[i].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[i].x - vs[i + 1].x, vs[i].y - vs[i + 1].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n\n            if (vs[i].y < vs[i + 1].y) { deg *= -1; }\n            // console.log(deg)\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n\n        if (vs.length > 2) {\n            let line = turf.lineString([[vs[vs.length - 1].lng, vs[vs.length - 1].lat], [vs[0].lng, vs[0].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[vs.length - 1].x + ((vs[0].x - vs[vs.length - 1].x) * 0.5);\n            let y = vs[vs.length - 1].y + ((vs[0].y - vs[vs.length - 1].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[vs.length - 1].x - vs[0].x, vs[vs.length - 1].y - vs[0].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n            \n            if (vs[vs.length - 1].y < vs[0].y) { deg *= -1; }\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n    }\n}","import * as turf from '@turf/turf';\n\nimport { AreaPolygon } from '..';\n\n\nexport class Transform {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            // if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n            this.host.geometry.vs[this.host.capturedVecId].x += preX;\n            this.host.geometry.vs[this.host.capturedVecId].y += preY;\n            // }\n\n\n            this.host.updateGeoProjection();\n            return;\n        }\n\n        // this.host.vec.x += preX;\n        // this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vs.length; ++i) {\n            this.host.geometry.vs[i].x += preX;\n            this.host.geometry.vs[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n    }\n}","import * as turf from '@turf/turf';\n\nimport { TYPE_GEOMETRY } from '../../../lib';\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { AreaPolygonGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\nimport { isInsideOfVecs, distance, RVector3 } from '../../../lib';\n\nexport class AreaPolygon extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaPolygonGeometry;\n\n    public underConstruction = true;\n    constructor(scene: Scene, vs: RVector3[] | undefined = undefined) {\n        super(scene)\n\n        this.TYPE = TYPE_GEOMETRY.POLYGON;\n        this.geometry = new AreaPolygonGeometry();\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n\n        if (vs !== undefined) {\n            this.fromJson(vs);\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.geometry.vs.length; ++i) {\n            if (distance(this.geometry.vs[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        if (isInsideOfVecs(mVec, this.geometry.vs)) {\n            this.isHovered = true;\n            return true;\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update(): void {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.geometry.updateScreen(this.scene.common.toScreen);\n        }\n    }\n    public onMouseClick(e) {\n\n        if (this.underConstruction) {\n            if (this.geometry.vs.length === 0) {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            } else {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            }\n            if (this.geometry.vs.length > 2) {\n                this.geometry.updateCenterVec();\n                this.updatePolygonTurf();\n            }\n        } else {\n\n            // console.log(this.capturedVecId);\n            if (this.capturedVecId > -1) {\n                this.isSelected = true;\n                return;\n            }\n\n            // if (this.isHovered) {\n                // this.isSelected = true;\n            if (this.insertPt(e.point.x, e.point.y)) {\n                this.isSelected = true;\n                return;\n            }\n            //     return;\n            // }\n\n            this.isSelected = !this.isSelected;\n\n\n        }\n    }\n    public insertPt(x: number, y: number) {\n        return this.geometry.insertVec(x, y);\n    }\n    public updateGhostPos(x: number, y: number) {\n        if (this.geometry.vs.length === 0) { return; }\n        this.geometry.vs[this.geometry.vs.length - 1].x = x;\n        this.geometry.vs[this.geometry.vs.length - 1].y = y;\n\n        const mp = this.scene.common.toMap(x, y);\n        this.geometry.vs[this.geometry.vs.length - 1].lng = mp[0];\n        this.geometry.vs[this.geometry.vs.length - 1].lat = mp[1];\n\n        if (this.geometry.vs.length > 2) {\n            this.geometry.updateCenterVec();\n            this.updatePolygonTurf();\n        }\n    }\n    public onMouseDoubleClick(e) {\n        this.removeVertexLastVertex();\n        this.removeVertexLastVertex();\n        this.updateGeoProjection();\n        this.underConstruction = false;\n        this.scene.captured = undefined;\n        this.scene.common.captureScene();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n\n    public removeVertexLastVertex(): void {\n        this.geometry.removeLast();\n        if (this.geometry.vs.length < 2) {\n            this.remove();\n        }\n        // console.log(this.geometry.cv);\n        this.updatePolygonTurf()\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n        this.updatePolygonTurf();\n\n    }\n    private updatePolygonTurf() {\n        if (this.geometry.vs.length < 3) { return; }\n        const pts = [];\n        for (let i = 0; i < this.geometry.vs.length; i++) {\n            pts.push([this.geometry.vs[i].lng, this.geometry.vs[i].lat]);\n        }\n        pts.push([this.geometry.vs[0].lng, this.geometry.vs[0].lat]);\n\n\n        this.polygonTurfOriginal = turf.polygon([pts]) as any;\n        this.updateNeeded = true;\n        // console.log('updatePolygonTurf')\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: this.geometry.toJson(),\n        };\n    }\n    public fromJson(vs: RVector3[]) {\n        for (let i = 0; i < vs.length; ++i) {\n            const sp = this.scene.common.toScreen(vs[i].lng, vs[i].lat);\n            const v = new RVector3(sp[0], sp[1], 0);\n            v.lng = vs[i].lng;\n            v.lat = vs[i].lat;\n            this.geometry.vs.push(v);\n        }\n        this.updatePolygonTurf();\n    }\n    public remove(): void {\n        if (this.capturedVecId > -1) {\n            this.geometry.removeVecByIndex(this.capturedVecId);\n            this.updateGeoProjection();\n            this.capturedVecId = -1;\n            return;\n        }\n        this.scene.remove(this);\n    }\n}","import { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { Area, AreaPolygon } from '../Geometry/GeometryCanvas';\nimport { TYPE_GEOMETRY , getJSONFromURL } from '../lib'\nimport { Solution } from '../';\n\nexport class ACCommon {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    public renderForceWithUpdate() {\n        this.solution.rendererWrapper.renderer.renderForce();\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].updateNeeded = true;\n        }\n    }\n    public downloadScreen() {\n        this.solution.rendererWrapper.downloadScreen();\n    }\n    public enablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.enable();\n    }\n    public disablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.disable();\n    }\n    public zoom = (z: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.zoom(z)\n    }\n    public flyTo = (lng: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.flyTo(lng, lat)\n    }\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.center(lng, lat);\n    }\n    public toMap = (x: number, y: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toMap(x, y);\n    }\n    public toScreen = (lon: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toScreen(lon, lat);\n    }\n    public async loadDataLocal(path = 'funded_census_blocks.geojson') {\n        return getJSONFromURL(process.env.PUBLIC_URL + '/static/dataDummyReady/' + path);\n    }\n\n    public addScatterLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addScatterLayer(data);\n    }\n    public addArcLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addArcLayer(data);\n    }\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        return this.solution.rendererWrapper.deckGL.addPolygonLayer(data, onClick);\n    }\n    public addShape(type = TYPE_GEOMETRY.RECT) {\n        this.renderForce();\n        if (type === TYPE_GEOMETRY.POLYGON) {\n            this.solution.scene.captured = new AreaPolygon(this.solution.scene);\n            this.solution.activeCommander.drawMode = true;\n\n        } else {\n            const mp = this.toMap(this.solution.rendererWrapper.renderer.canvas.width * 0.5, this.solution.rendererWrapper.renderer.canvas.height * 0.5);\n            new Area(this.solution.scene, mp[0], mp[1], 200, 200);\n        }\n        this.captureScene();\n    }\n    public shiftShapeType() {\n        if (this.solution.scene.areas.length > 0) {\n\n            for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n                if (this.solution.scene.areas[i].TYPE !== TYPE_GEOMETRY.POLYGON && this.solution.scene.areas[i].isSelected) {\n                    this.solution.scene.areas[i].shiftType();\n                }\n            }\n\n            this.captureScene();\n        }\n    }\n    public toggleAnimation() {\n        // this.solution.scene.captured.hasAnimation = !this.solution.scene.captured.hasAnimation;\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].hasAnimation = !this.solution.scene.areas[i].hasAnimation;\n            }\n        }\n    }\n    public deSelectedAll() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].isSelected = false;\n        }\n    }\n    public removeSelected() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].remove();\n            }\n        }\n    }\n    public checkHoverArea(x: number, y: number): GeometryBase | undefined {\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isInside(x, y)) {\n                return this.solution.scene.areas[i];\n            }\n        }\n        return undefined;\n    }\n    public pickObject(obj: any) {\n        // console.log('index', obj.index);\n        // console.log(obj);\n    }\n    public getViewState() {\n        return this.solution.rendererWrapper.mapBoxWrapper.getViewState();\n    }\n    public getData() {\n        let areas = [];\n        //  console.log(this.solution.scene.areas);\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            areas.push(this.solution.scene.areas[i].toJson())\n        }\n\n        return {\n            areas: areas,\n            extent: this.getViewState()\n        }\n    }\n    public captureScene() {\n        return this.solution.scene.stateManager.captureState();\n    }\n    public onExtentDone() {\n        // this.captureScene();\n    }\n    public renderForce() {\n        this.solution.rendererWrapper.renderer.renderForce();\n    }\n    public undo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.undo();\n    }\n    public redo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.redo();\n    }\n    public populateArea(data: any) {\n        this.solution.scene.areas = []\n\n        for (let i = 0; i < data.areas.length; ++i) {\n\n            const area = data.areas[i];\n            if (area.TYPE !== TYPE_GEOMETRY.POLYGON) {\n                const p0 = this.toScreen(area.vs[0].lng, area.vs[0].lat);\n                const p1 = this.toScreen(area.vs[1].lng, area.vs[1].lat);\n\n                const width = Math.abs(p1[0] - p0[0]);\n                const height = Math.abs(p1[1] - p0[1]);\n\n                // // console.log(width, height)\n\n                const lng = (area.vs[0].lng + area.vs[1].lng) * 0.5;\n                const lat = (area.vs[0].lat + area.vs[1].lat) * 0.5;\n\n                new Area(this.solution.scene, lng, lat, width, height, TYPE_GEOMETRY[area.TYPE]);\n            } else {\n                const pg = new AreaPolygon(this.solution.scene, area.vs);\n                pg.underConstruction = false;\n\n            }\n        }\n        this.solution.activeCommander.drawMode = false;\n        this.solution.scene.captured = undefined;\n\n        if (data.extent) {\n            this.center(data.extent.center['lng'], data.extent.center['lat']);\n            this.zoom(data.extent.zoom);\n        }\n        // console.log(this);\n    }\n    public toggleHexmap() {\n        for(let i = 0 ; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].toggleHexmap();\n        }\n    }\n}","import { Solution } from '../'\n\nexport class ActiveCommander {\n    public solution: Solution;\n    public mp = [0, 0, 0, 0];\n    public mpPre = [0, 0, 0, 0];\n    public drawMode: boolean = false;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    private updateMousePos(e) {\n        this.mp[0] = e.point.x;\n        this.mp[1] = e.point.y;\n        this.mp[2] = e.lngLat.lng;\n        this.mp[3] = e.lngLat.lat;\n    }\n    public updateMousePrePos() {\n        this.mpPre[0] = this.mp[0];\n        this.mpPre[1] = this.mp[1];\n        this.mpPre[2] = this.mp[2];\n        this.mpPre[3] = this.mp[3];\n    }\n    public mouseDown = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n\n        if (this.drawMode) { return; }\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            this.solution.common.disablePan();\n        }\n        // this.solution.scene.captured = this.solution.scene.areas;\n\n        // }\n        // TODO\n    }\n    public mouseUp = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) { return; }\n\n        this.solution.common.enablePan();\n        this.solution.scene.captured?.onMouseUp();\n        this.solution.scene.captured = undefined;\n\n        // TODO\n    }\n    public mouseDClick = (e) => {\n        this.drawMode = false;\n        this.solution.scene.captured?.onMouseDoubleClick(e);\n        this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.enable();\n\n    }\n    public mouseDrag = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.solution.scene.captured) {\n            this.solution.scene.captured.translate(e.point.x, e.point.y);\n        }\n        // TODO\n        this.updateMousePrePos();\n    }\n    public mouseClick = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) {\n            this.solution.scene.captured.onMouseClick(e);\n            this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.disable();\n            // console.log('d', this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.isEnabled());\n            return;\n        }\n\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            // this.solution.scene.captured.isSelected = !this.solution.scene.captured.isSelected;\n            this.solution.scene.captured.onMouseClick(e);\n        } else {\n            this.solution.common.deSelectedAll();\n        }\n        // console.log(this.solution.scene.captured);\n        // TODO\n        // console.log(e);\n        // console.log(e['lngLat']);\n        this.solution.rendererWrapper.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\n        // this.renderer.pts.push([e.point.x, e.point.y])\n    }\n    public mouseMove = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.drawMode && this.solution.scene.captured) {\n            this.solution.scene.captured.updateGhostPos(this.mp[0], this.mp[1]);\n\n            return;\n        }\n\n        this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        // console.log(e)\n\n        // TODO\n        this.updateMousePrePos();\n    }\n    public keyDown(k: KeyboardEvent) {\n        // TODO\n        // console.log(k);\n        switch (k.key) {\n            case 'Backspace':\n\n                if (this.drawMode && this.solution.scene.captured) {\n                    this.solution.scene.captured.removeVertexLastVertex();\n                    return;\n                }\n\n                this.solution.common.removeSelected();\n                this.solution.common.captureScene();\n                break;\n\n            default:\n                break;\n        }\n        this.solution.common.renderForce();\n    }\n}","import mapboxgl from 'mapbox-gl';\r\nimport { RendererWrapper } from '../';\r\n\r\nimport { downloadImage } from '../../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public rendererWrapper: RendererWrapper;\r\n    public map: mapboxgl.Map;\r\n    public canvasMapbox;\r\n    private isPressed: boolean = false;\r\n    constructor(rendererWrapper: RendererWrapper) {\r\n        this.rendererWrapper = rendererWrapper;\r\n\r\n        this.initMap(rendererWrapper.solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        // mapboxgl.accessToken = process.env.NEXT_PUBLIC_API_KEY_MAPBOX\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 3,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            doubleClickZoom: false,\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n\r\n        });\r\n        this.map.doubleClickZoom.disable();\r\n        this.map.dragRotate.disable();\r\n\r\n        this.map.on('moveend', () => { this.rendererWrapper.solution.common.onExtentDone(); });\r\n        this.map.on('zoom', () => { this.rendererWrapper.solution.common.renderForce(); });\r\n        this.map.on('click', 'polygon', (e: any) => { this.rendererWrapper.solution.common.pickObject(e) });\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e: mapboxgl.MapMouseEvent) => {\r\n            if (this.isPressed) {\r\n                this.mouseDrag(e);\r\n            } else {\r\n                this.mouseMove(e);\r\n            }\r\n        });\r\n        this.map.on('click', (e: mapboxgl.MapMouseEvent) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e: mapboxgl.MapMouseEvent) => { this.isPressed = true; this.mouseDown(e); });\r\n        this.map.on('dblclick', (e: mapboxgl.MapMouseEvent) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e: mapboxgl.MapMouseEvent) => { this.isPressed = false; this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => { this.keyDown(k) });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n\r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost() {\r\n        this.rendererWrapper.initPost();\r\n        this.canvasMapbox = this.map.getCanvas();\r\n    }\r\n\r\n    public initCustomCanvas() {\r\n        this.rendererWrapper.renderer.canvas.width = this.canvasMapbox.width;\r\n        this.rendererWrapper.renderer.canvas.height = this.canvasMapbox.height;\r\n\r\n        this.rendererWrapper.renderer.canvas.style.display = 'none';\r\n\r\n        const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n        this.map.addSource('canvas-source', {\r\n            type: 'raster',\r\n            canvas: this.rendererWrapper.renderer.canvas,\r\n            coordinates: [\r\n\r\n                // [ 180, 90],\r\n                // [ 180, -90],\r\n                // [ -180, -90], \r\n                // [ -180, 90]\r\n\r\n\r\n                // [bound._sw[0], bound._sw[1]],\r\n                // [bound._sw[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._sw[1]],\r\n\r\n                [-125.618336, 48.944262],\r\n                [-125.618336, 24.786775],\r\n                [-65.591812, 24.786775],\r\n                [-65.591812, 48.944262]\r\n\r\n                // [91.4461, 21.5006],\r\n                // [100.3541, 21.5006],\r\n                // [100.3541, 13.9706],\r\n                // [91.4461, 13.9706]\r\n            ],\r\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n            animate: true\r\n        });\r\n\r\n        this.map.addLayer({\r\n            id: 'canvas-layer',\r\n            type: 'raster',\r\n            source: 'canvas-source'\r\n        });\r\n\r\n    }\r\n    public zoom = (z: number) => {\r\n        // this.map.setZoom(z);\r\n        // return this.map.zoomTo(z, {animate:true} )\r\n        return this.map.zoomTo(z)\r\n    }\r\n    public flyTo = (lng: number, lat: number) => {\r\n        return this.map.flyTo({\r\n            center: [lng, lat],\r\n            // duration: 1200, // Animate over 12 seconds\r\n            // essential: true\r\n        });\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        return this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({ x, y } as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        try {\r\n            const p = this.map.project([lon, lat])\r\n            return [p.x, p.y];\r\n        } catch (error) {\r\n            // console.error(error)\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        return downloadImage(canvasMapbox, this.rendererWrapper.renderer.canvas);\r\n    }\r\n    public getViewState() {\r\n        const center = this.map.getCenter();\r\n        // console.log(center);\r\n        return {\r\n            zoom: this.map.getZoom(),\r\n            center: center,\r\n        };\r\n    }\r\n    public mouseDown = (e) => { }\r\n    public mouseUp = (e) => { }\r\n    public mouseMove = (e) => { }\r\n    public mouseDrag = (e) => { }\r\n    public mouseClick = (e) => { }\r\n    public mouseDClick = (e) => { }\r\n    public keyDown = (e) => { }\r\n}\r\n","export * from './util/ColorUtil';\nexport * from './util/VectorUtil';\nexport * from './util/Math'\nexport * from './util/TurfUtil'\nexport * from './DrawingPreest';\nexport * from './constant';\nexport * from './SceneManager';\nexport { getJSONFromURL } from '../../../../../lib';\n\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    let canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    let context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = canvasOut.toDataURL();\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = canvasOut.toDataURL();\n    link.click();    \n};\n\n","import { Deck } from '@deck.gl/core';\nimport { MapView } from '@deck.gl/core';\nimport { ScatterplotLayer, ArcLayer, PolygonLayer } from '@deck.gl/layers';\n// import { MapboxOverlay } from '@deck.gl/mapbox'; \n\nimport {MapboxOverlay} from '@deck.gl/mapbox'\n\n\n// import { MapboxOverlay } from '@deck.gl/mapbox';\n// import { ScatterplotLayer, ArcLayer, PolygonLayer } from '@deck.gl/layers';\n\nimport { RendererWrapper } from '../';\n\nexport class DeckGL {\n    public rendererWrapper: RendererWrapper;\n    public map: mapboxgl.Map;\n    public layers: MapboxOverlay[] = [];\n    constructor(rendererWrapper: RendererWrapper) {\n        this.rendererWrapper = rendererWrapper;\n        this.map = this.rendererWrapper.mapBoxWrapper.map;\n    }\n    public initPost() {\n        // TODO:\n    }\n    // [ {position: [-74.5, 40], size: 10000}, ]\n    public addScatterLayer(data: any) {\n        const deckLayer = new MapboxOverlay({\n            id: `scatter-${this.layers.length}`,\n            // type: ScatterplotLayer,\n            // data: data,\n            // @ts-ignore\n            getPosition: d => d.position,\n            getRadius: d => d.size,\n            getFillColor: d => {\n                if (d.color !== undefined) {\n                    return d.color;\n                } else {\n                    return [255, 255, 0];\n                }\n            },\n            getLineColor: d => [255, 255, 255],\n            onClick: (info, event) => console.log('Clicked:', info, event)\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    // https://deck.gl/docs/api-reference/layers/polygon-layer\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        const deckLayer = new MapboxOverlay({\n            id: `polygon-${this.layers.length}`,\n            // type: PolygonLayer,\n            // data: data,\n            // @ts-ignore\n            pickable: true,\n            // @ts-ignore\n            stroked: true,\n            filled: true,\n            wireframe: true,\n            lineWidthMinPixels: 1,\n            getPolygon: d => d.contour,\n            getElevation: d => 1, //d.population / d.area / 10,\n            getFillColor: d => d.color, // [100, 100, 100], // [d.population / d.area / 60, 140, 0],\n            getLineColor: d => [0, 0, 0],\n            getLineWidth: 1,\n            onClick: (info, event) => {\n                // console.log('Clicked:', info, event)\n                // console.log(info.index)\n                onClick(info, event);\n            }\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    public addArcLayer(data: any) {\n        const deckLayer = new MapboxOverlay({\n            id: `arc-${this.layers.length}`,\n            // data: data,\n            // type: ArcLayer,\n            // @ts-ignore\n            getSourcePosition: d => d.pickup,\n            getTargetPosition: d => d.dropoff,\n            getSourceColor: d => [255, 128, 0],\n            getTargetColor: d => [0, 128, 255],\n            strokeWidth: 5\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    private addLayer(deckLayer: MapboxOverlay, label: string = 'waterway-label') {\n        // @ts-ignore\n        this.map.addLayer(deckLayer, label);\n        this.layers.push(deckLayer)\n    }\n    public pick() {\n        // this.map.getob\n    }\n}","export class Deltatime {\n    public now: number;\n    public delta: number;\n    public frameRate: number;\n\n    private last: number = 0;\n    private timeLastRender: number;\n    msLoop: number;\n    constructor() {\n        //\n    }\n    public UpdateFPS() {\n        this.now = window.performance.now();\n        this.msLoop = this.now - this.last;\n        this.last = this.now;\n\n        this.delta = this.delta + Math.min(1, (this.msLoop) / 1000);\n\n        if (this.delta > this.frameRate) { this.delta = this.delta - this.frameRate; }\n\n        this.delta = (Date.now() - this.timeLastRender) / 1000;\n        this.timeLastRender = Date.now();\n        this.frameRate = (1 / this.delta);\n\n    }\n    public get dt() {\n        return this.delta;\n    }\n}\n\nexport class RendererCanvasDynamicLight {\n    public divHost: HTMLDivElement;\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    public isDown: boolean = false;\n    public debugMode: boolean = false;\n    public isStatic: boolean = false;\n    public log: string = '';\n\n    private prevent: boolean = false;\n    private animation: boolean = false;\n    private delay: number = 90;\n\n    private frameNum = 1;\n    private timer: NodeJS.Timer | number;\n    private isDrag: boolean = false;\n\n    deltaTime: Deltatime;\n\n    constructor(div: HTMLDivElement) {\n        this.divHost = div;\n        this.deltaTime = new Deltatime();\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas = document.createElement('canvas') as HTMLCanvasElement;\n        // this.canvas.style.position = 'absolute';\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n        this.divHost.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.canvas.onclick = (e: MouseEvent) => {\n            this.timer = setTimeout(() => {\n                if (!this.prevent) {\n                    this.mouseClick(e.offsetX, e.offsetY);\n                }\n                this.isDrag = false;\n                this.prevent = false;\n            },\n                this.delay);\n        };\n        this.canvas.onwheel = (e: WheelEvent) => {\n            this.mouseWheel(e);\n        };\n        this.canvas.ondblclick = (e: MouseEvent) => {\n            clearTimeout(this.timer as number);\n            this.prevent = true;\n            this.mouseDoubleClick(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousedown = (e: MouseEvent) => {\n            this.isDown = true;\n            this.mouseDown(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmouseup = (e: MouseEvent) => {\n            this.isDown = false;\n            this.isDrag = false;\n            this.mouseUp(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousemove = (e: MouseEvent) => {\n            if (this.isDown) {\n                this.isDrag = true;\n                this.prevent = true;\n                this.mouseDrag(e.offsetX, e.offsetY);\n            } else {\n                this.mouseMove(e.offsetX, e.offsetY);\n            }\n        };\n        window.addEventListener('resize', this.resize);\n        // this.loop(this.ctx);\n    }\n    public start = () => {\n        this.loop(this.ctx);\n    }\n    private resize = () => {\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n    }\n    public destroy() {\n        window.removeEventListener('resize', this.resize);\n        this.isStatic = true;\n        try {\n            while (this.divHost !== undefined && this.divHost.lastElementChild !== undefined) {\n                this.divHost.removeChild(this.divHost.lastElementChild);\n            }\n        } catch (error) { }\n    }\n    public loop = (ctx: CanvasRenderingContext2D) => {\n        if (this.isStatic) { return; }\n        let before = performance.now();\n        requestAnimationFrame(() => { this.loop(ctx); });\n        \n        this.deltaTime.UpdateFPS();\n        if (this.frameNum++ < 300 || this.animation) {\n            this.renderPre(ctx);\n        }\n        let after = performance.now();\n        this.log = `total frames: ${this.frameNum++} (FPS: ${this.deltaTime.frameRate.toFixed(0)}), a loop took: ${(after - before).toFixed(2)} ms to execute.`;\n    }\n    public renderForce = () => {\n        this.frameNum = 0;\n    }\n    public renderPre(ctx: CanvasRenderingContext2D) {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        this.render(ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        // Binding needed\n    }\n    public mouseClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('click'); }\n    }\n    public mouseDoubleClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('d-click'); }\n    }\n    public mouseDown(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('down'); }\n    }\n    public mouseUp(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('up'); }\n    }\n    public mouseMove(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('move'); }\n    }\n    public mouseDrag(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('drag'); }\n    }\n    public mouseWheel(v: WheelEvent) {\n        // Binding needed\n        if (this.debugMode) { console.log('wheel', v); }\n    }\n}","import { RendererCanvasDynamicLight } from './CanvasDynamic';\nimport { RendererWrapper } from '../';\n\nexport class Renderer extends RendererCanvasDynamicLight {\n    public rendererWrapper: RendererWrapper\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n\n    public log: string;\n    public needRenderLoop: boolean = true;\n    public loopNum: number = 0;\n    private loopNumMax = 90;\n\n    constructor(div: any, rendererWrapper: RendererWrapper) {\n        super(div);\n        this.rendererWrapper = rendererWrapper;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        // this.canvas.style.mixBlendMode = 'color-dodge'\n        \n        this.start();\n    }\n    public initPost() {\n        // this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // this.render(this.ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        this.rendererWrapper.solution.scene.renderCanvas(ctx);\n\n        let pointRenderNeeded = false;\n        if (pointRenderNeeded) { this.renderPoint(ctx); }\n\n        // console.log(this.log);\n        this.renderLog(ctx);\n    }\n    public renderLog(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`Lat: ${this.rendererWrapper.solution.activeCommander.mp[1].toFixed(5)},  Lng: ${this.rendererWrapper.solution.activeCommander.mp[0].toFixed(5)}`, (this.canvas.width * 0.5), 50);\n        // ctx.stroke()\n    }\n    public renderPoint(ctx: CanvasRenderingContext2D) {\n        const z = this.rendererWrapper.mapBoxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n\n        for (let i = 0; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.rendererWrapper.mapBoxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n\n            const size = 0.001 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) / zoomFactor), 0, Math.PI * 2);\n            // ctx.arc(p[0], p[1], size + (size * (Math.sin(this.time + i) + 3) * zoomFactor / 10 ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\nimport { DeckGL } from './DeckGL';\nimport { Renderer } from './CanvasCustom';\nimport { Solution } from '../';\n\nexport class RendererWrapper {\n    public solution: Solution;\n    public mapBoxWrapper: MapboxGLWrapper;\n    public deckGL: DeckGL\n    public renderer: Renderer;\n    constructor(solution: Solution) {\n        this.solution = solution;      \n\n        this.mapBoxWrapper = new MapboxGLWrapper(this);\n        this.mapBoxWrapper.mouseDown = (e) => { this.solution.activeCommander.mouseDown(e);}\n        this.mapBoxWrapper.mouseUp = (e) => { this.solution.activeCommander.mouseUp(e);}\n        this.mapBoxWrapper.mouseClick = (e) => { this.solution.activeCommander.mouseClick(e);}\n        this.mapBoxWrapper.mouseDClick = (e) => { this.solution.activeCommander.mouseDClick(e);}\n        this.mapBoxWrapper.mouseMove = (e) => { this.solution.activeCommander.mouseMove(e);}\n        this.mapBoxWrapper.mouseDrag = (e) => { this.solution.activeCommander.mouseDrag(e);}\n        this.mapBoxWrapper.keyDown = (k) => { this.solution.activeCommander.keyDown(k);}\n        \n        this.deckGL = new DeckGL(this);\n        this.renderer = new Renderer(this.solution.divHost, this);\n    }\n    public initPost() {\n        this.renderer.initPost();\n        this.deckGL.initPost();\n    }\n    public downloadScreen() {\n        return this.mapBoxWrapper.downloadImage();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n}","import { Solution } from '../';\n\nimport { TYPE_GEOMETRY } from '../lib';\n\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    public div: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n\n        this.divHost = solution.divHost;\n        this.divHost.style.position = 'absolute';\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        this.div = document.createElement('div');\n        this.div.style.width = '150px';\n        this.div.style.height = '300px';\n        this.divHost.appendChild(this.div);\n\n        this.initUI();\n    }\n    public async initUI() {\n\n        // const svg = await NJSLoader.LoadSVGFromHTTP(process.env.PUBLIC_URL + '/static/dataDummyReady/ready.svg');\n        // console.log(svg);\n\n        // const newElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path'); //Create a path in SVG's namespace\n        // newElement.setAttribute(\"d\",\"M 0 0 L 10 10\"); //Set path's data\n        // newElement.style.stroke = \"#000\"; //Set stroke colour\n        // newElement.style.strokeWidth = \"5px\"; //Set stroke width\n        // this.div.appendChild(newElement);\n\n        const img = new Image();\n        img.src = process.env.PUBLIC_URL + '/static/dataDummyReady/readyLabs.png';\n        img.style.position = 'relative';\n        img.style.width = '150px';\n        img.style.margin = '15px';\n        img.style.marginTop = '30px';\n        img.style.marginBottom = '0px';\n        let a = document.createElement('a');\n        a.href='https://ready.net/';\n        a.appendChild(img);\n        this.div.appendChild(a);\n\n        let div = document.createElement('div');\n        div.textContent = 'Capture Map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.downloadScreen();\n        }\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Set Extent';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.flyTo(-112.188375, 35.267735);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Draw Area';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.POLYGON);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Add Shape';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.RECT);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Shape Type';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.shiftShapeType();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Animation';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleAnimation();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Undo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.undo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Redo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.redo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Hex map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleHexmap();\n        };\n        this.div.appendChild(div);\n    }\n}","import { Scene } from '..';\nimport { SceneManager } from '../../lib';\nexport class SceneState {\n    public scene: Scene;\n    private manager: SceneManager;\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.manager = new SceneManager();\n    }\n    public resetState() {\n        this.manager.reset();\n        this.captureState();\n    }\n    public captureState() {\n        this.manager.push(this.scene.common.getData());\n        const state = this.manager.getCurrentState();\n        // console.log(state);\n        return state;\n    }\n    public undo() {\n        const state = this.manager.undo();\n        this.scene.common.populateArea(state);\n    }\n    public redo() {\n        const state = this.manager.redo();\n        this.scene.common.populateArea(state);\n    }\n}","import * as turf from '@turf/turf';\n\nimport { Solution } from '../';\nimport { SceneState } from './SceneState';\nimport { ACCommon } from '../Common';\nimport { ActiveCommander } from '../ActiveCommander';\nimport { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { hex2RGB, drawingPoint } from '../lib';\n\nimport { LANDUSE_TYPE_MAPPING, FUNDING_STATUS_MAPPING } from '../lib/constant';\n\nexport class Scene {\n    public solution: Solution;\n    public ac: ActiveCommander;\n    public stateManager: SceneState;\n    public common: ACCommon;\n\n    public pts: number[] = [];\n\n    public areas: GeometryBase[] = [];\n    public captured: GeometryBase | undefined = undefined;\n\n    public points: any;\n    public polygonsDifference: any = [];\n    public ids: boolean[] =[];\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.stateManager =  new SceneState(this);\n        this.ac = solution.activeCommander;\n        this.common = solution.common;\n    }\n    public initPre() {\n        this.stateManager.captureState();\n    }\n    public push(g: GeometryBase) {\n        this.areas.push(g);\n    }\n    public remove(g: GeometryBase) {\n        this.areas.splice(this.areas.indexOf(g), 1);\n    }\n    public async init() {\n        this.common.center(-112.190375, 35.257177);\n        this.common.zoom(13);\n\n\n        // init starting\n\n        const polygons = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        const gons = [];\n        const ids = [];\n        const colDefault = hex2RGB(FUNDING_STATUS_MAPPING.default.color);\n        const colAssigned = hex2RGB(FUNDING_STATUS_MAPPING.assigned.color);\n        // console.log(polygons);\n        for (let i of polygons['features']) {\n            const p = (i['geometry']['coordinates']);\n            let color = undefined;\n            const grantStatus = (i['properties']['grant_long_status']);\n            // console.log(grantStatus)\n            if (grantStatus === 'default') { color = colDefault; }\n            else { color = colAssigned; }\n            // if (Math.random() < 0.3) { color = ColorUtility.GetRandomRGBArray(); }\n            // console.log(color)\n            gons.push({ contour: p[0], size: 15, color: color });\n            ids.push(false);\n        }\n        // console.log(gons)\n        this.ids = ids;\n        const onClickEvent = (info, event) => {\n            // console.log('!', info)\n            // console.log('!', info.index)\n            this.ids[info.index] = !this.ids[info.index];\n            this.common.renderForce();\n        }\n        this.common.addPolygonLayer(gons, onClickEvent);\n\n\n        const polygonsDiff = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        this.polygonsDifference = []\n        for (let i of polygonsDiff['features']) {\n            const p = (i['geometry']['coordinates']);\n            // console.log(p[0])\n            this.polygonsDifference.push(turf.polygon(p[0]));\n        }\n\n        // dummy\n        let data = [\n            { position: [-74.5, 40], size: 10000 },\n            { position: [-74.5, 40.5], size: 5000 },\n            { position: [-74.6, 40.5], size: 5800 },\n            { position: [-74.7, 40.5], size: 100 },\n        ];\n        this.common.addScatterLayer(data);\n\n        let data2 = [\n            { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n        ];\n        this.common.addArcLayer(data2);\n\n\n        const points = await this.common.loadDataLocal('underserved_locations.geojson');\n        // console.log(d);\n        const colR = hex2RGB(LANDUSE_TYPE_MAPPING.R.color);\n        const colB = hex2RGB(LANDUSE_TYPE_MAPPING.B.color);\n        const pts = []\n        for (let i of points['features']) {\n            const p = (i['geometry']['coordinates']);\n            const landuse = (i['properties']['landuse']);\n\n            let color = undefined;\n            if (landuse === 'R') { color = colR; }\n            else if (landuse === 'B') { color = colB; }\n            else { color = [0, 128, 0]; }\n\n            pts.push({ position: [p[0], p[1]], size: 15, color: color });\n        }\n        this.common.addScatterLayer(pts);\n        this.points = points;\n    }\n    public renderCanvas(ctx: CanvasRenderingContext2D) {\n\n        for(let i = 0 ; i < this.areas.length; ++i) {\n            this.areas[i].render(ctx);\n        }\n\n        ctx.fillStyle = '#f00';\n        for (let i = 0; i < this.pts.length; ++i) {\n            const p = this.pts[i];\n            drawingPoint(ctx, p[0], p[1]);\n        }\n    }\n}\n\n","import { Solution } from '../';\nexport class ApiWrapper {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n}","import { ACCommon } from './Common';\r\nimport { ActiveCommander } from './ActiveCommander';\r\nimport { RendererWrapper } from './RendererWrapper';\r\nimport { UIWrapper } from './UI';\r\nimport { Scene } from './Scene';\r\nimport { ApiWrapper } from './ApiWrapper';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public common: ACCommon;\r\n    public activeCommander: ActiveCommander;\r\n    public uiWrapper: UIWrapper;\r\n    public rendererWrapper: RendererWrapper;\r\n    public scene: Scene;\r\n    public api: ApiWrapper;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n        this.init();\r\n        this.initPost();\r\n    }\r\n    public init() {\r\n        this.common = new ACCommon(this);\r\n        this.activeCommander = new ActiveCommander(this);\r\n        this.scene = new Scene(this);\r\n        this.rendererWrapper = new RendererWrapper(this);\r\n        this.uiWrapper = new UIWrapper(this);\r\n        this.api = new ApiWrapper(this);\r\n    }\r\n    public destroy() {\r\n        this.rendererWrapper.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n    public async initPost() {\r\n        this.scene.initPre();\r\n        await this.scene.init();\r\n    }\r\n    \r\n}","import {\n  Feature,\n  FeatureCollection,\n  Geometry,\n  LineString,\n  MultiPoint,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { isNumber } from \"@turf/helpers\";\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord: Feature<Point> | Point | number[]): number[] {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n\n  if (!Array.isArray(coord)) {\n    if (\n      coord.type === \"Feature\" &&\n      coord.geometry !== null &&\n      coord.geometry.type === \"Point\"\n    ) {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (\n    Array.isArray(coord) &&\n    coord.length >= 2 &&\n    !Array.isArray(coord[0]) &&\n    !Array.isArray(coord[1])\n  ) {\n    return [...coord];\n  }\n\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords<\n  G extends\n    | Point\n    | LineString\n    | Polygon\n    | MultiPoint\n    | MultiLineString\n    | MultiPolygon,\n>(coords: any[] | Feature<G> | G): any[] {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n\n  // Feature\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    // Geometry\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates: any[]): boolean {\n  if (\n    coordinates.length > 1 &&\n    isNumber(coordinates[0]) &&\n    isNumber(coordinates[1])\n  ) {\n    return true;\n  }\n\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value: any, type: string, name: string): void {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        value.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature: Feature<any>, type: string, name: string): void {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        feature.geometry.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(\n  featureCollection: FeatureCollection<any>,\n  type: string,\n  name: string\n) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" +\n          name +\n          \": must be a \" +\n          type +\n          \", given \" +\n          feature.geometry.type\n      );\n    }\n  }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom<G extends Geometry>(geojson: Feature<G> | G): G {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(\n  geojson: Feature<any> | FeatureCollection<any> | Geometry,\n  _name?: string\n): string {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\n\nexport {\n  getCoord,\n  getCoords,\n  containsNumber,\n  geojsonType,\n  featureOf,\n  collectionOf,\n  getGeom,\n  getType,\n};\n// No default export!\n"],"names":["hex2RGB","hex","isGray","replace","r","parseInt","substring","g","b","v","distance","v0","v1","Math","sqrt","x","y","z","isInsideOfVecs","vecs","inside","i","j","length","xi","yi","xj","yj","closestPointOnLine","pt","p0","p1","A","B","C","dis","abs","getAngleByTwoVectorsRadian","acos","dotProduct","normalize","getCosAngleByTwoVectors","len","RVector3","v2","getCenterVec","vs","lng","lat","constructor","ele","this","difference","features","geoms","geomEach","geom","push","coordinates","Error","properties","differenced","polygonClipping","slice","polygon","multiPolygon","area","polygons","boolean","turf","computePathPolygon","object","projection","path","Path2D","pathOut","p","sp","moveTo","lineTo","closePath","addPath","drawingPoint","ctx","beginPath","arc","PI","fill","renderControlPoint","fillColor","strokeColor","lineWidth","fillStyle","strokeStyle","forEach","stroke","LANDUSE_TYPE_MAPPING","text","color","FUNDING_STATUS_MAPPING","TYPE_GEOMETRY","RECT","CIRCLE","POLYGON","SceneManager","histories","currentIndex","reset","data","splice","getCurrentIndex","getHistoryLength","getCurrentState","historyNum","undo","redo","GeometryBase","scene","TYPE","t","id","capturedVecId","isHovered","hasAnimation","updateNeeded","captureNeeded","referPoint","_isSelected","polygonTurfOriginal","polygonTurfSubtracted","d","Date","getTime","c","random","floor","toString","getUUID","isSelected","isInside","translate","removeVertexLastVertex","update","onMouseUp","onMouseClick","e","onMouseDoubleClick","shiftType","updateGeoProjection","updateGhostPos","render","renderPost","toJson","updateWidthHight","width","height","remove","toggleHexmap","AreaGeometry","vec","vsRect","segR","vsCircle","initRect","initCircleVec","widthHalf","heightHalf","cos","sin","updateScreen","toScreen","updateProjection","toMap","mp","updateCenterVec","xSum","ySum","updateScreenPosCircle","from","to","options","coordinates1","getCoord","coordinates2","dLat","degreesToRadians","dLon","lat1","lat2","a","pow","radiansToLength","atan2","units","geojson","segmentReduce","previousValue","segment","coords","geometry","geomReduce","value","total","type","polygonArea","calculateArea","ringArea","FACTOR","earthRadius","PI_OVER_180","coordsLength","lower","middle","upper","lowerX","middleY","ii","k","f","u1","u2","currentP","nextP","numContours","contourLen","contour","booleanPointInPolygon","point","getGeom","bbox","polys","inBBox","result","polyResult","pip","ignoreBoundary","pointsWithinPolygon","points","results","featureEach","contained","pointInPolygon","pointsWithin","coordEach","pointCoord","multiPoint","featureCollection","Renderer","host","pathCroppedArea","renderAreaBounding","renderCroppedArea","renderDim","renderSelected","renderCenterPoint","renderProperties","solution","rendererWrapper","mapBoxWrapper","map","isMoving","diff","polygonsDifference","ids","common","setLineDash","lineDashOffset","op","transform","cVecGhost","textAlign","font","line","fillText","toFixed","save","rotate","restore","ellipse","rect","split","pts","other","offset","Transform","heighthHalf","preX","activeCommander","mpPre","preY","hexRebuild","updateGhostVecs","hexReposition","xOff","yOff","hexmap","reposition","updateActiveHexByBoudnary","initHex","HexMapDynamic","rx","ry","listPixel","ddx","ddy","ptsCenter","offScale","init","initGrid","computeHex","computeHexOff","initWithR","filterWithinR","computeGeoVec","initWithVecs","filterWithinVecs","xArray","alter","Hexbin","bVec","updateCenVec","updatePolygon","temp","cv","minNum","Number","MAX_SAFE_INTEGER","maxNum","MIN_SAFE_INTEGER","renderBins","updatePre","updatePost","updateScreenPos","updatePolygonTurf","boundary","bin","isActive","isHover","isVisit","updateWithMouseInteraction","nPix","isOver","updateGoeVec","updateScreenVec","isMouseInside","col","m","Area","super","renderer","cp","undefined","mVec","r0","r1","threshold","isInsideEllipse","captureScene","AreaPolygonGeometry","MAX_VALUE","MIN_VALUE","removeLast","pop","resetBoundary","removeVecByIndex","index","insertVec","sel","underConstruction","deg","AreaPolygon","fromJson","lngLat","insertPt","captured","ACCommon","zoom","flyTo","center","lon","renderForceWithUpdate","renderForce","areas","downloadScreen","enablePan","dragPan","enable","disablePan","disable","getJSONFromURL","process","addScatterLayer","deckGL","addArcLayer","addPolygonLayer","onClick","addShape","drawMode","canvas","shiftShapeType","toggleAnimation","deSelectedAll","removeSelected","checkHoverArea","pickObject","obj","getViewState","getData","extent","stateManager","captureState","onExtentDone","populateArea","ActiveCommander","mouseDown","updateMousePos","mouseUp","mouseDClick","doubleClickZoom","mouseDrag","updateMousePrePos","mouseClick","mouseMove","keyDown","key","MapboxGLWrapper","canvasMapbox","isPressed","zoomTo","setCenter","unproject","project","error","initMap","divHost","mapboxgl","preserveDrawingBuffer","container","style","dragRotate","on","window","addEventListener","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","getBounds","addSource","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","img","Image","src","toDataURL","link","download","href","click","getCenter","getZoom","DeckGL","layers","deckLayer","MapboxOverlay","getPosition","getRadius","size","getFillColor","getLineColor","info","event","console","log","pickable","stroked","filled","wireframe","lineWidthMinPixels","getPolygon","getElevation","getLineWidth","getSourcePosition","pickup","getTargetPosition","dropoff","getSourceColor","getTargetColor","strokeWidth","label","pick","Deltatime","now","delta","frameRate","last","timeLastRender","msLoop","UpdateFPS","performance","min","dt","RendererCanvasDynamicLight","isDown","debugMode","isStatic","prevent","animation","delay","frameNum","timer","isDrag","deltaTime","start","loop","resize","bounding","getBoundingClientRect","before","requestAnimationFrame","renderPre","after","appendChild","onclick","setTimeout","offsetX","offsetY","onwheel","mouseWheel","ondblclick","clearTimeout","mouseDoubleClick","onmousedown","onmouseup","onmousemove","destroy","removeEventListener","lastElementChild","removeChild","clearRect","time","needRenderLoop","loopNum","loopNumMax","pointerEvents","renderCanvas","renderLog","renderPoint","zoomFactor","RendererWrapper","UIWrapper","divMenu","initUI","margin","marginTop","marginBottom","textContent","SceneState","manager","resetState","state","Scene","ac","initPre","indexOf","loadDataLocal","gons","colDefault","colAssigned","polygonsDiff","colR","colB","landuse","ApiWrapper","Solution","uiWrapper","api","getElementById","coord","Array","isArray","collectionOf","name","feature"],"sourceRoot":""}