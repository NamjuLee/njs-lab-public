"use strict";(self.webpackChunkNJS_Lab=self.webpackChunkNJS_Lab||[]).push([[78860],{5800:(e,t,r)=>{r.d(t,{DL:()=>d,Ht:()=>w,Kn:()=>P,Tu:()=>c,Ym:()=>a,_R:()=>g,dq:()=>y,hX:()=>p,lF:()=>v,ot:()=>h,rQ:()=>n,tw:()=>m,uf:()=>f,xm:()=>s,yu:()=>u,zL:()=>l});var n=6371008.8,o={centimeters:100*n,centimetres:100*n,degrees:360/(2*Math.PI),feet:3.28084*n,inches:39.37*n,kilometers:n/1e3,kilometres:n/1e3,meters:n,metres:n,miles:n/1609.344,millimeters:1e3*n,millimetres:1e3*n,nauticalmiles:n/1852,radians:1,yards:1.0936*n},i={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,nauticalmiles:2.9155334959812285e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046};function l(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function s(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!b(e[0])||!b(e[1]))throw new Error("coordinates must contain numbers");return l({type:"Point",coordinates:e},t,r)}function a(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f(e.map((e=>s(e,t))),r)}function u(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(const n of e){if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(n[n.length-1].length!==n[0].length)throw new Error("First and last Position are not equivalent.");for(let e=0;e<n[n.length-1].length;e++)if(n[n.length-1][e]!==n[0][e])throw new Error("First and last Position are not equivalent.")}return l({type:"Polygon",coordinates:e},t,r)}function c(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return l({type:"LineString",coordinates:e},t,r)}function f(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function g(e,t){return l({type:"MultiLineString",coordinates:e},t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{})}function h(e,t){return l({type:"MultiPoint",coordinates:e},t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{})}function m(e,t){return l({type:"MultiPolygon",coordinates:e},t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{})}function y(e,t){return l({type:"GeometryCollection",geometries:e},t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{})}function d(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"kilometers";const r=o[t];if(!r)throw new Error(t+" units is invalid");return e*r}function v(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"kilometers";const r=o[t];if(!r)throw new Error(t+" units is invalid");return e/r}function w(e){return e%360*Math.PI/180}function p(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"meters",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"kilometers";if(!(e>=0))throw new Error("area must be a positive number");const n=i[t];if(!n)throw new Error("invalid original units");const o=i[r];if(!o)throw new Error("invalid final units");return e/n*o}function b(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function P(e){return null!==e&&"object"===typeof e&&!Array.isArray(e)}},78860:(e,t,r)=>{r.d(t,{By:()=>i,aX:()=>c,hE:()=>u,mm:()=>s,nG:()=>a,on:()=>l,pZ:()=>o});var n=r(5800);function o(e,t,r){if(null!==e)for(var n,i,l,s,a,u,c,f,g=0,h=0,m=e.type,y="FeatureCollection"===m,d="Feature"===m,v=y?e.features.length:1,w=0;w<v;w++){a=(f=!!(c=y?e.features[w].geometry:d?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var p=0;p<a;p++){var b=0,P=0;if(null!==(s=f?c.geometries[p]:c)){u=s.coordinates;var k=s.type;switch(g=!r||"Polygon"!==k&&"MultiPolygon"!==k?0:1,k){case null:break;case"Point":if(!1===t(u,h,w,b,P))return!1;h++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],h,w,b,P))return!1;h++,"MultiPoint"===k&&b++}"LineString"===k&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(i=0;i<u[n].length-g;i++){if(!1===t(u[n][i],h,w,b,P))return!1;h++}"MultiLineString"===k&&b++,"Polygon"===k&&P++}"Polygon"===k&&b++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for(P=0,i=0;i<u[n].length;i++){for(l=0;l<u[n][i].length-g;l++){if(!1===t(u[n][i][l],h,w,b,P))return!1;h++}P++}b++}break;case"GeometryCollection":for(n=0;n<s.geometries.length;n++)if(!1===o(s.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length&&!1!==t(e.features[r],r);r++);}function l(e,t){var r,n,o,i,l,s,a,u,c,f,g=0,h="FeatureCollection"===e.type,m="Feature"===e.type,y=h?e.features.length:1;for(r=0;r<y;r++){for(s=h?e.features[r].geometry:m?e.geometry:e,u=h?e.features[r].properties:m?e.properties:{},c=h?e.features[r].bbox:m?e.bbox:void 0,f=h?e.features[r].id:m?e.id:void 0,l=(a=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<l;o++)if(null!==(i=a?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,g,u,c,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],g,u,c,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,g,u,c,f))return!1;g++}}function s(e,t,r){var n=r;return l(e,(function(e,o,i,l,s){n=0===o&&void 0===r?e:t(n,e,o,i,l,s)})),n}function a(e,t){l(e,(function(e,r,o,i,l){var s,a=null===e?null:e.type;switch(a){case null:case"Point":case"LineString":case"Polygon":return!1!==t((0,n.zL)(e,o,{bbox:i,id:l}),r,0)&&void 0}switch(a){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}for(var u=0;u<e.coordinates.length;u++){var c={type:s,coordinates:e.coordinates[u]};if(!1===t((0,n.zL)(c,o),r,u))return!1}}))}function u(e,t,r){var i=r,l=!1;return function(e,t){a(e,(function(e,r,i){var l=0;if(e.geometry){var s=e.geometry.type;if("Point"!==s&&"MultiPoint"!==s){var a,u=0,c=0,f=0;return!1!==o(e,(function(o,s,g,h,m){if(void 0===a||r>u||h>c||m>f)return a=o,u=r,c=h,f=m,void(l=0);var y=(0,n.Tu)([a,o],e.properties);if(!1===t(y,r,i,m,l))return!1;l++,a=o}))&&void 0}}}))}(e,(function(e,n,o,s,a){i=!1===l&&void 0===r?e:t(i,e,n,o,s,a),l=!0})),i}function c(e,t,r){var o=r;return function(e,t){if(!e)throw new Error("geojson is required");a(e,(function(e,r,o){if(null!==e.geometry){var i=e.geometry.type,l=e.geometry.coordinates;switch(i){case"LineString":if(!1===t(e,r,o,0,0))return!1;break;case"Polygon":for(var s=0;s<l.length;s++)if(!1===t((0,n.Tu)(l[s],e.properties),r,o,s))return!1}}}))}(e,(function(e,n,i,l){o=0===n&&void 0===r?e:t(o,e,n,i,l)})),o}}}]);
//# sourceMappingURL=78860.af472683.chunk.js.map