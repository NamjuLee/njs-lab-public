{"version":3,"file":"static/js/5690.c173ccec.chunk.js","mappings":"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","sources":["njslab/Tools/A-Star-Graph/index.ts"],"sourcesContent":["import { PARAM } from 'App';\r\nimport { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost;\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n        this.divHost.appendChild(div);\r\n\r\n        // if (PARAM.demo) {\r\n            this.renderer = new Renderer(div);\r\n\r\n            let btn = document.createElement('div');\r\n            div.appendChild(btn);\r\n            btn.textContent = 'Reset';\r\n            btn.onclick = () => {\r\n                this.renderer.Build();\r\n            };\r\n            const cBox = getCheckBox('Connectivity');\r\n            div.appendChild(cBox.div);\r\n            cBox.checkBox.checked = false;\r\n            cBox.checkBox.onchange = () => {\r\n                console.log(cBox.checkBox.checked)\r\n                if (cBox.checkBox.checked === true) {\r\n                    this.renderer.connectionDiagonal = true;\r\n                } else {\r\n                    this.renderer.connectionDiagonal = false;\r\n                }\r\n            }\r\n\r\n            btn = document.createElement('div');\r\n            div.appendChild(btn);\r\n            btn.textContent = 'Play and Stop toggle';\r\n            btn.onclick = () => {\r\n                this.renderer.playToggle = !this.renderer.playToggle;\r\n            };\r\n\r\n            const sl2 = getSlider('Heuristic intensity', 0, 1000);\r\n            div.appendChild(sl2.div);\r\n            sl2.slider.oninput = () => {\r\n                const val = 1 / +sl2.slider.value - 0.001;\r\n                this.renderer.graph.heuristicConst = val;\r\n            };\r\n\r\n\r\n        // }\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nconst renderCell = (ctx: CanvasRenderingContext2D, node: Node, col: string, cellSize: number) => {\r\n    ctx.fillStyle = col;\r\n    ctx.beginPath();\r\n    ctx.rect(node.x * cellSize, node.y * cellSize, cellSize - 1, cellSize - 1);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n};\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    w: number = 0;\r\n    h: number = 0;\r\n    cols: number = 0;\r\n    rows: number = 0;\r\n    cellSize: number = 20;\r\n    gridWidth: number = 0;\r\n    gridHeight: number = 0;\r\n    chanceOfWalls: number = 0.35;\r\n    connectionDiagonal = false\r\n\r\n    graph: PixelMap;\r\n\r\n    playToggle = true;\r\n\r\n    frame = 0;\r\n    public divTextIteration: HTMLDivElement;\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.divTextIteration = document.createElement('div');\r\n        div.appendChild(this.divTextIteration);\r\n\r\n        this.Build();\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        if (this.playToggle) {\r\n            const result = this.graph.propagation();\r\n            this.divTextIteration.textContent = `${this.frame++} iterations`;\r\n        }\r\n        // const result = this.graph.gePath();\r\n        if (this.graph.doneComputation) { this.Build(); }\r\n        // console.log(result)\r\n\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                const node = this.graph.grid[i][j];\r\n                let color = 'rgb(190, 190, 190)';\r\n\r\n                if (node.blocked) { color = `rgba(0, 0, 0, 0.9)`; }\r\n                if (node === this.graph.endNode) { color = `rgba(255, 0, 255, 0.9)`; }\r\n\r\n                renderCell(ctx, node, color, this.cellSize);\r\n\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.graph.openNodes.length; i++) { // render open nodes\r\n            const node = this.graph.openNodes[i];\r\n            const color = 'rgb(0, 0, 255)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.graph.closedNodes.length; i++) { // visited nodes\r\n            const node = this.graph.closedNodes[i];\r\n            const color = 'rgb(255, 0, 0)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.graph.path.length; i++) { // path\r\n            const node = this.graph.path[i];\r\n            const color = 'rgb(0, 255, 0)';\r\n            renderCell(ctx, node, color, this.cellSize);\r\n        }\r\n\r\n        for (let i = 0; i < this.cols; i++) { // connection\r\n            for (let j = 0; j < this.rows; j++) {\r\n                const node = this.graph.grid[i][j];\r\n                if (node.blocked) { continue; }\r\n                for (let k = 0; k < node.neighbors.length; ++k) {\r\n                    ctx.strokeStyle = '#fff';\r\n                    ctx.lineWidth = 0.58;\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(this.cellSize * node.x + this.cellSize * 0.5, this.cellSize * node.y + this.cellSize * 0.5);\r\n                    ctx.lineTo(this.cellSize * node.neighbors[k].x + this.cellSize * 0.5, this.cellSize * node.neighbors[k].y + this.cellSize * 0.5);\r\n                    ctx.stroke();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    public Build() {\r\n        this.frame = 0;\r\n        this.w = this.canvas.width;\r\n        this.h = this.canvas.height;\r\n        this.cols = Math.floor(this.w / this.cellSize);\r\n        this.rows = Math.floor(this.h / this.cellSize);\r\n        this.gridWidth = this.w;\r\n        this.gridHeight = this.h;\r\n\r\n\r\n        this.graph = new PixelMap();\r\n        this.graph.connectionDiagonal = this.connectionDiagonal;\r\n\r\n        //Build navigation grid\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                if (this.graph.grid[i] === undefined)\r\n                    this.graph.grid[i] = [];\r\n\r\n                const node = new Node(i, j);\r\n                if (Math.random() < this.chanceOfWalls) { node.blocked = true; }\r\n                this.graph.grid[i][j] = node;\r\n            }\r\n        }\r\n\r\n        this.graph.startNode = this.getRandomCell();\r\n        this.graph.startNode.blocked = false;\r\n\r\n        this.graph.endNode = this.getRandomCell();\r\n        this.graph.endNode.blocked = false;\r\n\r\n        //find neighbors\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                this.graph.buildConnection(this.graph.grid[i][j], this.cols, this.rows);\r\n            }\r\n        }\r\n\r\n        this.graph.openNodes.push(this.graph.startNode);\r\n\r\n    }\r\n    getRandomCell() {\r\n        return this.graph.grid[Math.floor(Math.random() * this.cols)][Math.floor(Math.random() * this.rows)];\r\n    }\r\n}\r\n\r\nclass PixelMap {\r\n    public grid: Node[][] = [];\r\n    public openNodes: Node[] = [];\r\n    public closedNodes: Node[] = [];\r\n    public startNode: Node;\r\n    public endNode: Node;\r\n    public path: Node[] = [];\r\n    public heuristicConst = 1;\r\n    public doneComputation: boolean = false;\r\n    public connectionDiagonal = false;\r\n    // constructor() {\r\n    //     // TODO\r\n    // }\r\n    public buildConnection = (node: Node, cols: number, rows: number) => {\r\n        if (node.blocked) { return; }\r\n\r\n        let x = node.x;\r\n        let y = node.y;\r\n\r\n        if (x < cols - 1) {\r\n            if (!this.grid[x + 1][y].blocked) {\r\n                node.neighbors.push(this.grid[x + 1][y]);\r\n            } // right\r\n        }\r\n\r\n        if (y < rows - 1) {\r\n            if (!this.grid[x][y + 1].blocked) {\r\n                node.neighbors.push(this.grid[x][y + 1]);\r\n            } // bottom\r\n        }\r\n\r\n        if (x > 0) {\r\n            if (!this.grid[x - 1][y].blocked) {\r\n                node.neighbors.push(this.grid[x - 1][y]);\r\n            } // left\r\n        }\r\n\r\n        if (y > 0) {\r\n            if (!this.grid[x][y - 1].blocked) {\r\n                node.neighbors.push(this.grid[x][y - 1]);\r\n            } // top\r\n        }\r\n        if (this.connectionDiagonal) {\r\n            console.log(this.connectionDiagonal);\r\n            if (x > 0 && y > 0) {\r\n                if (!this.grid[x - 1][y - 1].blocked) {\r\n                    node.neighbors.push(this.grid[x - 1][y - 1]);\r\n                }\r\n            } // left up\r\n            if (x < cols - 1 && y < rows - 1) {\r\n                if (!this.grid[x + 1][y + 1].blocked) {\r\n                    node.neighbors.push(this.grid[x + 1][y + 1]);\r\n                }\r\n            } // right bottom\r\n            if (x > 0 && y < rows - 1) {\r\n                if (!this.grid[x - 1][y + 1].blocked) {\r\n                    node.neighbors.push(this.grid[x - 1][y + 1]);\r\n                }\r\n            } // left bottom\r\n            if (x < cols - 1 && y > 0) {\r\n                if (!this.grid[x + 1][y - 1].blocked) {\r\n                    node.neighbors.push(this.grid[x + 1][y - 1]);\r\n                }\r\n            } // right top\r\n        }\r\n    }\r\n    public gePath() {\r\n        let result = undefined;\r\n        let count = this.grid[0].length * this.grid.length\r\n        while (count--) {\r\n            result = this.propagation();\r\n            if (result !== undefined && result.length) {\r\n                return result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    public propagation() {\r\n        // console.log('-----');\r\n        if (this.openNodes.length > 0) {\r\n            //find the lowest f in open nodes\r\n            let lowestF = 0;\r\n            for (let i = 0; i < this.openNodes.length; i++) {\r\n                if (this.openNodes[i].f < this.openNodes[lowestF].f) {\r\n                    lowestF = i;\r\n                }\r\n\r\n                if (this.openNodes[i].f === this.openNodes[lowestF].f) {\r\n                    if (this.openNodes[i].g > this.openNodes[lowestF].g) {\r\n                        lowestF = i;\r\n                    }\r\n                }\r\n            }\r\n            let current: Node = this.openNodes[lowestF];\r\n\r\n            if (current === this.endNode) {\r\n                //reached the end node so wait a sec and restart\r\n                this.doneComputation = true;\r\n                return this.path;\r\n            }\r\n\r\n            //calculate path\r\n            this.path = [];\r\n            let temp = current;\r\n            while (temp.previous) {\r\n                this.path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n            // console.log(this.path.length);\r\n\r\n            this.openNodes.splice(this.openNodes.indexOf(current), 1);\r\n            this.closedNodes.push(current);\r\n\r\n            let neighbors = current.neighbors;\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                let neighbor = neighbors[i];\r\n\r\n                if (!this.closedNodes.includes(neighbor) && !neighbor.blocked) {\r\n                    let tempG = current.g + heuristic(neighbor, current) * this.heuristicConst;\r\n\r\n                    if (!this.openNodes.includes(neighbor)) {\r\n                        this.openNodes.push(neighbor);\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n\r\n                    neighbor.g = tempG;\r\n                    neighbor.h = heuristic(neighbor, this.endNode);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current\r\n                }\r\n            }\r\n            return undefined;\r\n        } else {\r\n            this.doneComputation = true;\r\n            return this.path;\r\n        }\r\n    }\r\n}\r\nclass Node {\r\n    public f = 0;\r\n    public h = 0;\r\n    public g = 0;\r\n\r\n    public x = 0;\r\n    public y = 0;\r\n    public z = 0;\r\n    public neighbors: Node[] = [];\r\n    public previous = undefined;\r\n    public blocked = false;\r\n    constructor(x: number, y: number) {\r\n        this.f = 0;\r\n        this.h = 0;\r\n        this.g = 0;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.neighbors = [];\r\n        this.blocked = false;\r\n    }\r\n}\r\nconst heuristic = (a: Node, b: Node) => {\r\n    let d = 0;\r\n    // d = distanceManhattan(a.x, a.y, a.z, b.x, b.y, b.z); // find the Manhattan distance (best for grids)\r\n    d = distanceEuclidean(a.x, a.y, a.z, b.x, b.y, b.z); // euclidean - find the direct distance\r\n    return d;\r\n}\r\nconst distanceManhattan = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n    return Math.abs(x0 - x1) + Math.abs(y0 - y1) + Math.abs(z0 - z1);\r\n}\r\nconst distanceEuclidean = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n}\r\n\r\n\r\n\r\n// ..................................\r\n\r\nconst getSlider = (title: string, min: number, max: number) => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = `${min}`;\r\n    slider.max = `${max}`;\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider\r\n    }\r\n};\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    checkBox.defaultChecked = false;\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","btn","textContent","onclick","Build","cBox","getCheckBox","checkBox","checked","onchange","console","log","connectionDiagonal","playToggle","sl2","getSlider","slider","oninput","val","value","graph","heuristicConst","destroy","lastElementChild","removeChild","renderCell","ctx","node","col","cellSize","fillStyle","beginPath","rect","x","y","closePath","fill","w","h","cols","rows","gridWidth","gridHeight","chanceOfWalls","frame","divTextIteration","canvas","position","start","propagation","doneComputation","i","j","grid","color","blocked","endNode","openNodes","length","closedNodes","path","k","neighbors","strokeStyle","lineWidth","moveTo","lineTo","stroke","Math","floor","PixelMap","undefined","Node","random","startNode","getRandomCell","buildConnection","push","RendererCanvas","result","count","lowestF","f","g","current","temp","previous","splice","indexOf","neighbor","includes","tempG","heuristic","z","a","b","distanceEuclidean","x0","y0","z0","x1","y1","z1","sqrt","title","min","max","type","text","defaultChecked"],"sourceRoot":""}