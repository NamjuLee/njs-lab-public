{"version":3,"file":"static/js/14867.ef31955c.chunk.js","mappings":"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","sources":["njslab/Tools/MapboxDeckGLPolygon/MapboxGLWrapper/index.ts","njslab/Tools/MapboxDeckGLPolygon/lib/index.ts","njslab/Tools/MapboxDeckGLPolygon/DeckGL/index.ts","njslab/Tools/MapboxDeckGLPolygon/CanvasCustom/index.ts","njslab/Tools/MapboxDeckGLPolygon/UI/index.ts","njslab/Tools/MapboxDeckGLPolygon/index.ts"],"sourcesContent":["import mapboxgl from \"mapbox-gl\";\r\n\r\nimport { OrbitView, PolygonLayer, COORDINATE_SYSTEM, ArcLayer, ScatterplotLayer } from 'deck.gl';\r\nimport { Deck } from '@deck.gl/core';\r\nimport DeckGL from 'deck.gl';\r\n\r\nimport { Solution } from '..';\r\n\r\nimport { downloadImage } from '../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public solution: Solution;\r\n    public map: mapboxgl.Map;\r\n\r\n    public canvasMapbox;\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.initMap(solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.NEXT_PUBLIC_API_KEY_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 6,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n            \r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n\r\n        // new ScatterplotLayer({\r\n        //     id: 'scatter-plot',\r\n        //     data: YOUR_DATA_ARRAY, // Your data goes here\r\n        //     getPosition: d => [d.longitude, d.latitude],\r\n        //     getRadius: d => d.radius,\r\n        //     getColor: d => d.color,\r\n        //   }),\r\n\r\n        // this.map.addLayer({layer})\r\n\r\n\r\n\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => {\r\n            // console.log(k)\r\n            // if (k.key === 'p'){\r\n\r\n            // }\r\n        });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost(){\r\n        this.solution.initPost();\r\n\r\n        // const canvas = document.createElement('canvas');\r\n        // this.solution.divHost.appendChild(canvas);\r\n        // canvas.id = 'canvasID';\r\n        // canvas.width = this.solution.divHost.clientWidth;\r\n        // canvas.height = this.solution.divHost.clientHeight;\r\n        \r\n        // this.initCustomCanvas();\r\n\r\n        // this.solution.renderer.canvas.style.width = '200%';\r\n        // this.solution.renderer.canvas.style.height = '200%';\r\n        this.canvasMapbox = this.map.getCanvas();\r\n\r\n        // this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        // this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n    }\r\n    public initCustomCanvas(){\r\n\r\n        this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n\r\n        // this.solution.renderer.canvas.style.width = '100%';\r\n        // this.solution.renderer.canvas.style.height = '100%';\r\n        this.solution.renderer.canvas.style.display = 'none';\r\n\r\n       const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n       this.map.addSource('canvas-source', {\r\n            type: 'raster',\r\n            canvas: this.solution.renderer.canvas,\r\n            coordinates: [\r\n\r\n                // [ 180, 90],\r\n                // [ 180, -90],\r\n                // [ -180, -90], \r\n                // [ -180, 90]\r\n\r\n                \r\n                // [bound._sw[0], bound._sw[1]],\r\n                // [bound._sw[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._sw[1]],\r\n\r\n            //    [ -125.618336, 48.944262], \r\n            //    [ -125.618336, 24.786775], \r\n            //    [ -65.591812, 24.786775],\r\n            //    [ -65.591812, 48.944262]\r\n\r\n                // [91.4461, 21.5006],\r\n                // [100.3541, 21.5006],\r\n                // [100.3541, 13.9706],\r\n                // [91.4461, 13.9706]\r\n            ],\r\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n            animate: true\r\n            });\r\n             \r\n        this.map.addLayer({\r\n            id: 'canvas-layer',\r\n            type: 'raster',\r\n            source: 'canvas-source'\r\n            });\r\n\r\n    }\r\n    \r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // this.downloadImage();\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n     \r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        const dataURL = downloadImage(canvasMapbox, this.solution.renderer.canvas);\r\n        // console.log(dataURL)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    // console.log({canvasMapbox, customCanvas})\n    // const canvasMapbox = this.map.getCanvas(); // this.solution.deckGL.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\n\n    const canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    const context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    const dataURL = canvasOut.toDataURL();\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = dataURL;\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = dataURL\n    link.click();    \n    return dataURL;\n};\n","import { MapboxOverlay } from '@deck.gl/mapbox';\nimport { ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\n\nimport { Solution } from '..';\n\nexport class DeckGL {\n    public solution: Solution;\n    deckLayer: any;\n    deckLayer2: any;\n    map: mapboxgl.Map;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    public initPost() {\n        this.map = this.solution.mapboxWrapper.map;\n\n        this.deckLayer = new MapboxOverlay({\n            id: 'my-scatterplot',\n            // @ts-ignore\n            type: ScatterplotLayer,\n            data: [\n                {position: [-74.5, 40], size: 10000},\n                {position: [-74.5, 40.5], size: 5000},\n                {position: [-74.6, 40.5], size: 5800},\n                {position: [-74.7, 40.5], size: 100},\n            ],\n            // @ts-ignore\n            getPosition: d => d.position,\n            getRadius: d => d.size,\n            getFillColor: d => [255, 140, 0],\n            getLineColor: d => [255, 255, 0]\n        });\n        this.map.addLayer(this.deckLayer, 'waterway-label');\n\n\n\n        const data = [\n            { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n        ];\n\n\n        this.deckLayer2 = new MapboxOverlay({\n            id: 'my-scatterplot2',\n            // @ts-ignore\n            type: ArcLayer,\n            data: data,\n            // @ts-ignore\n            getSourcePosition: d => d.pickup,\n            getTargetPosition: d => d.dropoff,\n            getSourceColor: d => [255, 128, 0],\n            getTargetColor: d => [0, 128, 255],\n            strokeWidth: 5\n          });\n\n        // this.deckLayer2 =  new ArcLayer({\n        //     data,\n        //     // @ts-ignore\n        //     getSourcePosition: d => d.pickup,\n        //     // @ts-ignore\n        //     getTargetPosition: d => d.dropoff,\n        //     getSourceColor: d => [255, 128, 0],\n        //     getTargetColor: d => [0, 128, 255],\n        //     strokeWidth: 5\n        // });\n   \n        this.map.addLayer(this.deckLayer2 ); // 'water-shadow'\n    }\n}","import { RendererCanvas } from '../../../../lib';\nimport { Solution } from '..';\n\nexport class Renderer extends RendererCanvas {\n    public app: Solution\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n    constructor(div: any, app: Solution) {\n        super(div);\n        this.app = app;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        this.canvas.style.mixBlendMode = 'color-dodge'\n\n        // console.log(dd.width, dd.height,)\n        // TODO\n        // You code goes here for one time operation\n        // this.pts.push([0, 0]); \n        // this.pts.push([this.canvas.width * 2, this.canvas.height * 2]); \n        // this.pts.push([-71.093161, 42.358871]);\n\n        this.start();\n    }\n    public initPost() {\n        this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // \n    }\n    public mouseDown = (x: number, y: number): void => {\n\n    }\n    public mouseUp = (x: number, y: number): void => {\n\n    }\n    public mouseDrag = (x: number, y: number): void => {\n\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        const z = this.app.mapboxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n        \n\n        for(let i = 0 ; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n    \n\n            const size = 0.25 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) * zoomFactor ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n\n    }\n}","import { Solution } from '..';\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.divHost = solution.divHost;\n        this.initUI();\n    }\n    public initUI() {\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        const div = document.createElement('div');\n        div.textContent = 'download';\n        div.style.position = 'relative';\n        div.style.margin = '10px';\n        div.onclick = () => {\n            this.solution.mapboxWrapper.downloadImage();\n        }\n        divMenu.appendChild(div);\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { DeckGL } from './DeckGL';\r\nimport { Renderer } from './CanvasCustom';\r\nimport { UIWrapper } from './UI';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public deckGL: DeckGL\r\n    public renderer: Renderer;\r\n    public uiWrapper: UIWrapper;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n        \r\n        this.deckGL = new DeckGL(this);\r\n        this.mapboxWrapper = new MapboxGLWrapper(this);\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n        \r\n        this.renderer = new Renderer(this.divHost, this);\r\n\r\n        this.uiWrapper = new UIWrapper(this);\r\n    }\r\n    public initPost() {\r\n        this.renderer.initPost();\r\n        this.deckGL.initPost();\r\n    }\r\n    public mouseDown = (e: any) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e: any) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e: any) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e: any) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n        // this.renderer.pts.push([e.point.x, e.point.y])\r\n    }\r\n    public mouseMove = (e: any)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        try {\r\n            while (this.divHost && this.divHost.lastElementChild) {\r\n                const lastChild = this.divHost.lastElementChild as Node;\r\n                this.divHost.removeChild(lastChild);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error removing child elements:', error);\r\n        }\r\n        \r\n    }\r\n}"],"names":["MapboxGLWrapper","constructor","solution","map","canvasMapbox","center","lng","lat","mapboxgl","setCenter","toMap","x","y","p","this","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","divHost","id","process","NEXT_PUBLIC_API_KEY_MAPBOX","preserveDrawingBuffer","container","zoom","style","dragRotate","disable","on","window","addEventListener","k","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","renderer","canvas","width","height","getBounds","addSource","type","coordinates","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","dataURL","toDataURL","img","Image","src","link","download","href","click","DeckGL","deckLayer","deckLayer2","mapboxWrapper","MapboxOverlay","ScatterplotLayer","data","size","getPosition","d","getRadius","getFillColor","getLineColor","ArcLayer","pickup","dropoff","getSourcePosition","getTargetPosition","getSourceColor","getTargetColor","strokeWidth","Renderer","RendererCanvas","app","super","time","pts","isActive","mouseDrag","pointerEvents","mixBlendMode","start","ctx","globalCompositeOperation","render","z","getZoom","zoomFactor","Math","pow","i","length","pt","beginPath","arc","sin","PI","closePath","fillStyle","fill","UIWrapper","initUI","divMenu","appendChild","textContent","margin","onclick","Solution","deckGL","uiWrapper","getElementById","keyDown","destroy","lastElementChild","lastChild","removeChild","error","console"],"sourceRoot":""}