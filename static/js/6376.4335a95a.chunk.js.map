{"version":3,"file":"static/js/6376.4335a95a.chunk.js","mappings":"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","sources":["njslab/Tools/Clustering/ClusteringCollisionBasedGraph/lib/index.ts","njslab/Tools/Clustering/ClusteringCollisionBasedGraph/Core/PointCluster.ts","njslab/Tools/Clustering/ClusteringCollisionBasedGraph/Core/Renderer.ts","njslab/Tools/Clustering/ClusteringCollisionBasedGraph/Core/GraphClustering.ts","njslab/Tools/Clustering/ClusteringCollisionBasedGraph/index.ts","njslab/Tools/Clustering/MapboxGLWrapper/index.ts","njslab/Tools/Clustering/index.ts"],"sourcesContent":["\nexport const AABBintersect2D = (v0: NVector3[], v1: NVector3[]): boolean => {\n    const v0minX = v0[0].x;\n    const v0maxX = v0[1].x;\n    const v1minX = v1[0].x;\n    const v1maxX = v1[1].x;\n    const v0minY = v0[0].y;\n    const v0maxY = v0[1].y;\n    const v1minY = v1[0].y;\n    const v1maxY = v1[1].y;\n    // const v0minZ = 0;\n    // const v0maxZ = 0;\n    // const v1minZ = 0;\n    // const v1maxZ = 0;\n    return (v0minX <= v1maxX && v0maxX >= v1minX) &&\n        (v0minY <= v1maxY && v0maxY >= v1minY); // &&\n    // (v0minZ <= v1maxZ && v0maxZ >= v1minZ);\n};\nexport const distance = (v0: NVector3, v1: NVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n}\n\nexport class NVector3 {\n    public static getMidVec(v0: NVector3, v1: NVector3): NVector3 {\n        return new NVector3(v0.x + ((v1.x - v0.x) * 0.5), v0.y + ((v1.y - v0.y) * 0.5), v0.z + ((v1.z - v0.z) * 0.5));\n    }\n    public static distanceTo(v0: NVector3, v1: NVector3): number {\n        return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n    }\n    public static Clone(v: NVector3): NVector3 {\n        return NVector3.DeepCopy(v);\n    }\n    public static DeepCopy(v: NVector3): NVector3 {\n        const out = new NVector3(v.x, v.y, v.z);\n        out.long = v.long; out.lat = v.lat;\n        // out.proX = v.proX; out.proY = v.proY; out.proZ = v.proZ;\n        return out;\n    }\n    public static Dot(a: NVector3, b: NVector3) {\n        return a.x * b.x + a.y * b.y + a.z * b.z;\n    }\n    public static ZAxis(): NVector3 {\n        return new NVector3(0, 0, 1);\n    }\n    public static YAxis(): NVector3 {\n        return new NVector3(0, 1, 0);\n    }\n    public static Zero(): NVector3 {\n        return new NVector3(0, 0, 0);\n    }\n    public static Origin(): NVector3 {\n        return new NVector3(0, 0, 0);\n    }\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public long: number = 0;\n    public lat: number = 0;\n    public elevation: number = 0;\n\n    public d: boolean = true;\n    public isRenderable: boolean = true;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    public Set(x: number, y: number, z: number): NVector3 {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public scale(v: number): NVector3 {\n        this.x *= v;\n        this.y *= v;\n        this.z *= v;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public Mult(v: number): NVector3 {\n        this.x *= v;\n        this.y *= v;\n        this.z *= v;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public DivByVal(v: number): NVector3 {\n        this.x /= v;\n        this.y /= v;\n        this.z /= v;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public DivByVec(v: NVector3): NVector3 {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public Add(v: NVector3): NVector3 {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public Sub(v: NVector3): NVector3 {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public Negate() {\n        this.x *= -1;\n        this.y *= -1;\n        this.z *= -1;\n        return new NVector3(this.x, this.y, this.z);\n    }\n    public Equals(v: NVector3) {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    }\n    public distanceTo(v1: NVector3): number {\n        return NVector3.distanceTo(this, v1);\n    }\n    public normalize(): NVector3 {\n        let len: number = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n        if (len < 0.0001) {\n            return this;\n        }\n        this.x = this.x / len;\n        this.y = this.y / len;\n        this.z = this.z / len;\n        return this;\n    }\n    public Clone(): NVector3 {\n        const other = new NVector3(this.x, this.y, this.z);\n        other.long = this.long; other.lat = this.lat; other.elevation = this.elevation;\n        return other;\n    }\n    public Length(): number {\n        const len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n        if (len < 0.00001) {\n            return 0.00001;\n        }\n        return len;\n    }\n    public Unitize(): NVector3 {\n        return this.normalize();\n    }\n    // public DistanceByArray(vs: number[]) {\n    //     return NVector3.DistanceByArray([this.x, this.y, this.z], vs);\n    //   }\n    //   public Distance2(v: NVector3): number {\n    //     return NVector3.Distance2(new NVector3(this.x, this.y, this.z), v);\n    //   }\n    //   public DotProduct(v: NVector3): number {\n    //     return NVector3.DotProduct(new NVector3(this.x, this.y, this.z), v);\n    //   }\n    //   public CrossProduct(v: NVector3): NVector3 {\n    //     return NVector3.CrossProduct(new NVector3(this.x, this.y, this.z), v);\n    //   }\n    //   public SquareLength(): number {\n    //     let len: number = NVector3.Length(new NVector3(this.x, this.y, this.z));\n    //     return len * len;\n    //   }\n    //   public FadeExp(attr: NVector3, dVal: number) {\n    //     let v = new NVector3(this.x, this.y, this.z);\n    //     v.Sub(attr);\n    //     return Math.exp(-dVal * v.SquareLength());\n    //   }\n    public GetAngle(): number {\n        return Math.atan2(this.y, this.x);\n    }\n    public GetAngleDegree() {\n        return 180 * this.GetAngle() / Math.PI;\n    }\n    public ToJSON() {\n        /* */\n    }\n    public ToString(): string {\n        let t: string = 'x: ' + this.x.toFixed(3).toString() + ' , y: ' + this.y.toFixed(3).toString() + ', z: ' + this.z.toFixed(3).toString();\n        return t;\n    }\n    public ToFloat32Array() {\n        return new Float32Array([this.x, this.y, this.z]);\n    }\n}\n\n\nexport class CPoint {\n    public vec: NVector3;\n    public id: string = '';\n    public numVisit: number = 0;\n\n    public isCollapse: boolean = false;\n\n    public isHidden: boolean = false;\n    public isRenderable: boolean = true;\n\n    public isSelected: boolean = false;\n    public isHover: boolean = false;\n    public collision: Collision;\n    constructor(x: number, y: number) {\n        this.vec = new NVector3(x, y, 0);\n        this.collision = new Collision(this);\n    }\n}\nexport class Collision {\n    base: CPoint;\n    isCollided: boolean = false;\n\n    neighborShapes: CPoint[] = [];\n\n    minVec: NVector3;\n    maxVec: NVector3;\n\n    isVisited: boolean = false;\n    numOrder: number = -1;\n\n    constructor(base: CPoint) {\n        this.base = base;\n        const r = 5;\n        this.minVec = new NVector3(this.base.vec.x - r, this.base.vec.y - r, 0);\n        this.maxVec = new NVector3(this.base.vec.x + r, this.base.vec.y + r, 0);\n    }\n    public Reset(){\n        this.neighborShapes = [];\n        this.numOrder = -1;\n        this.base.numVisit = 0;\n        this.base.isCollapse = false;\n        this.isCollided = false;\n        this.isVisited = false;\n    }\n}","\r\n// import { GeometryBase } from '../../../DrawingEngine/Geometry/Base';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\nimport { distance, NVector3, CPoint} from '../lib';\r\n// import { NVector3 } from '../../../../../../../lib/NVector3';\r\nimport { Renderer } from './Renderer';\r\n\r\nexport class PointCluster {\r\n    renderer: Renderer;\r\n    points: CPoint[];\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    isHover: boolean = false;\r\n    isVisited: boolean = false;\r\n    boundingBoxMin: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    boundingBoxMax: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n    minVec: NVector3;\r\n    maxVec: NVector3;\r\n    vec = new NVector3(0, 0, 0);\r\n    private t: number = 1.0;\r\n    private GridResolution = 85;\r\n    private tempVecGridList: NVector3[] = [];\r\n    private tempGeoGridList: CPoint[][][] = [];\r\n\r\n    constructor(renderer: Renderer, geometries: CPoint[]) {\r\n        this.renderer = renderer;\r\n        this.points = geometries;\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].vec.x;\r\n            this.vec.y += this.points[i].vec.y;\r\n            this.UpdateBoundingBox(this.points[i].vec);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        // for(let i = 0; i < this.geometries.length; ++i) {\r\n        // this.geometries[i].isAniEasing = true;\r\n        // this.geometries[i].tVec = this.vec;\r\n        // }\r\n    }\r\n    public IsInside(m: NVector3) {\r\n        if(distance(this.vec, m ) < this.r1) {\r\n            this.isHover = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.activeMouseCursor.SetActiveCursorHovering();\r\n            // this.points[0].scene.annotationInstance.renderer.needFocus = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.acProperties.hasHovering = true;\r\n            return true;\r\n        } else {\r\n            this.isHover = false;\r\n            return false;\r\n        }\r\n    }\r\n    public AddPost(geo: CPoint) {\r\n        // @ts-ignore\r\n        if(this.points.includes(geo)) { return; }\r\n        this.points.push(geo);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n        this.vec.x += this.points[i].vec.x;\r\n        this.vec.y += this.points[i].vec.y;\r\n        this.UpdateBoundingBox(this.points[i].vec);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n    }\r\n    public NeedDecompose() {\r\n        if (this.boundingBoxMax.x - this.boundingBoxMin.x > this.GridResolution) { return true; }\r\n        if (this.boundingBoxMax.y - this.boundingBoxMin.y > this.GridResolution) { return true; }\r\n        return false;\r\n    }\r\n    public Split() {\r\n        this.DeepRemove();\r\n        const xNum = (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution;\r\n        const yNum = (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution;\r\n        const grid = this.buildGrid(xNum, yNum);\r\n        this.BuildSubCluster(grid, xNum, yNum);\r\n    }\r\n    public Merge(other: PointCluster){\r\n        this.points.concat(other.points);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].vec.x;\r\n            this.vec.y += this.points[i].vec.y;\r\n            this.UpdateBoundingBox(this.points[i].vec);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        other.DeepRemove();\r\n    }\r\n    public DeepRemove(){\r\n        this.renderer.RemoveCluster(this);\r\n    }\r\n    public buildGrid(xNum: number, yNum: number) {\r\n        this.tempGeoGridList = []\r\n        let gridList = [];;\r\n        for(let y = 0; y < yNum; ++y) {\r\n            const theY = this.boundingBoxMin.y + y * this.GridResolution;\r\n            const geoMat: CPoint[][] = [];\r\n            for(let x = 0; x < xNum; ++x) {\r\n                const theX = this.boundingBoxMin.x + x * this.GridResolution;\r\n                gridList.push(new NVector3(theX, theY));\r\n                const geoList: CPoint[]= [];\r\n                geoMat.push(geoList);\r\n            }\r\n            this.tempGeoGridList.push(geoMat);\r\n        }\r\n        this.tempVecGridList = gridList;\r\n        return gridList;\r\n    }\r\n    public BuildSubCluster(vs: NVector3[], xNum: number, yNum: number){\r\n        for(let i = 0 ; i < this.points.length; ++i) {\r\n            this.GetCellAtPoint(this.points[i].vec, xNum, yNum).push(this.points[i]);\r\n        }\r\n        for(let y = 0; y < this.tempGeoGridList.length; ++y) {\r\n            for(let x = 0; x < this.tempGeoGridList[y].length; ++x) {\r\n            if(this.tempGeoGridList[y][x]) {\r\n                if (this.tempGeoGridList[y][x].length === 1) {\r\n                    this.tempGeoGridList[y][x][0].collision.Reset();\r\n                } else if(this.tempGeoGridList[y][x].length > 1) {\r\n                    this.renderer.clustersRPoint.push(new PointCluster(this.renderer, this.tempGeoGridList[y][x]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private GetCellAtPoint(tv: NVector3, xNum: number, yNum: number) {\r\n        let dp: NVector3 = new NVector3(tv.x - this.boundingBoxMin.x, tv.y - this.boundingBoxMin.y);\r\n        // let dp: NVector3 = new NVector3(this.boundingBoxMin.x - tv.x, this.boundingBoxMin.y - tv.y);\r\n        let i: number = Math.round(dp.x / this.GridResolution);\r\n        let j: number = Math.round(dp.y / this.GridResolution);\r\n        if (i >= xNum) { i = xNum - 1; }\r\n        if (j >= yNum) { j = yNum - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        i = Math.round(i);\r\n        j = Math.round(j);\r\n        // console.log(j, i);\r\n        // console.log(this.tempGeoGridList)\r\n        return this.tempGeoGridList[j][i];\r\n    }\r\n    public Draw(ctx: CanvasRenderingContext2D, renderer: Renderer, isPanning: boolean) {\r\n        this.UpdateTimeer();\r\n\r\n        if (isPanning) {\r\n            this.vec = new NVector3(0, 0, 0);\r\n            this.boundingBoxMin = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            this.boundingBoxMax = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vec.x += this.points[i].vec.x;\r\n                this.vec.y += this.points[i].vec.y;\r\n                this.UpdateBoundingBox(this.points[i].vec);\r\n            }\r\n            this.vec.x /= this.points.length;\r\n            this.vec.y /= this.points.length;\r\n            this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n            this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n\r\n        drawingPresetClustering(ctx, this.points, this.vec, this.r0, this.r1, this.isHover, this.t);\r\n        \r\n        if(renderer.optimizer.inspection) {\r\n            ctx.beginPath();\r\n            ctx.rect(this.minVec.x, this.minVec.y, this.maxVec.x - this.minVec.x, this.maxVec.y - this.minVec.y)\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n            ctx.fill();\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.rect(this.boundingBoxMin.x, this.boundingBoxMin.y, this.boundingBoxMax.x - this.boundingBoxMin.x, this.boundingBoxMax.y - this.boundingBoxMin.y)\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            if (this.tempVecGridList.length > 0) {\r\n                for(let i = 0 ; i < this.tempVecGridList.length; ++i) {\r\n                    ctx.beginPath();\r\n                    ctx.rect(this.tempVecGridList[i].x, this.tempVecGridList[i].y, this.GridResolution, this.GridResolution);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private UpdateTimeer(){\r\n        if (true ) {\r\n            this.t -= 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionA;\r\n            this.t = this.t < 0.4 ? 0.4 : this.t;\r\n        } else {\r\n            this.t += 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionB;\r\n            this.t = this.t > 1 ? 1 : this.t;\r\n        }\r\n    }\r\n    private UpdateBoundingBox(vec: NVector3){\r\n        this.boundingBoxMin.x = vec.x < this.boundingBoxMin.x ? vec.x : this.boundingBoxMin.x;\r\n        this.boundingBoxMin.y = vec.y < this.boundingBoxMin.y ? vec.y : this.boundingBoxMin.y;\r\n        this.boundingBoxMax.x = vec.x > this.boundingBoxMax.x ? vec.x : this.boundingBoxMax.x;\r\n        this.boundingBoxMax.y = vec.y > this.boundingBoxMax.y ? vec.y : this.boundingBoxMax.y;\r\n    }\r\n}\r\n\r\n\r\nconst drawingPresetClustering = (\r\n    ctx: CanvasRenderingContext2D,\r\n    geometries: CPoint[],\r\n    vec: NVector3,\r\n    r0: number,\r\n    r1: number,\r\n    isHover: boolean,\r\n    t = 1\r\n  ) => {\r\n\r\n    const colorFillHover = '#f00'; \r\n    const fillColor = '#0f0'; //`rgba(${geometries[0].styleComponent.renderStyle.colorInterpolatedString})`\r\n\r\n    // if (renderer.optimizer.optimizer.optimizer.renderer.annotationInstance.implementations.app.INSPECTION) {\r\n    if (isHover) {\r\n      for (let i = 0; i < geometries.length; ++i) {\r\n        ctx.lineWidth = 0.6;\r\n        ctx.strokeStyle = '#f00' // geometries[0].styleComponent.renderStyle.colorFill;\r\n        ctx.beginPath();\r\n        ctx.moveTo(vec.x, vec.y);\r\n        ctx.lineTo(geometries[i].vec.x, geometries[i].vec.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        // sub points\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\r\n        ctx.fillStyle = '#f00' //geometries[0].styleComponent.renderStyle.colorFill;\r\n        ctx.beginPath();\r\n        ctx.arc(geometries[i].vec.x, geometries[i].vec.y, 4, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n      }\r\n    }\r\n\r\n    // center point\r\n    if (isHover) {\r\n      ctx.fillStyle = '#f00' // geometries[0].styleComponent.renderStyle.colorFill;\r\n      ctx.beginPath();\r\n      ctx.arc(vec.x, vec.y, 1.5, 0, Math.PI * 2);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    } else {\r\n      // if(this.type === GTYPE.POINT_NUMBERED) {\r\n      //   ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\r\n      // } else if(this.type === GTYPE.POINT_REGULAR) {\r\n      //   ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\r\n      // }\r\n      ctx.beginPath();\r\n      ctx.arc(vec.x, vec.y, r1, 0, Math.PI * 2);\r\n      ctx.closePath();\r\n      ctx.fillStyle = colorFillHover;\r\n      ctx.fill();\r\n      ctx.beginPath();\r\n      ctx.arc(vec.x, vec.y, r0, 0, Math.PI * 2);\r\n      ctx.closePath();\r\n      ctx.fillStyle = fillColor;\r\n      ctx.fill();\r\n\r\n      ctx.fillStyle = `rgba(255, 255, 255, 1)`;\r\n      ctx.font = 'bold 11px Arial';\r\n      // ctx.font='bold 9px NotoSerif-Bold';\r\n      ctx.textAlign = 'center';\r\n      ctx.fillText(`${geometries.length}`, vec.x, vec.y + 4);\r\n    }\r\n  };","import { PointCluster } from './PointCluster';\r\nimport { CPoint } from '../lib';\r\nimport { ClusteringCollisionBasedGraph } from '../';\r\n\r\nexport class Renderer {\r\n\r\n    clustersRPoint: PointCluster[] = [];\r\n    optimizer: ClusteringCollisionBasedGraph;\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n    public InitGeometry(){\r\n        this.clustersRPoint = [];\r\n    }\r\n    public addClusterByGeometries(geo: CPoint[][] ) {\r\n        for(let i = 0; i < geo.length; ++i) {\r\n            this.clustersRPoint.push(new PointCluster(this, geo[i]));\r\n        }\r\n    }\r\n    public RemoveCluster(cluster: PointCluster ){\r\n        this.clustersRPoint.splice(this.clustersRPoint.indexOf(cluster), 1);\r\n\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, isStationary: boolean): void {\r\n    //     console.log(this.clustersRPoint.length);\r\n        if (this.clustersRPoint.length > 0) {\r\n            for(let i = 0 ; i < this.clustersRPoint.length; ++i) {\r\n                this.clustersRPoint[i].Draw(ctx, this, isStationary);\r\n            }\r\n        }\r\n\r\n    }\r\n}","\r\n// import { GeometryBase } from '../../../DrawingEngine/Geometry/Base/GeometryBase';\r\nimport { PointCluster } from './PointCluster';\r\nimport { ClusteringCollisionBasedGraph } from '..';\r\n\r\nimport { distance, AABBintersect2D, CPoint } from '../lib';\r\n\r\nexport class GraphClustering {\r\n\r\n    optimizer: ClusteringCollisionBasedGraph;\r\n    pointList: CPoint[] = []\r\n    // listNPoint: CPoint[] = []\r\n\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n\r\n    public update(): void {\r\n        this.updatePoints();\r\n\r\n        // 1: build connectivity based on collision\r\n        // this.listNPoint = this.BuildConnectivity(this.listNPoint);\r\n        this.pointList = this.BuildConnectivity(this.pointList);\r\n        this.initGeometry();\r\n        // 2: construct clusters graph based on the connectivity\r\n        const geoList = this.buildGraph(this.pointList);\r\n\r\n        if (geoList !== undefined){\r\n            this.addClusterByGeometries(geoList);\r\n            // // 3: recursive checking for the collision while repositioning clusters\r\n            this.PostUpdateCollisionBasedonGraph();\r\n\r\n            const graphs = this.NeedDecompose();\r\n            if (graphs.length > 0) {\r\n                // 4: tessellate big clusters based on a resolution\r\n                this.SplitClusters(graphs);\r\n                // 5: post-process for merging based on a tolerance\r\n                this.PostMergeCluster();\r\n            }\r\n        }\r\n    }\r\n    public initGeometry(){\r\n        this.optimizer.renderer.InitGeometry();\r\n    }\r\n    public addClusterByGeometries(outGraphList: CPoint[][] ){\r\n        this.optimizer.renderer.addClusterByGeometries(outGraphList);\r\n    }\r\n    private updatePoints() {\r\n        this.pointList = [];\r\n\r\n        for(let i = 0; i < this.optimizer.points.length; ++i) {\r\n            if(this.optimizer.points[i].isHidden ||\r\n                !this.optimizer.points[i].isRenderable ){\r\n                continue\r\n            } else {\r\n                const pt = this.optimizer.points[i];\r\n                pt.collision.Reset();\r\n                this.pointList.push(pt)\r\n            }\r\n        }\r\n\r\n    }\r\n    private BuildConnectivity(listPoints: CPoint[]) {\r\n        for(let i = 0; i < listPoints.length; ++i) {\r\n            const pt = listPoints[i];\r\n            for(let j = i + 1 ; j < listPoints.length; ++j) {\r\n                const other = listPoints[j];\r\n                if (!other.isCollapse && other !== pt && AABBintersect2D([pt.collision.minVec, pt.collision.maxVec], [other.collision.minVec, other.collision.maxVec])) {\r\n                    pt.collision.isCollided = true;\r\n                    pt.isCollapse = true;\r\n                    pt.numVisit = 0;\r\n                    pt.collision.neighborShapes.push(other);\r\n                    other.collision.isCollided = true;\r\n                    other.isCollapse = true;\r\n                    other.numVisit = 0;\r\n                    other.collision.neighborShapes.push(pt);\r\n                    // other.collision.neighborShapes.push(pt);\r\n                    // pt.collision.numOrder = numOrder++;\r\n                    // break;\r\n                }\r\n            }\r\n        }\r\n        return listPoints;\r\n    }\r\n    private buildGraph(listPoints: CPoint[]) {\r\n        let outList: CPoint[][] = [];\r\n        for(let i = 0; i < listPoints.length; ++i) {\r\n            let ptList: CPoint[] = [];\r\n            let queue = [listPoints[i]];\r\n            queue[0].collision.isVisited = true;\r\n            ptList.push(queue[0]);\r\n            let safeguard = 0;\r\n            let current = undefined;\r\n            while( (current = queue.shift()) !== undefined ) {\r\n                for(let i = 0; i < current.collision.neighborShapes.length; ++i) {\r\n                    if(!current.collision.neighborShapes[i].collision.isVisited) {\r\n                        current.collision.neighborShapes[i].collision.isVisited = true;\r\n                        queue.push(current.collision.neighborShapes[i] as CPoint);\r\n                        ptList.push(current.collision.neighborShapes[i] as CPoint);\r\n                    }\r\n                }\r\n                if(safeguard++ > 1000) { console.debug('fail to optimize'); return; }\r\n            }\r\n            if (ptList.length > 1) {\r\n                outList.push(ptList);\r\n            }\r\n        }\r\n        return outList;\r\n    }\r\n    public PostUpdateCollisionBasedonGraph() {\r\n        // for(let i = 0; i < this.optimizer.renderer.clustersNPoint.length; ++i) {\r\n        //     this.UpdateByQueue(this.optimizer.renderer.clustersNPoint[i], this.listNPoint);\r\n        // }\r\n        for(let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            this.UpdateByQueue(this.optimizer.renderer.clustersRPoint[i], this.pointList);\r\n        }\r\n    }\r\n    private UpdateByQueue(cluster: PointCluster, geometries: CPoint[]) {\r\n        let remain = 0;\r\n        const queue = [...geometries]\r\n        while(queue.length) {\r\n            const geo = queue.shift();\r\n\r\n            if (geo) {\r\n                // console.log(queue.length);\r\n                // safeguard and performance optimization\r\n                if (geo.numVisit > 100) { geo.numVisit = 0; break; }\r\n                if (queue.length === 0) {\r\n                    if(geometries.length < remain++ ) { break; }\r\n                }\r\n                // end safeguard and performance optimization\r\n                if (!geo.collision.isCollided) {\r\n                    if(AABBintersect2D([geo.collision.minVec, geo.collision.maxVec], [cluster.minVec, cluster.maxVec]) ) {\r\n                        geo.collision.isCollided = true;\r\n                        geo.isCollapse = true;\r\n                        geo.numVisit = 0;\r\n                        cluster.AddPost(geo);\r\n                    } else {\r\n                        geo.numVisit++;\r\n                        queue.push(geo);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private NeedDecompose(){\r\n        const clusterGraph = [];\r\n\r\n        for(let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            if(this.optimizer.renderer.clustersRPoint[i].NeedDecompose()) {\r\n                clusterGraph.push(this.optimizer.renderer.clustersRPoint[i]);\r\n            }\r\n        }\r\n        return clusterGraph;\r\n    }\r\n    private SplitClusters(clusters: PointCluster[]) {\r\n        for(let i = 0; i < clusters.length; ++i) {\r\n            clusters[i].Split();\r\n        }\r\n    }\r\n    private PostMergeCluster(){\r\n        this.PostMergeClusterCompute(this.optimizer.renderer.clustersRPoint);\r\n    }\r\n    private PostMergeClusterCompute(clusters: PointCluster[]){\r\n        for(let i = 0; i < clusters.length - 1; ++i) {\r\n            const cluster = clusters[i];\r\n            for(let j = i + 1; j < clusters.length; ++j) {\r\n                const other = clusters[j]\r\n                if(!other.isVisited) {\r\n                    if(distance(cluster.vec, other.vec ) < cluster.r1 + 20) {\r\n                        other.isVisited = true;\r\n                        cluster.Merge(other);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { NVector3, CPoint } from './lib';\r\n\r\nimport { Renderer } from './Core/Renderer';\r\nimport { GraphClustering } from './Core/GraphClustering';\r\n\r\nexport class ClusteringCollisionBasedGraph {\r\n\r\n    graphClustering: GraphClustering;\r\n    renderer: Renderer;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    points: CPoint[] = [];\r\n\r\n    constructor() {\r\n        this.graphClustering = new GraphClustering(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n    public push(x: number, y: number) {\r\n        this.points.push(new CPoint(x, y));\r\n        this.update();\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        // this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(): void {\r\n        this.graphClustering.update();\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        // this.initGrid(width, height);\r\n        // }\r\n    //     console.log(this);\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean) {\r\n        this.renderer.Render(ctx, isStationary)\r\n    }\r\n}","import mapboxgl from \"mapbox-gl\";\r\n\r\nexport class MapboxGLWrapper {\r\n    public map: mapboxgl.Map\r\n    constructor(id: string) {\r\n\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            container: id,\r\n            zoom: 15,\r\n            // minZoom: 10,\r\n            center: [-71.093161, 42.358871],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n}\r\n\r\n\r\n","// import { RendererCanvas } from '../../../lib'\r\nimport { ClusteringCollisionBasedGraph } from './ClusteringCollisionBasedGraph';\r\n\r\nimport { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public renderer: Renderer;\r\n    constructor(div: HTMLDivElement) {\r\n        this.divHost = div;\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.mapboxWrapper = new MapboxGLWrapper(this.divHost.id);\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        setTimeout(() => {\r\n            this.renderer = new Renderer(this.divHost, this);\r\n        }, 100);\r\n\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n        \r\n        const p = this.mapboxWrapper.toScreen(e['lngLat']['lng'], e['lngLat']['lat']);\r\n        this.renderer.mouseClick(p[0], p[1]);\r\n        // console.log(p)\r\n        // this.renderer.clustering.push(p)\r\n\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\nexport class Renderer extends RendererCanvas {\r\n    public app: Solution\r\n    public time: number = 0.0;\r\n    public pts: number[][] = [];\r\n\r\n    clustering: ClusteringCollisionBasedGraph;\r\n\r\n    constructor(div: any, app: Solution) {\r\n        super(div);\r\n        this.app = app;\r\n        this.canvas.id = 'mapboxCustom'\r\n        this.canvas.style.position = 'absolute';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.style.pointerEvents = 'none';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.pts.push([-71.093161, 42.358871]);\r\n\r\n        this.clustering = new ClusteringCollisionBasedGraph()\r\n        // const p = this.app.mapboxWrapper.toScreen(-71.093161, 42.358871);\r\n        // this.clustering.push(p)\r\n        this.start();\r\n    }\r\n    public mouseClick = (x: number, y: number): void => {\r\n        console.log(x, y);\r\n\r\n        this.clustering.push(x, y);\r\n    }\r\n    public mouseUp = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseDrag = (x: number, y: number): void => {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.time += 0.1;\r\n\r\n      \r\n\r\n        // for(let i = 0 ; i < this.pts.length; ++i) {\r\n        //     const pt = this.pts[i];\r\n        //     const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\r\n        //     // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\r\n    \r\n        //     ctx.beginPath();\r\n        //     ctx.arc(p[0], p[1], 10, 0, Math.PI * 2);\r\n        //     ctx.closePath();\r\n        //     ctx.fillStyle = '#0f0';\r\n        //     ctx.fill();\r\n        // }\r\n\r\n        this.clustering.render(ctx, false);\r\n\r\n    }\r\n}"],"names":["AABBintersect2D","v0","v1","v0minX","x","v0maxX","v1minX","v1maxX","v0minY","y","v0maxY","v1minY","v1maxY","distance","Math","sqrt","z","NVector3","v","DeepCopy","out","long","lat","a","b","constructor","elevation","d","isRenderable","this","Set","scale","Mult","DivByVal","DivByVec","Add","Sub","Negate","Equals","distanceTo","normalize","len","Clone","other","Length","Unitize","GetAngle","atan2","GetAngleDegree","PI","ToJSON","ToString","toFixed","toString","ToFloat32Array","Float32Array","CPoint","vec","id","numVisit","isCollapse","isHidden","isSelected","isHover","collision","Collision","base","isCollided","neighborShapes","minVec","maxVec","isVisited","numOrder","Reset","PointCluster","renderer","geometries","points","r0","r1","boundingBoxMin","Number","MAX_SAFE_INTEGER","boundingBoxMax","MIN_SAFE_INTEGER","t","GridResolution","tempVecGridList","tempGeoGridList","i","length","UpdateBoundingBox","IsInside","m","AddPost","geo","includes","push","NeedDecompose","Split","DeepRemove","xNum","yNum","grid","buildGrid","BuildSubCluster","Merge","concat","RemoveCluster","gridList","theY","geoMat","theX","geoList","vs","GetCellAtPoint","clustersRPoint","tv","dp","round","j","Draw","ctx","isPanning","UpdateTimeer","drawingPresetClustering","optimizer","inspection","beginPath","rect","closePath","fillStyle","fill","lineWidth","stroke","strokeStyle","moveTo","lineTo","arc","font","textAlign","fillText","Renderer","InitGeometry","addClusterByGeometries","cluster","splice","indexOf","Render","isStationary","GraphClustering","pointList","update","updatePoints","BuildConnectivity","initGeometry","buildGraph","undefined","PostUpdateCollisionBasedonGraph","graphs","SplitClusters","PostMergeCluster","outGraphList","pt","listPoints","outList","ptList","queue","current","safeguard","shift","console","debug","UpdateByQueue","remain","clusterGraph","clusters","PostMergeClusterCompute","ClusteringCollisionBasedGraph","graphClustering","mv","mouseInteraction","getCellAtPoint","render","MapboxGLWrapper","map","center","lng","setCenter","toMap","p","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","mapboxgl","process","container","zoom","style","dragRotate","disable","on","div","document","getElementsByClassName","position","display","Solution","divHost","mapboxWrapper","mouseDrag","pts","setTimeout","keyDown","k","destroy","lastElementChild","removeChild","RendererCanvas","app","super","time","clustering","log","canvas","width","height","pointerEvents","start"],"sourceRoot":""}