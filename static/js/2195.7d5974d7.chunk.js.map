{"version":3,"file":"static/js/2195.7d5974d7.chunk.js","mappings":"iJAEO,MAAMA,UAAiBC,EAAAA,GAM1BC,YAAYC,GACRC,MAAMD,GAAK,KALfE,WAAK,OACLC,EAAI,IAAIC,EAAQ,EAAG,EAAG,GAAE,KAExBC,cAAe,EAGXC,KAAKC,OAEL,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,YAAc,MACrBH,EAAOI,MAAMC,SAAW,WACxBL,EAAOM,QAAU,KACbR,KAAKD,cAAgBC,KAAKD,YAAY,EAE1CL,EAAIe,YAAYP,GAEhBF,KAAKU,OAAOJ,MAAMC,SAAW,UAEjC,CACON,OAEHD,KAAKJ,MAAQ,IAAIe,EACjBX,KAAKY,WAAW,IAAK,KAErBZ,KAAKa,OACT,CACOC,WACH,MAAMC,EAAIC,KAAKC,SAAWjB,KAAKU,OAAOQ,MAChCC,EAAIH,KAAKC,SAAWjB,KAAKU,OAAOU,OACtCpB,KAAKY,WAAWG,EAAGI,EACvB,CACOE,OAAOC,GACNtB,KAAKD,cACLC,KAAKc,WAGTd,KAAKJ,MAAMyB,OAAOC,GAElBA,EAAIC,YACJD,EAAIE,IAAIxB,KAAKH,EAAEkB,EAAGf,KAAKH,EAAEsB,EAAG,EAAG,EAAG,MAClCG,EAAIG,YACJH,EAAII,UAAY,OAChBJ,EAAIK,MACR,CACOf,WAAWG,EAAWI,GACzBnB,KAAKJ,MAAMgC,QAAQb,EAAGI,EAAG,EAC7B,CACOU,UAAUd,EAAWI,GACxB,MAAMW,EAAO9B,KAAKJ,MAAMmC,QAAQhB,EAAGI,GAEnCnB,KAAKJ,MAAMoC,SAAWF,CAC1B,CACOG,UAAUlB,EAAWI,GACxBnB,KAAKH,EAAEkB,EAAIA,EACXf,KAAKH,EAAEsB,EAAIA,CACf,CACOe,UAAUnB,EAAWI,GACpBnB,KAAKJ,MAAMoC,WACXhC,KAAKJ,MAAMoC,SAASG,IAAIpB,EAAIA,EAC5Bf,KAAKJ,MAAMoC,SAASG,IAAIhB,EAAIA,EAEpC,EAIJ,MAAMR,EAGFlB,cAAe,KAFfuC,cAA6BI,EAAU,KACvCC,MAAQ,EAGR,CACOT,QAAQb,EAAWI,EAAWmB,GACjC,MAAMR,EAAO,IAAIS,EAAKxB,EAAGI,EAAG,GAC5BnB,KAAKqC,MAAMG,KAAKV,GAEhB9B,KAAKyC,YAAYX,EACrB,CACOC,QAAQhB,EAAWI,GAAwB,IAAbuB,EAAM,uDAAG,EACtCC,EAASC,OAAOC,UAChBC,GAAS,EACb,MAAMC,EAAI,IAAIjD,EAAQiB,EAAGI,GACzB,IAAK,IAAI6B,EAAI,EAAGA,EAAIhD,KAAKqC,MAAMY,SAAUD,EAAG,CACxC,MAAMb,EAAMnC,KAAKqC,MAAMW,GAAGb,IACpBe,EAAMC,EAAShB,EAAKY,GACtBJ,EAASO,IACTP,EAASO,EACTJ,EAAQE,EAEhB,CACA,GAAIF,GAAS,GAAKH,EAASD,EACvB,OAAO1C,KAAKqC,MAAMS,EAG1B,CACOL,YAAYX,GACf,IAEIsB,EAFAF,EAAMN,OAAOC,UACbQ,EAAKvB,EAGT,IAAK,IAAIkB,EAAI,EAAGA,EAAIhD,KAAKqC,MAAMY,SAAUD,EAAG,CACxC,IAAIlB,EAAO9B,KAAKqC,MAAMW,GACtB,GAAIK,IAAOvB,EAAM,CACb,IAAIa,EAASQ,EAASE,EAAGlB,IAAKL,EAAKK,KAC/Be,EAAMP,IACNO,EAAMP,EACNS,EAAKtB,EAEb,CACJ,CAEA,GAAIuB,GAAMD,EAAI,CACVE,QAAQC,IAAI,SACZ,IAAK,IAAIP,EAAIhD,KAAKqC,MAAMY,OAAO,EAAGD,GAAK,IAAKA,EAAG,CAC3C,IAAIlB,EAAO9B,KAAKqC,MAAMW,GAItB,GAFAM,QAAQC,IAAIP,GAERI,IAAOtB,EACP,IAAK,IAAI0B,EAAI,EAAGA,EAAI1B,EAAK2B,MAAMR,SAAUO,EAAG,CACxC,GAAIJ,IAAOtB,EAAK2B,MAAMD,GAAM,SAC5B,MAAME,EAAQC,EAAaN,EAAID,EAAItB,EAAMA,EAAK2B,MAAMD,IACpD,GAAIE,EAAO,CACPJ,QAAQC,IAAIG,GACZ,MAAME,EAAU,IAAIrB,EAAKmB,EAAM,GAAIA,EAAM,IACzCL,EAAGQ,mBAAmBT,GACtBQ,EAAQhC,QAAQyB,GAEhBD,EAAGS,mBAAmBR,GACtBO,EAAQhC,QAAQwB,GAEhBpD,KAAKqC,MAAMG,KAAKoB,EACpB,CACJ,CAER,CAGAP,EAAGzB,QAAQwB,EACf,CACJ,CACO/B,OAAOC,GACVtB,KAAKqC,MAAMyB,SAASC,IAAcA,EAAE1C,OAAOC,EAAI,GACnD,EAKJ,MAAMiB,EAIF9C,YAAYsB,EAAWI,GAA2B,IAAhBmB,EAAS,uDAAG,EAAC,KAHxCH,SAAG,OACH6B,EAAY,EAAE,KACdP,MAAgB,GAEnBzD,KAAKmC,IAAM,IAAIrC,EAAQiB,EAAGI,EAAGmB,EACjC,CACOV,QAAQmC,QAEE3B,IADApC,KAAKiE,iBAAiBF,IAE/B/D,KAAKyD,MAAMjB,KAAKuB,EAExB,CACOE,iBAAiBF,GACpB/D,KAAKyD,MAAMK,SAAST,IAChB,GAAIA,IAAOU,EACP,OAAOA,CACX,GAGR,CACO1C,OAAOC,GAEVtB,KAAKyD,MAAMK,SAASC,IAChBzC,EAAIC,YACJD,EAAI4C,OAAOlE,KAAKmC,IAAIpB,EAAGf,KAAKmC,IAAIhB,GAChCG,EAAI6C,OAAOJ,EAAE5B,IAAIpB,EAAGgD,EAAE5B,IAAIhB,GAC1BG,EAAI8C,YAAc,OAClB9C,EAAI+C,QAAQ,IAGhB/C,EAAIC,YACJD,EAAIE,IAAIxB,KAAKmC,IAAIpB,EAAGf,KAAKmC,IAAIhB,EAAGnB,KAAKgE,EAAG,EAAG,MAC3C1C,EAAIG,YACJH,EAAII,UAAY,UAChBJ,EAAIK,MACR,CACOkC,mBAAmB/B,GACtB,MAAMgB,EAAQ9C,KAAKyD,MAAMa,QAAQxC,GAC7BgB,GAAS,IACT9C,KAAKyD,MAAQzD,KAAKyD,MAAMc,OAAOzB,EAAO,GAE9C,EAGJ,MAAMhD,EAIFL,YAAYsB,EAAWI,GAA2B,IAAhBmB,EAAS,uDAAG,EAAC,KAHxCvB,OAAC,OACDI,OAAC,OACDmB,OAAC,EAEJtC,KAAKe,EAAIA,EACTf,KAAKmB,EAAIA,EACTnB,KAAKsC,EAAIA,CACb,EAGJ,MAAMa,EAAW,CAACqB,EAAaC,IACpBzD,KAAK0D,KAAKC,EAAUH,EAAIC,IAE7BE,EAAY,CAACH,EAAaC,KACpBD,EAAGzD,EAAI0D,EAAG1D,IAAMyD,EAAGzD,EAAI0D,EAAG1D,IAAMyD,EAAGrD,EAAIsD,EAAGtD,IAAMqD,EAAGrD,EAAIsD,EAAGtD,IAAMqD,EAAGlC,EAAImC,EAAGnC,IAAMkC,EAAGlC,EAAImC,EAAGnC,GAIhGqB,EAAe,CAACN,EAAUD,EAAUwB,EAAUC,IACzCC,EAAsBzB,EAAGlB,IAAIpB,EAAGsC,EAAGlB,IAAIhB,EAAGiC,EAAGjB,IAAIpB,EAAGqC,EAAGjB,IAAIhB,EAAGyD,EAAGzC,IAAIpB,EAAG6D,EAAGzC,IAAIhB,EAAG0D,EAAG1C,IAAIpB,EAAG8D,EAAG1C,IAAIhB,GAGxG2D,EAAwB,CAACC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,KAE/G,GAAKP,IAAOE,GAAMD,IAAOE,GAAQC,IAAOE,GAAMD,IAAOE,EACjD,OAGJ,MAAMC,GAAgBD,EAAKF,IAAOH,EAAKF,IAAOM,EAAKF,IAAOD,EAAKF,GAG/D,GAAoB,IAAhBO,EACA,OAGJ,MAAMC,IAAOH,EAAKF,IAAOH,EAAKI,IAAOE,EAAKF,IAAOL,EAAKI,IAAOI,EACvDE,IAAOR,EAAKF,IAAOC,EAAKI,IAAOF,EAAKF,IAAOD,EAAKI,IAAOI,EAG7D,GAAIC,EAAK,GAAKA,EAAK,GAAKC,EAAK,GAAKA,EAAK,EACnC,OAOJ,MAAO,CAHGV,EAAKS,GAAMP,EAAKF,GAChBC,EAAKQ,GAAMN,EAAKF,GAEb,C","sources":["njslab/Workshop/workshop-graph/06_Graph-edge-split/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../../lib';\r\n\r\nexport class Solution extends RendererCanvas {\r\n\r\n    graph: Graph;\r\n    m = new Vector3(0, 0, 0)\r\n\r\n    needPopulate = false\r\n    constructor(div: HTMLDivElement) {\r\n        super(div);\r\n        this.init();\r\n\r\n        const divBtn = document.createElement('button');\r\n        divBtn.textContent = 'run'\r\n        divBtn.style.position = 'absolute'\r\n        divBtn.onclick = () => {\r\n            this.needPopulate = !this.needPopulate;\r\n        }\r\n        div.appendChild(divBtn);\r\n\r\n        this.canvas.style.position = 'absolute'\r\n\r\n    }\r\n    public init() {\r\n        // TODO\r\n        this.graph = new Graph();\r\n        this.mouseClick(100, 100);\r\n\r\n        this.start()\r\n    }\r\n    public populate() {\r\n        const x = Math.random() * this.canvas.width\r\n        const y = Math.random() * this.canvas.height\r\n        this.mouseClick(x, y);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        if (this.needPopulate) {\r\n            this.populate()\r\n        }\r\n\r\n        this.graph.render(ctx);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.m.x, this.m.y, 2, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#888';\r\n        ctx.fill();\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        this.graph.addNode(x, y, 0);\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        const node = this.graph.getNode(x, y);\r\n        // console.log(node)\r\n        this.graph.captured = node\r\n    }\r\n    public mouseMove(x: number, y: number): void {\r\n        this.m.x = x;\r\n        this.m.y = y;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        if (this.graph.captured){\r\n            this.graph.captured.vec.x = x;\r\n            this.graph.captured.vec.y = y;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Graph {\r\n    captured: Node | undefined = undefined;\r\n    nodes = []\r\n    constructor() {\r\n\r\n    }\r\n    public addNode(x: number, y: number, z: number) {\r\n        const node = new Node(x, y, 0);\r\n        this.nodes.push(node);\r\n\r\n        this.computeEdge(node);\r\n    }\r\n    public getNode(x: number, y: number, minDis = 8) {\r\n        let theDis = Number.MAX_VALUE;\r\n        let index = -1;\r\n        const v = new Vector3(x, y)\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            const vec = this.nodes[i].vec;\r\n            const dis = distance(vec, v )\r\n            if (theDis > dis) {\r\n                theDis = dis;\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1 && theDis < minDis) {\r\n            return this.nodes[index];\r\n        }\r\n        return undefined;\r\n    }\r\n    public computeEdge(node: Node) {\r\n        let dis = Number.MAX_VALUE;\r\n        let n0 = node;\r\n        let n1 = undefined;\r\n\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            let node = this.nodes[i];\r\n            if (n0 !== node) {\r\n                let theDis = distance(n0.vec, node.vec);\r\n                if (dis > theDis) {\r\n                    dis = theDis;\r\n                    n1 = node;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (n0 && n1) {\r\n            console.log('=====');\r\n            for (let i = this.nodes.length-1; i > -1; --i) {\r\n                let node = this.nodes[i];\r\n\r\n                console.log(i)\r\n\r\n                if (n1 !== node ) {\r\n                    for (let j = 0; j < node.nNode.length; ++j) {\r\n                        if (n1 === node.nNode[j]) { continue; }\r\n                        const inter = getIntersect(n0, n1, node, node.nNode[j])\r\n                        if (inter) {\r\n                            console.log(inter)\r\n                            const newNode = new Node(inter[0], inter[1])\r\n                            n0.removeNeighborNode(n1)\r\n                            newNode.addNode(n0)\r\n\r\n                            n1.removeNeighborNode(n0)\r\n                            newNode.addNode(n1)\r\n\r\n                            this.nodes.push(newNode)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // console.log('added')\r\n            n0.addNode(n1);\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.nodes.forEach((n: Node) => { n.render(ctx); })\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Node {\r\n    public vec: Vector3;\r\n    public r: number = 5;\r\n    public nNode: Node[] = []\r\n    constructor(x: number, y: number, z: number = 0) {\r\n        this.vec = new Vector3(x, y, z)\r\n    }\r\n    public addNode(n: Node) {\r\n        const node = this.findNeighborNode(n)\r\n        if (node === undefined) {\r\n            this.nNode.push(n)\r\n        }\r\n    }\r\n    public findNeighborNode(n: Node): undefined | Node {\r\n        this.nNode.forEach((n0: Node) => {\r\n            if (n0 === n) {\r\n                return n\r\n            }\r\n        })\r\n        return undefined;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n\r\n        this.nNode.forEach((n: Node) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.vec.x, this.vec.y)\r\n            ctx.lineTo(n.vec.x, n.vec.y)\r\n            ctx.strokeStyle = '#0f0';\r\n            ctx.stroke();\r\n        })\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, this.r, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fill();\r\n    }\r\n    public removeNeighborNode(node: Node) {\r\n        const index = this.nNode.indexOf(node);\r\n        if (index > -1) {\r\n            this.nNode = this.nNode.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n\r\nclass Vector3 {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    constructor(x: number, y: number, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z\r\n    }\r\n}\r\n\r\nconst distance = (v0: Vector3, v1: Vector3) => {\r\n    return Math.sqrt(distance2(v0, v1));\r\n}\r\nconst distance2 = (v0: Vector3, v1: Vector3) => {\r\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\r\n}\r\n\r\n\r\nconst getIntersect = (n0: Node, n1: Node, n2: Node, n3: Node) => {\r\n    return getLineIntersectPlane(n0.vec.x, n0.vec.y, n1.vec.x, n1.vec.y, n2.vec.x, n2.vec.y, n3.vec.x, n3.vec.y)\r\n}\r\n\r\nconst getLineIntersectPlane = (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) => {\r\n    // Check if none of the lines are of length 0\r\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\r\n        return undefined;\r\n    }\r\n\r\n    const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\r\n\r\n    // Lines are parallel\r\n    if (denominator === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\r\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\r\n\r\n    // is the intersection along the segments\r\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\r\n        return undefined;\r\n    }\r\n\r\n    // Return a object with the x and y coordinates of the intersection\r\n    const x = x1 + ua * (x2 - x1);\r\n    const y = y1 + ua * (y2 - y1);\r\n\r\n    return [x, y];\r\n};"],"names":["Solution","RendererCanvas","constructor","div","super","graph","m","Vector3","needPopulate","this","init","divBtn","document","createElement","textContent","style","position","onclick","appendChild","canvas","Graph","mouseClick","start","populate","x","Math","random","width","y","height","render","ctx","beginPath","arc","closePath","fillStyle","fill","addNode","mouseDown","node","getNode","captured","mouseMove","mouseDrag","vec","undefined","nodes","z","Node","push","computeEdge","minDis","theDis","Number","MAX_VALUE","index","v","i","length","dis","distance","n1","n0","console","log","j","nNode","inter","getIntersect","newNode","removeNeighborNode","forEach","n","r","findNeighborNode","moveTo","lineTo","strokeStyle","stroke","indexOf","splice","v0","v1","sqrt","distance2","n2","n3","getLineIntersectPlane","x1","y1","x2","y2","x3","y3","x4","y4","denominator","ua","ub"],"sourceRoot":""}