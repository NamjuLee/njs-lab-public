{"version":3,"file":"static/js/944.979c375f.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/Util/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Geometry/triangle.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Renderer/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Geometry/Base/Geometry.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Geometry/Tri.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Renderer/shaders/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Scene/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/EventListener/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Controller/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/UI/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/Camera/index.ts","njslab/Infrastructure/WebGPU/WebGPU_Sandbox/index.ts"],"sourcesContent":["export const getSlider = (title: string, min: number, max: number) => {\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = `${min}`;\n    slider.max = `${max}`;\n\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(slider);\n    div.appendChild(text);\n    return {\n        div, slider, text\n    }\n};\n\nexport * from './MatUtil';","const vertex = new Float32Array([\n    0.0, 0.5, 0.0,\n    -0.5, -0.5, 0.0,\n    0.5, -0.5, 0.0\n])\nconst vertexCount = 3\n\nexport {vertex, vertexCount}","// import { positionVert, colorFrag } from './shaders';\nimport { Solution } from '..';\nimport * as triangle from '../Geometry/triangle';\n\ninterface SIZE{\n    width:number;\n    height:number;\n}\nexport interface pipeline {\n    pipeline: GPURenderPipeline,\n    vertexBuffer: GPUBuffer,\n    colorBuffer: GPUBuffer,\n    uniformGroup: GPUBindGroup\n}\n\nexport class Renderer {\n    solution: Solution;\n    canvas: HTMLCanvasElement;\n    ctx: GPUCanvasContext;\n\n    device: GPUDevice;\n    format: GPUTextureFormat;\n\n    size: SIZE;\n\n    // pipelineObj: pipeline;\n    commandEncoder: GPUCommandEncoder;\n    view: GPUTextureView\n    renderPassDescriptor: GPURenderPassDescriptor;\n    passEncoder: GPURenderPassEncoder;\n\n        uniformBuffer: GPUBuffer\n\n    requestAni;\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n    }\n    async initWebGPU() {\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\n\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: 'high-performance'\n            // powerPreference: 'low-power'\n        })\n\n        if (!adapter) { throw new Error('No Adapter Found'); }\n\n        const device = await adapter.requestDevice()\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\n        // const format = 'bgra8unorm';\n        const devicePixelRatio = window.devicePixelRatio || 1\n        this.canvas.width = this.canvas.clientWidth ;\n        this.canvas.height = this.canvas.clientHeight;\n        this.ctx.configure({\n            // json specific format when key and value are the same\n            device, format,\n            // prevent chrome warning\n            alphaMode: 'opaque'\n        })\n\n        this.size = { width: this.canvas.width, height: this.canvas.height }\n        this.device = device;\n        this.format = format;\n\n        // await this.initPipeline(this.device, this.format);\n        // this.start();\n        this.loop();\n    }\n    public loop = () => {\n        // this.start();\n        this.solution.scene.render();\n        // this.draw(this.device, this.ctx, this.pipelineObj);\n        this.requestAni = requestAnimationFrame(this.loop);\n        \n    }\n    public draw (pipelineObj: pipeline) {\n        if (pipelineObj === undefined) { return;}\n        // const rotationAngle = Date.now() / 1000;\n        // console.log('run', rotationAngle);\n\n        this.solution.camera.update();\n\n        // this.device.queue.writeBuffer(this.uniformBuffer, 0, this.solution.camera.mvpMatrix as ArrayBuffer);\n\n        this.commandEncoder = this.device.createCommandEncoder();\n        this.view = this.ctx.getCurrentTexture().createView();\n        this.renderPassDescriptor = {\n            //@ts-ignore\n            colorAttachments: [{\n                    view: this.view,\n                    clearValue: { r: 0, g: 0, b: 0, a: 1.0 },\n                    loadOp: 'clear',\n                    storeOp: 'store'\n                }]\n        };\n\n        // console.log(pipelineObj);\n        this.passEncoder = this.commandEncoder.beginRenderPass(this.renderPassDescriptor);\n        this.passEncoder.setPipeline(pipelineObj.pipeline);\n        this.passEncoder.setBindGroup(0, pipelineObj.uniformGroup); // set uniformGroup\n        this.passEncoder.setVertexBuffer(0, pipelineObj.vertexBuffer); // set vertex\n        this.passEncoder.draw(triangle.vertexCount); // 3 vertex form a triangle\n        this.passEncoder.end();\n        // webgpu run in a separate process, all the commands will be executed after submit\n        this.device.queue.submit([this.commandEncoder.finish()]);   \n    }\n    public destroy() {\n        this.device.destroy();\n        // this.isAnimation = false;\n        cancelAnimationFrame(this.requestAni);\n        // this.requestAni = undefined;\n    }\n}","import { pipeline } from '../../NWebGPU';\nexport class Geometry {\n    pipeline: pipeline;\n    constructor() {\n\n    }\n}","import { vec3 } from 'gl-matrix';\nimport { Scene } from '../Scene';\nimport { positionVert, colorFrag } from '../Renderer/shaders';\nimport { Geometry } from './Base/Geometry';\nexport class Tri extends Geometry {\n    scene: Scene;\n    vertex = new Float32Array([\n        0.0, 0.1, 0.0,\n        -0.5, -0.5, 0.0,\n        0.5, -0.5, 0.0\n    ]);\n    vertexCount: number = 3;\n\n    position = vec3.fromValues(0,0,0);\n\n    constructor(scene: Scene) {\n        super();\n        this.scene = scene;\n        this.position[0] = 0.5;\n\n        const num = Math.random();\n        this.vertex[1]+= num;\n\n        this.initPipeline(this.scene.solution.renderer.device, this.scene.solution.renderer.format);\n\n    }\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat) {\n        const pipeline = await device.createRenderPipelineAsync({\n            label: 'Basic Pipline',\n            layout: 'auto',\n            vertex: {\n                module: device.createShaderModule({\n                    code: positionVert,\n                }),\n                entryPoint: 'main',\n                buffers: [{\n                    arrayStride: 3 * 4, // 3 float32,\n                    attributes: [{\n                            // position xyz\n                            shaderLocation: 0,\n                            offset: 0,\n                            format: 'float32x3',\n                        }]\n                }]\n            },\n            fragment: {\n                module: device.createShaderModule({\n                    code: colorFrag,\n                }),\n                entryPoint: 'main',\n                targets: [{\n                        format: format\n                    }]\n            },\n            primitive: {\n                topology: 'triangle-list' // try point-list, line-list, line-strip, triangle-strip?\n            }\n        } as GPURenderPipelineDescriptor)\n        // create vertex buffer\n        const vertexBuffer = device.createBuffer({\n            label: 'GPUBuffer store vertex',\n            size: this.vertex.byteLength,\n            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n            //mappedAtCreation: true\n        })\n        device.queue.writeBuffer(vertexBuffer, 0, this.vertex)\n        // create color buffer\n        const colorBuffer = device.createBuffer({\n            label: 'GPUBuffer store rgba color',\n            size: 4 * 4, // 4 * float32\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n        })\n        device.queue.writeBuffer(colorBuffer, 0, new Float32Array([1, 0, 0, 1]))\n\n        // create a uniform group for color\n        const uniformGroup = device.createBindGroup({\n            label: 'Uniform Group with colorBuffer',\n            layout: pipeline.getBindGroupLayout(0),\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: colorBuffer\n                    }\n                }\n            ]\n        })\n        this.pipeline = { pipeline, vertexBuffer, colorBuffer, uniformGroup }\n        this.scene.geometries.push(this);\n    }\n}","export const positionVert = `\n@vertex\nfn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\n    return vec4<f32>(position, 1.0);\n}\n`\nexport const colorFrag = `\n@group(0) @binding(0) var<uniform> color : vec4<f32>;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n    return color;\n}`\n\n\nexport const Shaders = (color:string) => {\n    const vertex = `\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex: u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 3>(\n                vec2<f32>(0.0, 0.5),\n                vec2<f32>(-0.5, -0.5),\n                vec2<f32>(0.5, -0.5));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n    `;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>${color};\n        }\n    `;\n    return {vertex, fragment};\n}\n\nexport const Shaders1 = (color:string) => {\n    const vertex = `\n        var pos = array<vec2<f32>, 3>(\n            vec2<f32>(0.0, 0.5),\n            vec2<f32>(-0.5, -0.5),\n            vec2<f32>(0.5, -0.5));\n\n        [[stage(vertex)]]\n        fn main([[builtin(vertex_index)]] VertexIndex: u32) -> [[builtin(position)]] vec4<f32> {\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n    `;\n\n    const fragment = `\n        [[stage(fragment)]]\n        fn main() -> [[location(0)]] vec4<f32> {\n            return vec4<f32>${color};\n        }\n    `;\n    return {vertex, fragment};\n}\n\nexport const ShadersOld = (color:string) => {\n    const vertex = `\n        const pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n            vec2<f32>(0.0, 0.5),\n            vec2<f32>(-0.5, -0.5),\n            vec2<f32>(0.5, -0.5));\n\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[builtin(vertex_idx)]] var<in> VertexIndex : i32;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            return;\n        }\n    `;\n\n    const fragment = `\n        [[location(0)]] var<out> outColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            outColor = vec4<f32>${color};\n            return;\n        }\n    `;\n    return {vertex, fragment};\n}","import { Solution } from '..';\nimport { Geometry } from '../Geometry/Base/Geometry';\n\nimport { Tri } from '../Geometry/Tri';\n\nexport class Scene {\n    public solution: Solution;\n    public geometries: Geometry[] = [];\n\n    private index = 0;\n    constructor(solution: Solution) {\n        this.solution = solution;\n\n\n\n\n    }\n    public init() {\n        this.geometries.push(new Tri(this));\n    }\n    public render() {\n        //\n\n        for(this.index = 0; this.index < this.geometries.length; ++this.index) {\n            this.solution.renderer.draw(this.geometries[this.index].pipeline);\n        }\n\n        console.log('rendering...', this.geometries.length);\n    }\n}","import { Solution } from '..';\nexport class EventListener {\n    solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.appendEvent();\n    }\n    public appendEvent() {\n        this.solution.divHost.addEventListener('mousedown', (e: MouseEvent) => {\n            console.log(e);\n            this.solution.controller.addTri();\n        });\n    }\n}","import { Solution } from '..';\nimport { Tri  } from '../Geometry/Tri';\nexport class Controller {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n\n    }\n    public addTri() {\n        new Tri(this.solution.scene);\n    }\n}","import * as triangle from '../Geometry/triangle';\nimport { getSlider } from '../../Util';\nimport { Solution } from '..';\n\nexport class UI {\n    public divHost: HTMLElement;\n    public solution: Solution;\n    public divColor: HTMLInputElement;\n    public divRange: any;\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.divHost = solution.divHost;\n\n        this.divColor = document.createElement('input');\n        this.divColor.type = 'color';\n        this.divColor.defaultValue = '#ff0000';\n        // this.divColor.style.position = 'absolute';\n        this.divHost.appendChild(this.divColor);\n\n        this.divRange = getSlider('size', 0, 100);\n        this.divHost.appendChild(this.divRange.div);\n\n        this.appendEvent();\n    }\n    public appendEvent() {\n        // update colorBuffer if color changed\n        this.divColor.addEventListener('input', (e: Event) => {\n            const color = (e.target as HTMLInputElement).value; // get hex color string\n            const r = +('0x' + color.slice(1, 3)) / 255; // parse hex color into rgb\n            const g = +('0x' + color.slice(3, 5)) / 255;\n            const b = +('0x' + color.slice(5, 7)) / 255;\n            // write colorBuffer with new color\n            // this.solution.nWebGPU.device.queue.writeBuffer(this.solution.nWebGPU.pipelineObj.colorBuffer, 0, new Float32Array([r, g, b, 1]));\n            // this.solution.nWebGPU.render();\n        });\n\n        // update vertexBuffer\n        this.divRange.slider.addEventListener('input', (e: Event) => {\n            // get input value\n            const value = +(e.target as HTMLInputElement).value;\n            console.log(value)\n            // chagne vertex 0/3/6\n            triangle.vertex[0] = 0;\n            triangle.vertex[3] = -0.5 + -(value * 0.01);\n            triangle.vertex[6] = 0.5 + (value * 0.01);\n            // write vertexBuffer with new vertex\n            // this.solution.nWebGPU.device.queue.writeBuffer(this.solution.nWebGPU.pipelineObj.vertexBuffer, 0, triangle.vertex);\n            // this.solution.nWebGPU.render();\n        });\n\n        // re-configure context on resize\n        window.addEventListener('resize', () => {\n            this.solution.canvas.width = this.solution.divHost.clientWidth;\n            this.solution.canvas.height = this.solution.divHost.clientHeight;\n            // don't need to recall context.configure() after v104\n            // this.solution.nWebGPU.render();\n        });\n    }\n}","import { vec3, mat4 } from \"gl-matrix\";\nimport { Solution } from '../'\n\nconst createCamera = require('3d-view-controls');\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};\n\nexport function Deg2Rad(theta: number) : number {\n    return theta * Math.PI / 180;\n}\n\n// export class CameraTT {\n\n//     position: vec3;\n//     eulers: vec3;\n//     view: mat4;\n//     forwards: vec3;\n//     right: vec3;\n//     up: vec3;\n\n\n//     constructor(position: vec3, theta: number, phi: number) {\n//         this.position = position;\n//         this.eulers = [0, phi, theta];\n//         this.forwards = vec3.create();\n//         this.right = vec3.create();\n//         this.up = vec3.create();\n//         console.log(this.up)\n//     }\n\n//     update() {\n//         this.position[0] += -0.01;\n//         // this.eulers[2] += 0.1;\n\n//         this.forwards = [\n//             Math.cos(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n//             Math.sin(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n//             Math.sin(Deg2Rad(this.eulers[1]))\n//         ];\n\n//         vec3.cross(this.right, this.forwards, [0,1,0]);\n\n//         vec3.cross(this.up, this.right, this.forwards);\n\n//         var target: vec3 = vec3.create();\n//         vec3.add(target, this.position, this.forwards);\n\n//         this.view = mat4.create();\n//         mat4.lookAt(this.view, this.position, target, this.up);\n//     }\n\n//     get_view(): mat4 {\n//         return this.view;\n//     }\n// }\n\n\nexport class Camera {\n    public solution: Solution;\n    public canvas: HTMLCanvasElement\n    public modelMatrix: mat4 // const\n    public mvpMatrix: mat4 // const\n\n    public vMatrix: mat4;\n    public vpMatrix: mat4;\n    public rotation =vec3.fromValues(0, 0, 0); \n    public translation =vec3.fromValues(0, 0, 0); \n    public camera: any\n\n    public vp: any // const\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n\n        this.modelMatrix = mat4.create();\n        this.mvpMatrix = mat4.create();\n        this.vMatrix = mat4.create();\n        this.vpMatrix = mat4.create();\n        this.vp = createViewProjection(this.canvas.width / this.canvas.height);\n        this.vpMatrix = this.vp.viewProjectionMatrix;\n\n        // add rotation and camera:\n        this.camera = createCamera(this.canvas, this.vp.cameraOption);\n        // this.camera.mode = 'turntable' // https://github.com/mikolalysenko/3d-view-controls\n    }\n    public update() {\n        const pMatrix = this.vp.projectionMatrix;\n        this.vMatrix = this.camera.matrix;\n        mat4.multiply(this.vpMatrix, pMatrix, this.vMatrix);\n   \n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.mvpMatrix, this.vpMatrix, this.modelMatrix);\n    }\n}","import { Renderer } from './Renderer';\r\nimport { Scene } from './Scene';\r\nimport { EventListener } from './EventListener';\r\nimport { Controller } from './Controller';\r\nimport { UI } from './UI';\r\n\r\nimport { Camera } from './Camera';\r\n\r\nimport { Tri } from './Geometry/Tri';\r\n\r\n// https://github.com/jack1232/WebGPU-Step-By-Step\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public canvas: HTMLCanvasElement;\r\n\r\n    public scene: Scene;\r\n    public renderer: Renderer;\r\n    public camera: Camera;\r\n    public ui: UI;\r\n    public eventListener: EventListener;\r\n    public controller: Controller;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.canvas.style.background = 'rgba(0,0,0,0)';\r\n        // this.canvas.style.position = 'absolute';\r\n\r\n        this.init();\r\n    }\r\n    public init = async () => {\r\n        this.camera = new Camera(this);\r\n        this.scene = new Scene(this);\r\n        this.ui = new UI(this);\r\n        this.eventListener = new EventListener(this);\r\n        this.controller = new Controller(this);\r\n        this.renderer = new Renderer(this);\r\n        await this.initRenderer();\r\n        this.scene.init();\r\n        // this.renderer.render();\r\n\r\n\r\n        this.initPost();\r\n    }\r\n    public initPost() {\r\n        \r\n    }\r\n    private initRenderer = async () => {\r\n        return this.renderer.initWebGPU();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":["getSlider","title","min","max","div","document","createElement","style","display","slider","type","text","textContent","color","appendChild","vertex","Float32Array","Renderer","constructor","solution","canvas","ctx","device","format","size","commandEncoder","view","renderPassDescriptor","passEncoder","uniformBuffer","requestAni","loop","this","scene","render","requestAnimationFrame","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","draw","pipelineObj","undefined","camera","update","createCommandEncoder","getCurrentTexture","createView","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","beginRenderPass","setPipeline","pipeline","setBindGroup","uniformGroup","setVertexBuffer","vertexBuffer","end","queue","submit","finish","destroy","cancelAnimationFrame","Geometry","Tri","super","vertexCount","position","vec3","num","Math","random","initPipeline","renderer","createRenderPipelineAsync","label","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","createBuffer","byteLength","usage","GPUBufferUsage","VERTEX","COPY_DST","writeBuffer","colorBuffer","UNIFORM","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","geometries","push","Scene","index","init","length","console","log","EventListener","appendEvent","divHost","addEventListener","e","controller","addTri","Controller","UI","divColor","divRange","defaultValue","target","value","slice","triangle","createCamera","require","Camera","modelMatrix","mvpMatrix","vMatrix","vpMatrix","rotation","translation","vp","mat4","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","PI","cameraOption","eye","center","zoomMax","zoomSpeed","createViewProjection","pMatrix","matrix","modelMat","scaling","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","createTransforms","Solution","id","ui","eventListener","initRenderer","initPost","initWebGPU","getElementById","background","lastElementChild","removeChild"],"sourceRoot":""}