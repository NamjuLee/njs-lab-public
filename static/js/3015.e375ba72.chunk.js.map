{"version":3,"file":"static/js/3015.e375ba72.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-graph/09_Graph-Exporting/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../../lib';\r\n\r\nexport class Solution extends RendererCanvas {\r\n    divText: HTMLDivElement;\r\n    divSel: HTMLDivElement;\r\n    graphController: GraphController;\r\n\r\n\r\n    constructor(div: HTMLDivElement) {\r\n        super(div);\r\n\r\n        this.canvas.style.position = 'absolute'\r\n        const divMenu = document.createElement('div');\r\n        divMenu.style.position = 'absolute'\r\n        div.appendChild(divMenu);\r\n\r\n        const divBtn = document.createElement('button');\r\n        divBtn.textContent = 'run'\r\n        divBtn.onclick = () => {\r\n            this.graphController.needPopulate = !this.graphController.needPopulate;\r\n        }\r\n        divMenu.appendChild(divBtn);\r\n\r\n        const divRemove = document.createElement('button');\r\n        divRemove.textContent = 'remove'\r\n        divRemove.onclick = () => {\r\n            this.graphController.removeSelection();\r\n        }\r\n        divMenu.appendChild(divRemove);\r\n\r\n        const divText = document.createElement('div');\r\n        divText.textContent = 'N:0, E:0'\r\n        divMenu.appendChild(divText);\r\n        this.divText = divText;\r\n\r\n        const divSel = document.createElement('div');\r\n        divSel.textContent = 'undefined'\r\n        divMenu.appendChild(divSel);\r\n        this.divSel = divSel;\r\n\r\n        const btnExport = document.createElement('button');\r\n        btnExport.textContent = 'Export JSON';\r\n        divMenu.appendChild(btnExport);\r\n        btnExport.onclick = () => {\r\n            this.graphController.exportJSON();\r\n        }\r\n\r\n        const divDes = document.createElement('div');\r\n        divDes.innerHTML = '1 Export graph to JSON <br> 2 display the order of nodes ';\r\n        divMenu.appendChild(divDes);\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        // TODO\r\n        this.graphController = new GraphController(this.canvas);\r\n        this.graphController.divLog = this.divText;\r\n        this.graphController.divSel = this.divSel;\r\n        this.mouseClick(200, 200);\r\n\r\n        this.start()\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.graphController.render(ctx);\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n\r\n        this.graphController.mouseClick(x, y);\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        this.graphController.mouseDown(x, y)\r\n    }\r\n    public mouseMove(x: number, y: number): void {\r\n        this.graphController.mouseMove(x, y);\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        this.graphController.mouseDrag(x, y)\r\n    }\r\n    public mouseUp() {\r\n        this.graphController.mouseUp();\r\n    }\r\n}\r\n\r\n\r\nclass GraphController {\r\n    public graph: Graph;\r\n    public canvas: HTMLCanvasElement;\r\n    public divLog: HTMLDivElement;\r\n    public divSel: HTMLDivElement;\r\n\r\n    public needPopulate = false;\r\n    public m = new Vector3(0, 0, 0);\r\n\r\n    private nodePre: Node | Edge | undefined = undefined\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.graph = new Graph();\r\n        this.canvas = canvas;\r\n    }\r\n    public populate() {\r\n        const x = Math.random() * this.canvas.width;\r\n        const y = Math.random() * this.canvas.height;\r\n        this.mouseClick(x, y);\r\n    }\r\n    public removeSelection() {\r\n        // console.log(this.graph.captured)\r\n        if (this.graph.captured) {\r\n            this.graph.captured.remove();\r\n            this.graph.captured = undefined;\r\n        }\r\n    }\r\n    // ..........................................................\r\n    public mouseDown(x: number, y: number): void {\r\n        const node = this.graph.getNodeVec(x, y);\r\n\r\n        if (this.graph.captured && this.graph.captured !== node) {\r\n            this.nodePre = this.graph.captured;\r\n        };\r\n\r\n        this.graph.captured = node\r\n    }\r\n\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.nodePre && this.graph.captured) {\r\n            // console.log('connection needed')\r\n            this.graph.addEdge(this.nodePre as Node, this.graph.captured as Node)\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        const closeEdge = this.graph.getEdgeVec(x, y);\r\n\r\n        // connect selected nodes\r\n\r\n\r\n        // add node by edge\r\n        if (closeEdge && this.graph.captured === undefined) {\r\n            const node = this.graph.addNode(closeEdge.vec.x, closeEdge.vec.y);\r\n            this.graph.edgeSplitByNode(node, closeEdge.edge);\r\n            return\r\n        }\r\n\r\n        if (this.graph.captured === undefined) {\r\n            // console.log(this.graph.captured)\r\n            const node = this.graph.addNode(x, y, 0);\r\n            this.graph.addEdgeClosestByNode(node);\r\n        }\r\n    }\r\n\r\n    public mouseMove(x: number, y: number): void {\r\n        this.m.x = x;\r\n        this.m.y = y;\r\n    }\r\n    public mouseUp() {\r\n        if (this.graph.captured && this.graph.captured.type === 'node') {\r\n            const node = this.graph.captured as Node;\r\n\r\n            node.edges.forEach((e, i) => {\r\n                this.graph.edgeSplitByEdge(e)\r\n            })\r\n\r\n            const other = this.graph.getNode(node);\r\n            if (other) {\r\n                const dis = distance(node.vec, other.vec);\r\n                if (dis < 8) {\r\n                    this.graph.mergeTwoNodes(other, node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        if (this.graph.captured && this.graph.captured.type === 'node') {\r\n            const node = this.graph.captured as Node;\r\n            node.vec.x = x;\r\n            node.vec.y = y;\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n        if (this.needPopulate) {\r\n            this.populate();\r\n        }\r\n\r\n        this.graph.render(ctx);\r\n\r\n        this.divLog.textContent = this.graph.log;\r\n        // this.divSel.textContent = JSON.stringify(this.graph.captured);\r\n\r\n        if (this.graph.captured) {\r\n            this.divSel.textContent = this.graph.captured.type;\r\n        } else {\r\n            this.divSel.textContent = 'undefined';\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.m.x, this.m.y, 2, 0, 3.14 * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#888';\r\n        ctx.fill();\r\n\r\n\r\n    }\r\n    public exportJSON() {\r\n        const data = this.graph.toJSON();\r\n        downloadJson(JSON.stringify(data), 'graph.json')\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass Graph {\r\n    public log: string = '';\r\n    public nodes: Node[] = [];\r\n    public edges: Edge[] = [];\r\n\r\n    private _captured: Node | Edge | undefined = undefined;\r\n    constructor() {\r\n\r\n    }\r\n    public updatePost() {\r\n        // this.divLog.textContent = `N:${this.nodes.length}, E:${this.edges.length}`;\r\n    }\r\n    public get captured() {\r\n        return this._captured\r\n    }\r\n    public set captured(v) {\r\n        if (this._captured) {\r\n            this._captured.isSelected = false;\r\n        }\r\n\r\n        this._captured = v;\r\n        if (v) {\r\n            this._captured.isSelected = true;\r\n        }\r\n\r\n    }\r\n    // ..............................................................\r\n    public addNode(x: number, y: number, z: number = 0) {\r\n        // console.trace()\r\n        const node = new Node(this, x, y, 0);\r\n        node.id = this.nodes.length;\r\n        this.nodes.push(node);\r\n        this.updatePost();\r\n        return node;\r\n    }\r\n    public addEdgeClosestByNode(node: Node) {\r\n        const nn = this.getNode(node);\r\n        if (nn) this.addEdge(node, nn);\r\n    }\r\n    public addEdge(n0: Node, n1: Node) {\r\n        const edge = new Edge(n0, n1);\r\n        n0.edges.push(edge);\r\n        n1.edges.push(edge);\r\n        this.edges.push(edge);\r\n\r\n        this.edgeSplitByEdge(edge);\r\n        this.updatePost();\r\n        return edge;\r\n    }\r\n    public addEdgeSlipt(n0: Node, n1: Node) {\r\n        const edge = new Edge(n0, n1);\r\n        n0.edges.push(edge);\r\n        n1.edges.push(edge);\r\n        this.edges.push(edge);\r\n        return edge;\r\n    }\r\n    // ..............................................................\r\n    public edgeSplitByNode(node: Node, edge: Edge) {\r\n        const n0 = edge.n0;\r\n        const n1 = edge.n1;\r\n\r\n        this.addEdge(n0, node);\r\n        this.addEdge(node, n1);\r\n\r\n        this.removeEdge(edge);\r\n    }\r\n    public edgeSplitByEdge(edge: Edge) {\r\n        const nodes: Node[] = [];\r\n        for (let i = this.edges.length - 1; i > -1; --i) {\r\n            const other = this.edges[i];\r\n            // if (edge === other) continue;\r\n            if (edge.n0 !== other.n0 && edge.n0 !== other.n1 && edge.n1 !== other.n0 && edge.n1 !== other.n1) {\r\n                const inter = getIntersectEdge(edge, other);\r\n                if (inter) {\r\n                    const nn = new Node(this, inter[0], inter[1])\r\n                    this.nodes.push(nn);\r\n                    this.addEdgeSlipt(nn, other.n0);\r\n                    this.addEdgeSlipt(nn, other.n1);\r\n                    this.removeEdge(other);\r\n                    nodes.push(nn);\r\n                }\r\n            }\r\n        }\r\n        // console.log('dd', nodes.length);\r\n        if (nodes.length > 0) {\r\n            let nodeFirst = edge.n0;\r\n            nodes.push(edge.n1);\r\n            const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\r\n            const indices = disList.map((val, index) => index);\r\n            const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\r\n            this.addEdgeSlipt(nodeFirst, nodes[sortedDis[0]]);\r\n            for (let i = 0; i < sortedDis.length - 1; ++i) {\r\n                this.addEdgeSlipt(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\r\n            }\r\n            this.removeEdge(edge);\r\n        }\r\n        this.updateNodeID();\r\n    }\r\n    // ..............................................................\r\n    public removeEdge(other) {\r\n        other.n0.removeEdge(other);\r\n        other.n1.removeEdge(other);\r\n        this.edges.splice(this.edges.indexOf(other), 1);\r\n    }\r\n    public removeNode(node: Node) {\r\n        node.edges.forEach((edge) => {\r\n            if (edge.n0 === node) {\r\n                edge.n1.removeEdge(edge)\r\n            } else {\r\n                edge.n0.removeEdge(edge)\r\n            }\r\n            this.edges.splice(this.edges.indexOf(edge), 1);\r\n        })\r\n        this.nodes.splice(this.nodes.indexOf(node), 1);\r\n        this.updateNodeID();\r\n    }\r\n    // ..............................................................\r\n    public getNode(node: Node) {\r\n        let theDis = Number.MAX_VALUE;\r\n        let index = -1;\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            if (this.nodes[i] === node) continue;\r\n            const vec = this.nodes[i].vec;\r\n            const dis = distance(vec, node.vec)\r\n            if (theDis > dis) {\r\n                theDis = dis;\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1) { return this.nodes[index]; }\r\n        return undefined;\r\n    }\r\n    public getNodeVec(x: number, y: number, minDis = 8) {\r\n        let theDis = Number.MAX_VALUE;\r\n        let index = -1;\r\n        const v = new Vector3(x, y)\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            const vec = this.nodes[i].vec;\r\n            const dis = distance(vec, v)\r\n            if (theDis > dis) {\r\n                theDis = dis;\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1 && theDis < minDis) { return this.nodes[index]; }\r\n        return undefined;\r\n    }\r\n    public getEdgeVec(x: number, y: number, minDis = 8) {\r\n        const mv = new Vector3(x, y, 0)\r\n        for (let i = 0; i < this.edges.length; ++i) {\r\n            const edge = this.edges[i];\r\n            const cp = pointOnLine(mv, edge.n0.vec, edge.n1.vec)\r\n\r\n            const dis = distance(mv, cp);\r\n            if (dis < minDis) {\r\n                return { edge, vec: cp }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    public getEdgeByTwoNode(n0: Node, n1: Node) {\r\n        for (let i = 0; i < this.edges.length; ++i) {\r\n            const edge = this.edges[i];\r\n            if ((edge.n0 === n0 && edge.n1 === n1) || (edge.n0 === n1 && edge.n1 === n0)) {\r\n                return edge;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    // ..............................................................\r\n    public mergeTwoNodes(n0: Node, n1: Node) {\r\n\r\n        const others = []\r\n        for (let i = 0; i < n1.edges.length; ++i) {\r\n            const edge = n1.edges[i]\r\n            if (edge.n0 === n1) {\r\n                others.push(edge.n1)\r\n            } else {\r\n                others.push(edge.n0)\r\n            }\r\n        }\r\n        n1.remove();\r\n\r\n        others.forEach((n) => {\r\n            if (!this.getEdgeByTwoNode(n0, n)) {\r\n                this.addEdge(n0, n);\r\n            }\r\n        })\r\n    }\r\n    public updateNodeID() {\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            this.nodes[i].id = i;\r\n        }\r\n    }\r\n    public toJSON() {\r\n        const data = { node: [], edge: [] }\r\n        this.nodes.forEach((n) => { data.node.push(n.toJSON()); });\r\n        this.edges.forEach((e) => { data.edge.push(e.toJSON()); });\r\n        return data;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.log = `N:${this.nodes.length}, E:${this.edges.length}`;\r\n        // console.log(`N:${this.nodes.length}, E:${this.edges.length}`)\r\n        this.edges.forEach((e: Edge) => { e.render(ctx); })\r\n        this.nodes.forEach((n: Node) => { n.render(ctx); })\r\n    }\r\n}\r\n\r\nclass Edge {\r\n    public type = 'edge';\r\n    public n0: Node;\r\n    public n1: Node;\r\n    public isSelected = false;\r\n    public data: any = [];\r\n    constructor(n0: Node, n1: Node) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n    }\r\n    public toJSON() {\r\n        return {\r\n            n0: this.n0.id,\r\n            n1: this.n1.id,\r\n            data: this.data,\r\n        };\r\n    }\r\n    public remove() {\r\n        this.n0.removeEdge(this);\r\n        this.n1.removeEdge(this);\r\n    }\r\n    public render(ctx) {\r\n        if (this.isSelected) {\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeStyle = '#00f';\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.n0.vec.x, this.n0.vec.y);\r\n            ctx.lineTo(this.n1.vec.x, this.n1.vec.y);\r\n            ctx.stroke();\r\n        }\r\n        ctx.lineWidth = 1;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.n0.vec.x, this.n0.vec.y);\r\n        ctx.lineTo(this.n1.vec.x, this.n1.vec.y);\r\n        ctx.strokeStyle = '#0f0';\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nclass Node {\r\n    public type = 'node';\r\n    public graph: Graph;\r\n    public vec: Vector3;\r\n    public r: number = 5;\r\n    public edges: Edge[] = [];\r\n    public isSelected = false;\r\n    public id = -1;\r\n    public data: any = [];\r\n    constructor(graph: Graph, x: number, y: number, z: number = 0) {\r\n        this.graph = graph;\r\n        this.vec = new Vector3(x, y, z);\r\n    }\r\n    public toJSON() {\r\n        return {\r\n            id: this.id,\r\n            vec: { x: this.vec.x, y: this.vec.y, z: this.vec.z },\r\n            data: this.data\r\n        };\r\n    }\r\n    public remove() {\r\n        this.graph.removeNode(this);\r\n    }\r\n    public removeEdge(other) {\r\n        this.edges.splice(this.edges.indexOf(other), 1);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, this.r, 0, 3.14 * 2)\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fill();\r\n        if (this.isSelected) {\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeStyle = '#00f';\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.lineWidth = 1\r\n        ctx.strokeText(`${this.id}`, this.vec.x, this.vec.y - 7)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Vector3 {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    constructor(x: number, y: number, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z\r\n    }\r\n}\r\n\r\nconst distance = (v0: Vector3, v1: Vector3) => {\r\n    return Math.sqrt(distance2(v0, v1));\r\n}\r\nconst distance2 = (v0: Vector3, v1: Vector3) => {\r\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\r\n}\r\n\r\nconst getIntersectEdge = (e0: Edge, e1: Edge) => {\r\n    return getIntersect(e0.n0, e0.n1, e1.n0, e1.n1)\r\n}\r\n\r\nconst getIntersect = (n0: Node, n1: Node, n2: Node, n3: Node) => {\r\n    return getLineIntersectPlane(n0.vec.x, n0.vec.y, n1.vec.x, n1.vec.y, n2.vec.x, n2.vec.y, n3.vec.x, n3.vec.y)\r\n}\r\n\r\nconst getLineIntersectPlane = (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) => {\r\n    // Check if none of the lines are of length 0\r\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\r\n        return undefined;\r\n    }\r\n\r\n    const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\r\n\r\n    // Lines are parallel\r\n    if (denominator === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\r\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\r\n\r\n    // is the intersection along the segments\r\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\r\n        return undefined;\r\n    }\r\n\r\n    // Return a object with the x and y coordinates of the intersection\r\n    const x = x1 + ua * (x2 - x1);\r\n    const y = y1 + ua * (y2 - y1);\r\n\r\n    return [x, y];\r\n};\r\n\r\nconst lerp = (a: number, b: number, t: number) => { return a + t * (b - a); }\r\n\r\nconst pointOnLine = (p: Vector3, p0: Vector3, p1: Vector3) => {\r\n    let dx = p1.x - p0.x,\r\n        dy = p1.y - p0.y,\r\n        t = ((p.x - p0.x) * dx + (p.y - p0.y) * dy) / (dx * dx + dy * dy),\r\n        x = lerp(p0.x, p1.x, t),\r\n        y = lerp(p0.y, p1.y, t);\r\n    return new Vector3(x, y);\r\n};\r\n\r\nconst downloadJson = (collection, name = 'download',) => {\r\n    const link = document.createElement('a');\r\n    link.href = 'data:application/json;charset=utf-8,' + encodeURIComponent(collection);\r\n    link.download = `${name}`;\r\n    link.click();\r\n};"],"names":["Solution","RendererCanvas","constructor","div","super","divText","divSel","graphController","this","canvas","style","position","divMenu","document","createElement","appendChild","divBtn","textContent","onclick","needPopulate","divRemove","removeSelection","btnExport","exportJSON","divDes","innerHTML","init","GraphController","divLog","mouseClick","start","render","ctx","x","y","mouseDown","mouseMove","mouseDrag","mouseUp","graph","m","Vector3","nodePre","undefined","Graph","populate","Math","random","width","height","captured","remove","node","getNodeVec","addEdge","closeEdge","getEdgeVec","addNode","vec","edgeSplitByNode","edge","addEdgeClosestByNode","type","edges","forEach","e","i","edgeSplitByEdge","other","getNode","distance","mergeTwoNodes","log","beginPath","arc","closePath","fillStyle","fill","data","toJSON","downloadJson","JSON","stringify","nodes","_captured","updatePost","v","isSelected","Node","id","length","push","nn","n0","n1","Edge","addEdgeSlipt","removeEdge","inter","getIntersectEdge","nodeFirst","disList","map","n","sortedDis","val","index","sort","a","b","updateNodeID","splice","indexOf","removeNode","theDis","Number","MAX_VALUE","dis","minDis","mv","cp","pointOnLine","getEdgeByTwoNode","others","lineWidth","strokeStyle","moveTo","lineTo","stroke","z","r","strokeText","v0","v1","sqrt","distance2","e0","e1","getIntersect","n2","n3","getLineIntersectPlane","x1","y1","x2","y2","x3","y3","x4","y4","denominator","ua","ub","lerp","t","p","p0","p1","dx","dy","collection","name","link","href","encodeURIComponent","download","click"],"sourceRoot":""}