{"version":3,"file":"static/js/69.3e16837c.chunk.js","mappings":"8OAEaA,EAAQ,WAGjB,WAAYC,IAAe,oBAFpBA,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUA,EAGfE,KAAKF,QAAQG,MAAMC,QAAU,OAC7BF,KAAKF,QAAQG,MAAME,WAAa,SAEhC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIH,MAAMM,WAAa,OACvBH,EAAIH,MAAMO,YAAc,OACxBJ,EAAIH,MAAMQ,gBAAkB,OAC5BL,EAAIH,MAAMS,MAAQ,QAClBN,EAAIH,MAAMU,OAAS,QAEnBX,KAAKF,QAAQc,YAAYR,GAKzBJ,KAAKD,SAAW,IAAIc,EAAST,GAG7BU,QAAQC,IAAIf,KAAKD,SAGrB,CAMC,OANA,+BACD,WAEI,IADAC,KAAKD,SAASiB,UACPhB,KAAKF,QAAQmB,kBAChBjB,KAAKF,QAAQoB,YAAYlB,KAAKF,QAAQmB,iBAE9C,KAAC,EAlCgB,GAqCRJ,EAAQ,0CAGjB,WAAYT,GAAW,IAAD,mBAClB,cAAMA,IAHVe,SAAoCC,EAAS,EAC7CC,SAAW,EAIP,EAAKC,OAAOrB,MAAMsB,SAAW,WAE7B,EAAKD,OAAOrB,MAAMS,MAAQ,OAC1B,EAAKY,OAAOrB,MAAMU,OAAS,QAO3Ba,EAAAA,EAAAA,IAAc,+FAA+FC,MAAM,SAACN,GAChHL,QAAQC,IAAII,GACZ,EAAKA,IAAMA,CAiBf,IAEA,IAAMO,EAAYrB,SAASC,cAAc,OAqB5B,OApBb,EAAKR,QAAQc,YAAYc,GACzBA,EAAUC,YAAc,SACxBD,EAAUzB,MAAMsB,SAAW,WAC3BG,EAAUzB,MAAM2B,MAAQ,OAExBF,EAAUG,QAAU,WAChBf,QAAQC,IAAI,MACA,EAAKjB,QAAQgC,YAAc,EAAKhC,QAAQiC,aAAe,EAAKjC,QAAQgC,YAAc,EAAKhC,QAAQiC,aAA3G,IAEMrB,EAAQ,EAAKZ,QAAQG,MAAMS,MACjC,EAAKZ,QAAQG,MAAMS,MAAQ,EAAKZ,QAAQG,MAAMU,OAC9C,EAAKb,QAAQG,MAAMU,OAASD,EAE5B,EAAKY,OAAOZ,MAAQ,EAAKZ,QAAQgC,YACjC,EAAKR,OAAOX,OAAS,EAAKb,QAAQiC,aAElC,EAAKV,UAAsB,GAAVW,KAAKC,EAC1B,EAGA,EAAKC,QAAQ,CACjB,CAwCC,OAxCA,8BACD,SAAcC,GAGVnC,KAAKmC,IAAIC,OACTpC,KAAKmC,IAAIE,UAA8B,GAApBrC,KAAKsB,OAAOZ,MAAkC,GAArBV,KAAKsB,OAAOX,QACxDX,KAAKmC,IAAIG,OAAOtC,KAAKqB,UAClBrB,KAAKmB,KACJnB,KAAKmC,IAAII,UAAUvC,KAAKmB,IAAuB,IAAjBnB,KAAKmB,IAAIT,MAAgC,IAAlBV,KAAKmB,IAAIR,QAIlEwB,EAAIK,YACJL,EAAIM,IAAI,EAAG,EAAG,GAAI,EAAa,EAAVT,KAAKC,IAC1BE,EAAIO,YACJP,EAAIQ,OAIJ3C,KAAKmC,IAAIS,SAGb,GAAC,uBACD,SAAiBC,EAAWC,GACxB,GACH,qBACD,SAAeD,EAAWC,GACtB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,wBACD,SAAkBD,EAAWC,GACzB,GACH,uBACD,SAAiBD,EAAWC,GACxB,GACH,qBACD,SAAeC,GACX,KACH,EAnGgB,CAASC,EAAAA,G","sources":["njslab/Lab/image-transform/index.ts"],"sourcesContent":["import { RendererCanvas, getImgFromURL } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost; \r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '600px';\r\n        div.style.height = '350px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n\r\n        console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    img: HTMLImageElement | undefined = undefined\r\n    rotation = 0.0;\r\n    constructor(div: any) {\r\n        super(div);\r\n\r\n        this.canvas.style.position = 'relative';\r\n\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n        // getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/person/HaminHaram.jpg').then( (img: HTMLImageElement) => {\r\n        getImgFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/img/bg/zoom-James-River-Kayaking.jpg').then( (img: HTMLImageElement) => {\r\n            console.log(img)\r\n            this.img = img;\r\n            \r\n            // this.canvas.width = img.width;\r\n            // this.canvas.height = img.height;\r\n\r\n            \r\n            // this.hostDiv.style.width = img.width + 'px';\r\n            // this.hostDiv.style.height = img.height + 'px';\r\n\r\n            // this.ctx.canvas.width = img.width;\r\n            // this.ctx.canvas.height = img.height;\r\n            // this.ctx.beginPath();\r\n            // this.ctx.arc(100, 100, 150, 0, Math.PI * 2);\r\n            // this.ctx.closePath();\r\n            // this.ctx.fill()\r\n            // this.ctx.drawImage(img, 0, 0);\r\n            // this.hostDiv.appendChild(img)\r\n        });\r\n\r\n        const divRotate = document.createElement('div');\r\n        this.divHost.appendChild(divRotate);\r\n        divRotate.textContent = 'rotate';\r\n        divRotate.style.position = 'absolute';\r\n        divRotate.style.color = 'aqua';\r\n\r\n        divRotate.onclick = () => {\r\n            console.log('ro');\r\n            const max = this.divHost.clientWidth > this.divHost.clientHeight ? this.divHost.clientWidth : this.divHost.clientHeight;\r\n\r\n            const width = this.divHost.style.width;\r\n            this.divHost.style.width = this.divHost.style.height\r\n            this.divHost.style.height = width;\r\n\r\n            this.canvas.width = this.divHost.clientWidth;\r\n            this.canvas.height = this.divHost.clientHeight;\r\n\r\n            this.rotation += Math.PI * 0.5;\r\n        }\r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width * 0.5, this.canvas.height * 0.5)\r\n        this.ctx.rotate(this.rotation)\r\n        if(this.img) {\r\n            this.ctx.drawImage(this.img, -this.img.width * 0.5, -this.img.height * 0.5);\r\n        }\r\n\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 50, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill()\r\n\r\n        // console.log(ctx)\r\n\r\n        this.ctx.restore();\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent): void {\r\n        // TODO\r\n    }\r\n}"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","console","log","destroy","lastElementChild","removeChild","img","undefined","rotation","canvas","position","getImgFromURL","then","divRotate","textContent","color","onclick","clientWidth","clientHeight","Math","PI","start","ctx","save","translate","rotate","drawImage","beginPath","arc","closePath","fill","restore","x","y","k","RendererCanvas"],"sourceRoot":""}