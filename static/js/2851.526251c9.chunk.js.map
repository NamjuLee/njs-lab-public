{"version":3,"file":"static/js/2851.526251c9.chunk.js","mappings":"gPAEaA,EAAQ,WAGjB,WAAYC,IAAe,oBAFpBA,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUA,EAGfE,KAAKF,QAAQG,MAAMC,QAAU,OAC7BF,KAAKF,QAAQG,MAAME,WAAa,SAEhC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIH,MAAMM,WAAa,OACvBH,EAAIH,MAAMO,YAAc,OACxBJ,EAAIH,MAAMQ,gBAAkB,OAC5BL,EAAIH,MAAMS,MAAQ,SAClBN,EAAIH,MAAMU,OAAS,QAEnBX,KAAKF,QAAQc,YAAYR,GAKzBJ,KAAKD,SAAW,IAAIc,EAAST,EAKjC,CAMC,OANA,+BACD,WAEI,IADAJ,KAAKD,SAASe,UACPd,KAAKF,QAAQiB,kBAChBf,KAAKF,QAAQkB,YAAYhB,KAAKF,QAAQiB,iBAE9C,KAAC,EAjCgB,GAoCRF,EAAQ,0CAEjB,WAAYT,GAAW,IAAD,EAWL,OAXK,gBAClB,cAAMA,IACDa,OAAOhB,MAAMiB,SAAW,WAC7B,EAAKD,OAAOhB,MAAMS,MAAQ,OAC1B,EAAKO,OAAOhB,MAAMU,OAAS,OAO3B,EAAKQ,QAAQ,CACjB,CAQC,OARA,8BACD,SAAcC,GAMV,KACH,EAtBgB,CAASC,EAAAA,G","sources":["njslab/Tools/Easing_Interpolation/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost;\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n\r\n}\r\n\r\n// https://codepen.io/NJStudio/pen/NWGedxQ\r\n\r\n\r\n\r\n// const div = document.getElementById('div');\r\n// const canvas = document.createElement('canvas');\r\n// canvas.width = 400;\r\n// canvas.height = 400;\r\n// div.append(canvas)\r\n// const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n// ctx.translate(200, 200)\r\n\r\n// // ctx.fillStyle = '#0000ff'\r\n// // ctx.beginPath();\r\n// // ctx.arc(0, 0, 10, 0, 3.14 * 2)\r\n// // ctx.closePath()\r\n// // ctx.fill()\r\n\r\n// const listPoint = [];\r\n\r\n// let t = 0.0;\r\n\r\n// class Point {\r\n//   public x: number = 0;\r\n//   public y: number = 0;\r\n//   public r: number = 3;\r\n//   interpolation: any;\r\n//   constructor(x: number, y: number, interpolation: any ){\r\n//     this.x = x;\r\n//     this.y = y;\r\n//     this.interpolation = interpolation;\r\n//     listPoint.push(this);\r\n//   }\r\n//   public render(ctx: CanvasRenderingContext2D) {\r\n//     ctx.beginPath();\r\n//     ctx.arc(this.x, this.y, this.r, 0, 3.14 * 2)\r\n//     ctx.closePath()\r\n//     ctx.fill()\r\n//   }\r\n//   public update(t: number){\r\n//     this.x = this.interpolation(t) * 100;\r\n//   }\r\n  \r\n// }\r\n// const linear = (t: number) => { return t; }\r\n// const easeInElastic = (t: number) => { return (.04 - .04 / t) * Math.sin(25 * t) + 1; }\r\n// // https://joshondesign.com/2013/03/01/improvedEasingEquations\r\n// const easeOutElastic2 = (t: number) => { var p = 0.3; return Math.pow(2, -10 * t) * Math.sin((t - p / 4) * (2 * Math.PI) / p) + 1; }\r\n\r\n// const loop = () => {\r\n//   requestAnimationFrame(() => { loop(); });\r\n//   ctx.clearRect(-200, -200, canvas.width, canvas.height);\r\n\r\n//   for(let i = 0 ; i < listPoint.length; ++i) {\r\n//      listPoint[i].update(t);\r\n    \r\n//      // safegurard for the x value of the Points\r\n//      if (listPoint[i].x > 120) {\r\n//       listPoint[i].x = 120; \r\n//      }\r\n    \r\n//     listPoint[i].render(ctx);\r\n//     listPoint[i].y = -100 + i * 100;\r\n    \r\n\r\n//   }\r\n//   // console.log(easeOutElastic2(t));\r\n//   t += 0.01;\r\n// }\r\n\r\n\r\n// // ..... start your code goes here\r\n\r\n// // https://en.wikipedia.org/wiki/Interpolation\r\n// new Point(-90, 0, linear);\r\n// new Point(-90, 0, easeInElastic);\r\n// new Point(-90, 0, easeOutElastic2);\r\n\r\n\r\n// // ..... end your code goes there above\r\n\r\n\r\n// loop();\r\n\r\n// const button = document.createElement('button');\r\n// button.innerHTML = \"reset timeer\";\r\n// button.addEventListener('click', () => {\r\n//   t = 0.0;\r\n// });\r\n// div.append(button);"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","canvas","position","start","ctx","RendererCanvas"],"sourceRoot":""}