{"version":3,"file":"static/js/3019.6ab5b169.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/WebGPU_00_Basic/index.ts"],"sourcesContent":["// import positionVert from './shaders/position.vert.wgsl';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\n\r\nconst positionVert = require('./shaders/position.vert.wgsl')\r\nconst colorFrag = require('./shaders/position.vert.wgsl')\r\n\r\nconst vertex = new Float32Array([\r\n    0.0, 0.5, 0.0,\r\n    -0.5, -0.5, 0.0,\r\n    0.5, -0.5, 0.0\r\n])\r\nconst vertexCount = 3;\r\n\r\n// const positionVert = `\r\n// @vertex\r\n// fn main(@location(0) position : vec3<f32>) -> @builtin(position) vec4<f32> {\r\n//     return vec4<f32>(position, 1.0);\r\n// }\r\n// `\r\n// const colorFrag = `\r\n// @group(0) @binding(0) var<uniform> color : vec4<f32>;\r\n\r\n// @fragment\r\n// fn main() -> @location(0) vec4<f32> {\r\n//     return color;\r\n// }\r\n// `\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipelineObj: any;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        console.log(colorFrag, positionVert)\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat) {\r\n        const pipeline = await device.createRenderPipelineAsync({\r\n            label: 'Basic Pipline',\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: positionVert,\r\n                }),\r\n                entryPoint: 'main',\r\n                buffers: [{\r\n                    arrayStride: 3 * 4, // 3 float32,\r\n                    attributes: [\r\n                        {\r\n                            // position xyz\r\n                            shaderLocation: 0,\r\n                            offset: 0,\r\n                            format: 'float32x3',\r\n                        }\r\n                    ]\r\n                }]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: colorFrag,\r\n                }),\r\n                entryPoint: 'main',\r\n                targets: [\r\n                    {\r\n                        format: format\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list' // try point-list, line-list, line-strip, triangle-strip?\r\n            }\r\n        } as GPURenderPipelineDescriptor)\r\n        // create vertex buffer\r\n        const vertexBuffer = device.createBuffer({\r\n            label: 'GPUBuffer store vertex',\r\n            size: vertex.byteLength,\r\n            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n            //mappedAtCreation: true\r\n        })\r\n        device.queue.writeBuffer(vertexBuffer, 0, vertex)\r\n        // create color buffer\r\n        const colorBuffer = device.createBuffer({\r\n            label: 'GPUBuffer store rgba color',\r\n            size: 4 * 4, // 4 * float32\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        })\r\n        device.queue.writeBuffer(colorBuffer, 0, new Float32Array([1, 0, 0, 1]))\r\n\r\n        // create a uniform group for color\r\n        const uniformGroup = device.createBindGroup({\r\n            label: 'Uniform Group with colorBuffer',\r\n            layout: pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: colorBuffer\r\n                    }\r\n                }\r\n            ]\r\n        })\r\n        // return all vars\r\n        //     console.log('working');\r\n        this.pipelineObj = { pipeline, vertexBuffer, colorBuffer, uniformGroup }\r\n        this.run();\r\n    }\r\n    public run() {\r\n        this.draw(this.device, this.ctx, this.pipelineObj)\r\n    }\r\n    draw(device: GPUDevice, context: GPUCanvasContext, pipelineObj: {\r\n        pipeline: GPURenderPipeline,\r\n        vertexBuffer: GPUBuffer,\r\n        colorBuffer: GPUBuffer,\r\n        uniformGroup: GPUBindGroup\r\n    }) {\r\n        // console.log('run...');\r\n        const commandEncoder = device.createCommandEncoder()\r\n        const view = context.getCurrentTexture().createView()\r\n        const renderPassDescriptor: GPURenderPassDescriptor = {\r\n            //@ts-ignore\r\n            colorAttachments: [\r\n                {\r\n                    view: view,\r\n                    clearValue: { r: 0, g: 0, b: 0, a: 1.0 },\r\n                    loadOp: 'clear',\r\n                    storeOp: 'store'\r\n                }\r\n            ]\r\n        }\r\n        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\r\n        passEncoder.setPipeline(pipelineObj.pipeline)\r\n        // set uniformGroup\r\n        passEncoder.setBindGroup(0, pipelineObj.uniformGroup)\r\n        // set vertex\r\n        passEncoder.setVertexBuffer(0, pipelineObj.vertexBuffer)\r\n        // 3 vertex form a triangle\r\n        passEncoder.draw(vertexCount)\r\n        passEncoder.end()\r\n        // webgpu run in a separate process, all the commands will be executed after submit\r\n        device.queue.submit([commandEncoder.finish()])\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}"],"names":["positionVert","require","colorFrag","vertex","Float32Array","Solution","constructor","id","divHost","canvas","ctx","device","format","size","pipelineObj","this","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","console","log","initPipeline","pipeline","createRenderPipelineAsync","label","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","vertexBuffer","createBuffer","byteLength","usage","GPUBufferUsage","VERTEX","COPY_DST","queue","writeBuffer","colorBuffer","UNIFORM","uniformGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","run","draw","context","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","view","getCurrentTexture","createView","clearValue","r","g","b","a","loadOp","storeOp","passEncoder","beginRenderPass","setPipeline","setBindGroup","setVertexBuffer","end","submit","finish","destroy","lastElementChild","removeChild"],"sourceRoot":""}