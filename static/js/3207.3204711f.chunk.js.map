{"version":3,"file":"static/js/3207.3204711f.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/Util/MatUtil.ts","njslab/Infrastructure/WebGPU/WebGPU_08_cube_Camera /shaders/shaders.ts","njslab/Infrastructure/WebGPU/WebGPU_08_cube_Camera /shaders/cube.ts","njslab/Infrastructure/WebGPU/WebGPU_08_cube_Camera /index.ts"],"sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};","export const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}\n\nexport const Shaders = () => {\n    const vertex = `\n        struct Output {\n            @builtin(position) Position : vec4<f32>,\n            @location(0) vColor : vec4<f32>,\n        };\n        @vertex\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\n            var output: Output;\n            output.Position = pos;\n            output.vColor = color;\n            return output;\n        }`;\n\n    const fragment = `\n        @fragment\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\n            return vColor;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\nexport const ShadersOld = () => {\n    const vertex = `\n        [[location(0)]] var<in> position : vec4<f32>;\n        [[location(1)]] var<in> color : vec4<f32>;\n        [[builtin(position)]] var<out> Position : vec4<f32>;\n        [[location(0)]] var<out> vColor : vec4<f32>;\n\n        [[stage(vertex)]]\n        fn main() -> void {\n            Position = position;\n            vColor = color;\n            return;\n        }`;\n\n    const fragment = `\n        [[location(0)]] var<in> vColor : vec4<f32>;\n        [[location(0)]] var<out> fragColor : vec4<f32>;\n\n        [[stage(fragment)]]\n        fn main() -> void {\n            fragColor = vColor;\n            return;\n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n","export const CubeData = () =>{\n    const positions = new Float32Array([\n        // front\n        -1, -1,  1,  \n         1, -1,  1,  \n         1,  1,  1,\n         1,  1,  1,\n        -1,  1,  1,\n        -1, -1,  1,\n\n        // right\n         1, -1,  1,\n         1, -1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1,  1,  1,\n         1, -1,  1,\n\n        // back\n        -1, -1, -1,\n        -1,  1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1, -1, -1,\n        -1, -1, -1,\n\n        // left\n        -1, -1,  1,\n        -1,  1,  1,\n        -1,  1, -1,\n        -1,  1, -1,\n        -1, -1, -1,\n        -1, -1,  1,\n\n        // top\n        -1,  1,  1,\n         1,  1,  1,\n         1,  1, -1,\n         1,  1, -1,\n        -1,  1, -1,\n        -1,  1,  1,\n\n        // bottom\n        -1, -1,  1,\n        -1, -1, -1,\n         1, -1, -1,\n         1, -1, -1,\n         1, -1,  1,\n        -1, -1,  1\n    ]);\n\n    const colors = new Float32Array([\n        // front - blue\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n\n        // right - red\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n\n        //back - yellow\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n\n        //left - aqua\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n\n        // top - green\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n\n        // bottom - fuchsia\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1\n    ]);\n\n    return {\n        positions,\n        colors\n    };\n}","// import positionVert from './shaders/position.vert.wgsl?raw';\r\n// import colorFrag from './shaders/color.frag.wgsl';\r\nimport { vec3, mat4 } from 'gl-matrix';\r\n\r\nimport { Shaders, CreateGPUBufferUint, CreateGPUBuffer } from './shaders/shaders';\r\n\r\nimport { createTransforms, createViewProjection } from '../Util';\r\n\r\nimport { CubeData } from './shaders/cube';\r\nimport { pipeline } from '../WebGPU_Sandbox/NWebGPU';\r\n\r\nconst createCamera = require('3d-view-controls');\r\n\r\nconst shader = `\r\n// vertex shader\r\n\r\nstruct Uniforms {\r\n    mvpMatrix : mat4x4<f32>,\r\n};\r\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\r\n\r\nstruct Output {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) vColor : vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\r\n    var output: Output;\r\n    output.Position = uniforms.mvpMatrix * pos;\r\n    output.vColor = color;\r\n    return output;\r\n}\r\n\r\n// fragment shader\r\n\r\n @fragment\r\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\r\n    return vColor;\r\n}\r\n`\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: GPUCanvasContext;\r\n    device: GPUDevice;\r\n    format: GPUTextureFormat;\r\n    size: any;\r\n    pipeline: GPURenderPipeline;\r\n    isAnimation: boolean = true;\r\n\r\n    camera: Camera;\r\n\r\n    uniformBuffer: GPUBuffer\r\n    uniformBindGroup: GPUBindGroup\r\n    textureView: GPUTextureView\r\n    depthTexture: GPUTexture;\r\n    renderPassDescription: GPURenderPassDescriptor\r\n\r\n    numberOfVertices: number;\r\n    vertexBuffer: GPUBuffer;\r\n    colorBuffer: GPUBuffer;\r\n\r\n    rotation = vec3.fromValues(0, 0, 0);\r\n\r\n    // requestAnimationFrame = window.requestAnimationFrame;\r\n    // cancelAnimationFrame = window.cancelAnimationFrame;\r\n    requestAni: any;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        //     console.log(id, 'webGPU', navigator.gpu);\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.initWebGPU();\r\n    }\r\n    async initWebGPU() {\r\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\r\n\r\n        const adapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n            // powerPreference: 'low-power'\r\n        })\r\n\r\n        if (!adapter) { throw new Error('No Adapter Found'); }\r\n\r\n        const device = await adapter.requestDevice()\r\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\r\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\r\n        const devicePixelRatio = window.devicePixelRatio || 1\r\n        this.canvas.width = this.divHost.clientWidth;\r\n        this.canvas.height = this.divHost.clientHeight;\r\n        this.ctx.configure({\r\n            // json specific format when key and value are the same\r\n            device, format,\r\n            // prevent chrome warning\r\n            alphaMode: 'opaque'\r\n        })\r\n\r\n        this.size = { width: this.canvas.width, height: this.canvas.height }\r\n        this.device = device;\r\n        this.format = format;\r\n\r\n        this.camera = new Camera(this);\r\n\r\n        this.initPipeline(this.device, this.format);\r\n    }\r\n\r\n    async initPipeline(device: GPUDevice, format: GPUTextureFormat, primitiveType = 'triangle-list') { // triangle-list , triangle-strip\r\n        // create vertex buffers\r\n        const cubeData = CubeData();\r\n        this.numberOfVertices = cubeData.positions.length / 3;\r\n        this.vertexBuffer = CreateGPUBuffer(device, cubeData.positions);\r\n        this.colorBuffer = CreateGPUBuffer(device, cubeData.colors);\r\n\r\n        this.pipeline = device.createRenderPipeline({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: device.createShaderModule({\r\n                    code: shader\r\n                }),\r\n                entryPoint: \"vs_main\",\r\n                // @ts-ignore\r\n                buffers: [\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 0,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    },\r\n                    {\r\n                        arrayStride: 12,\r\n                        attributes: [{\r\n                            shaderLocation: 1,\r\n                            format: \"float32x3\",\r\n                            offset: 0\r\n                        }]\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: device.createShaderModule({\r\n                    code: shader\r\n                }),\r\n                entryPoint: \"fs_main\",\r\n                targets: [\r\n                    {\r\n                        format: this.format as GPUTextureFormat\r\n                    }\r\n                ]\r\n            },\r\n            primitive: {\r\n                topology: \"triangle-list\",\r\n                cullMode: 'back'\r\n            },\r\n            depthStencil: {\r\n                format: \"depth24plus\",\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\"\r\n            }\r\n        });\r\n\r\n        // create uniform buffer and layout\r\n        this.uniformBuffer = device.createBuffer({\r\n            size: 64,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        });\r\n\r\n\r\n        this.uniformBindGroup = device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: {\r\n                    buffer: this.uniformBuffer,\r\n                    offset: 0,\r\n                    size: 64\r\n                }\r\n            }]\r\n        });\r\n\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        this.depthTexture = device.createTexture({\r\n            size: [this.canvas.width, this.canvas.height, 1],\r\n            format: \"depth24plus\",\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT\r\n        });\r\n        this.renderPassDescription = {\r\n            colorAttachments: [{\r\n                view: this.textureView,\r\n                clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\r\n                //@ts-ignore\r\n                loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\r\n                loadOp: 'clear',\r\n                storeOp: 'store'\r\n            }],\r\n            depthStencilAttachment: {\r\n                view: this.depthTexture.createView(),\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: 'clear',\r\n                depthStoreOp: \"store\",\r\n            }\r\n        };\r\n\r\n        this.requestAni = requestAnimationFrame(this.loop);\r\n    }\r\n    public loop = () => {\r\n        // console.log(this.rotation);\r\n\r\n        if (this.isAnimation) {\r\n            this.rotation[0] += 0.01;\r\n            this.rotation[1] += 0.01;\r\n            this.rotation[2] += 0.01;\r\n        } else {\r\n            this.rotation = [0, 0, 0];\r\n        }\r\n\r\n        this.drawing();\r\n        if (this.isAnimation) {\r\n            this.requestAni = requestAnimationFrame(this.loop);\r\n        }\r\n\r\n    }\r\n    public drawing() {\r\n        this.camera.update();\r\n\r\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, this.camera.mvpMatrix as ArrayBuffer);\r\n        this.textureView = this.ctx.getCurrentTexture().createView();\r\n        this.renderPassDescription.colorAttachments[0].view = this.textureView;\r\n        const commandEncoder = this.device.createCommandEncoder();\r\n        const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\r\n\r\n        renderPass.setPipeline(this.pipeline);\r\n        renderPass.setVertexBuffer(0, this.vertexBuffer);\r\n        renderPass.setVertexBuffer(1, this.colorBuffer);\r\n        renderPass.setBindGroup(0, this.uniformBindGroup);\r\n        renderPass.draw(this.numberOfVertices);\r\n        renderPass.end();\r\n\r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n    public destroy() {\r\n        this.device.destroy();\r\n        // this.isAnimation = false;\r\n        cancelAnimationFrame(this.requestAni);\r\n        // this.requestAni = undefined;\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Camera {\r\n    public solution: Solution;\r\n    public canvas: HTMLCanvasElement\r\n    public modelMatrix: mat4 // const\r\n    public mvpMatrix: mat4 // const\r\n\r\n    public vMatrix: mat4;\r\n    public vpMatrix: mat4;\r\n    public rotation =vec3.fromValues(0, 0, 0); \r\n    public translation =vec3.fromValues(0, 0, 0); \r\n    public camera: any\r\n\r\n    public vp: any // const\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.canvas = solution.canvas;\r\n\r\n        this.modelMatrix = mat4.create();\r\n        this.mvpMatrix = mat4.create();\r\n        this.vMatrix = mat4.create();\r\n        this.vpMatrix = mat4.create();\r\n        this.vp = createViewProjection(this.canvas.width / this.canvas.height);\r\n        this.vpMatrix = this.vp.viewProjectionMatrix;\r\n\r\n        // add rotation and camera:\r\n        this.camera = createCamera(this.canvas, this.vp.cameraOption);\r\n        // this.camera.mode = 'turntable' // https://github.com/mikolalysenko/3d-view-controls\r\n    }\r\n    public update() {\r\n        const pMatrix = this.vp.projectionMatrix;\r\n        this.vMatrix = this.camera.matrix;\r\n        mat4.multiply(this.vpMatrix, pMatrix, this.vMatrix);\r\n   \r\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\r\n        mat4.multiply(this.mvpMatrix, this.vpMatrix, this.modelMatrix);\r\n    }\r\n}"],"names":["createTransforms","modelMat","translation","rotation","scaling","rotateXMat","mat4","rotateYMat","rotateZMat","translateMat","scaleMat","createViewProjection","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","Math","PI","cameraOption","eye","center","zoomMax","zoomSpeed","CreateGPUBuffer","device","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Float32Array","getMappedRange","set","unmap","createCamera","require","shader","Solution","constructor","id","divHost","canvas","ctx","format","pipeline","isAnimation","camera","uniformBuffer","uniformBindGroup","textureView","depthTexture","renderPassDescription","numberOfVertices","vertexBuffer","colorBuffer","vec3","requestAni","loop","this","drawing","requestAnimationFrame","document","getElementById","createElement","appendChild","initWebGPU","async","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","width","clientWidth","height","clientHeight","configure","alphaMode","Camera","initPipeline","cubeData","positions","colors","length","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","UNIFORM","createBindGroup","getBindGroupLayout","entries","binding","resource","getCurrentTexture","createView","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachments","view","clearValue","r","g","b","a","loadValue","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","update","queue","writeBuffer","mvpMatrix","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","destroy","cancelAnimationFrame","lastElementChild","removeChild","solution","modelMatrix","vMatrix","vpMatrix","vp","pMatrix","matrix"],"sourceRoot":""}