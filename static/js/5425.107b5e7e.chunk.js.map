{"version":3,"file":"static/js/5425.107b5e7e.chunk.js","mappings":"gPAEaA,EAAQ,WAGjB,WAAYC,IAAe,oBAFpBA,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUA,EAGfE,KAAKF,QAAQG,MAAMC,QAAU,OAC7BF,KAAKF,QAAQG,MAAME,WAAa,SAEhC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIH,MAAMM,WAAa,OACvBH,EAAIH,MAAMO,YAAc,OACxBJ,EAAIH,MAAMQ,gBAAkB,OAC5BL,EAAIH,MAAMS,MAAQ,SAClBN,EAAIH,MAAMU,OAAS,QAEnBX,KAAKF,QAAQc,YAAYR,GAKzBJ,KAAKD,SAAW,IAAIc,EAAST,EAKjC,CAMC,OANA,+BACD,WAEI,IADAJ,KAAKD,SAASe,UACPd,KAAKF,QAAQiB,kBAChBf,KAAKF,QAAQkB,YAAYhB,KAAKF,QAAQiB,iBAE9C,KAAC,EAjCgB,GAoCRF,EAAQ,0CAEjB,WAAYT,GAAW,IAAD,EAWL,OAXK,gBAClB,cAAMA,IACDa,OAAOhB,MAAMiB,SAAW,WAC7B,EAAKD,OAAOhB,MAAMS,MAAQ,OAC1B,EAAKO,OAAOhB,MAAMU,OAAS,OAO3B,EAAKQ,QAAQ,CACjB,CAQC,OARA,8BACD,SAAcC,GAMV,KACH,EAtBgB,CAASC,EAAAA,G","sources":["njslab/Tools/BezierCurve/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost;\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n// https://codepen.io/NJStudio/pen/zYwZmEL?editors=1010\r\n\r\n// class Vector {\r\n// \tx = 0;\r\n// \ty = 0;\r\n// \tconstructor(x = 0, y = 0){\r\n// \t\tthis.x = x;\r\n// \t\tthis.y = y;\r\n// \t}\r\n// \tdistanceTo(other: Vector){\r\n// \t\treturn Math.sqrt((other.x - this.x) * (other.x - this.x) + (other.y - this.y) * (other.y - this.y));\r\n// \t}\r\n// \tdraw(ctx: CanvasRenderingContext2D) {\r\n// \t\tctx.fillStyle = '#ffffff';\r\n// \t\tctx.beginPath();\r\n// \t\tctx.arc(this.x, this.y, 5.0, 0.0, 3.14159 * 2)\r\n// \t\tctx.closePath();\r\n// \t\tctx.fill();\r\n// \t}\r\n// }\r\n\r\n// const interpolation = (p0: Vector, p1: Vector, t0: number, t1: number) => {\r\n// \treturn new Vector(\r\n// \t\tt1 * p0.x + t0 * p1.x, \r\n// \t\tt1 * p0.y + t0 * p1.y\r\n// \t);\r\n// };\r\n\r\n// const DeCasteljausAlgorithm = (p0: Vector, p1: Vector, p2: Vector, p3: Vector, t0: number) => {\r\n//     //Linear interpolation = lerp = (1 - t) * A + t * B\r\n//     let t1 = 1.0 - t0;\r\n// \t\t//Layer 1 \r\n// \t\tlet QVector = interpolation(p0, p1, t0, t1);\r\n// \t\tlet RVector = interpolation(p1, p2, t0, t1);\r\n// \t\tlet SVector = interpolation(p2, p3, t0, t1);\r\n\t\r\n//     //Layer 2\r\n// \t\tlet PVector = interpolation(QVector, RVector, t0, t1);\r\n// \t\tlet TVector = interpolation(RVector, SVector, t0, t1);\r\n\t\r\n//     //Final interpolated position\r\n// \t\treturn interpolation(PVector, TVector, t0, t1);\r\n//  };\r\n\r\n// const canvas = document.getElementById('myCanvas');\r\n// const ctx = canvas.getContext('2d');\r\n\r\n// const p0 = new Vector(80, 120);\r\n// const p1 = new Vector(50, 50);\r\n// const p2 = new Vector(180, 50);\r\n// const p3 = new Vector(250, 120);\r\n// let N = 5;\r\n// const render = () => {\r\n// \tctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n// \tp0.draw(ctx);\r\n// \tp1.draw(ctx);\r\n// \tp2.draw(ctx);\r\n// \tp3.draw(ctx);\r\n\r\n// \tctx.strokeStyle = '#ffffff';\r\n// \tctx.lineWidth = 1;\r\n// \tctx.beginPath();\r\n// \tctx.moveTo(p0.x, p0.y);\r\n// \tctx.lineTo(p1.x, p1.y);\r\n// \tctx.stroke();\r\n\r\n// \tctx.beginPath();\r\n// \tctx.moveTo(p2.x, p2.y);\r\n// \tctx.lineTo(p3.x, p3.y);\r\n// \tctx.stroke();\r\n\t\r\n// \tlet pts = [];\r\n\r\n// \tlet interval = 1.0 / N;\r\n// \tfor (let i = 0 ; i <= N; ++i) {\r\n// \t\tlet theInterval = interval * i;\r\n// \t\tconsole.log(theInterval);\r\n// \t\tlet v = DeCasteljausAlgorithm(p0, p1, p2, p3, interval * i);\r\n// \t\tpts.push(v);\r\n// \t}\r\n\r\n// \tconsole.log(pts);\r\n// \tctx.strokeStyle = '#ffffff';\r\n// \tctx.lineWidth = 3;\r\n// \tctx.beginPath();\r\n// \tfor(let i = 0 ; i < pts.length - 1; ++i ) {\r\n// \t\tctx.moveTo(pts[i].x, pts[i].y)\r\n// \t\tctx.lineTo(pts[1+i].x, pts[1+i].y)\r\n// \t}\r\n// \tctx.stroke();\r\n\r\n// }\r\n\r\n// const log = document.getElementById('log');\r\n// const slider = document.getElementById('myRange');\r\n// slider.oninput = () => {\r\n//     N = +slider.value;\r\n// \trender();\r\n// \tlog.innerHTML  = 'N: ' + N;\r\n// \tconsole.log(N)\r\n// }\r\n\r\n\r\n// let down = false;\r\n// let m = new Vector(0, 0);\r\n// let ptsList = [p0, p1, p2, p3];\r\n// let capture = undefined;\r\n// canvas.style.background = '#40E0D0';\r\n// canvas.addEventListener('mousedown', (event) => {\r\n// \tdown = true;\r\n// \tm.x = event.offsetX;\r\n// \tm.y = event.offsetY;\r\n// \tfor (let i = 0 ; i < ptsList.length; ++i) {\r\n\t\t\r\n// \t\t\tconst dis = ptsList[i].distanceTo(m);\r\n\t\t\r\n// \t\t\tif (dis < 10) {\r\n// \t\t\t\t\tcapture = ptsList[i];\r\n// \t\t\t\tconsole.log(ptsList[i]);\r\n// \t\t\t}\r\n\t\t\r\n// \t}\r\n//  });\r\n// canvas.addEventListener('mousemove', (event) => {\r\n// \t\tif(down) {\r\n// \t\t\tif (capture) {\r\n// \t\t\t\tconsole.log(event.offsetX)\r\n// \t\t\t\tcapture.x = event.offsetX;\r\n// \t\t\t\tcapture.y = event.offsetY;\r\n// \t\t\t\trender();\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n//  });\r\n// canvas.addEventListener('mouseup', (event) => {\r\n// \t\tcapture = undefined;\r\n// \t\tdown = false;\r\n//  });\r\n// render();"],"names":["Solution","divHost","renderer","this","style","display","alignItems","div","document","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","lastElementChild","removeChild","canvas","position","start","ctx","RendererCanvas"],"sourceRoot":""}