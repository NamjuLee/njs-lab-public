/*! For license information please see 382.06f0140f.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkNJS_Lab=self.webpackChunkNJS_Lab||[]).push([[382],{60382:function(e,t,n){var a={};n.r(a),n.d(a,{addImpl:function(){return Ge},bincountImpl:function(){return Xe},bincountReduceImpl:function(){return He},castImpl:function(){return Ve},ceilImpl:function(){return Ye},concatImpl:function(){return Qe},equalImpl:function(){return Ze},expImpl:function(){return Je},expm1Impl:function(){return $e},floorImpl:function(){return et},gatherNdImpl:function(){return tt},gatherV2Impl:function(){return nt},greaterEqualImpl:function(){return ot},greaterImpl:function(){return at},lessEqualImpl:function(){return ct},lessImpl:function(){return rt},linSpaceImpl:function(){return it},logImpl:function(){return st},maxImpl:function(){return lt},maximumImpl:function(){return ut},minimumImpl:function(){return dt},multiplyImpl:function(){return pt},negImpl:function(){return ft},notEqualImpl:function(){return xt},prodImpl:function(){return gt},raggedGatherImpl:function(){return It},raggedRangeImpl:function(){return wt},raggedTensorToTensorImpl:function(){return Et},rangeImpl:function(){return Nt},rsqrtImpl:function(){return At},scatterImpl:function(){return _t},sigmoidImpl:function(){return Ot},simpleAbsImpl:function(){return Oe},sliceImpl:function(){return Ft},sparseFillEmptyRowsImpl:function(){return Dt},sparseReshapeImpl:function(){return Pt},sparseSegmentReductionImpl:function(){return Lt},sqrtImpl:function(){return Bt},squaredDifferenceImpl:function(){return Vt},stridedSliceImpl:function(){return Wt},stringNGramsImpl:function(){return Mt},stringSplitImpl:function(){return zt},stringToHashBucketFastImpl:function(){return Xt},subImpl:function(){return Ht},tileImpl:function(){return Kt},topKImpl:function(){return Qt},transposeImpl:function(){return mt},uniqueImpl:function(){return Zt}});var o=n(61501);const r={},c={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function i(e,t){if(!(e in r)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!==typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!==typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete r[e]}),!1),(0,o.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(c.failIfMajorPerformanceCaveat=!1);if(1===e)return n.getContext("webgl",c)||n.getContext("experimental-webgl",c);return n.getContext("webgl2",c)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;r[e]=n}const n=r[e];return null==n||n.isContextLost()?(delete r[e],i(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),r[e])}var s,l,u;function d(e,t){return[t,e]}function p(e){const t=o.util.sizeFromShape(e),n=Math.ceil(t/4);return o.util.sizeToSquarishShape(n)}function h(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function f(e,t){const n=e;let a,r,c,i,s,l,u,d,p,h;return 2===(0,o.env)().getNumber("WEBGL_VERSION")?(a=n.R32F,r=n.R16F,c=n.RGBA16F,i=n.RGBA32F,s=n.RED,u=4,d=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(a=e.RGBA,r=e.RGBA,c=e.RGBA,i=n.RGBA,s=e.RGBA,u=4,d=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:a,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:c,internalFormatPackedFloat:i,textureFormatFloat:s,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}function x(e,t){const n=t();return(0,o.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code ".concat(t)}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(s||(s={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(l||(l={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(u||(u={}));const m=5.96e-8,g=65504;function b(e){return!!((0,o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||m<Math.abs(e)&&Math.abs(e)<g)}function v(e,t){return E(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const C=/ERROR: [0-9]+:([0-9]+):/g;function I(e,t){const n=C.exec(t);if(null==n)return console.log("Couldn't parse line number in error: ".concat(t)),void console.log(e);const a=+n[1],r=e.split("\n"),c=r.length.toString().length+2,i=r.map(((e,t)=>o.util.rightPad((t+1).toString(),c)+e));let s=0;for(let o=0;o<i.length;o++)s=Math.max(i[o].length,s);const l=i.slice(0,a-1),u=i.slice(a-1,a),d=i.slice(a);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log("%c ".concat(o.util.rightPad(u[0],s)),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function y(e,t){if(x(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function w(e,t,n,a,o,r,c){const i=e.getAttribLocation(t,n);return-1!==i&&(x(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),x(e,(()=>e.vertexAttribPointer(i,o,e.FLOAT,!1,r,c))),x(e,(()=>e.enableVertexAttribArray(i))),!0)}function k(e,t,n,a){x(e,(()=>function(e,t,n){N(e,n),x(e,(()=>e.activeTexture(e.TEXTURE0+n))),x(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,a))),x(e,(()=>e.uniform1i(n,a)))}function S(e,t,n){x(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),x(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function R(e,t){x(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),x(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function T(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error ".concat(t)}}(e,t))}function E(e,t,n){const a=x(e,(()=>t()));if(null==a)throw new Error(n);return a}function N(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=t+e.TEXTURE0;if(a<e.TEXTURE0||a>n){const e="[gl.TEXTURE0, gl.TEXTURE".concat(n,"]");throw new Error("textureUnit must be in ".concat(e,"."))}}function A(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return o.util.sizeFromShape(e.slice(0,e.length-t))}function _(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function O(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[A(e),..._(e)]),t}function F(e){return e%2===0}function D(e,t){if(e=e.slice(-2),t=t.slice(-2),o.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],a=t.slice(-1)[0];if(n===a)return!0;if(F(n)&&F(a)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&F(e[0])&&F(t[0])}let P,L;function B(e,t){return null!=e.getExtension(t)}function V(e){try{if(null!=i(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function W(e){if(0===e)return!1;const t=i(e);if(1!==e){if(B(t,"EXT_color_buffer_float"))return U(t);const e="EXT_color_buffer_half_float";if(B(t,e)){const n=t.getExtension(e);return function(e,t){const n=f(e,t),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a);const o=1,r=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,o,r,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const c=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,c),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(c),i}(t,n)}return!1}if(!B(t,"OES_texture_float"))return!1;if(!B(t,"WEBGL_color_buffer_float"))return!1;return U(t)}function U(e){const t=f(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(a),o}function M(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>"".concat(t," does not support complex64 tensors ")+"in the WebGL backend."))}))}const G=(0,o.env)();function z(){let e,t,n,a,r,c,i,s,l,u;return 2===(0,o.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",a="in",r="texture",c="outputColor",i="out vec4 outputColor;",s=(0,o.env)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",a="varying",r="texture2D",c="gl_FragColor",i="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:a,texture2D:r,output:c,defineOutput:i,defineSpecialNaN:s,defineSpecialInf:l,defineRound:u}}function X(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=o.util.computeStrides(t);return a.map(((t,o)=>{const r="int ".concat(e[o]," = ").concat(n," / ").concat(t),c=o===a.length-1?"int ".concat(e[o+1]," = ").concat(n," - ").concat(e[o]," * ").concat(t):"index -= ".concat(e[o]," * ").concat(t);return"".concat(r,"; ").concat(c,";")})).join("")}function H(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=o.util.computeStrides(t);return a.map(((t,o)=>{const r="int ".concat(e[o]," = ").concat(n," / outShapeStrides[").concat(o,"]"),c=o===a.length-1?"int ".concat(e[o+1]," = ").concat(n," - ").concat(e[o]," * outShapeStrides[").concat(o,"]"):"index -= ".concat(e[o]," * outShapeStrides[").concat(o,"]");return"".concat(r,"; ").concat(c,";")})).join("")}function q(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=function(e,t){const n=e.length,a=e.map((e=>"".concat(t,"[").concat(e,"]"))),o=new Array(n-1);o[n-2]=a[n-1];for(let r=n-3;r>=0;--r)o[r]="(".concat(o[r+1]," * ").concat(a[r+1],")");return o}(e.map(((e,t)=>t)),t);return a.map(((t,o)=>{const r="int ".concat(e[o]," = ").concat(n," / ").concat(a[o]),c=o===a.length-1?"int ".concat(e[o+1]," = ").concat(n," - ").concat(e[o]," * ").concat(a[o]):"index -= ".concat(e[o]," * ").concat(a[o]);return"".concat(r,"; ").concat(c,";")})).join("")}function K(e){const t=o.util.computeStrides(e).map((e=>e.toString()));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ".concat(t[0]," + coords.y * ").concat(t[1]," + coords.z;\n  }\n")}G.registerFlag("HAS_WEBGL",(()=>G.getNumber("WEBGL_VERSION")>0)),G.registerFlag("WEBGL_VERSION",(()=>V(2)?2:V(1)?1:0)),G.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),G.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===G.get("WEBGL_VERSION"))),G.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),G.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),G.registerFlag("WEBGL_PACK",(()=>G.getBool("HAS_WEBGL"))),G.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_CLIP",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_PACK_REDUCE",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_LAZILY_UNPACK",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_CONV_IM2COL",(()=>G.getBool("WEBGL_PACK"))),G.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==P){const t=i(e);P=t.getParameter(t.MAX_TEXTURE_SIZE)}return P}(G.getNumber("WEBGL_VERSION")))),G.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==L){const t=i(e);L=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,L)}(G.getNumber("WEBGL_VERSION")))),G.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=G.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=i(e);return t=B(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:B(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),G.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>G.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!o.device_util.isMobile())),G.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=i(e);if(1===e){if(!B(t,"OES_texture_float"))return!1}else if(!B(t,"EXT_color_buffer_float"))return!1;return U(t)}(G.getNumber("WEBGL_VERSION")))),G.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!G.getBool("WEBGL_FORCE_F16_TEXTURES")&&G.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),G.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>W(G.getNumber("WEBGL_VERSION")))),G.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=G.getNumber("WEBGL_VERSION"))&&null!=i(e).fenceSync;var e})),G.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>G.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),G.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never "+"delete) or at least 0, but got ".concat(e,"."))})),G.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>o.device_util.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error("WEBGL_FLUSH_THRESHOLD must be -1 (indicating never "+"manual flush) or at least 0, but got ".concat(e,"."))})),G.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),G.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),G.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),G.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),G.registerFlag("WEBGL_EXP_CONV",(()=>!1)),G.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>G.getBool("IS_TEST"))),G.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),G.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),G.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),G.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const j="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Y}=o.backend_util;function Q(e,t,n){const a=[];if(e.forEach((e=>{const t=o.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?a.push("uniform float ".concat(e.name).concat(t>1?"[".concat(t,"]"):"",";")):(a.push("uniform sampler2D ".concat(e.name,";")),a.push("uniform int offset".concat(e.name,";"))),n.enableShapeUniforms){const{uniformShape:t}=ce(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:a.push("uniform int ".concat(e.name,"Shape;"));break;case 2:a.push("uniform ivec2 ".concat(e.name,"Shape;"));break;case 3:a.push("uniform ivec3 ".concat(e.name,"Shape;"));break;case 4:a.push("uniform ivec4 ".concat(e.name,"Shape;"))}a.push("uniform ivec2 ".concat(e.name,"TexShape;"))}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:a.push("uniform int outShape;");break;case 2:a.push("uniform ivec2 outShape;"),a.push("uniform int outShapeStrides;");break;case 3:a.push("uniform ivec3 outShape;"),a.push("uniform ivec2 outShapeStrides;");break;case 4:a.push("uniform ivec4 outShape;"),a.push("uniform ivec3 outShapeStrides;")}a.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{a.push("uniform ".concat(e.type," ").concat(e.name).concat(e.arrayIndex?"[".concat(e.arrayIndex,"]"):"",";"))}));const r=a.join("\n"),c=e.map((e=>function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3?arguments[3]:void 0,r="";r+=n?J(e,a):Z(e,a);const c=e.shapeInfo.logicalShape,i=t.logicalShape;c.length<=i.length&&(r+=n?function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",c=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,s=Y(e.shapeInfo.logicalShape,t.logicalShape),l=re(i),u=i-c;let d;const p=["x","y","z","w","u","v"];d=0===c?"":i<2&&s.length>=1?"coords = 0;":s.map((e=>"coords.".concat(p[e+u]," = 0;"))).join("\n");let h="";h=i<2&&c>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>"coords.".concat(p[t+u]))).join(", ");let f="return outputValue;";const x=1===o.util.sizeFromShape(e.shapeInfo.logicalShape),m=o.util.sizeFromShape(t.logicalShape),g=1===m;if(1!==c||x||g){if(x&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(s.length){const e=c-2,t=c-1;s.indexOf(e)>-1&&s.indexOf(t)>-1?f="return vec4(outputValue.x);":s.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":s.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 ".concat(r,"() {\n      ").concat(l," coords = getOutputCoords();\n      ").concat(d,"\n      vec4 outputValue = get").concat(a,"(").concat(h,");\n      ").concat(f,"\n    }\n  ")}(e,t):function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",c=t.texShape,i=e.shapeInfo.texShape,s=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&s===l&&null==e.shapeInfo.flatOffset&&o.util.arraysEqual(i,c))return"\n      float ".concat(r,"() {\n        return sampleTexture(").concat(n,", resultUV);\n      }\n    ");const u=re(l),d=Y(e.shapeInfo.logicalShape,t.logicalShape),p=l-s;let h;const f=["x","y","z","w","u","v"];h=0===s?"":l<2&&d.length>=1?"coords = 0;":d.map((e=>"coords.".concat(f[e+p]," = 0;"))).join("\n");let x="";x=l<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>"coords.".concat(f[t+p]))).join(", ");return"\n    float ".concat(r,"() {\n      ").concat(u," coords = getOutputCoords();\n      ").concat(h,"\n      return get").concat(a,"(").concat(x,");\n    }\n  ")}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,s=z(),l=function(e){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ".concat(e.texture2D,"(textureSampler, uv).r;\n    }\n  ")}(s);let u,d,p=function(e){const t="".concat(e.version,"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ").concat(e.varyingFs," vec2 resultUV;\n    ").concat(e.defineOutput,"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ").concat(e.defineSpecialNaN,"\n    ").concat(e.defineSpecialInf,"\n    ").concat(e.defineRound,"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ").concat($,"\n    ").concat(ee,"\n    ").concat(te,"\n  ");return t}(s);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===a[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ".concat(a[1],".0);\n      }\n    ");if(1===a[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ".concat(a[0],".0);\n      }\n    ");if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n      return 2 * (resTexRC.x * ").concat(a[1]," + resTexRC.y);\n    }\n  ")}(0,t,n);case 2:return function(e,t,n){const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(o.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(".concat(a[0],", ").concat(a[1],"));\n      }\n    ");const r=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n      int r = 2 * (index / ").concat(r,");\n      int c = imod(index, ").concat(r,") * 2;\n\n      return ivec2(r, c);\n    }\n  ")}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[2]/2),r=o*Math.ceil(e[1]/2);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n\n      int b = index / ").concat(r,";\n      index -= b * ").concat(r,";\n\n      int r = 2 * (index / ").concat(o,");\n      int c = imod(index, ").concat(o,") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ")}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[e.length-1]/2),r=o*Math.ceil(e[e.length-2]/2);let c=r,i="",s="b, r, c";for(let l=2;l<e.length-1;l++)c*=e[e.length-l-1],i="\n      int b".concat(l," = index / ").concat(c,";\n      index -= b").concat(l," * ").concat(c,";\n    ")+i,s="b".concat(l,", ")+s;return"\n    ivec".concat(e.length," getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(").concat(a[0],", ").concat(a[1],"));\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n\n      ").concat(i,"\n\n      int b = index / ").concat(r,";\n      index -= b * ").concat(r,";\n\n      int r = 2 * (index / ").concat(o,");\n      int c = imod(index, ").concat(o,") * 2;\n\n      return ivec").concat(e.length,"(").concat(s,");\n    }\n  ")}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),d=function(e){return"\n    void setOutput(vec4 val) {\n      ".concat(e.output," = val;\n    }\n  ")}(s)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":"\n      int getOutputCoords() {\n        return int(resultUV.x * ".concat(t[1],".0);\n      }\n    ");if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":"\n      int getOutputCoords() {\n        return int(resultUV.y * ".concat(t[0],".0);\n      }\n    ");if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(t[0],", ").concat(t[1],"));\n      return resTexRC.x * ").concat(t[1]," + resTexRC.y;\n    }\n  ")}(0,t,n);case 2:return function(e,t,n){if(o.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(".concat(t[0],", ").concat(t[1],"));\n      }\n    ");if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(t[0],", ").concat(t[1],"));\n        int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ");if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(t[0],", ").concat(t[1],"));\n        int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ");if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      int r = index / ").concat(e[1],";\n      int c = index - r * ").concat(e[1],";\n      return ivec2(r, c);\n    }\n  ")}(e,t,n);case 3:return function(e,t,n){if(n){const t=H(["r","c","d"],e);return"\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ".concat(t,"\n    return ivec3(r, c, d);\n  }\n")}const a=X(["r","c","d"],e);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      ").concat(a,"\n      return ivec3(r, c, d);\n    }\n  ")}(e,t,n);case 4:return function(e,t,n){if(n){const t=H(["r","c","d","d2"],e);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ".concat(t,"\n      return ivec4(r, c, d, d2);\n    }\n  ")}const a=X(["r","c","d","d2"],e);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      ").concat(a,"\n      return ivec4(r, c, d, d2);\n    }\n  ")}(e,t,n);case 5:return function(e,t){const n=X(["r","c","d","d2","d3"],e);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(".concat(t[0],",\n                             ").concat(t[1],"));\n\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n\n      ").concat(n,"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ")}(e,t);case 6:return function(e,t){const n=X(["r","c","d","d2","d3","d4"],e);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n\n      ").concat(n,"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ")}(e,t);default:throw new Error("".concat(e.length,"-D output sampling is not yet supported"))}}(t.logicalShape,i,n.enableShapeUniforms),d=function(e){return"\n    void setOutput(float val) {\n      ".concat(e.output," = vec4(val, 0, 0, 0);\n    }\n  ")}(s)),n.packedInputs&&(p+=ne);return[p,l,d,r,u,c,n.userCode].join("\n")}function Z(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return"float ".concat(a,"() {return ").concat(n,";}");const[o,r]=e.shapeInfo.texShape;if(1===o&&1===r)return"\n      float ".concat(a,"() {\n        return sampleTexture(").concat(n,", halfCR);\n      }\n    ");const c=ae(n);if(t)return"\n    float ".concat(a,"() {\n      vec2 uv = uvFromFlat(").concat(n,"TexShape[0], ").concat(n,"TexShape[1], ").concat(c,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ");const[i,s]=e.shapeInfo.texShape;return"\n    float ".concat(a,"() {\n      vec2 uv = uvFromFlat(").concat(i,", ").concat(s,", ").concat(c,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(e,t);case 1:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return"\n      float ".concat(a,"(int index) {\n        ").concat(oe(e),"\n      }\n    ");const o=e.shapeInfo.texShape,r=o[0],c=o[1];if(1===c&&1===r)return"\n      float ".concat(a,"(int index) {\n        return sampleTexture(").concat(n,", halfCR);\n      }\n    ");const i=ae(n);if(1===c)return t?"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2(0.5, (float(index + ").concat(i,") + 0.5) / float(").concat(n,"TexShape[0]));\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2(0.5, (float(index + ").concat(i,") + 0.5) / ").concat(r,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(1===r)return t?"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2((float(index + ").concat(i,") + 0.5) / float(").concat(n,"TexShape[1]), 0.5);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2((float(index + ").concat(i,") + 0.5) / ").concat(c,".0, 0.5);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(t)return"\n    float ".concat(a,"(int index) {\n      vec2 uv = uvFromFlat(").concat(n,"TexShape[0], ").concat(n,"TexShape[1], index + ").concat(i,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ");return"\n    float ".concat(a,"(int index) {\n      vec2 uv = uvFromFlat(").concat(r,", ").concat(c,", index + ").concat(i,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),c=e.shapeInfo.texShape;if(null!=c&&o.util.arraysEqual(n,c)){if(t)return"\n      float ".concat(r,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");const e=c[0],n=c[1];return"\n    float ".concat(r,"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(n,".0, ").concat(e,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ")}const{newShape:i,keptDims:s}=o.util.squeezeShape(n),l=i;if(l.length<n.length){const n=ie(e,l),a=["row","col"];return"\n      ".concat(Z(n,t),"\n      float ").concat(r,"(int row, int col) {\n        return ").concat(r,"(").concat(se(a,s),");\n      }\n    ")}if(e.shapeInfo.isUniform)return"\n      float ".concat(r,"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(").concat(n[1],", 1)));\n        ").concat(oe(e),"\n      }\n    ");const u=c[0],d=c[1],p=ae(a);if(1===d)return t?"\n      float ".concat(r,"(int row, int col) {\n        float index = dot(vec3(row, col, ").concat(p,"), vec3(").concat(a,"Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(").concat(a,"TexShape[0]));\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(r,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(p,"), vec3(").concat(n[1],", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ").concat(u,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");if(1===u)return t?"\n      float ".concat(r,"(int row, int col) {\n        float index = dot(vec3(row, col, ").concat(p,"), vec3(").concat(a,"Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(").concat(a,"TexShape[1]), 0.5);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(r,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(p,"), vec3(").concat(n[1],", 1, 1));\n      vec2 uv = vec2((index + 0.5) / ").concat(d,".0, 0.5);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");if(t)return"\n      float ".concat(r,"(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ").concat(a,"Shape[1] + col + ").concat(p,";\n        vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");return"\n  float ".concat(r,"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ").concat(n[1]," + col + ").concat(p,";\n    vec2 uv = uvFromFlat(").concat(u,", ").concat(d,", index);\n    return sampleTexture(").concat(a,", uv);\n  }\n")}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),c=n[1]*n[2],i=n[2],{newShape:s,keptDims:l}=o.util.squeezeShape(n),u=s;if(u.length<n.length){const n=ie(e,u),a=["row","col","depth"];return"\n        ".concat(Z(n,t),"\n        float ").concat(r,"(int row, int col, int depth) {\n          return ").concat(r,"(").concat(se(a,l),");\n        }\n      ")}if(e.shapeInfo.isUniform)return"\n      float ".concat(r,"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(").concat(c,", ").concat(i,", 1)));\n        ").concat(oe(e),"\n      }\n    ");const d=e.shapeInfo.texShape,p=d[0],h=d[1],f=e.shapeInfo.flatOffset;if(h===c&&null==f)return t?"\n      float ".concat(r,"(int row, int col, int depth) {\n        int stride1 = ").concat(a,"Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n        float ".concat(r,"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(").concat(i,", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(").concat(h,".0, ").concat(p,".0);\n          return sampleTexture(").concat(a,", uv);\n        }\n      ");if(h===i&&null==f)return t?"\n      float ".concat(r,"(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(").concat(a,"Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(r,"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(").concat(n[1],", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(h,".0, ").concat(p,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");const x=ae(a);if(t)return"\n    float ".concat(r,"(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ").concat(a,"Shape[1] * ").concat(a,"Shape[2];\n      int stride1 = ").concat(a,"Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ").concat(x,";\n      vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index);\n      return sampleTexture(").concat(a,", uv);\n    }\n    ");return"\n      float ".concat(r,"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ").concat(c," + col * ").concat(i," + depth + ").concat(x,";\n        vec2 uv = uvFromFlat(").concat(p,", ").concat(h,", index);\n        return sampleTexture(").concat(a,", uv);\n      }\n  ")}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),c=n[3],i=n[2]*c,s=n[1]*i,{newShape:l,keptDims:u}=o.util.squeezeShape(n);if(l.length<n.length){const n=ie(e,l),a=["row","col","depth","depth2"];return"\n      ".concat(Z(n,t),"\n      float ").concat(r,"(int row, int col, int depth, int depth2) {\n        return ").concat(r,"(").concat(se(a,u),");\n      }\n    ")}if(e.shapeInfo.isUniform)return"\n      float ".concat(r,"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(").concat(s,", ").concat(i,", ").concat(c,", 1)));\n        ").concat(oe(e),"\n      }\n    ");const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1],x="int stride2 = ".concat(a,"Shape[3];"),m="int stride1 = ".concat(a,"Shape[2] * stride2;"),g="int stride0 = ".concat(a,"Shape[1] * stride1;");if(f===s&&null==d)return t?"\n      float ".concat(r,"(int row, int col, int depth, int depth2) {\n        ").concat(x,"\n        ").concat(m,"\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n      float ".concat(r,"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(").concat(i,", ").concat(c,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(f,".0, ").concat(h,".0);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");if(f===c&&null==d)return t?"\n      float ".concat(r,"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(").concat(a,"Shape[1] * ").concat(a,"Shape[2], ").concat(a,"Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n      float ".concat(r,"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(").concat(n[1]*n[2],", ").concat(n[2],", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(f,".0, ").concat(h,".0);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");const b=ae(a);if(t)return"\n    float ".concat(r,"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ").concat(x,"\n      ").concat(m,"\n      ").concat(g,"\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index + ").concat(b,");\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");return"\n    float ".concat(r,"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(s," + col * ").concat(i," +\n          depth * ").concat(c," + depth2;\n      vec2 uv = uvFromFlat(").concat(h,", ").concat(f,", index + ").concat(b,");\n      return sampleTexture(").concat(a,", uv);\n    }\n  ")}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],c=t[3]*r,i=t[2]*c,s=t[1]*i,{newShape:l,keptDims:u}=o.util.squeezeShape(t);if(l.length<t.length){const t=ie(e,l),n=["row","col","depth","depth2","depth3"];return"\n      ".concat(Z(t),"\n      float ").concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        return ").concat(a,"(").concat(se(n,u),");\n      }\n    ")}if(e.shapeInfo.isUniform)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(s,", ").concat(i,", ").concat(c,", ").concat(r,")) +\n          depth3;\n        ").concat(oe(e),"\n      }\n    ");const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1];if(f===s&&null==d)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(").concat(i,", ").concat(c,", ").concat(r,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(f,".0, ").concat(h,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(f===r&&null==d)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(t[1]*t[2]*t[3],",\n               ").concat(t[2]*t[3],", ").concat(t[3],", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(f,".0, ").concat(h,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");const x=ae(n);return"\n    float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(s," + col * ").concat(i," + depth * ").concat(c," +\n          depth2 * ").concat(r," + depth3 + ").concat(x,";\n      vec2 uv = uvFromFlat(").concat(h,", ").concat(f,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:c}=o.util.squeezeShape(t);if(r.length<t.length){const t=ie(e,r),n=["row","col","depth","depth2","depth3","depth4"];return"\n      ".concat(Z(t),"\n      float ").concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ").concat(a,"(").concat(se(n,c),");\n      }\n    ")}const i=t[5],s=t[4]*i,l=t[3]*s,u=t[2]*l,d=t[1]*u;if(e.shapeInfo.isUniform)return"\n      float ".concat(a,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(d,", ").concat(u,", ").concat(l,", ").concat(s,")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(").concat(i,", 1)));\n        ").concat(oe(e),"\n      }\n    ");const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],x=h[1];if(x===d&&null==p)return"\n      float ".concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(").concat(u,", ").concat(l,", ").concat(s,", ").concat(i,")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(x,".0, ").concat(f,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(x===i&&null==p)return"\n      float ".concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(").concat(t[1]*t[2]*t[3]*t[4],",\n               ").concat(t[2]*t[3]*t[4],",\n               ").concat(t[3]*t[4],",\n               ").concat(t[4],")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(x,".0, ").concat(f,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");const m=ae(n);return"\n    float ".concat(a,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(d," + col * ").concat(u," + depth * ").concat(l," +\n          depth2 * ").concat(s," + depth3 * ").concat(i," + depth4 + ").concat(m,";\n      vec2 uv = uvFromFlat(").concat(f,", ").concat(x,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(e);default:throw new Error("".concat(n.length,"-D input sampling")+" is not yet supported")}}function J(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),a=z();return"\n    vec4 ".concat(n,"() {\n      return ").concat(a.texture2D,"(").concat(t,", halfCR);\n    }\n  ")}(e);case 1:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,r=z();if(t)return"\n    vec4 ".concat(a,"(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(n,"TexShape[0]) / 2.0), ceil(float(").concat(n,"TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ").concat(r.texture2D,"(").concat(n,", uv);\n    }\n  ");const c=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 ".concat(a,"(int index) {\n      vec2 uv = packedUVfrom1D(\n        ").concat(c[0],", ").concat(c[1],", index);\n      return ").concat(r.texture2D,"(").concat(n,", uv);\n    }\n  ")}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),c=e.shapeInfo.texShape,i=c[0],s=c[1],l=z();if(null!=c&&o.util.arraysEqual(n,c))return t?"\n      vec4 ".concat(r,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n\n        return ").concat(l.texture2D,"(").concat(a,", uv);\n      }\n    "):"\n      vec4 ".concat(r,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(s,".0, ").concat(i,".0);\n\n        return ").concat(l.texture2D,"(").concat(a,", uv);\n      }\n    ");if(t)return"\n    vec4 ".concat(r,"(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(a,"TexShape[0]) / 2.0), ceil(float(").concat(a,"TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(").concat(a,"Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ").concat(l.texture2D,"(").concat(a,", uv);\n    }\n  ");const u=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)],d=Math.ceil(n[1]/2);return"\n    vec4 ".concat(r,"(int row, int col) {\n      vec2 uv = packedUVfrom2D(").concat(d,", ").concat(u[0],", ").concat(u[1],", row, col);\n      return ").concat(l.texture2D,"(").concat(a,", uv);\n    }\n  ")}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),r=e.shapeInfo.texShape,c=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const a=[1,2],r=ie(e,n.slice(1)),c=["b","row","col"];return"\n        ".concat(J(r,t),"\n        vec4 ").concat(o,"(int b, int row, int col) {\n          return ").concat(o,"(").concat(se(c,a),");\n        }\n      ")}const i=z();if(t)return"\n    vec4 ".concat(o,"(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(a,"TexShape[0]) / 2.0), ceil(float(").concat(a,"TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(").concat(a,"Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(").concat(a,"Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ").concat(i.texture2D,"(").concat(a,", uv);\n    }\n  ");const s=c[0],l=c[1],u=Math.ceil(n[2]/2),d=u*Math.ceil(n[1]/2);return"\n    vec4 ".concat(o,"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ").concat(s,", ").concat(l,", ").concat(d,", ").concat(u,", b, row, col);\n      return ").concat(i.texture2D,"(").concat(a,", uv);\n    }\n  ")}(e,t);default:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),o=z();if(t)return"\n    vec4 ".concat(a,"(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(").concat(n,"Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(").concat(n,"Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ").concat(n,"Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(n,"TexShape[0]) / 2.0), ceil(float(").concat(n,"TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ").concat(o.texture2D,"(").concat(n,", uv);\n    }\n  ");const r=e.shapeInfo.logicalShape,c=r.length,i=e.shapeInfo.texShape,s=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=s[0],u=s[1],d=Math.ceil(r[c-1]/2);let p=d*Math.ceil(r[c-2]/2),h="int b, int row, int col",f="b * ".concat(p," + (row / 2) * ").concat(d," + (col / 2)");for(let x=2;x<c-1;x++)h="int b".concat(x,", ")+h,p*=r[c-x-1],f="b".concat(x," * ").concat(p," + ")+f;return"\n    vec4 ".concat(a,"(").concat(h,") {\n      int index = ").concat(f,";\n      int texR = index / ").concat(u,";\n      int texC = index - texR * ").concat(u,";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(u,", ").concat(l,");\n      return ").concat(o.texture2D,"(").concat(n,", uv);\n    }\n  ")}(e,t)}}const $="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ee="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",te="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ne="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ae(e){return"offset".concat(e)}function oe(e){const t=e.name,n=o.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?"return ".concat(t,";"):"\n    for (int i = 0; i < ".concat(n,"; i++) {\n      if (i == index) {\n        return ").concat(t,"[i];\n      }\n    }\n  ")}function re(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error("GPU for rank ".concat(e," is not yet supported"))}function ce(e,t,n){const{newShape:a,keptDims:r}=o.util.squeezeShape(t),c=t.length,i=e&&3===c&&1===t[0],s=i?t.slice(1):a,l=!e&&c>1&&!o.util.arraysEqual(t,n)&&a.length<c||i;return{useSqueezeShape:l,uniformShape:l?s:t,keptDims:r}}function ie(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function se(e,t){return t.map((t=>e[t])).join(", ")}function le(e,t,n,a){const r=n.map(((e,n)=>{const a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:a}})),c=r.map((e=>e.shapeInfo)),i={logicalShape:a.shape,texShape:a.texData.texShape,isUniform:!1,isPacked:a.texData.isPacked,flatOffset:null},s=Q(r,i,t),l=function(e,t){const n=E(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(x(e,(()=>e.shaderSource(n,t))),x(e,(()=>e.compileShader(n))),(0,o.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw I(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,s),u=e.createProgram(l);return(0,o.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:s,webGLProgram:u,inShapeInfos:c,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:s,webGLProgram:u,inShapeInfos:c,outShapeInfo:i},ue(e,t,u))}function ue(e,t,n){const a={},r={},c={},i=[];let s,l,u,d=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===(0,o.env)().getNumber("WEBGL_VERSION")&&(d=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];a[i]=e.getUniformLocation(n,i,h),a["offset".concat(i)]=e.getUniformLocation(n,"offset".concat(i),h),t.enableShapeUniforms&&(r["".concat(i,"Shape")]=e.getUniformLocation(n,"".concat(i,"Shape"),h),c["".concat(i,"TexShape")]=e.getUniformLocation(n,"".concat(i,"TexShape"),h))}return t.enableShapeUniforms&&(s=e.getUniformLocation(n,"outShape",h),u=e.getUniformLocation(n,"outShapeStrides",h),l=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,a)=>{i[a]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:a,customUniformLocations:i,infLoc:d,nanLoc:p,inShapesLocations:r,inTexShapesLocations:c,outShapeLocation:s,outShapeStridesLocation:u,outTexShapeLocation:l}}function de(e,t){if(e.length!==t.length)throw Error("Binary was compiled with ".concat(e.length," inputs, but ")+"was executed with ".concat(t.length," inputs"));e.forEach(((e,n)=>{const a=e.logicalShape,r=t[n],c=r.shape;if(!o.util.arraysEqual(a,c))throw Error("Binary was compiled with different shapes than "+"the current args. Shapes ".concat(a," and ").concat(c," must match"));if(e.isUniform&&r.isUniform)return;const i=e.texShape,s=r.isUniform?null:r.texData.texShape;if(!o.util.arraysEqual(i,s))throw Error("Binary was compiled with different texture shapes than the"+" current args. Shape ".concat(i," and ").concat(s," must match"))}))}function pe(e){return(0,o.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class he{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=s.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=z();this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length),this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(this.enableShapeUniforms?H(["r","c","d"],e):X(["r","c","d"],e),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ").concat(t.output," = result;\n      }\n    ")}}class fe{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=s.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=z();this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length),this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(this.enableShapeUniforms?H(["r","c","d"],e):X(["r","c","d"],e),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ").concat(t.output," = result;\n      }\n    ")}}class xe{constructor(e){this.variableNames=["A"],this.outTexUsage=l.DOWNLOAD;const t=z();this.outputShape=e,this.userCode="\n      ".concat(j,"\n\n      void main() {\n        float x = getAAtOutCoords();\n        ").concat(t.output," = encode_float(x);\n      }\n    ")}}class me{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=l.DOWNLOAD;const t=z();this.outputShape=e,this.userCode="\n      ".concat(j,"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ").concat(t.output," = encode_float(x);\n      }\n    ")}}const ge={R:0,G:1,B:2,A:3};class be{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"RGBA";this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const a=z();this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length);let o="result";t&&(o="floor(result * 255. + 0.5)");let r="";for(let c=0;c<n.length;c++){const e=n[c];r+="\n          if(offset == ".concat(c,") {\n            result = values[").concat(ge[e],"];\n          }")}this.userCode="\n      ".concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":K(e),"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ").concat(n.length,");\n\n        flatIndex = idiv(flatIndex, ").concat(n.length,", 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ").concat(a.texture2D,"(A, uv);\n          ").concat(r,"\n        }\n        ").concat(a.output," = vec4(").concat(o,", 0., 0., 0.);\n      }\n    ")}}class ve{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=z();this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length);let a="",o="result";t&&(o="floor(result * 255. + 0.5)");for(let r=0;r<=1;r++)for(let t=0;t<=1;t++){const o=2*r+t;a+="\n          localCoords = coords;\n          if(localCoords[2] + ".concat(t," < ").concat(this.enableShapeUniforms?"outShape[2]":"".concat(e[2]),") {\n          localCoords[2] += ").concat(t,";\n          if (localCoords[1] + ").concat(r," < ").concat(this.enableShapeUniforms?"outShape[1]":"".concat(e[1]),") {\n            localCoords[1] += ").concat(r,";\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ").concat(n.texture2D,"(A, uv);\n\n            if (offset == 0) {\n              result[").concat(o,"] = values[0];\n            } else if (offset == 1) {\n              result[").concat(o,"] = values[1];\n            } else if (offset == 2) {\n              result[").concat(o,"] = values[2];\n            } else {\n              result[").concat(o,"] = values[3];\n            }\n          }\n        }\n        ")}this.userCode="\n        ".concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":K(e),"\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ").concat(a,"\n\n          ").concat(n.output," = ").concat(o,";\n        }\n    ")}}function Ce(e){const t=z();return function(e,t){const n=E(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(x(e,(()=>e.shaderSource(n,t))),x(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,"".concat(t.version,"\n    precision highp float;\n    ").concat(t.attribute," vec3 clipSpacePos;\n    ").concat(t.attribute," vec2 uv;\n    ").concat(t.varyingVs," vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }"))}function Ie(e){return function(e,t){const n=E(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return x(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),x(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function ye(e){return function(e,t){const n=E(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return x(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),x(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function we(e,t,n,a,r,c){!function(e,t){const n=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){const n="[".concat(e,"x").concat(t,"]");throw new Error("Requested texture size "+n+" is invalid.")}if(e>n||t>n){const a="[".concat(e,"x").concat(t,"]"),o="[".concat(n,"x").concat(n,"]");throw new Error("Requested texture size "+a+" greater than WebGL maximum on this browser / GPU "+o+".")}}(t,n);const i=function(e){return E(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),s=e.TEXTURE_2D;return x(e,(()=>e.bindTexture(s,i))),x(e,(()=>e.texParameteri(s,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),x(e,(()=>e.texParameteri(s,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),x(e,(()=>e.texParameteri(s,e.TEXTURE_MIN_FILTER,e.NEAREST))),x(e,(()=>e.texParameteri(s,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,o.env)().getNumber("WEBGL_VERSION")?x(e,(()=>e.texImage2D(s,0,a,t,n,0,r,c,null))):x(e,(()=>e.texStorage2D(s,1,a,t,n))),x(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function ke(e){return e.internalFormatFloat}function Se(e){return e.internalFormatHalfFloat}function Re(e){return e.downloadTextureFormat}function Te(e){return e.internalFormatPackedFloat}function Ee(e){return e.internalFormatPackedHalfFloat}function Ne(e,t,n,a,o,r,c,i){const s=e,l=new Float32Array(function(e,t){const[n,a]=h(e,t);return n*a*4}(r,c));return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,l),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),l}class Ae{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=(0,o.env)().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){r[e]=t}(t,e)):this.gl=i(t),e=this.gl,2===(0,o.env)().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>x(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>x(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>x(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>x(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>x(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>x(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>x(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>x(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const a="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,o.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=v(this.gl,e),B(this.gl,t))this.textureHalfFloatExtension=v(this.gl,t);else if((0,o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),B(this.gl,a))this.colorBufferHalfFloatExtension=v(this.gl,a);else if((0,o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",B(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!B(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=Ie(this.gl),this.indexBuffer=ye(this.gl),this.framebuffer=function(e){return E(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=f(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,o.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;x(e,(()=>e.finish())),x(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),x(e,(()=>e.deleteFramebuffer(this.framebuffer))),x(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),x(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),x(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[o,r]=d(t,n);return we(e,o,r,ke(a),a.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[o,r]=d(t,n);return we(e,o,r,Se(a),a.textureFormatFloat,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[o,r]=d(t,n);return we(e,o,r,Re(a),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){x(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===(0,o.env)().getNumber("WEBGL_VERSION")?x(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):x(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===(0,o.env)().getNumber("WEBGL_VERSION")?x(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):x(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),x(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,a){this.throwIfDisposed(),function(e,t,n,a,r,c){let i,s,l;x(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*a*4),s=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*a*4),s=e.FLOAT,l=c.internalFormatPackedFloat),i.set(r),2===(0,o.env)().getNumber("WEBGL_VERSION")?x(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,a,e.RGBA,s,i))):x(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,a,0,e.RGBA,s,i))),x(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[o,r]=h(t,n);return we(e,o,r,Ee(a),e.RGBA,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[o,r]=h(t,n);return we(e,o,r,Te(a),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(R(this.gl,this.framebuffer),this.outputTexture=null),x(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,a){const[o,r]=d(t,n),c=new Uint8Array(t*n*4);return x(e,(()=>e.readPixels(0,0,o,r,a.downloadTextureFormat,e.UNSIGNED_BYTE,c))),new Float32Array(c.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,a,o,r){return Ne(this.gl,e,0,0,0,o,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const a=e,o=new Float32Array(n);return a.bindBuffer(a.PIXEL_PACK_BUFFER,t),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,o),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),o}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const a=function(e,t,n,a){const o=e.createBuffer();x(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,o)));const r=16*t*n;return x(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),x(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),x(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),o}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,o.env)().getBool("WEBGL_FENCE_API_ENABLED")){const a=e,o=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=a.clientWaitSync(o,0,0);return e===a.ALREADY_SIGNALED||e===a.CONDITION_SATISFIED},t=o}else(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const a=new Float32Array(t*n*4);return x(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,a))),a}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=Ce(t));const n=function(e){return E(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);let a;return x(t,(()=>t.attachShader(n,this.vertexShader))),x(t,(()=>t.attachShader(n,e))),function(e,t){if(x(e,(()=>e.linkProgram(t))),!(0,o.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),a=Object.assign(n,{vao:this.createVertexArray()}),this.bindVertexArray(a.vao),x(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),console.assert(function(e,t,n){return x(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),w(e,t,"clipSpacePos",n,3,20,0)&&w(e,t,"uv",n,2,20,12)}(t,a,this.vertexBuffer),"gpgpu_util.bindVertexProgramAttributeStreams not fully successful."),this.debug&&y(t,a),this.setProgram(a),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(x(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&(this.bindVertexArray(this.program.vao),this.debug&&y(this.gl,this.program)),x(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.throwIfDisposed(),n?function(e,t,n){return E(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),x(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),k(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[a,o]=h(t,n);this.setOutputMatrixTextureDriver(e,a,o)}setOutputMatrixWriteRegion(e,t,n,a){this.setOutputMatrixWriteRegionDriver(n,e,a,t)}setOutputPackedMatrixWriteRegion(e,t,n,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&y(this.gl,this.program),T(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}x(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),x(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=v(this.gl,2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await o.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),a=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in(0,o.env)().platform&&(n=(0,o.env)().platform.setTimeoutCustom.bind((0,o.env)().platform)),o.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),S(this.gl,e,this.framebuffer),this.debug&&T(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(S(this.gl,this.outputTexture,this.framebuffer),this.debug&&T(this.gl)):R(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const a=this.gl;S(a,e,this.framebuffer),this.debug&&T(a),this.outputTexture=e,x(a,(()=>a.viewport(0,0,t,n))),x(a,(()=>a.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,a){this.throwIfDisposed(),x(this.gl,(()=>this.gl.scissor(e,t,n,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function _e(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>"".concat(t," does not support complex64 tensors in the CPU backend.")))}))}function Oe(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}o.Abs;function Fe(e){return(t,n,a,r,c)=>{const i=o.backend_util.assertAndGetBroadcastShape(t,n),s=i.length,l=o.util.computeStrides(i),u=o.util.sizeFromShape(i),d=o.util.getTypedArrayFromDType(c,u),p=t.length,h=n.length,f=o.util.computeStrides(t),x=o.util.computeStrides(n),m=o.backend_util.getBroadcastDims(t,i),g=o.backend_util.getBroadcastDims(n,i);if(m.length+g.length===0)for(let o=0;o<d.length;++o)d[o]=e(a[o%a.length],r[o%r.length]);else for(let b=0;b<d.length;++b){const t=o.util.indexToLoc(b,s,l),n=t.slice(-p);m.forEach((e=>n[e]=0));const c=o.util.locToIndex(n,p,f),i=t.slice(-h);g.forEach((e=>i[e]=0));const u=o.util.locToIndex(i,h,x);d[b]=e(a[c],r[u])}return[d,i]}}function De(e){const{inputs:t,backend:n}=e,{real:a,imag:o}=t,r=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values,i=n.makeTensorInfo(a.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",r),imag:n.makeTensorInfo(o.shape,"float32",c)},i}o.Complex;function Pe(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"float32";if("complex64"===n){return De({inputs:{real:Pe(e,t,"float32"),imag:Pe(e,t,"float32")},backend:e})}const a=o.util.makeZerosTypedArray(o.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,a)}function Le(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}o.Identity;function Be(e){const{inputs:t,backend:n}=e,{input:a}=t,o=n.data.get(a.dataId).complexTensorInfos.real,r=n.data.get(o.dataId).values;return n.makeTensorInfo(o.shape,o.dtype,r)}o.Real;function Ve(e,t,n,a){if("int32"===a){return[t,"int32",Int32Array.from(e)]}if("bool"===a){const a=o.util.toTypedArray([0],n),[r,c]=Fe(((e,t)=>e!==t?1:0))(t,[],e,a,"bool");return[c,"bool",r]}throw new Error("Error in Cast: failed to cast ".concat(n," to ").concat(a))}function We(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dtype:c}=a;if("complex64"===c){if("complex64"===r.dtype)return Le({inputs:{x:r},backend:n});const e=Pe(n,r.shape,r.dtype),t=We({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),a=De({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),a}if("complex64"===r.dtype){const e=Be({inputs:{input:r},backend:n}),t=We({inputs:{x:e},backend:n,attrs:{dtype:c}});return n.disposeIntermediateTensorInfo(e),t}if(!o.util.hasEncodingLoss(r.dtype,c)){const e=Le({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:c}}const i=n.data.get(r.dataId).values,[s,l,u]=Ve(i,r.shape,r.dtype,c);return n.makeTensorInfo(s,l,u)}o.Cast;function Ue(e,t,n,a){return null==n?n=>{let{inputs:r,backend:c}=n;const{a:i,b:s}=r,l=c;_e([i,s],e);const u=l.data.get(i.dataId).values,d=l.data.get(s.dataId).values,p="string"===i.dtype?o.backend_util.fromUint8ToStringArray(u):u,h="string"===i.dtype?o.backend_util.fromUint8ToStringArray(d):d,f=a||i.dtype,[x,m]=t(i.shape,s.shape,p,h,f);return l.makeTensorInfo(m,f,x)}:e=>{let{inputs:o,backend:r}=e;const{a:c,b:i}=o,s=r;if("complex64"===c.dtype||"complex64"===i.dtype){const e=We({inputs:{x:c},backend:s,attrs:{dtype:"complex64"}}),t=s.data.get(e.dataId),a=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,r=s.data.get(a.dataId).values,l=s.data.get(o.dataId).values,u=We({inputs:{x:i},backend:s,attrs:{dtype:"complex64"}}),d=s.data.get(u.dataId),p=d.complexTensorInfos.real,h=d.complexTensorInfos.imag,f=s.data.get(p.dataId).values,x=s.data.get(h.dataId).values,[m,g,b]=n(c.shape,i.shape,r,l,f,x),v=s.makeTensorInfo(b,"float32",m),C=s.makeTensorInfo(b,"float32",g),I=De({inputs:{real:v,imag:C},backend:s});return s.disposeIntermediateTensorInfo(e),s.disposeIntermediateTensorInfo(u),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(C),I}{const e=s.data.get(c.dataId).values,n=s.data.get(i.dataId).values,o=a||c.dtype,[r,l]=t(c.shape,i.shape,e,n,o);return s.makeTensorInfo(l,o,r)}}}function Me(e){return(t,n,a,r,c,i)=>{const s=o.backend_util.assertAndGetBroadcastShape(t,n),l=o.util.sizeFromShape(s),u=s.length,d=o.util.computeStrides(s),p=o.util.getTypedArrayFromDType("float32",l),h=o.util.getTypedArrayFromDType("float32",l),f=o.backend_util.getBroadcastDims(t,s),x=o.backend_util.getBroadcastDims(n,s),m=o.backend_util.mergeRealAndImagArrays(a,r),g=o.backend_util.mergeRealAndImagArrays(c,i),b=t.length,v=o.util.computeStrides(t),C=n.length,I=o.util.computeStrides(n);if(f.length+x.length===0)for(let o=0;o<p.length;o++){const t=o%m.length,n=o%g.length,a=e(m[2*t],m[2*t+1],g[2*n],g[2*n+1]);p[o]=a.real,h[o]=a.imag}else for(let y=0;y<p.length;y++){const t=o.util.indexToLoc(y,u,d),n=t.slice(-b);f.forEach((e=>n[e]=0));const a=o.util.locToIndex(n,b,v),r=t.slice(-C);x.forEach((e=>r[e]=0));const c=o.util.locToIndex(r,C,I),i=e(m[2*a],m[2*a+1],g[2*c],g[2*c+1]);p[y]=i.real,h[y]=i.imag}return[p,h,s]}}const Ge=Fe(((e,t)=>e+t)),ze=Me(((e,t,n,a)=>({real:e+n,imag:t+a})));Ue(o.Add,Ge,ze),o.Add;function Xe(e,t,n,a,r){const c=o.util.sizeFromShape(a),i=o.util.makeZerosTypedArray(r,n);for(let o=0;o<e.length;o++){const n=e[o];if(n<0)throw new Error("Input x must be non-negative!");n>=r||(i[n]+=c>0?t[o]:1)}return i}function He(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=e.shape[0],c=e.shape[1],i=(0,o.buffer)([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<c;r++){const c=e.get(o,r);if(c<0)throw new Error("Input x must be non-negative!");c>=n||(a?i.set(1,o,c):t.size>0?i.set(i.get(o,c)+t.get(o,r),o,c):i.set(i.get(o,c)+1,o,c))}return i}function qe(e){return(t,n,a)=>{const r=o.util.getTypedArrayFromDType(n,t.length);for(let o=0;o<t.length;++o)r[o]=e(t[o],a);return r}}function Ke(e,t,n){return a=>{let{inputs:r,attrs:c,backend:i}=a;const{x:s}=r;if(_e(s,e),"string"===s.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,u=l.data.get(s.dataId).values,d=o.util.sizeFromShape(s.shape),p=n||s.dtype,h=o.util.getArrayFromDType(p,d);for(let e=0;e<d;++e)h[e]=t(u[e],c);return l.makeTensorInfo(s.shape,p,h)}}function je(e,t,n){return a=>{let{inputs:o,attrs:r,backend:c}=a;const{x:i}=o;if(_e(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const s=c,l=s.data.get(i.dataId).values,u=n||i.dtype,d=t(l,u,r);return s.makeTensorInfo(i.shape,u,d)}}const Ye=qe((e=>Math.ceil(e)));je(o.Ceil,Ye),o.Ceil;function Qe(e,t,n,a){const r=o.util.getArrayFromDType(n,o.util.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=o.util.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const c="string"===n?o.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+a;for(let t=0;t<e.shape[1];++t)r[o+t]=c[i++]}a+=e.shape[1]}))}return r}const Ze=Fe(((e,t)=>e===t?1:0)),Je=(Ue(o.Equal,Ze,null,"bool"),o.Equal,qe((e=>Math.exp(e)))),$e=(je(o.Exp,Je,"float32"),o.Exp,qe((e=>Math.expm1(e)))),et=(je(o.Expm1,$e),o.Expm1,qe((e=>Math.floor(e))));je(o.Floor,et),o.Floor;function tt(e,t,n,a,r,c,i,s,l){const u=(0,o.buffer)([a,c],n);for(let o=0;o<a;o++){const n=[];let a=0;for(let t=0;t<r;t++){const c=e[o*r+t];a+=c*i[t],n.push(c)}if(a<0||a>=l/c)throw new Error("Invalid indices: ".concat(n," does not index into ").concat(s));for(let e=0;e<c;e++)u.values[o*c+e]=t.get(...t.indexToLoc(a*c+e))}return u}function nt(e,t,n){const a=(0,o.buffer)(n,e.dtype);for(let o=0;o<a.size;++o){const n=a.indexToLoc(o).slice(),r=n[0],c=n[2],i=t.locToIndex([r,c]);n[2]=t.values[i];const s=e.locToIndex(n);0<=s&&s<e.values.length&&(a.values[o]=e.values[s])}return a}const at=Fe(((e,t)=>e>t?1:0)),ot=(Ue(o.Greater,at,null,"bool"),o.Greater,Fe(((e,t)=>e>=t?1:0))),rt=(Ue(o.GreaterEqual,ot,null,"bool"),o.GreaterEqual,Fe(((e,t)=>e<t?1:0))),ct=(Ue(o.Less,rt,null,"bool"),o.Less,Fe(((e,t)=>e<=t?1:0)));Ue(o.LessEqual,ct,null,"bool"),o.LessEqual;function it(e,t,n){const a=(t-e)/(n-1),r=o.util.makeZerosTypedArray(n,"float32");r[0]=e;for(let o=1;o<r.length;o++)r[o]=r[o-1]+a;return r}const st=qe((e=>Math.log(e)));je(o.Log,st),o.Log;function lt(e,t,n,a){const r=o.util.getTypedArrayFromDType(a,o.util.sizeFromShape(n));for(let o=0;o<r.length;++o){const n=o*t;let a=e[n];for(let o=0;o<t;++o){const t=e[n+o];(Number.isNaN(t)||t>a)&&(a=t)}r[o]=a}return r}const ut=Fe(((e,t)=>Math.max(e,t))),dt=(Ue(o.Maximum,ut),o.Maximum,Fe(((e,t)=>Math.min(e,t)))),pt=(Ue(o.Minimum,dt),o.Minimum,Fe(((e,t)=>e*t))),ht=Me(((e,t,n,a)=>({real:e*n-t*a,imag:e*a+t*n})));Ue(o.Multiply,pt,ht),o.Multiply;function ft(e,t,n){const a=o.util.createScalarValue(-1,n);return pt([],t,a,e,n)}o.Neg;const xt=Fe(((e,t)=>e!==t?1:0));Ue(o.NotEqual,xt,null,"bool"),o.NotEqual;function mt(e,t,n,a,r){const c=t.length,i=o.util.sizeFromShape(t),s=o.util.computeStrides(t),l=o.util.computeStrides(r),u=o.util.getTypedArrayFromDType(n,o.util.sizeFromShape(r));for(let d=0;d<i;++d){const t=o.util.indexToLoc(d,c,s),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[a[e]];u[o.util.locToIndex(n,c,l)]=e[d]}return u}o.Transpose;function gt(e,t,n,a){const[r,c]=o.backend_util.computeOutAndReduceShapes(e,a),i=(0,o.upcastType)(t,"int32"),s=o.util.makeZerosTypedArray(o.util.sizeFromShape(r),i),l=o.util.sizeFromShape(c);for(let o=0;o<s.length;++o){const e=o*l;let t=1;for(let a=0;a<l;++a)t*=n[e+a];s[o]=t}return{outVals:s,outShape:r,outDtype:i}}o.Prod;function bt(e,t,n,a){const o=[];let r=0;const c=t.length-1+n.length,i=new Array(c).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const a=e[n],o=n===e.length-1?t:e[n+1].length;if(0===a.length)throw new Error("Ragged splits may not be empty");if(a[0]<0)throw new Error("Ragged splits must be non-negative");if(a[a.length-1]>o)throw new Error("Ragged splits must not point past values");for(let e=1;e<a.length;++e)if(a[e-1]>a[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,a);let s=1;for(let l=0;l<t.length-1;++l){s*=t[l];const e=t[l+1];for(let t=1;t<s+1;++t)i[l].push(t*e)}for(let l=0;l<e.length;++l){let a=e[l],c=e[l]+1;for(let e=0;e<n.length;++e){const o=n[e],r=e+t.length-1;if(r>=0){const e=i[r],t=e[e.length-1]-o[a];for(let n=a;n<c;++n)i[r].push(o[n+1]+t)}a=o[a],c=o[c]}c!==a&&(o.push([a,c]),r+=c-a)}return{outSplits:i,valueSlices:o,numValues:r}}function vt(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let a=t;a<e.length;a++)n[t-1]*=e[a];return n}function Ct(e,t,n,a,r){const c=t.slice();c[0]=r;const i=o.util.getArrayFromDType(n,o.util.sizeFromShape(c)),s=e.length;return function(e,t,n,a,o,r){const c=vt(t,2)[1],i=vt(r,2)[1];let s=0;for(const l of n)for(let t=l[0];t<l[1];++t){for(let n=0;n<a;++n)o[s*i+n]=e[t*c+n];++s}}(e,t,a,0===s?0:s/t[0],i,c),[i,c]}function It(e,t,n,a,r,c,i,s){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,a)=>{if(e<0||e>=n){const r=o.util.indexToLoc(a,t.length,o.util.computeStrides(t)).join(",");throw new Error("indices[".concat(r,"] = ").concat(e," is not in [0, ").concat(n,")"))}}))}(c,i,t[0][0]-1),0===a.length)throw new Error("params.rank must be nonzero");const l=a[0],{outSplits:u,valueSlices:d,numValues:p}=bt(c,i,e,l),h=function(e){const t=[];for(let n=0;n<e.length;++n){const a=e[n].length,r=o.util.getArrayFromDType("int32",a);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(u),f=Ct(n,a,r,d,p);return[h,f[0],f[1]]}const yt=2147483647;function wt(e,t,n,a,r,c,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const s=0===t.length,l=0===r.length,u=0===i.length,d=[];s||d.push(t[0]),l||d.push(r[0]),u||d.push(i[0]);for(let o=1;o<d.length;++o)if(d[o]!==d[o-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===d.length?1:d[0],h=o.util.getArrayFromDType("int32",p+1);h[0]=0;for(let o=0;o<p;++o){const t=s?e[0]:e[o],n=l?a[0]:a[o],r=u?c[0]:c[o];if(0===r)throw new Error("Requires delta != 0");let i;if(r>0&&n<t||r<0&&n>t)i=0;else if(i=Math.ceil(Math.abs((n-t)/r)),i>yt)throw new Error("Requires ((limit - start) / delta) <= ".concat(yt));h[o+1]=h[o]+i}const f=h[p],x=o.util.getArrayFromDType(n,f);let m=0;for(let o=0;o<p;++o){const t=h[o+1]-h[o];let n=s?e[0]:e[o];const a=u?c[0]:c[o];for(let e=0;e<t;++e)x[m++]=n,n+=a}return[h,x]}var kt=o.backend_util.RowPartitionType;class St{constructor(e,t,n,a,r,c,i,s,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=a,this.valuesDType=r,this.defaultValue=c,this.defaultValueShape=i,this.rowPartitionValues=s,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=o.backend_util.getRowPartitionTypesHelper(u),this.raggedRank=o.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===kt.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===kt.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case kt.VALUE_ROWIDS:return St.getMaxWidthValueRowID(t);case kt.ROW_SPLITS:return St.getMaxWidthRowSplit(t);default:throw new Error("Cannot handle partition type ".concat(kt[this.getRowPartitionTypeByDimension(e-1)]))}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let a=0;a<t-1;++a){const t=e[a+1]-e[a];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,a=e[0],o=0;for(let r=1;r<t;++r){const t=e[r];t!==a&&(a=t,o=Math.max(r-n,o),n=r)}return Math.max(t-n,o)}tensorShapeFromTensor(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Tt(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;o.backend_util.validateDefaultValueShape(n,t);const a=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=o.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,a,t);r[0]<0&&(r[0]=e);for(let o=1;o<=this.raggedRank;++o)r[o]<0&&(r[o]=this.getMaxWidth(o));return r}calculateFirstParentOutputIndex(e,t,n){const a=Math.min(e,n),r=[];let c=0;for(let o=0;o<a;++o,c+=t)r.push(c);for(let o=a;o<e;++o)r.push(-1);return o.util.assert(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,a){const o=e.length,r=[];for(let c=0;c<o-1;++c){const o=e[c+1]-e[c];let i=Math.min(a,o),s=t[c];-1===s&&(i=0);for(let e=0;e<i;++e)r.push(s),s+=n;for(let e=0;e<o-i;++e)r.push(-1)}if(o>0&&r.length!==e[o-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(e,t,n,a){const o=e.length,r=[];if(0===o)return[];let c=0,i=e[0];if(i>=t.length)throw new Error("Got currentValueRowId=".concat(i,", which is not less than ").concat(t.length));let s=t[i];r.push(s);for(let l=1;l<o;++l){const o=e[l];if(o===i)s>=0&&(++c,c<a?s+=n:s=-1);else{if(c=0,i=o,o>=t.length)throw new Error("Got nextValueRowId=".concat(o," which is not less than ").concat(t.length));s=t[o]}r.push(s)}if(r.length!==e.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(e,t,n,a){const o=this.getRowPartitionTensor(e),r=this.getRowPartitionTypeByDimension(e);switch(r){case kt.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,t,n,a);case kt.ROW_SPLITS:if(o.length-1>t.length)throw new Error("Row partition size is greater than output size: ".concat(o.length-1," > ").concat(t.length));return this.calculateOutputIndexRowSplit(o,t,n,a);default:throw new Error("Unsupported partition type: ".concat(kt[r]))}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case kt.FIRST_DIM_SIZE:return e[0];case kt.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case kt.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error("Cannot handle type ".concat(kt[t]))}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let o=n.length-2;o>=0;--o)n[o]=n[o+1]*t[o+1];const a=Tt(t,!1),r=o.util.getArrayFromDType(this.valuesDType,o.util.sizeFromShape(a));if(n[0]*t[0]>0){let o=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){o=this.calculateOutputIndex(e-1,o,n[e],t[e])}this.setOutput(this.raggedRank,o,r,a)}return[a,r]}setOutput(e,t,n,a){if(0===n.length)return;const r=this.values,c=n;let i=a.slice();i=i.slice(e+1);const s=o.util.sizeFromShape(i),l=t.length;let u=this.defaultValue;if(u.length!==s&&1!==u.length){const e=this.defaultValueShape;(0,o.tidy)((()=>{const t=(0,o.reshape)(u,e),n=(0,o.broadcastTo)(t,i);u=n.dataSync()}))}let d=0,p=0,h=0;for(let o=0;o<=l;++o){let e=o<l?t[o]:-1;if(e!==h){if(p<h){const e=r.subarray(d*s);Rt(c.subarray(p*s),e,(h-p)*s)}if(o>=l){const t=n.length;e=Math.floor(t/s)}if(e>h)if(1===this.defaultValue.length)c.subarray(h*s,e*s).fill(this.defaultValue[0]),h=e;else for(;e>h;){Rt(c.slice(h*s),u,s),++h}e<0?(d=o+1,p=h):(d=o,p=h,h=p+1)}else++h}}}function Rt(e,t,n){for(let a=0;a<n;a++)e[a]=t[a]}function Tt(e,t){const n=[];for(let a of e){if(a<0){if(!t)throw new Error("Dimension ".concat(a," must be >= 0"));if(a<-1)throw new Error("Dimension ".concat(a," must be >= -1"));a=-1}n.push(a)}return n}function Et(e,t,n,a,o,r,c,i,s,l){return new St(e,t,n,a,o,r,c,i,s,l).compute()}function Nt(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return o.util.makeZerosTypedArray(0,a);const r=Math.abs(Math.ceil((t-e)/n)),c=o.util.makeZerosTypedArray(r,a);t<e&&1===n&&(n=-1),c[0]=e;for(let o=1;o<c.length;o++)c[o]=c[o-1]+n;return c}const At=qe((e=>1/Math.sqrt(e)));je(o.Rsqrt,At),o.Rsqrt;function _t(e,t,n,a,r,c,i,s,l,u){const d=[a/r,r],p=e.values,h=t.values;if(0===a)return(0,o.buffer)(n,t.dtype);const f=(0,o.buffer)(d,t.dtype);"string"===typeof l||"number"===typeof l?f.values.fill(l):"boolean"===typeof l&&f.values.fill(+l);for(let o=0;o<c;o++){const e=[];let c=0;for(let t=0;t<i;t++){const n=p[o*i+t];e.push(n),c+=n*s[t]}if(c<0||c>=a/r)throw new Error("Invalid indices: ".concat(e," does not index into ").concat(n));for(let n=0;n<r;n++)u?f.values[c*r+n]+=h[o*r+n]:f.values[c*r+n]=0===t.rank?h[0]:h[o*r+n]}return f}const Ot=qe((e=>1/(1+Math.exp(-e))));Ke(o.Sigmoid,(e=>1/(1+Math.exp(-e)))),o.Sigmoid;function Ft(e,t,n,a,r){const c=o.slice_util.isSliceContinous(a,t,n),i=o.util.sizeFromShape(n),s=o.util.computeStrides(a);if(c){const n=o.slice_util.computeFlatOffset(t,s);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===r?o.backend_util.fromUint8ToStringArray(e):e,u=(0,o.buffer)(a,r,l),d=(0,o.buffer)(n,r);for(let o=0;o<d.size;++o){const e=d.indexToLoc(o),n=e.map(((e,n)=>e+t[n]));d.set(u.get(...n),...e)}return"string"===r?o.backend_util.fromStringArrayToUint8(d.values):d.values}o.Slice;function Dt(e,t,n,a,r,c,i){const s=t[0],l=c[0],u=new Array(l),d=new Array(s),p=t[1];if(0===l){if(0!==s)throw new Error(o.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(s));return[o.util.getArrayFromDType(n,0),[0,p],o.util.getArrayFromDType(r,0),u,d]}let h=!0,f=0;const x=new Array(l).fill(0);for(let g=0;g<s;++g){const t=e[g*p];if(t<0)throw new Error(o.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,t));if(t>=l)throw new Error(o.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,t,l));++x[t],h=h&&t>=f,f=t}let m=!0;for(let o=0;o<l;++o){const e=0===x[o];u[o]=e,m=m&&!e,x[o]=Math.max(x[o],1),o>0&&(x[o]+=x[o-1])}if(m&&h){const t=e,n=a;for(let e=0;e<s;++e)d[e]=e;return[t,[s,p],n,u,d]}{const t=x[l-1],c=o.util.getArrayFromDType(n,t*p),h=o.util.getArrayFromDType(r,t),f=new Array(l).fill(0);for(let n=0;n<s;++n){const t=e[n*p],o=f[t],r=(0===t?0:x[t-1])+o;f[t]++;for(let a=0;a<p;++a)c[r*p+a]=e[n*p+a];h[r]=a[n],d[n]=r}for(let e=0;e<l;++e){if(0===f[e]){const t=0===e?0:x[e-1];c[t*p+0]=e;for(let e=1;e<p;++e)c[t*p+e]=0;h[t]=i}}return[c,[t,p],h,u,d]}}function Pt(e,t,n,a,r){const c=o.util.sizeFromShape(a),i=t[0],s=r.length,l=[];let u=1,d=-1;for(let m=0;m<s;++m){const e=r[m];if(-1===e){if(-1!==d)throw new Error(o.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,m));d=m,l.push(1)}else{if(e<0)throw new Error(o.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(m,e));u*=e,l.push(e)}}if(-1!==d){if(u<=0)throw new Error(o.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(c/u);if(u*e!==c)throw new Error(o.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(a,l));l[d]=e}if(o.util.sizeFromShape(l)!==c)throw new Error(o.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(a,l));const p=a.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*a[e+1]}const f=[];if(s>0){f[s-1]=1;for(let e=s-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const x=o.util.getArrayFromDType(n,i*s);for(let o=0;o<i;++o){let t=0;for(let n=0;n<p;++n)t+=e[o*p+n]*h[n];for(let e=0;e<s;++e)x[o*s+e]=Math.trunc(t/f[e]),t%=f[e]}return[x,[i,s],l]}function Lt(e,t,n,a,r){let c=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;const s=a.length,l=[t[0],e.length/t[0]],u=l[1],d=s>0?r[s-1]+1:0;if(d<0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=d;const h=p.reduce(((e,t)=>e*t),1),f=o.util.getArrayFromDType(n,h);if(0===s)return d>0&&f.fill(i),[f,p];if(d<=0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let x=0,m=1,g=0,b=r[x];for(;;){let t=0;if(m<s){if(t=r[m],b===t){++m;continue}if(b>=t)throw new Error(o.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=d)throw new Error(o.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,d));b>g&&f.fill(i,g*u,b*u);for(let n=x;n<m;++n){const t=a[n];if(t<0||t>=l[0])throw new Error(o.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,a[n],l[0]));for(let n=0;n<u;n++)f[b*u+n]+=e[t*u+n]}if(c)for(let e=0;e<u;e++)f[b*u+e]/=m-x;if(x=m,++m,g=b+1,b=t,m>s)break}return g<d&&f.fill(i,g*u,d*u),[f,p]}const Bt=qe((e=>Math.sqrt(e))),Vt=(Ke(o.Sqrt,(e=>Math.sqrt(e))),o.Sqrt,Fe(((e,t)=>{const n=e-t;return n*n})));Ue(o.SquaredDifference,Vt),o.SquaredDifference;function Wt(e,t,n,a){const r=(0,o.buffer)(e,t.dtype);for(let o=0;o<r.size;o++){const e=r.indexToLoc(o),c=new Array(e.length);for(let t=0;t<c.length;t++)c[t]=e[t]*n[t]+a[t];r.set(t.get(...c),...e)}return r}class Ut{constructor(e,t,n,a,r,c){this.separator=o.util.encodeString(e),this.nGramWidths=t,this.leftPad=o.util.encodeString(n),this.rightPad=o.util.encodeString(a),this.padWidth=r,this.preserveShort=c}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,a,o,r){for(let c=0;c<o;++c){const i=this.getPadWidth(r),s=Math.max(0,i-c),l=Math.max(0,i-(o-(c+1))),u=r-(s+l),d=t+(s>0?0:c-i);let p=0;p+=s*this.leftPad.length;for(let t=0;t<u;++t)p+=e[d+t].length;p+=l*this.rightPad.length;p+=(s+l+u-1)*this.separator.length,n[a+c]=new Uint8Array(p);const h=n[a+c];let f=0;const x=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<s;++e)x(this.leftPad),x(this.separator);for(let t=0;t<u-1;++t)x(e[d+t]),x(this.separator);if(u>0){x(e[d+u-1]);for(let e=0;e<l;++e)x(this.separator),x(this.rightPad)}else{for(let e=0;e<l-1;++e)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,t){const n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error("First split value must be 0, got ".concat(e));for(let o=1;o<a;++o){let a=t[o]>=e;if(a=a&&t[o]<=n,!a)throw new Error("Invalid split value ".concat(t[o],", must be in [").concat(e,", ").concat(n,"]"));e=t[o]}if(e!==n)throw new Error("Last split value must be data size. Expected ".concat(n,", got ").concat(e))}const r=a-1,c=o.util.getArrayFromDType("int32",a);if(0===n||0===a){const e=new Array(n);for(let t=0;t<=r;++t)c[t]=0;return[e,c]}c[0]=0;for(let o=1;o<=r;++o){const e=t[o]-t[o-1];let n=0;this.nGramWidths.forEach((t=>{n+=this.getNumNGrams(e,t)})),this.preserveShort&&e>0&&0===n&&(n=1),c[o]=c[o-1]+n}const i=new Array(c[r]);for(let o=0;o<r;++o){const n=t[o];let a=c[o];if(this.nGramWidths.forEach((r=>{const c=t[o+1]-t[o],s=this.getNumNGrams(c,r);this.createNGrams(e,n,i,a,s,r),a+=s})),this.preserveShort&&a===c[o]){const r=t[o+1]-t[o];if(0===r)continue;const c=r+2*this.padWidth,s=1;this.createNGrams(e,n,i,a,s,c)}}return[i,c]}}function Mt(e,t,n,a,o,r,c,i){return new Ut(n,a,o,r,c,i).compute(e,t)}function Gt(e,t,n,a){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)a.push(e.subarray(t,t+1));return}if(1===t.length){const o=t[0];let r=e.indexOf(o);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||a.push(t),r=(e=e.subarray(r+1)).indexOf(o)}return void(n&&0===e.length||a.push(e))}let o=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(o,r);n&&0===t.length||a.push(t),o=r+1}}function zt(e,t,n){const a=e.length,r=[];let c=0,i=0;const s=new Array(a);for(let o=0;o<a;++o){const a=r.length;Gt(e[o],t,n,r);const l=r.length-a;s[o]=l,c+=l,i=Math.max(i,l)}const l=o.util.getArrayFromDType("int32",2*c),u=new Array(c),d=[a,i];let p=0;for(let o=0;o<a;++o)for(let e=0;e<s[o];++e)l[2*p]=o,l[2*p+1]=e,u[p]=r[p],++p;return[l,u,d]}function Xt(e,t){const n=o.util.getArrayFromDType("int32",e.length);for(let a=0;a<e.length;++a)n[a]=o.util.fingerPrint64(e[a]).modulo(t).getLowBitsUnsigned();return n}const Ht=Fe(((e,t)=>e-t)),qt=Me(((e,t,n,a)=>({real:e-n,imag:t-a})));Ue(o.Sub,Ht,qt),o.Sub;function Kt(e,t){const n=new Array(e.rank);for(let o=0;o<n.length;o++)n[o]=e.shape[o]*t[o];const a=(0,o.buffer)(n,e.dtype);for(let o=0;o<a.values.length;++o){const t=a.indexToLoc(o),n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=t[a]%e.shape[a];const r=e.locToIndex(n);a.values[o]=e.values[r]}return a}const jt=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function Yt(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.length-1;for(;a>n;){if(a-n>600){const o=a-n+1,r=t-n+1,c=Math.log(o),i=.5*Math.exp(2*c/3),s=.5*Math.sqrt(c*i*(o-i)/o)*Math.sign(r-o/2);Yt(e,t,Math.max(n,Math.floor(t-r*i/o+s)),Math.min(a,Math.floor(t+(o-r)*i/o+s)))}const r=e[t];let c=n,i=a;for(o.util.swap(e,n,t),jt(e[a],r)>0&&o.util.swap(e,n,a);c<i;){for(o.util.swap(e,c,i),c++,i--;jt(e[c],r)<0;)c+=1;for(;jt(e[i],r)>0;)i-=1}0===jt(e[n],r)?o.util.swap(e,n,i):(i+=1,o.util.swap(e,i,a)),i<=t&&(n=i+1),t<=i&&(a=i-1)}}function Qt(e,t,n,a,r){const c=t[t.length-1],[i,s]=[e.length/c,c],l=o.util.getTypedArrayFromDType(n,i*a),u=o.util.getTypedArrayFromDType("int32",i*a);for(let o=0;o<i;o++){const t=o*s,n=e.subarray(t,t+s);let c=new Array(n.length);n.forEach(((e,t)=>c[t]={value:e,index:t})),a<c.length&&(Yt(c,a),c=c.slice(0,a)),r&&c.sort(jt);const i=o*a,d=l.subarray(i,i+a),p=u.subarray(i,i+a);for(let e=0;e<a;e++)d[e]=c[e].value,p[e]=c[e].index}const d=t.slice();return d[d.length-1]=a,[(0,o.buffer)(d,n,l),(0,o.buffer)(d,"int32",u)]}function Zt(e,t,n,a){const r=o.util.parseAxisParam(t,n)[0],c=[1,n[0],1];for(let o=0;o<r;o++)c[0]*=n[o];c[1]=n[r];for(let o=r+1;o<n.length;o++)c[2]*=n[o];const i={},s=new Int32Array(n[r]),l=new o.TensorBuffer(c,a,e),u=[],d=1===c[0]&&1===c[2];for(let o=0;o<n[r];o++){let t;if(d)t=e[o].toString();else{const e=[];for(let t=0;t<c[0];t++)for(let n=0;n<c[2];n++)e.push(l.get(t,o,n));t=e.join(",")}if(void 0!==i[t])s[o]=i[t];else{const e=Object.keys(i).length;i[t]=e,s[o]=e,u.push(o)}}const p=c.slice();p[1]=Object.keys(i).length;const h=new o.TensorBuffer(p,a);u.forEach(((e,t)=>{for(let n=0;n<c[0];n++)for(let a=0;a<c[2];a++)h.set(l.get(n,e,a),n,t,a)}));const f=n.slice();return f[r]=p[1],{outputValues:h.values,outputShape:f,indices:s}}const{addImpl:Jt,bincountImpl:$t,bincountReduceImpl:en,castImpl:tn,ceilImpl:nn,concatImpl:an,equalImpl:on,expImpl:rn,expm1Impl:cn,floorImpl:sn,gatherNdImpl:ln,gatherV2Impl:un,greaterImpl:dn,greaterEqualImpl:pn,lessImpl:hn,lessEqualImpl:fn,linSpaceImpl:xn,logImpl:mn,maxImpl:gn,maximumImpl:bn,minimumImpl:vn,multiplyImpl:Cn,negImpl:In,notEqualImpl:yn,prodImpl:wn,raggedGatherImpl:kn,raggedRangeImpl:Sn,raggedTensorToTensorImpl:Rn,rangeImpl:Tn,rsqrtImpl:En,scatterImpl:Nn,sigmoidImpl:An,simpleAbsImpl:_n,sliceImpl:On,sparseFillEmptyRowsImpl:Fn,sparseReshapeImpl:Dn,sparseSegmentReductionImpl:Pn,sqrtImpl:Ln,stridedSliceImpl:Bn,stringNGramsImpl:Vn,stringSplitImpl:Wn,stringToHashBucketFastImpl:Un,subImpl:Mn,tileImpl:Gn,topKImpl:zn,transposeImpl:Xn,uniqueImpl:Hn}=a;function qn(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>"".concat(e,".").concat(t)))}function Kn(e,t){return 1===t?[e]:qn(e,t)}class jn{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=pe(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Kn("rc",this.rank),t=re(this.rank),n=this.getOutOfBoundsCondition(e),a=this.getSetup(e),o=this.getOutput(e);this.userCode="\n        void main() {\n          ".concat(t," rc = getOutputCoords();\n\n          if(").concat(n,") {\n            setOutput(vec4(0));\n          } else {\n            ").concat(a,"\n\n            setOutput(vec4(").concat(o,"));\n          }\n        }\n      ")}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let a=0;a<=1;a++){let o="".concat(0===n?"r":"rp1",", ").concat(0===a?"c":"cp1");for(let t=2;t<this.rank;t++)o="".concat(e[e.length-1-t],",")+o;t.push(o)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return"rc > ".concat(this.enableShapeUniforms?"outShape":this.outputShape[0]);let t="";for(let n=this.rank-2;n<this.rank;n++)t+="".concat(e[n]," >= ").concat(this.enableShapeUniforms?"outShape[".concat(n,"]"):this.outputShape[n]),n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?"outShape[".concat(this.rank," - 1]"):this.outputShape[this.rank-1],a=this.enableShapeUniforms?"outShape[".concat(this.rank," - 2]"):this.outputShape[this.rank-2];return"\n      int r = ".concat(t[0],";\n      int c = ").concat(t[1],";\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ").concat(n,";\n      bool rEdge = rp1 >= ").concat(a,";\n    ")}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){const e=this.enableShapeUniforms?"outShape":this.outputShape[0];return"getA(rc), (rc + 1 >= ".concat(e," ? 0. : getA(rc + 1)), 0, 0")}return"getA(".concat(t[0],"),\n            cEdge ? 0. : getA(").concat(t[1],"),\n            rEdge ? 0. : getA(").concat(t[2],"),\n            rEdge || cEdge ? 0. : getA(").concat(t[3],")")}}class Yn{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length);let n="";for(let a=0;a<4;a++){let e="thisRC = rc;";a%2===1&&(e+="thisRC.z += 1;"),a>1&&(e+="thisRC.y += 1;"),n+="\n        ".concat(e,"\n        ").concat(a>0?"if(thisRC.y < rows && thisRC.z < cols){":"","\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[").concat(a,"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ").concat(a>0?"}":"","\n      ")}this.userCode="\n      ".concat(function(e,t){const n=t?q(["r","c","d"],"inputShape"):X(["r","c","d"],e);return"\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ".concat(n,"\n      return ivec3(r, c, d);\n    }\n  ")}(t,this.enableShapeUniforms),"\n      ").concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":K(e),"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ").concat(this.enableShapeUniforms?"outShape[1]":e[1],";\n        int cols = ").concat(this.enableShapeUniforms?"outShape[2]":e[2],";\n\n        ").concat(n,"\n\n        setOutput(result);\n      }\n    ")}}class Qn{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const a=Jn(t,n),o=$n(e,a,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const r=Zn(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[o].shift();return this.usedTextures[o].push(e),e}let c;return a===u.PACKED_2X2_FLOAT32?c=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===u.PACKED_2X2_FLOAT16?c=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===u.UNPACKED_FLOAT32?c=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===u.UNPACKED_FLOAT16?c=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===u.PACKED_4X1_UNSIGNED_BYTE&&(c=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[o].push(c),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),c}releaseTexture(e,t,n,a){if(null==this.freeTextures)return;const r=Jn(n,a),c=$n(t,r,a);c in this.freeTextures||(this.freeTextures[c]=[]);const i=Zn(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,a),s=(0,o.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==s&&this._numBytesAllocated>s?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[c].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[c],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used","".concat(this.numFreeTextures," / ").concat(this.numUsedTextures),"(".concat(e,")"));const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: ".concat(this._numBytesAllocated)),console.log("Bytes unused: ".concat(this._numBytesFree," (").concat(Math.round(100*t),"%)"))}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Zn(e,t,n,a,o){const r=function(e,t){switch(e){case u.PACKED_2X2_FLOAT32:return Te(t);case u.PACKED_2X2_FLOAT16:return Ee(t);case u.UNPACKED_FLOAT32:return ke(t);case u.UNPACKED_FLOAT16:return Se(t);case u.PACKED_4X1_UNSIGNED_BYTE:return Re(t);default:throw new Error("Unknown physical texture type ".concat(e))}}(t,a);let c;if(o){const[t,n]=h(e[0],e[1]);c=t*n}else{const[t,n]=d(e[0],e[1]);c=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error("Unknown internal format ".concat(t))}(n,r);return c*i}function Jn(e,t){if(e===l.UPLOAD)return u.PACKED_2X2_FLOAT32;if(e===l.RENDER||null==e)return function(e){return(0,o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?u.PACKED_2X2_FLOAT32:u.UNPACKED_FLOAT32:e?u.PACKED_2X2_FLOAT16:u.UNPACKED_FLOAT16}(t);if(e===l.DOWNLOAD||e===l.PIXELS)return u.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type ".concat(e))}function $n(e,t,n){return"".concat(e[0],"_").concat(e[1],"_").concat(t,"_").concat(n)}class ea{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length),this.userCode="\n      float unaryOperation(float x) {\n        ".concat(t,"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")}}const ta="if (isnan(x)) return x;",na="return x;",aa="return abs(x);";const oa="return (x >= 0.0) ? x : (exp(x) - 1.0);",ra=ta+"\n  return (x < 0.0) ? 0.0 : x;\n",ca=ta+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ia="return x;",sa="return 1.0 / (1.0 + exp(-1.0 * x));",la="return x;",ua="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",da="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",pa="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ha="return 1.0 / (1.0 + exp(-1.0 * x));";class fa{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length),this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        ".concat(t,"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")}}class xa{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length);const t=e.length,n=Kn("rc",t),a=re(t),o=function(e,t){if(1===e)return"rc";let n="";for(let a=0;a<e;a++)n+=t[a],a<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),c=t<=1?"rc":"vec2(".concat(r.join(","),")");this.userCode="\n      void main() {\n        ".concat(a," rc = getOutputCoords();\n        vec4 packedInput = getA(").concat(o,");\n\n        setOutput(getChannel(packedInput, ").concat(c,"));\n      }\n    ")}}const ma=o.kernel_impls.whereImpl,ga={};const ba=(0,o.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),va=600;class Ca extends o.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,o.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof Ae)t=e;else{const n=i((0,o.env)().getNumber("WEBGL_VERSION"),e);t=new Ae(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=i((0,o.env)().getNumber("WEBGL_VERSION"));t=new Ae(e),this.binaryCache=((n=(0,o.env)().getNumber("WEBGL_VERSION"))in ga||(ga[n]={}),ga[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Qn(this.gpgpu),this.numMBBeforeWarning=null==(0,o.env)().global.screen?1024:(0,o.env)().global.screen.height*(0,o.env)().global.screen.width*window.devicePixelRatio*va/1024/1024,this.texData=new o.DataStorage(this,(0,o.engine)())}nextDataId(){return Ca.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,a,o,r){const c=this.makeTensorInfo(t,n),i=this.texData.get(c.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[a,o]},i.texShape=[a,o];const s=O(t),l=new be(s,!1,r),u=this.runWebGLProgram(l,[c],n,[[a,o]]);return u.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(c),u.dataId}write(e,t,n){if(((0,o.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,o.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:t,dtype:n,values:e,usage:l.UPLOAD,refCount:1}),a}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,a,r){if((0,o.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:a,values:t,usage:l.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:a,complexTensorInfos:r,slice:c,shape:i,isPacked:s}=t;if(null!=c){let t;t=s?new fa(i,ia):new ea(i,ia);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:a}],a),o=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),o}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;const l=null!=this.activeTimers;let u,d;if(l&&(u=o.util.now()),"complex64"===a){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);d=o.backend_util.mergeRealAndImagArrays(e,t)}else d=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=o.util.now()-u),this.convertAndCacheOnCPU(e,d)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:a,slice:r,dtype:c,complexTensorInfos:i,isPacked:s}=t;if(null!=r){let t;t=s?new fa(a,ia):new ea(a,ia);const n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:c}],c),o=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),o}if(null!=n)return this.convertAndCacheOnCPU(e);if((0,o.env)().getBool("DEBUG")&&!(0,o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,o.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,d=null;if("complex64"!==c&&(0,o.env)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);d=this.gpgpu.createBufferFromTexture(t.texture.texture,...p(a))}if(this.pendingRead.set(e,[]),"complex64"!==c&&await this.gpgpu.createAndWaitForFence(),"complex64"===c){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=o.backend_util.mergeRealAndImagArrays(t,n)}else if(null==d)u=this.getValuesFromTexture(e);else{const e=o.util.sizeFromShape(a);u=this.gpgpu.downloadFloat32MatrixFromBuffer(d,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=d){const e=this.gpgpu.gl;x(e,(()=>e.deleteBuffer(d)))}const h=this.convertAndCacheOnCPU(e,u),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,o.engine)().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.texData.get(e),{values:a,shape:r,slice:c,dtype:i,isPacked:s,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=c){let n;n=s?new fa(r,ia):new ea(r,ia);const a=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),o=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),o}if(null==l)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),d=(0,o.engine)().makeTensorFromTensorInfo(u),p=this.texData.get(u.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>o.util.decodeString(e)));return(0,o.buffer)(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,o.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!b(n)){if((0,o.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value ".concat(n," cannot be represented with your ")+"current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value ".concat(n," cannot be represented on this device."))}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:a}=this.texData.get(e),r=o.util.sizeFromShape(t);if((0,o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),a=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(a.texture.texture,...p(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),o}const c=(0,o.env)().getBool("WEBGL_PACK")&&!0===a,i=c?O(t):t,s=c?new me(i):new xe(i),l=this.runWebGLProgram(s,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),d}timerAvailable(){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=o.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),c=o.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,a&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=o.util.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:c[t],ms:e}))).map((e=>"".concat(e.name,": ").concat(e.ms))).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:o.util.now(),endMs:null}}endTimer(e){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=o.util.now(),e)}async getQueryTime(e){if((0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:a,usage:o,isPacked:r,slice:c}=this.texData.get(e),i=c&&c.origDataId||e,s=this.dataRefCount.get(i);s>1?this.dataRefCount.set(i,s-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(a,n),this.textureManager.releaseTexture(t,a,o,r)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ba;return(0,o.env)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&o.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){o.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ma(e.shape,t)}packedUnaryOp(e,t,n){const a=new fa(e.shape,t),r=this.compileAndRun(a,[e],n);return(0,o.engine)().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=_n(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,aa,e.dtype);const t=new ea(e.shape,aa),n=this.compileAndRun(t,[e]);return(0,o.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&o.util.isString(n[0])){const r=n.map((e=>o.util.encodeString(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}makeOutput(e,t,n){return(0,o.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new xa(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new jn(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[A(e.shape),..._(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},o=[A(t),..._(t)],r=new Yn(o,n),c=[n],i=this.runWebGLProgram(r,[a],e.dtype,c,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:a,shape:r,dtype:c}=n;if(null!=t){const e=o.util.sizeFromShape(r),n=t[0]*t[1]*4;o.util.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=O(r);let s;s=a?new fe(i):new he(i);const l=[null!=t?t:p(i)];return{dtype:c,shape:r,dataId:this.runWebGLProgram(s,[{shape:i,dtype:c,dataId:e}],c,l,!0,t).dataId}}runWebGLProgram(e,t,n,a){let r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],c=arguments.length>5?arguments[5]:void 0;const i=this.makeTensorInfo(e.outputShape,n),l=this.texData.get(i.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===s.DENSE){const t=null!=c?c:p(e.outputShape);l.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===o.util.sizeFromShape(i.shape))return l.values=o.util.getTypedArrayFromDType(i.dtype,0),i;const u=[],d=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&o.util.sizeFromShape(t.shape)<=(0,o.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!==!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!D(n.shape,t.shape)){const e=t,a=t.shape;t.shape=n.shape,t=this.packedReshape(t,a),u.push(t),n=this.texData.get(t.dataId),e.shape=a}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const h={shape:i.shape,texData:l,isUniform:!1},f=function(e,t,n){let a="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const c=t.texData.texShape,{useSqueezeShape:i,uniformShape:s,keptDims:l}=ce(e.packedInputs,t.shape,c);let u="",d="",p="";if(1===s.length&&e.packedInputs){const e=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];u="".concat(e[0]>1,"_").concat(e[1]>1)}else if(2!==s.length||e.packedInputs){if(s.length>2&&!e.packedInputs){const e=o.util.computeStrides(s);p="".concat(e[0]===c[1],"_").concat(e[e.length-1]===c[1])}}else d="".concat(s[0]>1,"_").concat(s[1]>1);const h=t.shape.length,f=2===s.length&&o.util.arraysEqual(t.shape,c),x=1===o.util.sizeFromShape(t.shape),m=o.backend_util.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&o.util.arraysEqual(c,n.texData.texShape),b=e.packedInputs||s.length>2?"":"".concat(c[0]>1,"_").concat(c[1]>1);a+="".concat(h,"_").concat(g,"_").concat(i?l:"","_").concat(s.length,"_").concat(x,"_").concat(m,"_").concat(f,"_").concat(u,"_").concat(d,"_").concat(p,"_").concat(b,"_").concat(r)}else{const e=t.isUniform?"uniform":t.texData.texShape;a+="".concat(t.shape,"_").concat(e,"_").concat(r)}}));const r=e.userCode;let c=e.constructor.name;return c+="_"+a+"_"+r+"".concat((0,o.env)().getNumber("WEBGL_VERSION")),c}(e,d,h),x=this.getAndSaveBinary(f,(()=>le(this.gpgpu,e,d,h))),m=null!=this.activeTimers;let g;m&&(g=this.startTimer()),(0,o.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,a,r){t.program.enableShapeUniforms||(de(t.inShapeInfos,n),de([t.outShapeInfo],[a]));const c=a.texData.texture,i=a.texData.texShape;a.texData.isPacked?e.setOutputPackedMatrixTexture(c.texture,i[0],i[1]):e.setOutputMatrixTexture(c.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===(0,o.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,a)=>{const r=t.program.variableNames[a],c=t.uniformLocations[r],i=t.uniformLocations["offset".concat(r)],s=t.inShapesLocations["".concat(r,"Shape")],l=t.inTexShapesLocations["".concat(r,"TexShape")];if(s){const{uniformShape:a}=ce(t.program.packedInputs,n.shape,n.texData.texShape);switch(a.length){case 1:e.gl.uniform1iv(s,new Int32Array(a));break;case 2:e.gl.uniform2iv(s,new Int32Array(a));break;case 3:e.gl.uniform3iv(s,new Int32Array(a));break;case 4:e.gl.uniform4iv(s,new Int32Array(a))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=c)if(n.isUniform)if(o.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(c,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(c,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,c,a)}));const s=t.outShapeLocation;if(s)switch(a.shape.length){case 1:e.gl.uniform1iv(s,new Int32Array(a.shape));break;case 2:e.gl.uniform2iv(s,new Int32Array(a.shape));break;case 3:e.gl.uniform3iv(s,new Int32Array(a.shape));break;case 4:e.gl.uniform4iv(s,new Int32Array(a.shape))}if(t.outShapeStridesLocation){const n=o.util.computeStrides(a.shape);switch(a.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,a.texData.texShape[0],a.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,a)=>{const o=t.customUniformLocations[a],c=r[a];if("float"===n.type)e.gl.uniform1fv(o,c);else if("vec2"===n.type)e.gl.uniform2fv(o,c);else if("vec3"===n.type)e.gl.uniform3fv(o,c);else if("vec4"===n.type)e.gl.uniform4fv(o,c);else if("int"===n.type)e.gl.uniform1iv(o,c);else if("ivec2"===n.type)e.gl.uniform2iv(o,c);else if("ivec3"===n.type)e.gl.uniform3iv(o,c);else{if("ivec4"!==n.type)throw Error("uniform type ".concat(n.type," is not supported yet."));e.gl.uniform4iv(o,c)}})),e.executeProgram()}(this.gpgpu,x,d,h,a),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const b=(0,o.env)().get("WEBGL_FLUSH_THRESHOLD");if(b>0){const e=o.util.now();e-this.lastGlFlushTime>b&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,o.env)().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,a){let o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,a,o)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!(0,o.env)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!==typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,o.tidy)((()=>{if(!(0,o.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,o.env)().getBool("DEBUG");(0,o.env)().set("DEBUG",!1);const t=this.abs((0,o.scalar)(1e-8)).dataSync()[0];if((0,o.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:a,values:r,texture:c,usage:i,isPacked:s}=t;if(null!=c)return;const u=null!=this.activeTimers;let d;u&&(d=o.util.now());let p=t.texShape;if(null==p&&(p=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),a=(0,o.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(a===1/0&&(0,o.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(a=n/2),t&&(n*=2,a*=2,1===(e=e.map(((t,n)=>n>=e.length-2?o.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=o.util.squeezeShape(e);e=t.newShape}let r=o.util.sizeFromShape(e),c=null;e.length<=1&&r<=n?c=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?c=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?c=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?c=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?c=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(c=[e[0],e[1]*e[2]*e[3]]);const i=null!=c&&Math.max(...c)>a&&Math.min(...c)<=(t?2:1)&&Math.min(...c)>0;if(null==c||i)if(t){const t=A(e);let n=2,a=2;e.length&&([n,a]=_(e)),r=t*(n/2)*(a/2),c=o.util.sizeToSquarishShape(r).map((e=>2*e))}else c=o.util.sizeToSquarishShape(r);return c}(n,s),t.texShape=p),null!=r){const e=O(n);let c,i=p[1],f=p[0];const x=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!s&&x||([i,f]=h(p[0],p[1])),c=s?new ve(e,x):new be(e,x);const m=x?[f,i]:p,g=this.makeTensorInfo(m,a),b=this.texData.get(g.dataId);b.usage=x?l.PIXELS:l.UPLOAD,b.texShape=m,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),i,f,r);const v=[[f,i]],C=!0,I=this.runWebGLProgram(c,[g],a,v,C),y=this.texData.get(I.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,(0,o.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(I.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(I.dataId)),this.disposeIntermediateTensorInfo(g),u&&(this.uploadWaitMs+=o.util.now()-d)}else{const e=this.acquireTexture(p,i,a,s);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:a}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype ".concat(t))}(t,a)),n.values}acquireTexture(e,t,n,a){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: ".concat(e," MB, ")+"most likely due to a memory leak")}return this.textureManager.acquireTexture(e,t,a)}computeBytes(e,t){return e[0]*e[1]*o.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,o.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw I(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:a,nanLoc:o,inShapesLocations:r,inTexShapesLocations:c,outShapeLocation:i,outShapeStridesLocation:s,outTexShapeLocation:l}=ue(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=a,e.nanLoc=o,e.inShapesLocations=r,e.inTexShapesLocations=c,e.outShapeLocation=i,e.outShapeStridesLocation=s,e.outTexShapeLocation=l}}createTensorFromTexture(e,t,n){const{texture:a,height:r,width:c,channels:i}=e,s=(0,o.engine)().backend;if(!s.gpgpu.gl.isTexture(a))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=s.writeTexture(a,t,n,r,c,i);return(0,o.engine)().makeTensorFromDataId(l,t,n,s)}}Ca.nextDataId=0,o.device_util.isBrowser()&&(0,o.registerBackend)("webgl",(()=>new Ca),2);const Ia="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class ya{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=pe(this.outputShape.length),this.userCode="\n      float binaryOperation(float a, float b) {\n        ".concat(e,"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ")}}const wa="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class ka{constructor(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=pe(r);let c="";if(a)if(0===r||1===o.util.sizeFromShape(this.outputShape))c="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{const e=re(r);if(c="\n          ".concat(e," coords = getOutputCoords();\n        "),1===r)this.enableShapeUniforms?c+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":c+="\n            result.y = (coords + 1) >= ".concat(this.outputShape[0]," ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ");else{const e=Kn("coords",r);this.enableShapeUniforms?c+="\n            bool nextRowOutOfBounds =\n              (".concat(e[r-2]," + 1) >= outShape[").concat(r," - 2];\n            bool nextColOutOfBounds =\n              (").concat(e[r-1]," + 1) >= outShape[").concat(r," - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "):c+="\n            bool nextRowOutOfBounds =\n              (".concat(e[r-2]," + 1) >= ").concat(this.outputShape[r-2],";\n            bool nextColOutOfBounds =\n              (").concat(e[r-1]," + 1) >= ").concat(this.outputShape[r-1],";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ")}}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ".concat(e,"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ").concat(c,"\n\n        setOutput(result);\n      }\n    ")}}function Sa(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const Ra={kernelName:o.Identity,backendName:"webgl",kernelFunc:Sa};function Ta(e){const{inputs:t,backend:n}=e,{real:a,imag:o}=t,r=n.makeTensorInfo(a.shape,"complex64"),c=n.texData.get(r.dataId),i=Sa({inputs:{x:a},backend:n}),s=Sa({inputs:{x:o},backend:n});return c.complexTensorInfos={real:i,imag:s},r}const Ea={kernelName:o.Complex,backendName:"webgl",kernelFunc:Ta},Na="return (a < 0.) ? b * a : a;",Aa="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const _a={kernelName:o.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:c}=a,i=n.makeTensorInfo([],"float32",o.util.createScalarValue(c,"float32")),s=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ka(Aa,r.shape,i.shape):new ya(Na,r.shape,i.shape),l=n.runWebGLProgram(s,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},Oa="return (a < 0.) ? b * a : a;",Fa="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Da={kernelName:o.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t,c=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ka(Fa,a.shape,r.shape):new ya(Oa,a.shape,r.shape);return n.runWebGLProgram(c,[a,r],"float32")}},Pa="if (isnan(x)) return x;";function La(e){let{opSnippet:t,packedOpSnippet:n,cpuKernelImpl:a,dtype:r}=e;return e=>{let{inputs:c,backend:i}=e;const{x:s}=c,l=i,u=r||s.dtype;if(l.shouldExecuteOnCPU([s])&&null!=a){const e=l.texData.get(s.dataId),t=a(e.values,u);return l.makeTensorInfo(s.shape,u,t)}let d;return d=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new fa(s.shape,n):new ea(s.shape,t),l.runWebGLProgram(d,[s],u)}}function Ba(e){let{opSnippet:t,packedOpSnippet:n,checkOutOfBounds:a=!1,supportsComplex:r=!1,cpuKernelImpl:c,dtype:i}=e;return e=>{let{inputs:s,backend:l}=e;const{a:u,b:d}=s,p=l;if(r&&"complex64"===u.dtype){const e=p.texData.get(u.dataId),n=p.texData.get(d.dataId),[a,r]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,a]=e,r={dataId:n.dataId,dtype:n.dtype,shape:u.shape},c={dataId:a.dataId,dtype:a.dtype,shape:d.shape},i=new ya(t,u.shape,d.shape);return p.runWebGLProgram(i,[r,c],(0,o.upcastType)(n.dtype,a.dtype))})),c=Ta({inputs:{real:a,imag:r},backend:p});return p.disposeIntermediateTensorInfo(a),p.disposeIntermediateTensorInfo(r),c}const h=i||(0,o.upcastType)(u.dtype,d.dtype);if(("string"===u.dtype||"string"===d.dtype||p.shouldExecuteOnCPU([u,d]))&&null!=c){const e=p.texData.get(u.dataId).values,t=p.texData.get(d.dataId).values,n="string"===u.dtype?o.backend_util.fromUint8ToStringArray(e):e,a="string"===u.dtype?o.backend_util.fromUint8ToStringArray(t):t,[r,i]=c(u.shape,d.shape,n,a,h),s=p.makeTensorInfo(i,h);return p.texData.get(s.dataId).values=r,s}let f;return f=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new ka(n,u.shape,d.shape,a):new ya(t,u.shape,d.shape),p.runWebGLProgram(f,[u,d],h)}}function Va(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("linear"===e)return t?la:na;if("relu"===e)return t?da:ra;if("elu"===e)return t?ua:oa;if("relu6"===e)return t?pa:ca;if("prelu"===e)return t?Fa:Oa;if("leakyrelu"===e)return t?Aa:Na;if("sigmoid"===e)return t?ha:sa;throw new Error("Activation ".concat(e," has not been implemented for the WebGL backend."))}class Wa{constructor(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],s=arguments.length>8&&void 0!==arguments[8]&&arguments[8];this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=pe(this.outputShape.length);const l=a?e[1]:e[2],u=Math.ceil(l/2),d=a?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",h=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let x="",m="";c&&(x=i?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(c,"\n        }"):s?"vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ".concat(c,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(c,"\n        }"),m="result = activation(result);");const g=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha");let b="rc.x",v="rc.x";e[0]<t[0]?b="int(min(float(rc.x), ".concat(e[0]-1,".))"):t[0]<e[0]&&(v="int(min(float(rc.x), ".concat(t[0]-1,".))")),this.userCode="\n      ".concat(x,"\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ").concat(u,".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ").concat(u,"; i++) {\n          int batchA = ").concat(b,";\n          int batchB = ").concat(v,";\n          vec4 a = getMatrixA(batchA, ").concat(d,");\n          vec4 b = getMatrixB(batchB, ").concat(p,");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (").concat(h[0]," * ").concat(f[0],");\n          result += (").concat(h[1]," * ").concat(f[1],");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ").concat(g,"\n\n        ").concat(m,"\n\n        setOutput(result);\n      }\n    ")}}const Ua={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class Ma{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ".concat(e,"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ")}}const Ga="return a * b;";function za(e){const{inputs:t,backend:n}=e,{a:a,b:r}=t,c=o.backend_util.upcastType(a.dtype,r.dtype);if("complex64"===a.dtype){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),o=new Ma(Ua.REAL,a.shape,r.shape),c=new Ma(Ua.IMAG,a.shape,r.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],s=n.runWebGLProgram(o,i,"float32"),l=n.runWebGLProgram(c,i,"float32"),u=Ta({inputs:{real:s,imag:l},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(l),u}if(n.shouldExecuteOnCPU([a,r])){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),[o,i]=Cn(a.shape,r.shape,e.values,t.values,c),s=n.makeTensorInfo(i,c);return n.texData.get(s.dataId).values=o,s}let i;return i=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ka(Ga,a.shape,r.shape):new ya(Ga,a.shape,r.shape),n.runWebGLProgram(i,[a,r],c)}const Xa={kernelName:o.Multiply,backendName:"webgl",kernelFunc:za};function Ha(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:c}=a,i=n,s=o.util.sizeFromShape(r.shape),l=o.util.inferFromImplicitShape(c,s),u=o.util.sizeFromShape(l);o.util.assert(s===u,(()=>"The new shape (".concat(l,") has ").concat(u," elements and the old ")+"shape (".concat(r.shape,") has ").concat(s," elements. The new shape and old ")+"shape must have the same number of elements."));const d=i.texData.get(r.dataId);return!d.isPacked||D(r.shape,l)||null!==d.texture&&D(d.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const a=[A(e.shape),..._(e.shape)],o={dtype:e.dtype,shape:a,dataId:e.dataId},r=[A(t),..._(t)],c=new Yn(r,a),i=[a],s=n.runWebGLProgram(c,[o],e.dtype,i,!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}(r,l,i)}const qa={kernelName:o.Reshape,backendName:"webgl",kernelFunc:Ha};class Ka{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:r,outSize:c}=e;this.outputShape=[a,c];const i=4*Math.floor(n/4),s=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l="sumValue += dot(values * ".concat(o.util.isInt(e)?e.toPrecision(2):e,", ones);")}let u="";r%n>0&&(u="\n        if (inIdx < 0 || inIdx >= ".concat(r,") {\n          return 0.0;\n        }\n      ")),this.userCode="\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ".concat(u,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(n,";\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(i,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(l,"\n        }\n\n        int inIdx = inOffset + ").concat(i,";\n        if (").concat(1===s,") {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ").concat(l,"\n        } else if (").concat(2===s,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ").concat(l,"\n        } else if (").concat(3===s,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ").concat(l,"\n        }\n        setOutput(sumValue);\n      }\n    ")}}class ja{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:o,outSize:r}=e;this.outputShape=[a,r];let c="0.0",i="";"prod"===t?c="1.0":"min"===t?(c="1.0 / 1e-20",i="min"):"max"===t&&(c="-1.0 / 1e-20",i="max");let s="".concat(t,"(").concat(t,"(").concat(t,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===t?s="sumValue":"prod"===t?s="prodValue":"all"===t?s="allValue":"any"===t&&(s="anyValue");const l=4*Math.floor(n/4),u=n%4;let d="\n      if (".concat("sum"===t,") {\n        sumValue += dot(values, ones);\n      } else if (").concat("prod"===t,") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ").concat(i,"(values, minMaxValue);\n        if (").concat("min"===t," || ").concat("max"===t,") {\n          minMaxValue = ").concat(i,"(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    "),p="vec4";"all"===t?(c="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(c="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";o%n>0&&(h="\n        if (inIdx < 0 || inIdx >= ".concat(o,") {\n          return initializationValue;\n        }\n      ")),this.userCode="\n      const float initializationValue = ".concat(c,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ").concat(h,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(n,";\n\n        vec4 minMaxValue = vec4(").concat(c,");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ").concat(l,"; i += 4) {\n          int inIdx = inOffset + i;\n          ").concat(p," values = ").concat(p,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(d,"\n        }\n\n        int inIdx = inOffset + ").concat(l,";\n        if (").concat(1===u,") {\n          ").concat(p," values = ").concat(p,"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(d,"\n        } else if (").concat(2===u,") {\n          ").concat(p," values = ").concat(p,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(d,"\n        } else if (").concat(3===u,") {\n          ").concat(p," values = ").concat(p,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ").concat(d,"\n        }\n        setOutput(").concat(s,");\n      }\n    ")}}function Ya(e,t,n,a){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],a=o.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:a,outSize:Math.ceil(n/a)})}return t}(e.shape);let c=e;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:s,outSize:l}=r[o];let u,d;u="mean"===n?0===o?new Ka({windowSize:s,inSize:i,batchSize:e.shape[0],outSize:l},i):new Ka({windowSize:s,inSize:i,batchSize:e.shape[0],outSize:l}):new ja({windowSize:s,inSize:i,batchSize:e.shape[0],outSize:l},n),d=c,c=a.runWebGLProgram(u,[c],t),d.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(d)}return c}class Qa{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const a=re(this.rank),o=function(e){const t=e.length;if(t>6)throw Error("Transpose for rank ".concat(t," is not yet supported"));const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(t);for(let o=0;o<e.length;o++)a[e[o]]=n[o];return a.join()}(t);this.userCode="\n    void main() {\n      ".concat(a," resRC = getOutputCoords();\n      setOutput(getA(").concat(o,"));\n    }\n    ")}}class Za{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let l=0;l<n.length;l++)n[l]=e[t[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank ".concat(this.rank," is not yet supported."));const a=re(this.rank),o=qn("rc",this.rank),r=new Array(this.rank);for(let l=0;l<t.length;l++)r[t[l]]=o[l];const c="vec2(".concat(r.slice(-2).join(),")"),i="++".concat(o[this.rank-1]," < ").concat(n[this.rank-1]),s="getChannel(getA(".concat(r.join(),"), ").concat(c,")");this.userCode="\n    void main() {\n      ".concat(a," rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ").concat(s,";\n      if(").concat(i,") {\n        result[1] = ").concat(s,";\n      }\n      --").concat(o[this.rank-1],";\n      if(++").concat(o[this.rank-2]," < ").concat(n[this.rank-2],") {\n        result[2] = ").concat(s,";\n        if(").concat(i,") {\n          result[3] = ").concat(s,";\n        }\n      }\n      setOutput(result);\n    }\n    ")}}function Ja(e,t,n){const a=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Za(e.shape,t):new Qa(e.shape,t);return n.runWebGLProgram(a,[e],e.dtype)}function $a(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c,keepDims:i}=a;return function(e,t,n,a){const r=t,c=e.shape.length,i=o.util.parseAxisParam(r,e.shape);let s=i;const l=o.backend_util.getAxesPermutation(s,c),u=null!=l;let d=e;u&&(d=Ja(e,l,a),s=o.backend_util.getInnerMostAxes(s.length,c)),o.backend_util.assertAxesAreInnerMostDims("sum",s,c);const[p,h]=o.backend_util.computeOutAndReduceShapes(d.shape,s);let f=p;n&&(f=o.backend_util.expandShapeToKeepDim(p,i));const x=o.util.sizeFromShape(h),m=Ha({inputs:{x:d},attrs:{shape:[o.util.sizeFromShape(e.shape)/x,x]},backend:a}),g=Ya(m,(0,o.sumOutType)(e.dtype),"sum",a),b=Ha({inputs:{x:g},attrs:{shape:f},backend:a});return a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(g),u&&a.disposeIntermediateTensorInfo(d),b}(r,c,i,n)}const eo={kernelName:o.Sum,backendName:"webgl",kernelFunc:$a};function to(e){const{inputs:t,backend:n,attrs:a}=e,{x:o}=t,{perm:r}=a,c=n,i=o.shape.length,s=new Array(i);for(let u=0;u<s.length;u++)s[u]=o.shape[r[u]];let l;if(c.shouldExecuteOnCPU([o])){const e=c.texData.get(o.dataId).values,t=Xn(e,o.shape,o.dtype,r,s);l=c.makeTensorInfo(s,o.dtype);c.texData.get(l.dataId).values=t}else l=Ja(o,r,c);return l}const no={kernelName:o.Transpose,backendName:"webgl",kernelFunc:to},ao=1e3;function oo(e){let{a:t,b:n,transposeA:a,transposeB:r,backend:c,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:l=0,activation:u=null}=e;const d=t.shape.length,p=n.shape.length,h=a?t.shape[d-2]:t.shape[d-1],f=r?n.shape[p-1]:n.shape[p-2],x=a?t.shape[d-1]:t.shape[d-2],m=r?n.shape[p-2]:n.shape[p-1],g=t.shape.slice(0,-2),b=n.shape.slice(0,-2),v=o.util.sizeFromShape(g),C=o.util.sizeFromShape(b),I=o.broadcast_util.assertAndGetBroadcastShape(t.shape.slice(0,-2),n.shape.slice(0,-2)).concat([x,m]);o.util.assert(h===f,(()=>"Error in matMul: inner shapes (".concat(h,") and (")+"".concat(f,") of Tensors with shapes ").concat(t.shape," and ")+"".concat(n.shape," and transposeA=").concat(a)+" and transposeB=".concat(r," must match.")));const y=a?[v,h,x]:[v,x,h],w=r?[C,m,f]:[C,f,m],k=Ha({inputs:{x:t},backend:c,attrs:{shape:y}}),S=Ha({inputs:{x:n},backend:c,attrs:{shape:w}}),R=[k,S],T=Math.max(v,C),E=a?k.shape[1]:k.shape[2],N=null!=i,A=null!=s,_="leakyrelu"===u,O=null!=u?Va(u,!0):null;let F;if((1===x||1===m)&&E>ao&&!1===(N||A||_||null!=O)){let e=k,t=S;a&&(e=to({inputs:{x:k},backend:c,attrs:{perm:[0,2,1]}}),R.push(e)),r&&(t=to({inputs:{x:S},backend:c,attrs:{perm:[0,2,1]}}),R.push(t));const n=1===m;let o=e;1!==m&&(o=Ha({inputs:{x:e},backend:c,attrs:{shape:[T,E,1]}}),R.push(o));const i=1===m?2:1;let s=t;n&&(s=Ha({inputs:{x:t},backend:c,attrs:{shape:[T,1,E]}}),R.push(s));const l=za({inputs:{a:o,b:s},backend:c});F=$a({inputs:{x:l},backend:c,attrs:{axis:i,keepDims:!0}}),R.push(l)}else{const e=(0,o.upcastType)(t.dtype,n.dtype),u=new Wa(y,w,[T,x,m],a,r,N,O,A,_),d=[k,S];if(null!=i&&d.push(i),A&&d.push(s),_){const e=c.makeTensorInfo([],"float32",o.util.createScalarValue(l,"float32"));d.push(e),R.push(e)}F=c.runWebGLProgram(u,d,e)}const D=Ha({inputs:{x:F},backend:c,attrs:{shape:I}});R.push(F);for(const o of R)c.disposeIntermediateTensorInfo(o);return D}const ro={kernelName:o._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:o,b:r,bias:c,preluActivationWeights:i}=t,{transposeA:s,transposeB:l,activation:u,leakyreluAlpha:d}=a;return oo({a:o,b:r,transposeA:s,transposeB:l,backend:n,bias:c,preluActivationWeights:i,leakyreluAlpha:d,activation:u})}},co="return abs(x);";const io={kernelName:o.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){const e=n.texData.get(a.dataId),t=_n(e.values);return n.makeTensorInfo(a.shape,a.dtype,t)}let r;return r=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fa(a.shape,co):new ea(a.shape,co),n.runWebGLProgram(r,[a],a.dtype)}},so=La({opSnippet:ta+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),lo={kernelName:o.Acos,backendName:"webgl",kernelFunc:so},uo=La({opSnippet:ta+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),po={kernelName:o.Acosh,backendName:"webgl",kernelFunc:uo},ho="return a + b;",fo=Ba({opSnippet:ho,packedOpSnippet:ho,supportsComplex:!0,cpuKernelImpl:Jt}),xo={kernelName:o.Add,backendName:"webgl",kernelFunc:fo};class mo{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>"T".concat(t)));const n=[];this.variableNames.forEach((e=>{n.push("float v".concat(e," = get").concat(e,"AtOutCoords();"))}));const a=this.variableNames.map((e=>"v".concat(e))).join(" + ");this.userCode="\n      void main() {\n        ".concat(n.join("\n        "),"\n\n        float result = ").concat(a,";\n        setOutput(result);\n      }\n    ")}}class go{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>"T".concat(t)));const n=[];this.variableNames.forEach((e=>{n.push("vec4 v".concat(e," = get").concat(e,"AtOutCoords();"))}));const a=this.variableNames.map((e=>"v".concat(e))).join(" + ");this.userCode="\n      void main() {\n        ".concat(n.join("\n        "),"\n\n        vec4 result = ").concat(a,";\n        setOutput(result);\n      }\n    ")}}const bo={kernelName:o.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,r=n;if(1===r.length)return Sa({inputs:{x:r[0]},backend:a});if(r.length>(0,o.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:a}),o=e({inputs:r.slice(t),backend:a});return e({inputs:[n,o],backend:a})}const c=r.map((e=>e.dtype)).reduce(((e,t)=>(0,o.upcastType)(e,t))),i=r.map((e=>e.shape)),s=(0,o.env)().getBool("WEBGL_PACK")?new go(r[0].shape,i):new mo(r[0].shape,i);return a.runWebGLProgram(s,r,c)}};const vo={kernelName:o.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c,keepDims:i}=a,s=r.shape.length,l=o.util.parseAxisParam(c,r.shape);let u=l;const d=o.backend_util.getAxesPermutation(u,s);let p=r;null!=d&&(p=to({inputs:{x:r},backend:n,attrs:{perm:d}}),u=o.backend_util.getInnerMostAxes(u.length,s)),o.backend_util.assertAxesAreInnerMostDims("all",u,s);const[h,f]=o.backend_util.computeOutAndReduceShapes(p.shape,u),x=Ha({inputs:{x:p},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),m=Ya(x,x.dtype,"all",n);let g;if(i){g=Ha({inputs:{x:m},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}})}else g=Ha({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),null!=d&&n.disposeIntermediateTensorInfo(p),g}};const Co={kernelName:o.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c,keepDims:i}=a,s=r.shape.length,l=o.util.parseAxisParam(c,r.shape);let u=l;const d=o.backend_util.getAxesPermutation(u,s);let p=r;null!=d&&(p=to({inputs:{x:r},backend:n,attrs:{perm:d}}),u=o.backend_util.getInnerMostAxes(u.length,s)),o.backend_util.assertAxesAreInnerMostDims("any",u,s);const[h,f]=o.backend_util.computeOutAndReduceShapes(p.shape,u),x=Ha({inputs:{x:p},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),m=Ya(x,x.dtype,"any",n);let g;if(i){g=Ha({inputs:{x:m},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}})}else g=Ha({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),null!=d&&n.disposeIntermediateTensorInfo(p),g}};class Io{constructor(e,t,n){this.variableNames=["A"];const{windowSize:a,batchSize:o,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,r];const c="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ".concat(a,";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ").concat(a,"; i++) {\n          int inIdx = ").concat(i,";\n          float candidate = getA(batch, inIdx);\n          if (candidate ").concat(c," bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ")}}class yo{constructor(e,t,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,o.util.assert(e.length>2,(()=>"Packed arg".concat(n.charAt(0).toUpperCase()+n.slice(1)," supports only inputs with rank above 2.")));const r=e[e.length-1],c=Math.ceil(r/t);this.outputShape=e.slice(0,-1),c>1&&this.outputShape.push(c),a||this.variableNames.push("bestIndicesA");const i=this.outputShape,s=i.length,l=re(s),u=Kn("coords",s);let d,p;if(1===c){p=s+1;const e=re(p);d="\n        ".concat(e," sourceLocR = ").concat(e,"(").concat(u.join(),", 0);\n        ++").concat(u[s-1],";\n        ").concat(e," sourceLocG = ").concat(e,"(").concat(u.join(),", 0);\n        ++").concat(u[s-2],";\n        ").concat(e," sourceLocA = ").concat(e,"(").concat(u.join(),", 0);\n        --").concat(u[s-1],";\n        ").concat(e," sourceLocB = ").concat(e,"(").concat(u.join(),", 0);\n        --").concat(u[s-2],";")}else p=s,d="\n        ".concat(l," sourceLocR = coords;\n        ++").concat(u[s-1],";\n        ").concat(l," sourceLocG = coords;\n        ++").concat(u[s-2],";\n        ").concat(l," sourceLocA = coords;\n        --").concat(u[s-1],";\n        ").concat(l," sourceLocB = coords;\n        --").concat(u[s-2],";");const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],x=h.map((e=>"int "+e)),m=Kn("sourceLocR",p-1).concat("inIdx.r"),g=Kn("sourceLocG",p-1).concat("inIdx.g"),b=Kn("sourceLocB",p-1).concat("inIdx.b"),v=Kn("sourceLocA",p-1).concat("inIdx.a"),C="max"===n?"greaterThan":"lessThan",I=a?"":"\n          inIdx = round(vec4(getBestIndicesAChannel(".concat(m.join(),"),\n                             getBestIndicesAChannel(").concat(g.join(),"),\n                             getBestIndicesAChannel(").concat(b.join(),"),\n                             getBestIndicesAChannel(").concat(v.join(),")));"),y="vec4(\n            getAChannel(".concat(m.join(),"),\n            hasNextCol ? getAChannel(").concat(g.join(),") : 0.,\n            hasNextRow ? getAChannel(").concat(b.join(),") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(").concat(v.join(),") : 0.)"),w=a?"":"\n      float getBestIndicesAChannel(".concat(x.join(),") {\n        return getChannel(getBestIndicesA(").concat(h.join(),"),\n                                          vec2(").concat(h.slice(-2).join(),"));\n      }");this.userCode="\n      float getAChannel(".concat(x.join(),") {\n        return getChannel(getA(").concat(h.join(),"),\n                               vec2(").concat(h.slice(-2).join(),"));\n      }\n      ").concat(w,"\n      void main() {\n        ").concat(l," coords = getOutputCoords();\n        bool hasNextCol = ").concat(u[s-1]," < ").concat(i[s-1]-1,";\n        bool hasNextRow = ").concat(u[s-2]," < ").concat(i[s-2]-1,";\n        ").concat(d,"\n        ivec4 srcIdx = ivec4(sourceLocR").concat(f,", sourceLocG").concat(f,",\n          sourceLocB").concat(f,", sourceLocA").concat(f,") * ").concat(t,";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ").concat(y,";\n\n        for (int i = 0; i < ").concat(t,"; i++) {\n          inIdx = srcIdx;\n          ").concat(I,"\n          vec4 candidate = ").concat(y,";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(").concat(C,"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ")}}function wo(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=t.shape[0],c=t.shape[1];null!=a&&(r=a.shape[0],c=a.shape[1]);const i=o.backend_util.computeOptimalWindowSize(c),s={windowSize:i,inSize:c,batchSize:r,outSize:Math.ceil(c/i)},l=new Io(s,n,null==a),u=[t];null!=a&&u.push(a);const d=e.runWebGLProgram(l,u,"int32");if(1===d.shape[1])return d;const p=wo(e,t,n,d);return e.disposeIntermediateTensorInfo(d),p}function ko(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const r=null!=a?a.shape:t.shape,c=r[r.length-1],i=o.backend_util.computeOptimalWindowSize(c),s=new yo(r,i,n,null==a),l=null==a?[t]:[t,a],u=e.runWebGLProgram(s,l,"int32");if(u.shape.length===t.shape.length){const a=ko(e,t,n,u);return e.disposeIntermediateTensorInfo(u),a}return u}function So(e,t,n,a){const r=[n];if(o.backend_util.assertAxesAreInnerMostDims("arg"+a.charAt(0).toUpperCase()+a.slice(1),r,t.shape.length),!(0,o.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],c=e.texData.get(t.dataId);let i=t;null!==c&&c.isPacked&&(i=e.unpackTensor(t),n.push(i));const[s,l]=o.backend_util.computeOutAndReduceShapes(i.shape,r),u=o.util.sizeFromShape(l),d=Ha({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(d);const p=wo(e,d,a);n.push(p);const h=Ha({inputs:{x:p},backend:e,attrs:{shape:s}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return ko(e,t,a)}const Ro={kernelName:o.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c}=a;let i=o.util.parseAxisParam(c,r.shape);const s=o.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=s&&(l=to({inputs:{x:r},backend:n,attrs:{perm:s}}),u.push(l),i=o.backend_util.getInnerMostAxes(i.length,l.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const d=So(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const To={kernelName:o.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c}=a;let i=o.util.parseAxisParam(c,r.shape);const s=o.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=s&&(l=to({inputs:{x:r},backend:n,attrs:{perm:s}}),u.push(l),i=o.backend_util.getInnerMostAxes(i.length,l.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const d=So(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},Eo=La({opSnippet:ta+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),No={kernelName:o.Asin,backendName:"webgl",kernelFunc:Eo},Ao=La({opSnippet:ta+"return log(x + sqrt(x * x + 1.0));"}),_o={kernelName:o.Asinh,backendName:"webgl",kernelFunc:Ao},Oo=La({opSnippet:ta+"\n  return atan(x);\n"}),Fo={kernelName:o.Atan,backendName:"webgl",kernelFunc:Oo},Do=Ba({opSnippet:Ia+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wa+"\n  return result;\n"}),Po={kernelName:o.Atan2,backendName:"webgl",kernelFunc:Do},Lo=La({opSnippet:ta+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Bo={kernelName:o.Atanh,backendName:"webgl",kernelFunc:Lo};class Vo{constructor(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,c=e.strideHeight,i=e.strideWidth,s=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,x="((batch  * ".concat(e.inHeight," + xR) * ").concat(e.inWidth," + xC) * ").concat(e.inChannels," + d"),m="(xR * ".concat(e.inWidth," + xC) * ").concat(e.inChannels," + d");let g="0.0";if(f||(g="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode="\n        const ivec2 strides = ivec2(".concat(c,", ").concat(i,");\n        const ivec2 pads = ivec2(").concat(p,", ").concat(h,");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ").concat(u,";\n              wR += ").concat(s,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(e.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(d,";\n                wC += ").concat(l,") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ").concat(t," currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ").concat(a?o?x:m:"wR * ".concat(d," + wC"),";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      "))}let b="".concat(t,"(").concat(t,"(").concat(t,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(b="avgValue / count");const v=4*Math.floor(r/4),C=r%4,I="\n      if (".concat(f,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ").concat("max","(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec2 strides = ivec2(".concat(c,", ").concat(i,");\n      const ivec2 pads = ivec2(").concat(p,", ").concat(h,");\n      const float initializationValue = ").concat(g,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ").concat(e.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(g,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ").concat(u,";\n            wR += ").concat(s,") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ").concat(e.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(v,"; wC += 4) {\n            int xC = xCCorner + wC * ").concat(l,";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              getValue(batch, xR, xC + 2 * ").concat(l,", d),\n              getValue(batch, xR, xC + 3 * ").concat(l,", d)\n            );\n\n            ").concat(I,"\n          }\n\n          int xC = xCCorner + ").concat(v,";\n          if (").concat(1===C,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(I,"\n          } else if (").concat(2===C,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(I,"\n          } else if (").concat(3===C,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              getValue(batch, xR, xC + 2 * ").concat(l,", d),\n              initializationValue\n            );\n\n            ").concat(I,"\n          }\n        }\n        setOutput(").concat(b,");\n      }\n    ")}}class Wo{constructor(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,c=e.strideDepth,i=e.strideHeight,s=e.strideWidth,l=e.dilationDepth,u=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,x=e.padInfo.front,m=e.padInfo.top,g=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let v="0.0";if(b||(v="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode="\n        const ivec3 strides =\n            ivec3(".concat(c,", ").concat(i,", ").concat(s,");\n        const ivec3 pads = ivec3(").concat(x,", ").concat(m,", ").concat(g,");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ").concat(p,";\n              wD += ").concat(l,") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ").concat(e.inDepth,") {\n              continue;\n            }\n\n            for (int wR = 0; wR < ").concat(h,";\n                wR += ").concat(u,") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ").concat(e.inHeight,") {\n                continue;\n              }\n\n              for (int wC = 0; wC < ").concat(f,";\n                  wC += ").concat(d,") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ").concat(t," currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ").concat(a?o?"(((batch * ".concat(e.inDepth," + xD) * ").concat(e.inHeight," + xR) * ").concat(e.inWidth," + xC) * ").concat(e.inChannels," + ch"):"((xD * ".concat(e.inHeight," + xR) * ").concat(e.inWidth," + xC) * ").concat(e.inChannels," + ch"):"wD * ".concat(h," * ").concat(f," +\n                      wR * ").concat(f," + wC"),";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      "))}let C="".concat(t,"(").concat(t,"(").concat(t,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(C="avgValue / count");const I=4*Math.floor(r/4),y=r%4,w="\n      if (".concat(b,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ").concat("max","(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec3 strides =\n        ivec3(".concat(c,", ").concat(i,", ").concat(s,");\n      const ivec3 pads = ivec3(").concat(x,", ").concat(m,", ").concat(g,");\n      const float initializationValue = ").concat(v,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ").concat(e.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(v,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ").concat(p,";\n            wD += ").concat(l,") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ").concat(e.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(h,";\n            wR += ").concat(u,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(e.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(I,"; wC += 4) {\n              int xC = xCCorner + wC * ").concat(d,";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(d,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(d,", ch),\n                getValue(batch, xD, xR, xC + 3 * ").concat(d,", ch)\n              );\n\n              ").concat(w,"\n            }\n\n            int xC = xCCorner + ").concat(I,";\n            if (").concat(1===y,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(w,"\n            } else if (").concat(2===y,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(d,", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(w,"\n            } else if (").concat(3===y,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(d,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(d,", ch),\n                initializationValue\n              );\n\n              ").concat(w,"\n            }\n          }\n          setOutput(").concat(C,");\n        }\n      }\n    ")}}const Uo={kernelName:o.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;M(r,"avgPool");const{filterSize:c,strides:i,pad:s,dimRoundingMode:l}=a;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>"Error in avgPool: Either strides or dilations must be 1. "+"Got strides ".concat(i," and dilations '").concat(1,"'")));const u=o.backend_util.computePool2DInfo(r.shape,c,i,1,s,l);if(1===u.filterWidth&&1===u.filterHeight&&o.util.arraysEqual(u.inShape,u.outShape))return Sa({inputs:{x:r},backend:n});const d=new Vo(u,"avg",!1);return n.runWebGLProgram(d,[r],"float32")}};const Mo={kernelName:o.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:c,strides:i,pad:s,dimRoundingMode:l,dataFormat:u}=a,d=o.backend_util.computePool3DInfo(r.shape,c,i,[1,1,1],s,l,u),p=new Wo(d,"avg",!1);return n.runWebGLProgram(p,[r],"float32")}};class Go{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,o=e.strideWidth,r=e.dilationHeight,c=e.dilationWidth,i=e.effectiveFilterHeight,s=e.effectiveFilterWidth,l=i-1-e.padInfo.top,u=s-1-e.padInfo.left,d=1/(t*n);this.userCode="\n      const ivec2 pads = ivec2(".concat(l,", ").concat(u,");\n      const float avgMultiplier = float(").concat(d,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(i,";\n            wR += ").concat(r,") {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(s,";\n            wC+= ").concat(c,") {\n            float dyC = float(dyCCorner + wC) / ").concat(o,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class zo{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,o=e.strideDepth,r=e.strideHeight,c=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=u-1-e.padInfo.front,f=d-1-e.padInfo.top,x=p-1-e.padInfo.left,m=1/(t*n*a);this.userCode="\n      const ivec3 pads = ivec3(".concat(h,", ").concat(f,", ").concat(x,");\n      const float avgMultiplier = float(").concat(m,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(u,";\n            wD += ").concat(i,") {\n          float dyD = float(dyDCorner + wD) / ").concat(o,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(e.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(d,";\n              wR += ").concat(s,") {\n            float dyR = float(dyRCorner + wR) / ").concat(r,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(p,";\n                wC += ").concat(l,") {\n              float dyC = float(dyCCorner + wC) / ").concat(c,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const Xo={kernelName:o.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:c}=t,i=c,{filterSize:s,strides:l,pad:u,dimRoundingMode:d}=a,p=o.backend_util.computePool3DInfo(i.shape,s,l,[1,1,1],u,d),h=new zo(p);return n.runWebGLProgram(h,[r],i.dtype)}};const Ho={kernelName:o.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:c}=t,i=c;M([r,c],"avgPoolGrad");const{filterSize:s,strides:l,pad:u}=a,d=o.backend_util.computePool2DInfo(i.shape,s,l,1,u),p=new Go(d);return n.runWebGLProgram(p,[r],i.dtype)}};const qo={kernelName:o.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:o,b:r}=t,{transposeA:c,transposeB:i}=a;return oo({a:o,b:r,transposeA:c,transposeB:i,backend:n})}};class Ko{constructor(e,t,n,a,r,c){this.outputShape=[],this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=a&&(o.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let s="1.0";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=e,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ".concat(i,";\n        float scale = ").concat(s,";\n        float inv = scale * inversesqrt(variance + float(").concat(c,"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ")}}class jo{constructor(e,t,n,a,r,c){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=a&&(o.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let s="vec4(1.0)";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=e,this.userCode="\n      void main() {\n        vec4 offset = ".concat(i,";\n        vec4 scale = ").concat(s,";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(").concat(c,"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ")}}const Yo={kernelName:o.FusedBatchNorm,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e;const{x:r,mean:c,variance:i,offset:s,scale:l}=t;o.util.assert(c.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.util.assert(null==s||c.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.util.assert(null==l||c.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=a;null==u&&(u=.001);const d=[r,c,i];let p=null;null!=s&&(p=s.shape,d.push(s));let h=null;null!=l&&(h=l.shape,d.push(l));const f=(0,o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new jo(r.shape,c.shape,i.shape,p,h,u):new Ko(r.shape,c.shape,i.shape,p,h,u);return n.runWebGLProgram(f,d,d[0].dtype)}};class Qo{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=re(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Zo.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error("Slicing for rank ".concat(e," is not yet supported"))}(this.rank);let a;const o=e.map(((e,t)=>"sourceLoc.".concat(Zo[t]," = start[").concat(t,"] + coords.").concat(Zo[t],";")));a="\n        ".concat(t," sourceLoc;\n        ").concat(t," coords = getOutputCoords();\n        ").concat(o.join("\n"),"\n      "),this.userCode="\n      void main() {\n        ".concat(a,"\n        setOutput(getSource(").concat(n,"));\n      }\n    ")}}const Zo=["x","y","z","w","u","v"];class Jo{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=re(this.rank),n=Kn("coords",this.rank),a=Kn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2(".concat(a.slice(-2).join(),")"),r="getChannel(getSource(".concat(a.join(),"), ").concat(o,")"),c="\n      result.x = ".concat(r,";\n      if (++").concat(n[this.rank-1]," < ").concat(e[this.rank-1],") {\n        ++").concat(a[this.rank-1],";\n        result.y = ").concat(r,";\n        --").concat(a[this.rank-1],";\n      }\n    "),i=1===this.rank?"":"\n      --".concat(n[this.rank-1],";\n      if (++").concat(n[this.rank-2]," < ").concat(e[this.rank-2],") {\n        ++").concat(a[this.rank-2],";\n        result.z = ").concat(r,";\n        if (++").concat(n[this.rank-1]," < ").concat(e[this.rank-1],") {\n          ++").concat(a[this.rank-1],";\n          result.w = ").concat(r,";\n        }\n      }\n    "),s=this.rank<=4?"sourceLoc = coords +\n            ".concat(t,"(").concat(e.map(((e,t)=>"start[".concat(t,"]"))).join(),");"):e.map(((e,t)=>"".concat(a[t]," = ").concat(n[t]," + start[").concat(t,"];"))).join("\n");this.userCode="\n      void main() {\n        ".concat(t," coords = getOutputCoords();\n        ").concat(t," sourceLoc;\n        ").concat(s,"\n        vec4 result = vec4(0.);\n        ").concat(c,"\n        ").concat(i,"\n        setOutput(result);\n      }\n    ")}}function $o(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:c,size:i}=a,[s,l]=o.slice_util.parseSliceParams(r,c,i);if(o.slice_util.assertParamsValid(r,s,l),0===o.util.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=On(e.values,s,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),d=o.slice_util.isSliceContinous(r.shape,s,l);if(u||!d){const e=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Jo(l):new Qo(l),t=[s];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,a){const r=a.texData.get(e.dataId),c=a.makeTensorInfo(n,e.dtype),i=a.texData.get(c.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let s=o.slice_util.computeFlatOffset(t,o.util.computeStrides(e.shape));r.slice&&(s+=r.slice.flatOffset),i.slice={flatOffset:s,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=a.dataRefCount.get(i.slice.origDataId)||1;return a.dataRefCount.set(i.slice.origDataId,l+1),c}(r,s,l,n)}const er={kernelName:o.Slice,backendName:"webgl",kernelFunc:$o},tr={kernelName:o.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:c,crops:i}=a;o.util.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const s=c.reduce(((e,t)=>e*t)),l=o.backend_util.getReshaped(r.shape,c,s),u=o.backend_util.getPermuted(l.length,c.length),d=o.backend_util.getReshapedPermuted(r.shape,c,s),p=o.backend_util.getSliceBeginCoords(i,c.length),h=o.backend_util.getSliceSize(d,i,c.length),f=[],x=Ha({inputs:{x:r},backend:n,attrs:{shape:l}}),m=to({inputs:{x:x},backend:n,attrs:{perm:u}}),g=Ha({inputs:{x:m},backend:n,attrs:{shape:d}}),b=$o({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return f.push(x),f.push(m),f.push(g),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const nr={kernelName:o.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:o,weights:r}=t,{size:c}=a,i=n.readSync(o.dataId),s=n.readSync(r.dataId),l=$t(i,s,r.dtype,r.shape,c);return n.makeTensorInfo([c],r.dtype,l)}};const ar={kernelName:o.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:a,s1:r}=t,c=n.readSync(a.dataId),i=n.readSync(r.dataId),s=o.backend_util.assertAndGetBroadcastShape(Array.from(c),Array.from(i));return n.makeTensorInfo([s.length],"int32",Int32Array.from(s))}},or=Ba({opSnippet:"return float(a != b);",cpuKernelImpl:yn,dtype:"bool"}),rr={kernelName:o.NotEqual,backendName:"webgl",kernelFunc:or};function cr(e){const{inputs:t,backend:n}=e,{input:a}=t;return Sa({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.real},backend:n})}const ir={kernelName:o.Real,backendName:"webgl",kernelFunc:cr},sr="return float(int(x));";const lr={kernelName:o.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a,attrs:r}=t,{x:c}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===c.dtype)return Sa({inputs:{x:c},backend:a});const t=o.zeros(c.shape),n=e({inputs:{x:c},backend:a,attrs:{dtype:"float32"}}),r=Ta({inputs:{real:n,imag:t},backend:a});return t.dispose(),a.disposeIntermediateTensorInfo(n),r}if("complex64"===c.dtype){const t=cr({inputs:{input:c},backend:a}),n=e({inputs:{x:t},backend:a,attrs:{dtype:i}});return a.disposeIntermediateTensorInfo(t),n}if(!o.util.hasEncodingLoss(c.dtype,i)){const e=Sa({inputs:{x:c},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(a.shouldExecuteOnCPU([c])){const e=a.texData.get(c.dataId).values,[t,n,o]=tn(e,c.shape,c.dtype,i);return a.makeTensorInfo(t,n,o)}if("int32"===i)return function(e,t){const n=new ea(e.shape,sr),a=t.runWebGLProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(c,a);if("bool"===i){const e=a.makeTensorInfo([],"bool",o.util.getTypedArrayFromDType("bool",1)),t=or({inputs:{a:c,b:e},backend:a});return a.disposeIntermediateTensorInfo(e),t}throw new Error("Error in Cast: failed to cast ".concat(c.dtype," to ").concat(i))}},ur="return ceil(x);",dr=La({opSnippet:ur,packedOpSnippet:ur,cpuKernelImpl:nn}),pr={kernelName:o.Ceil,backendName:"webgl",kernelFunc:dr};class hr{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class fr{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const xr={kernelName:o.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{clipValueMin:c,clipValueMax:i}=a;let s;s=(0,o.env)().getBool("WEBGL_PACK_CLIP")?new fr(r.shape):new hr(r.shape);const l=[[c],[i]];return n.runWebGLProgram(s,[r],r.dtype,l)}};class mr{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function gr(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const br={kernelName:o.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,o=n.texData.get(a.dataId),r=new mr(a.shape),c=[gr(a,o.complexTensorInfos.real),gr(a,o.complexTensorInfos.imag)];return n.runWebGLProgram(r,c,c[0].dtype)}};class vr{constructor(e){this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>"T".concat(t)));const t=new Array(e.length-1);t[0]=e[0][1];for(let o=1;o<t.length;o++)t[o]=t[o-1]+e[o][1];const n=["if (yC < ".concat(t[0],") setOutput(getT0(yR, yC));")];for(let o=1;o<t.length;o++){const e=t[o-1];n.push("else if (yC < ".concat(t[o],") ")+"setOutput(getT".concat(o,"(yR, yC-").concat(e,"));"))}const a=t.length,r=t[t.length-1];n.push("else setOutput(getT".concat(a,"(yR, yC-").concat(r,"));")),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ".concat(n.join("\n        "),"\n      }\n    ")}}class Cr{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,t);const n=this.outputShape,a=n.length,r=re(a),c=Kn("coords",a),i=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map(((e,t)=>"T".concat(t)));const s=new Array(e.length-1);s[0]=e[0][t];for(let o=1;o<s.length;o++)s[o]=s[o-1]+e[o][t];const l=i[t],u=i.slice(-2),d=i.join();let p="if (".concat(l," < ").concat(s[0],") {\n        return getChannel(\n            getT0(").concat(d,"), vec2(").concat(u.join(),"));\n        }");for(let o=1;o<s.length;o++){const e=s[o-1];p+="\n        if (".concat(l," < ").concat(s[o],"  && ").concat(l," >= ").concat(s[o-1],") {\n          return getChannel(\n            getT").concat(o,"(").concat(Ir(i,l,e),"),\n            vec2(").concat(Ir(u,l,e),"));\n        }")}const h=s.length,f=s[s.length-1];p+="\n        return getChannel(\n          getT".concat(h,"(").concat(Ir(i,l,f),"),\n          vec2(").concat(Ir(u,l,f),"));"),this.userCode="\n      float getValue(".concat(i.map((e=>"int "+e)),") {\n        ").concat(p,"\n      }\n\n      void main() {\n        ").concat(r," coords = getOutputCoords();\n        vec4 result = vec4(getValue(").concat(c,"), 0., 0., 0.);\n\n        ").concat(c[a-1]," = ").concat(c[a-1]," + 1;\n        if (").concat(c[a-1]," < ").concat(n[a-1],") {\n          result.g = getValue(").concat(c,");\n        }\n\n        ").concat(c[a-2]," = ").concat(c[a-2]," + 1;\n        if (").concat(c[a-2]," < ").concat(n[a-2],") {\n          result.a = getValue(").concat(c,");\n        }\n\n        ").concat(c[a-1]," = ").concat(c[a-1]," - 1;\n        if (").concat(c[a-2]," < ").concat(n[a-2]," &&\n            ").concat(c[a-1]," < ").concat(n[a-1],") {\n          result.b = getValue(").concat(c,");\n        }\n        setOutput(result);\n      }\n    ")}}function Ir(e,t,n){const a=e.indexOf(t);return e.map(((e,t)=>t===a?"".concat(e," - ").concat(n):e)).join()}function yr(e){const{inputs:t,backend:n}=e,{input:a}=t;return Sa({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.imag},backend:n})}const wr={kernelName:o.Imag,backendName:"webgl",kernelFunc:yr};function kr(e,t,n){const a=e[0].dtype;if("complex64"===a){const a=e.map((e=>cr({inputs:{input:e},backend:n}))),o=e.map((e=>yr({inputs:{input:e},backend:n}))),r=kr(a,t,n),c=kr(o,t,n),i=Ta({inputs:{real:r,imag:c},backend:n});return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),o.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(c),i}let r=n.shouldExecuteOnCPU(e);if("string"===a&&(r=!0),r){const r=e.map((e=>{const a=o.util.sizeFromShape(e.shape.slice(t));return Ha({inputs:{x:e},backend:n,attrs:{shape:[-1,a]}})})),c=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=o.backend_util.computeOutShape(r.map((e=>e.shape)),1),s=1===r[0].shape[0],l=an(c,i,a,s),u=o.backend_util.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(u,a,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const c=e.filter((e=>o.util.sizeFromShape(e.shape)>0)),i=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&c[0].shape.length>1;if(1===c.length){const t=i?new ea(e[0].shape,ia):new fa(e[0].shape,ia);return n.runWebGLProgram(t,e,a)}const s=(0,o.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(c.length>s){const e=[];for(let o=0;o<c.length;o+=s){const a=c.slice(o,o+s);e.push(kr(a,t,n))}const a=kr(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return a}if(i){const e=new Cr(c.map((e=>e.shape)),t);return n.runWebGLProgram(e,c,a)}const{tensors2D:l,outShape:u}=function(e,t,n){const a=o.backend_util.computeOutShape(e.map((e=>e.shape)),t),r=e.map((e=>Ha({inputs:{x:e},attrs:{shape:[-1,o.util.sizeFromShape(e.shape.slice(t))]},backend:n})));return{tensors2D:r,outShape:a}}(c,t,n),d=new vr(l.map((e=>e.shape))),p=n.runWebGLProgram(d,l,a);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const h=Ha({inputs:{x:p},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(p),h}function Sr(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,c=o.util.parseAxisParam(r,t[0].shape)[0],i=t.map((e=>e.shape));o.backend_util.assertParamsConsistent(i,c);const s=o.backend_util.computeOutShape(t.map((e=>e.shape)),c);if(0===o.util.sizeFromShape(s))return n.makeTensorInfo(s,t[0].dtype,[]);const l=t.filter((e=>o.util.sizeFromShape(e.shape)>0));return 1===l.length?Sa({inputs:{x:l[0]},backend:n}):kr(l,c,n)}const Rr={kernelName:o.Concat,backendName:"webgl",kernelFunc:Sr};class Tr{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,c=e.padInfo.left,i=e.strideHeight,s=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,x="channelsLast"===e.dataFormat,m=x?1:2,g=x?2:3,b=x?3:1;let v="",C="";n&&(v=a?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):o?"float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"\n          float activation(float x) {\n            ".concat(n,"\n          }\n        "),C="result = activation(result);");const I=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(v,"\n\n      const ivec2 strides = ivec2(").concat(i,", ").concat(s,");\n      const ivec2 pads = ivec2(").concat(r,", ").concat(c,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[").concat(b,"];\n\n        ivec2 xRCCorner =\n            ivec2(coords[").concat(m,"], coords[").concat(g,"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(d,"; wR++) {\n          int xR = xRCorner + wR * ").concat(l,";\n\n          if (xR < 0 || xR >= ").concat(e.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(p,"; wC++) {\n            int xC = xCCorner + wC * ").concat(u,";\n\n            if (xC < 0 || xC >= ").concat(e.inWidth,") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ").concat(h,"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (").concat(x,") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (").concat(1===f,") {\n\n              if (").concat(x,") {\n                dotProd +=\n                    getX(batch, xR, xC, ").concat(h,") *\n                    getW(wR, wC, ").concat(h,", d2);\n              } else {\n                dotProd +=\n                    getX(batch, ").concat(h,", xR, xC) *\n                    getW(wR, wC, ").concat(h,", d2);\n              }\n\n            } else if (").concat(2===f,") {\n              vec2 wValues = vec2(\n                getW(wR, wC, ").concat(h,", d2),\n                getW(wR, wC, ").concat(h," + 1, d2)\n              );\n\n              if (").concat(x,") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ").concat(h,"),\n                  getX(batch, xR, xC, ").concat(h," + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ").concat(h,", xR, xC),\n                  getX(batch, ").concat(h," + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (").concat(3===f,") {\n              vec3 wValues = vec3(\n                getW(wR, wC, ").concat(h,", d2),\n                getW(wR, wC, ").concat(h," + 1, d2),\n                getW(wR, wC, ").concat(h," + 2, d2)\n              );\n\n              if (").concat(x,") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ").concat(h,"),\n                  getX(batch, xR, xC, ").concat(h," + 1),\n                  getX(batch, xR, xC, ").concat(h," + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ").concat(h,", xR, xC),\n                  getX(batch, ").concat(h," + 1, xR, xC),\n                  getX(batch, ").concat(h," + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ").concat(I,"\n        ").concat(C,"\n        setOutput(result);\n      }\n    ")}}class Er{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,a=e.padInfo.left,o=e.strideDepth,r=e.strideHeight,c=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,l=e.dilationWidth,u=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3(".concat(o,", ").concat(r,", ").concat(c,");\n      const ivec3 pads = ivec3(").concat(t,", ").concat(n,", ").concat(a,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(u,"; wF++) {\n          int xF = xFCorner + wF * ").concat(i,";\n\n          if (xF < 0 || xF >= ").concat(e.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(d,"; wR++) {\n            int xR = xRCorner + wR * ").concat(s,";\n\n            if (xR < 0 || xR >= ").concat(e.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(p,"; wC++) {\n              int xC = xCCorner + wC * ").concat(l,";\n\n              if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ").concat(h,"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (").concat(1===f,") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ").concat(h,") *\n                  getW(wF, wR, wC, ").concat(h,", d2);\n              } else if (").concat(2===f,") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ").concat(h,"),\n                  getX(batch, xF, xR, xC, ").concat(h," + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ").concat(h,", d2),\n                  getW(wF, wR, wC, ").concat(h," + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (").concat(3===f,") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ").concat(h,"),\n                  getX(batch, xF, xR, xC, ").concat(h," + 1),\n                  getX(batch, xF, xR, xC, ").concat(h," + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ").concat(h,", d2),\n                  getW(wF, wR, wC, ").concat(h," + 1, d2),\n                  getW(wF, wR, wC, ").concat(h," + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class Nr{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pe(this.outputShape.length);const c=e.padInfo.left,i=e.strideWidth,s=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,d=u;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let o=0;o<u;o++)p+="\n           vec4 xTexelC".concat(2*o,";\n           int xTexelC").concat(2*o,"Ready;\n           vec4 xTexelC").concat(2*o+1,";\n           int xTexelC").concat(2*o+1,"Ready;\n           vec4 xC").concat(o,";");p+="\n     for (int r = 0; r < ".concat(l,"; r++) {\n      for (int d1 = 0; d1 < ").concat(e.inChannels,"; d1 += 2) {\n       ");for(let o=0;o<u;o++)p+="\n           xTexelC".concat(2*o," = vec4(0.0);\n           xTexelC").concat(2*o,"Ready = 0;\n           xTexelC").concat(2*o+1," = vec4(0.0);\n           xTexelC").concat(2*o+1,"Ready = 0;\n           xC").concat(o," = vec4(0.0);");p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(d+1)/2;m++){const t=2*m;if(p+="\n           xC = xCCorner + ".concat(t*s,";\n           "),1===i){if(t<u&&(c%2===1?(p+="\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                   xTexelC").concat(t," = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(t,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(t,"Ready = 1;\n                 }\n               "),p+=1===s&&t>0?"\n                 xC".concat(t," = vec4(xTexelC").concat(t-2,".zw, xTexelC").concat(t,".xy);\n                 "):"\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC".concat(t," = vec4(previous.zw, xTexelC").concat(t,".xy);\n                   } else {\n                     xC").concat(t," = vec4(0.0, 0.0, xTexelC").concat(t,".xy);\n                   }\n                   ")):p+="\n                 if (xC >= 0 && xC < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                   xTexelC").concat(t," = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC").concat(t,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(t,"Ready = 1;\n                 }\n\n                 xC").concat(t," = xTexelC").concat(t,";\n                 "),t+1<u)){const e=c%2===0?o.util.nearestLargerEven(s):s;s%2===0&&c%2===1||s%2!==0&&c%2!==1?(p+="\n                   xCOffset = xC + imod(pads[1], 2) + ".concat(e,";\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                     xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC").concat(t+1,".zw = vec2(0.0);\n                     }\n                     xTexelC").concat(t+1,"Ready = 1;\n                   }\n                   "),p+=s>1?"\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC".concat(t+1," = vec4(previous.zw, xTexelC").concat(t+1,".xy);\n                     } else {\n                      xC").concat(t+1," = vec4(0.0, 0.0, xTexelC").concat(t+1,".xy);\n                     }\n                     "):"\n                     xC".concat(t+1," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".xy);\n                     ")):p+=1===e?"\n                     xC".concat(t+1," = xTexelC").concat(t,";\n                     "):"\n                     xCOffset = xC + ".concat(e,";\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                       xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC").concat(t+1,".zw = vec2(0.0);\n                       }\n                       xTexelC").concat(t+1,"Ready = 1;\n                     }\n\n                     xC").concat(t+1," = xTexelC").concat(t+1,";\n                     ")}}else t<u&&(c%2===1?(p+="\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                   xTexelC").concat(t," = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(t,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(t,"Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                   xTexelC").concat(t+1," = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC").concat(t+1,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(t+1,"Ready = 1;\n                 }\n\n                 xC").concat(t," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".zw);\n               "),t+1<u&&(p+="\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC".concat(t+1," = vec4(xTexelC").concat(t+1,".xy, final.xy);\n                 "))):(p+="\n                 if(xC >= 0 && xC < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                   xTexelC").concat(t," = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC").concat(t,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(t,"Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                   xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(t+1,".zw = vec2(0.);\n                   }\n                   xTexelC").concat(t+1,"Ready = 1;\n                 }\n\n                 xC").concat(t," = vec4(\n                   xTexelC").concat(t,".xy, xTexelC").concat(t+1,".xy);\n               "),t+1<u&&(p+="\n                   xC".concat(t+1," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".zw);\n                 "))));t<u&&(p+="\n             wTexel = getW(r, ".concat(t,", d1, d2);\n             dotProd += xC").concat(t,".xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ").concat(e.inChannels,") {\n               dotProd += xC").concat(t,".yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           "),t+1<u&&(p+="\n               wTexel = getW(r, ".concat(t+1,", d1, d2);\n               dotProd += xC").concat(t+1,".xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ").concat(e.inChannels,") {\n                 dotProd += xC").concat(t+1,".yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             ")))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let h="",f="";n&&(h=a?"vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ".concat(n,"\n         }"):r?"vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ".concat(n,"\n         }"):"vec4 activation(vec4 x) {\n           ".concat(n,"\n         }"),f="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n       ".concat(h,"\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ").concat(p,"\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ").concat(x,"\n         ").concat(f,"\n         setOutput(result);\n       }\n     ")}}class Ar{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=pe(this.outputShape.length);const{dataFormat:n}=t,a=z(),o="channelsLast"===n,r=o?1:2,c=o?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":"if(blockIndex < ".concat(e[2]," && pos < ").concat(e[1],") {");let s="";for(let l=0;l<=1;l++)for(let e=0;e<=1;e++)s+="\n          blockIndex = rc.z + ".concat(e,";\n          pos = rc.y + ").concat(l,";\n\n          ").concat(i,"\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[").concat(r,"] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[").concat(c,"] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (").concat(o,") {\n                  innerDims = vec2(d1, ch);\n                  result[").concat(2*l+e,"] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[").concat(2*l+e,"] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ");this.userCode="\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ".concat(s,"\n\n        ").concat(a.output," = result;\n      }\n    ")}}function _r(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function Or(e){let{x:t,filter:n,convInfo:a,backend:r,bias:c=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:l=null}=e;const u=t.shape,d=r.texData.get(t.dataId),p=a.inChannels,h=u[0]*u[1]*u[2],f=a.outChannels,x="channelsLast"===a.dataFormat;let m;const g=[];if(null!=i){const e=_r(i.shape,x);null!=e&&(i=Ha({inputs:{x:i},backend:r,attrs:{shape:e}}),g.push(i))}if(null!=c){const e=_r(c.shape,x);null!=e&&(c=Ha({inputs:{x:c},backend:r,attrs:{shape:e}}),g.push(c))}if(!((1===h||1===f)&&p>ao)&&d.isPacked&&x&&null!=d.texture&&u[2]%2!==0&&o.util.arraysEqual(d.shape.slice(-3),u.slice(-3))){const e=u[0]*u[1]*(u[2]+1),p={dataId:t.dataId,shape:[1,e,a.inChannels],dtype:t.dtype},h=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,o.util.assert(D(d.shape,p.shape),(()=>"packed reshape ".concat(d.shape," to ").concat(p.shape," isn't free")));const f=Ha({inputs:{x:n},backend:r,attrs:{shape:[1,a.inChannels,a.outChannels]}});g.push(f);const x=oo({a:p,b:f,backend:r,transposeA:false,transposeB:false,bias:c,activation:l,preluActivationWeights:i,leakyreluAlpha:s}),b=r.texData.get(x.dataId);o.util.assert(b.isPacked,(()=>"batchMatMul result is expected to be packed")),d.shape=h,b.shape=a.outShape,m=Sa({inputs:{x:x},backend:r}),m.shape=a.outShape,g.push(x)}else{const e=a.outHeight*a.outWidth,o=Ha({inputs:{x:t},backend:r,attrs:{shape:x?[a.batchSize,e,a.inChannels]:[a.batchSize,a.inChannels,e]}}),u=Ha({inputs:{x:n},backend:r,attrs:{shape:[1,a.inChannels,a.outChannels]}}),d=oo({a:x?o:u,b:x?u:o,transposeA:!x,transposeB:false,backend:r,bias:c,activation:l,preluActivationWeights:i,leakyreluAlpha:s});m=Ha({inputs:{x:d},backend:r,attrs:{shape:a.outShape}}),g.push(o),g.push(u),g.push(d)}for(const o of g)r.disposeIntermediateTensorInfo(o);return m}function Fr(e){let{x:t,filter:n,convInfo:a,backend:r,bias:c=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:l=null}=e;const{filterWidth:u,filterHeight:d,inChannels:p,outWidth:h,outHeight:f,dataFormat:x}=a,m="channelsLast"===x,g=u*d*p,b=f*h,v=[a.batchSize,g,b],C=[];if(null!=i){const e=_r(i.shape,m);null!=e&&(i=Ha({inputs:{x:i},backend:r,attrs:{shape:e}}),C.push(i))}if(null!=c){const e=_r(c.shape,m);null!=e&&(c=Ha({inputs:{x:c},backend:r,attrs:{shape:e}}),C.push(c))}const I=Ha({inputs:{x:n},backend:r,attrs:{shape:[1,g,o.util.sizeFromShape(n.shape)/g]}});C.push(I);const y=new Ar(v,a),w=[t.shape,[a.padInfo.top,a.padInfo.left],[a.strideHeight,a.strideWidth],[a.dilationHeight,a.dilationWidth],[a.inChannels],[a.filterWidth*a.inChannels],[a.outWidth]],k=r.runWebGLProgram(y,[t],"float32",w),S=Ha({inputs:{x:k},backend:r,attrs:{shape:v}});C.push(k),C.push(S);const R=null!=c,T=null!=i,E="leakyrelu"===l,N=l?Va(l,!0):null,A=new Wa(m?S.shape:I.shape,m?I.shape:S.shape,m?[a.batchSize,b,a.outChannels]:[a.batchSize,a.outChannels,b],!0,!1,R,N,T,E),_=m?[S,I]:[I,S];if(c&&_.push(c),T&&_.push(i),E){const e=r.makeTensorInfo([],"float32",o.util.createScalarValue(s,"float32"));_.push(e),C.push(e)}const O=r.runWebGLProgram(A,_,"float32"),F=Ha({inputs:{x:O},backend:r,attrs:{shape:a.outShape}});C.push(O);for(const o of C)r.disposeIntermediateTensorInfo(o);return F}const Dr={kernelName:o.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c}=t,{strides:i,pad:s,dataFormat:l,dilations:u,dimRoundingMode:d}=a,p=o.backend_util.convertConv2DDataFormat(l),h=o.backend_util.computeConv2DInfo(r.shape,c.shape,i,u,s,d,!1,p);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===p&&(0,o.env)().getBool("WEBGL_EXP_CONV")){const e=new Nr(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];f=n.runWebGLProgram(e,[r,c],"float32",t)}else if((0,o.env)().getBool("WEBGL_CONV_IM2COL"))f=Fr({x:r,filter:c,convInfo:h,backend:n});else{const e=new Tr(h);f=n.runWebGLProgram(e,[r,c],"float32")}else f=Or({x:r,filter:c,convInfo:h,backend:n});const x=Ha({inputs:{x:f},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(f),x}};class Pr{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,o=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(e.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(e.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(t," - ").concat(a,";\n\n            if (xR < 0 || xR >= ").concat(e.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(e.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(n," - ").concat(o,";\n\n              if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                continue;\n              }\n\n              if (").concat(r,") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class Lr{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,o=e.strideWidth,r="channelsLast"===e.dataFormat,c=t-1-e.padInfo.top,i=n-1-e.padInfo.left,s=r?1:2,l=r?2:3,u=r?3:1;this.userCode="\n      const ivec2 pads = ivec2(".concat(c,", ").concat(i,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[").concat(u,"];\n\n        ivec2 dyCorner = ivec2(coords[").concat(s,"], coords[").concat(l,"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(t,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(t," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(n,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(o,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(n," - 1 - wC;\n\n            for (int d2 = 0; d2 < ").concat(e.outChannels,"; d2++) {\n\n              if (").concat(r,") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class Br{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,o=e.padInfo.front,r=e.padInfo.top,c=e.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(e.batchSize,"; b++) {\n          for (int yF = 0; yF < ").concat(e.outDepth,"; yF++) {\n            int xF = wF + yF * ").concat(t," - ").concat(o,";\n\n            if (xF < 0 || xF >= ").concat(e.inDepth,") {\n              continue;\n            }\n\n            for (int yR = 0; yR < ").concat(e.outHeight,"; yR++) {\n              int xR = wR + yR * ").concat(n," - ").concat(r,";\n\n              if (xR < 0 || xR >= ").concat(e.inHeight,") {\n                continue;\n              }\n\n              for (int yC = 0; yC < ").concat(e.outWidth,"; yC++) {\n                int xC = wC + yC * ").concat(a," - ").concat(c,";\n\n                if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class Vr{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,o=e.strideDepth,r=e.strideHeight,c=e.strideWidth,i=t-1-e.padInfo.front,s=n-1-e.padInfo.top,l=a-1-e.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3(".concat(i,", ").concat(s,", ").concat(l,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(t,"; wF++) {\n          float dyF = float(dyFCorner + wF) / ").concat(o,".0;\n\n          if (dyF < 0.0 || dyF >= ").concat(e.outDepth,".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ").concat(t," - 1 - wF;\n\n          for (int wR = 0; wR < ").concat(n,"; wR++) {\n            float dyR = float(dyRCorner + wR) / ").concat(r,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ").concat(n," - 1 - wR;\n\n            for (int wC = 0; wC < ").concat(a,"; wC++) {\n              float dyC = float(dyCCorner + wC) / ").concat(c,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ").concat(a," - 1 - wC;\n\n              for (int d2 = 0; d2 < ").concat(e.outChannels,"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const Wr={kernelName:o.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:c}=t,{strides:i,pad:s,dataFormat:l,dimRoundingMode:u,filterShape:d}=a,p=o.backend_util.convertConv2DDataFormat(l),h=o.backend_util.computeConv2DInfo(r.shape,d,i,1,s,u,!1,p),f=new Pr(h);return n.runWebGLProgram(f,[r,c],"float32")}};const Ur={kernelName:o.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:c}=t,{inputShape:i,strides:s,pad:l,dataFormat:u,dimRoundingMode:d}=a,p=o.backend_util.convertConv2DDataFormat(u),h=o.backend_util.computeConv2DInfo(i,c.shape,s,1,l,d,!1,p),f=new Lr(h);return n.runWebGLProgram(f,[r,c],"float32")}};const Mr={kernelName:o.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c}=t,{strides:i,pad:s,dilations:l}=a,u=o.backend_util.computeConv3DInfo(r.shape,c.shape,i,l,s),d=new Er(u);return n.runWebGLProgram(d,[r,c],"float32")}};const Gr={kernelName:o.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:c}=t,{strides:i,pad:s,filterShape:l}=a,u=o.backend_util.computeConv3DInfo(r.shape,l,i,1,s),d=new Br(u);return n.runWebGLProgram(d,[r,c],"float32")}};const zr={kernelName:o.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:c}=t,{pad:i,strides:s,inputShape:l}=a,u=o.backend_util.computeConv3DInfo(l,c.shape,s,1,i),d=new Vr(u);return n.runWebGLProgram(d,[r,c],"float32")}},Xr=La({opSnippet:Pa+"\n  return cos(x);\n"}),Hr={kernelName:o.Cos,backendName:"webgl",kernelFunc:Xr},qr=La({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Kr={kernelName:o.Cosh,backendName:"webgl",kernelFunc:qr};class jr{constructor(e,t,n,a,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,c,i,s]=e,[l]=t,[u,d]=n;this.outputShape=[l,u,d,s];const p="bilinear"===a?1:0,[h,f]=["".concat(c-1,".0"),"".concat(i-1,".0")],[x,m,g]=u>1?["".concat((c-1)/(u-1)),"(y2-y1) * height_ratio","y1*".concat(h," + float(y)*(height_scale)")]:["0.0","0.0","0.5 * (y1+y2) * ".concat(h)],[b,v,C]=d>1?["".concat((i-1)/(d-1)),"(x2-x1) * width_ratio","x1*".concat(f," + float(x)*(width_scale)")]:["0.0","0.0","0.5 * (x1+x2) * ".concat(f)];this.userCode="\n      const float height_ratio = float(".concat(x,");\n      const float width_ratio = float(").concat(b,");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ").concat(r,") {\n          return;\n        }\n\n        float height_scale = ").concat(m,";\n        float width_scale = ").concat(v,";\n\n        float in_y = ").concat(g,";\n        if( in_y < 0.0 || in_y > ").concat(h," ) {\n          setOutput(float(").concat(o,"));\n          return;\n        }\n        float in_x = ").concat(C,";\n        if( in_x < 0.0 || in_x > ").concat(f," ) {\n          setOutput(float(").concat(o,"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(").concat(p," == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ")}}const Yr={kernelName:o.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{image:o,boxes:r,boxInd:c}=t,{cropSize:i,method:s,extrapolationValue:l}=a,u=new jr(o.shape,r.shape,i,s,l);return n.runWebGLProgram(u,[o,r,c],"float32")}};var Qr;!function(e){e.Prod="*",e.Sum="+"}(Qr||(Qr={}));class Zr{constructor(e,t,n,a){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,r=this.op===Qr.Prod?"1.0":"0.0",c=n?r:"getX(".concat(Jr(o,"coords",this.op),")"),i=this.outputShape[this.outputShape.length-1];let s="",l="";n?(s=a?"end != ".concat(i-1):"end != 0",l=a?"end + 1":"end - 1"):(s=a?"end + pow2 < ".concat(i):"end >= pow2",l=a?"end + pow2":"end - pow2"),this.userCode="\n      void main() {\n        ".concat(re(o)," coords = getOutputCoords();\n        int end = ").concat($r(o,"coords",this.op),";\n        float val = ").concat(c,";\n        int pow2 = int(pow(2.0, index));\n        if (").concat(s,") {\n          int idx = ").concat(l,";\n          ").concat($r(o,"coords",this.op)," = idx;\n          val ").concat(this.op,"= getX(").concat(Jr(o,"coords",this.op),");\n        }\n        setOutput(val);\n      }\n    ")}}function Jr(e,t,n){if(1===e)return"".concat(t);if(2===e)return"".concat(t,".x, ").concat(t,".y");if(3===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z");if(4===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z, ").concat(t,".w");throw new Error("Cumulative ".concat(n," for rank ").concat(e," is not yet supported"))}function $r(e,t,n){if(1===e)return"".concat(t);if(2===e)return"".concat(t,".y");if(3===e)return"".concat(t,".z");if(4===e)return"".concat(t,".w");throw new Error("Cumulative ".concat(n," for rank ").concat(e," is not yet supported"))}function ec(e,t,n,a,r,c){const i=t.shape.length,s=o.backend_util.getAxesPermutation([a],i);let l=t;null!=s&&(l=to({inputs:{x:t},backend:n,attrs:{perm:s}}));const u=o.backend_util.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error("WebGL cumprod shader expects an inner-most axis=".concat(t.shape.length-1," ")+"but got axis=".concat(a));const d=l.shape[u];let p=Sa({inputs:{x:l},backend:n});for(let o=0;o<=Math.ceil(Math.log2(d))-1;o++){const t=new Zr(e,l.shape,!1,c),a=[[o]],r=p;p=n.runWebGLProgram(t,[p],p.dtype,a),n.disposeIntermediateTensorInfo(r)}if(r){const t=new Zr(e,l.shape,r,c),a=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(a)}if(null!=s){const e=to({inputs:{x:p},backend:n,attrs:{perm:o.backend_util.getUndoAxesPermutation(s)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}const tc={kernelName:o.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:o}=t,{axis:r,exclusive:c,reverse:i}=a;return ec(Qr.Prod,o,n,r,c,i)}};const nc={kernelName:o.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:o}=t,{axis:r,exclusive:c,reverse:i}=a;return ec(Qr.Sum,o,n,r,c,i)}};const ac={kernelName:o.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:o,weights:r}=t,{size:c,binaryOutput:i}=a;if(1===o.shape.length){const e=n.readSync(o.dataId),t=n.readSync(r.dataId),a=$t(e,t,r.dtype,r.shape,c);return n.makeTensorInfo([c],r.dtype,a)}if(2===o.shape.length){const e=n.bufferSync(o),t=n.bufferSync(r),a=en(e,t,c,i);return n.makeTensorInfo(a.shape,r.dtype,a.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+"".concat(o.shape.length,"."))}};class oc{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ".concat(this.getHeightCoordString(),";\n      int w = ").concat(this.getWidthCoordString(),";\n      int d = ").concat(this.getDepthCoordString(),";\n\n      int in_h = h / ").concat(t,";\n      int offset_h = imod(h, ").concat(t,");\n      int in_w = w / ").concat(t,";\n      int offset_w = imod(w, ").concat(t,");\n      int offset_d = (offset_h * ").concat(t," + offset_w) *\n        ").concat(this.getOutputDepthSize(),";\n      int in_d = d + offset_d;\n\n      float result = ").concat(this.getInputSamplingString(),";\n      setOutput(result);\n    }\n  ")}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const rc={kernelName:o.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:o}=t,{blockSize:r,dataFormat:c}=a,i=o.shape[0],s=("NHWC"===c?o.shape[1]:o.shape[2])*r,l=("NHWC"===c?o.shape[2]:o.shape[3])*r,u=("NHWC"===c?o.shape[3]:o.shape[1])/(r*r),d=new oc("NHWC"===c?[i,s,l,u]:[i,u,s,l],r,c);return n.runWebGLProgram(d,[o],o.dtype)}};class cc{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pe(this.outputShape.length);const r=e.filterHeight,c=e.filterWidth,i=e.outChannels/e.inChannels;let s="",l="";n&&(s=a?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):o?"float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"\n          float activation(float x) {\n            ".concat(n,"\n          }\n        "),l="result = activation(result);");const u=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(s,"\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ").concat(i,";\n        int q = d2 - d1 * ").concat(i,";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ").concat(r,"; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(c,"; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ").concat(u,"\n        ").concat(l,"\n        setOutput(result);\n      }\n    ")}}class ic{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pe(this.outputShape.length);const c=e.outChannels/e.inChannels,i=e.padInfo.left,s=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,d=e.filterWidth,p=d;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let o=0;o<d;o++)h+="\n          vec4 xTexelC".concat(2*o,";\n          int xTexelC").concat(2*o,"Ready;\n          vec4 xTexelC").concat(2*o+1,";\n          int xTexelC").concat(2*o+1,"Ready;\n          vec4 xC").concat(o,";");h+="\n    for (int r = 0; r < ".concat(u,"; r++) {\n      ");for(let o=0;o<d;o++)h+="\n          xTexelC".concat(2*o," = vec4(0.0);\n          xTexelC").concat(2*o,"Ready = 0;\n          xTexelC").concat(2*o+1," = vec4(0.0);\n          xTexelC").concat(2*o+1,"Ready = 0;\n          xC").concat(o," = vec4(0.0);");h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let g=0;g<(p+1)/2;g++){const e=2*g;if(h+="\n          xC = xCCorner + ".concat(e*l,";\n          "),1===s){if(e<d&&(i%2===1?(h+="\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                  xTexelC").concat(e," = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(e,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(e,"Ready = 1;\n                }\n              "),h+=1===l&&e>0?"\n                xC".concat(e," = vec4(xTexelC").concat(e-2,".zw, xTexelC").concat(e,".xy);\n                "):"\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC".concat(e," = vec4(previous.zw, xTexelC").concat(e,".xy);\n                  } else {\n                    xC").concat(e," = vec4(0.0, 0.0, xTexelC").concat(e,".xy);\n                  }\n                  ")):h+="\n                if (xC >= 0 && xC < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                  xTexelC").concat(e," = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC").concat(e,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(e,"Ready = 1;\n                }\n\n                xC").concat(e," = xTexelC").concat(e,";\n                "),e+1<d)){const t=i%2===0?o.util.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(h+="\n                  xCOffset = xC + imod(pads[1], 2) + ".concat(t,";\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                    xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC").concat(e+1,".zw = vec2(0.0);\n                    }\n                    xTexelC").concat(e+1,"Ready = 1;\n                  }\n                  "),h+=l>1?"\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC".concat(e+1," = vec4(previous.zw, xTexelC").concat(e+1,".xy);\n                    } else {\n                     xC").concat(e+1," = vec4(0.0, 0.0, xTexelC").concat(e+1,".xy);\n                    }\n                    "):"\n                    xC".concat(e+1," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".xy);\n                    ")):h+=1===t?"\n                    xC".concat(e+1," = xTexelC").concat(e,";\n                    "):"\n                    xCOffset = xC + ".concat(t,";\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                      xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC").concat(e+1,".zw = vec2(0.0);\n                      }\n                      xTexelC").concat(e+1,"Ready = 1;\n                    }\n\n                    xC").concat(e+1," = xTexelC").concat(e+1,";\n                    ")}}else e<d&&(i%2===1?(h+="\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                  xTexelC").concat(e," = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(e,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(e,"Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                  xTexelC").concat(e+1," = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC").concat(e+1,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(e+1,"Ready = 1;\n                }\n\n                xC").concat(e," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".zw);\n              "),e+1<d&&(h+="\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC".concat(e+1," = vec4(xTexelC").concat(e+1,".xy, final.xy);\n                "))):(h+="\n                if(xC >= 0 && xC < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                  xTexelC").concat(e," = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC").concat(e,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(e,"Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                  xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(e+1,".zw = vec2(0.);\n                  }\n                  xTexelC").concat(e+1,"Ready = 1;\n                }\n\n                xC").concat(e," = vec4(\n                  xTexelC").concat(e,".xy, xTexelC").concat(e+1,".xy);\n              "),e+1<d&&(h+="\n                  xC".concat(e+1," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".zw);\n                "))));e<d&&(h+="\n            wTexel = getW(r, ".concat(e,", d1, q);\n            dotProd += xC").concat(e," * vec4(wTexel.xz, wTexel.xz);\n          "),e+1<d&&(h+="\n              wTexel = getW(r, ".concat(e+1,", d1, q);\n              dotProd += xC").concat(e+1," * vec4(wTexel.xz, wTexel.xz);\n            ")))}h+="\n    }\n  ",h+="\n      }\n    ";let f="",x="";n&&(f=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):r?"vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(n,"\n        }"),x="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(f,"\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ").concat(c,";\n        int q = d2 - d1 * ").concat(c,";\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ").concat(h,"\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ").concat(m,"\n        ").concat(x,"\n        setOutput(result);\n      }\n    ")}}const sc={kernelName:o.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c}=t,{strides:i,pad:s,dilations:l,dimRoundingMode:u}=a;let d=l;null==d&&(d=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,d),(()=>"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(i," and dilations '").concat(d,"'")));const p=o.backend_util.computeConv2DInfo(r.shape,c.shape,i,d,s,u,!0);let h;h=(0,o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?new ic(p):new cc(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[r,c],"float32",f)}};class lc{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,o=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ".concat(r," + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ").concat(e.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(e.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(t," - ").concat(a,";\n\n            if (xR < 0 || xR >= ").concat(e.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(e.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(n," - ").concat(o,";\n\n              if (xC < 0 || xC >= ").concat(e.inWidth,") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class uc{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,o=e.strideWidth,r=t-1-e.padInfo.top,c=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode="\n      const ivec2 pads = ivec2(".concat(r,", ").concat(c,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ").concat(t,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(t," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(n,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(o,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(n," - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ").concat(i,"; dm++) {\n              int d2 = d1 * ").concat(i," + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const dc={kernelName:o.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:c}=t,{strides:i,dilations:s,pad:l,dimRoundingMode:u,filterShape:d}=a,p=o.backend_util.computeConv2DInfo(r.shape,d,i,s,l,u,!0),h=new lc(p);return n.runWebGLProgram(h,[r,c],"float32")}};const pc={kernelName:o.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:c}=t,{strides:i,dilations:s,pad:l,dimRoundingMode:u,inputShape:d}=a,p=o.backend_util.computeConv2DInfo(d,c.shape,i,s,l,u,!0),h=new uc(p);return n.runWebGLProgram(h,[r,c],"float32")}};class hc{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const fc={kernelName:o.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=[...a.shape,...a.shape],c=o.util.sizeFromShape(a.shape),i=Ha({inputs:{x:a},backend:n,attrs:{shape:[c]}}),s=new hc(c),l=n.runWebGLProgram(s,[i],i.dtype),u=Ha({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class xc{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:a,strideHeight:o,strideWidth:r,filterHeight:c,filterWidth:i,dilationHeight:s,dilationWidth:l}=e,{top:u,left:d}=a;this.userCode="\n      const ivec2 strides = ivec2(".concat(o,", ").concat(r,");\n      const ivec2 pads = ivec2(").concat(u,", ").concat(d,");\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ").concat(c,"; h++) {\n          int hIn = hBeg + h * ").concat(s,";\n\n          if (hIn >= 0 && hIn < ").concat(t,") {\n            for (int w = 0; w < ").concat(i,"; w++) {\n              int wIn = wBeg + w * ").concat(l,";\n\n              if (wIn >= 0 && wIn < ").concat(n,") {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    ")}}const mc={kernelName:o.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c}=t,{strides:i,pad:s,dilations:l}=a,u=o.backend_util.computeDilation2DInfo(r.shape,c.shape,i,s,"NHWC",l);let d;const p=new xc(u);d=n.runWebGLProgram(p,[r,c],"float32");const h=Ha({inputs:{x:d},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(d),h}};const gc={kernelName:o.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,c=t,{allDims:i,summedDims:s,idDims:l}=o.backend_util.decodeEinsumEquation(r,c.length);o.backend_util.checkEinsumDimSizes(i.length,l,c);const{path:u,steps:d}=o.backend_util.getEinsumComputePath(s,l),p=d.length;let h=null,f=i.length;const x=[];for(let m=0;m<p;++m){for(const e of d[m]){const{permutationIndices:t,expandDims:a}=o.backend_util.getEinsumPermutation(f,l[e]);let r;o.backend_util.isIdentityPermutation(t)?r=c[e]:(r=to({inputs:{x:c[e]},backend:n,attrs:{perm:t}}),x.push(r));const i=r.shape.slice();for(let e=0;e<a.length;++e)i.splice(a[e],0,1);o.util.arraysEqual(r.shape,i)||(r=Ha({inputs:{x:r},backend:n,attrs:{shape:i}}),x.push(r)),null===h?h=r:(h=za({inputs:{a:r,b:h},backend:n}),x.push(h))}m<p-1&&(u[m]>=0&&(h=$a({inputs:{x:h},backend:n,attrs:{axis:u[m]-(i.length-f),keepDims:!1}}),x.push(h)),f--)}for(const o of x)o!==h&&n.disposeIntermediateTensorInfo(o);return h}},bc=La({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),vc={kernelName:o.Elu,backendName:"webgl",kernelFunc:bc},Cc={kernelName:o.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:a,y:r}=t,c=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ka("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",a.shape,r.shape):new ya("return (b >= 1.0) ? a : a * (b + 1.0);",a.shape,r.shape);return n.runWebGLProgram(c,[a,r],a.dtype)}},Ic=Ba({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:on}),yc={kernelName:o.Equal,backendName:"webgl",kernelFunc:Ic},wc=La({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = '.concat(o.backend_util.ERF_P,";\n  float a1 = ").concat(o.backend_util.ERF_A1,";\n  float a2 = ").concat(o.backend_util.ERF_A2,";\n  float a3 = ").concat(o.backend_util.ERF_A3,";\n  float a4 = ").concat(o.backend_util.ERF_A4,";\n  float a5 = ").concat(o.backend_util.ERF_A5,";\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n")}),kc={kernelName:o.Erf,backendName:"webgl",kernelFunc:wc},Sc=La({opSnippet:Pa+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:rn,dtype:"float32"}),Rc={kernelName:o.Exp,backendName:"webgl",kernelFunc:Sc};function Tc(e){const{inputs:t,attrs:n,backend:a}=e,{dim:r}=n,{input:c}=t,i=c.shape.length,s=c.shape.slice();let l=r;return r<0&&(o.util.assert(-(i+1)<=r,(()=>"Axis must be in the interval [".concat(-(i+1),", ").concat(i,"]"))),l=i+r+1),s.splice(l,0,1),Ha({inputs:{x:c},backend:a,attrs:{shape:s}})}const Ec={kernelName:o.ExpandDims,backendName:"webgl",kernelFunc:Tc},Nc="return exp(x) - 1.0;",Ac=La({opSnippet:Nc,packedOpSnippet:Nc,cpuKernelImpl:cn}),_c={kernelName:o.Expm1,backendName:"webgl",kernelFunc:Ac};class Oc{constructor(e,t,n){this.variableNames=["real","imag"];const a=t[1];this.outputShape=t;const o=n?"2.0 * ".concat(Math.PI):"-2.0 * ".concat(Math.PI),r=n?"".concat(a,".0"):"1.0";let c;if("real"===e)c="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error('FFT component must be either "real" or "imag", got '.concat(e,"."));c="return real * expI + imag * expR;"}this.userCode="\n      const float exponentMultiplier = ".concat(o,";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ").concat(c,"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(").concat(a,");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ").concat(a,"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ").concat(r,";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ")}}function Fc(e,t,n){const a=n.texData.get(e.dataId),r=o.util.sizeFromShape(e.shape),c=e.shape[e.shape.length-1],i=Ha({inputs:{x:e},backend:n,attrs:{shape:[r/c,c]}}),s=i.shape,l=new Oc("real",s,t),u=new Oc("imag",s,t),d=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:s},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:s}],p=n.runWebGLProgram(l,d,"float32"),h=n.runWebGLProgram(u,d,"float32"),f=Ta({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const x=Ha({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),x}const Dc={kernelName:o.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fc(a,!1,n)}};class Pc{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Lc(e){const{backend:t,attrs:n}=e,{shape:a,value:r}=n;let{dtype:c}=n;if(c=c||o.util.inferDtype(r),"string"===c){const e=o.util.getArrayFromDType(c,o.util.sizeFromShape(a));return e.fill(r),t.makeTensorInfo(a,c,e)}{const e=new Pc(a,r),n=[[r]];return t.runWebGLProgram(e,[],c,n)}}const Bc={kernelName:o.Fill,backendName:"webgl",kernelFunc:Lc};class Vc{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ".concat(t," - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ").concat(t,") {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")}}const Wc={kernelName:o.FlipLeftRight,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e;const{image:a}=t,o=n,r=new Vc(a.shape);return o.runWebGLProgram(r,[a],a.dtype)}},Uc="return floor(x);",Mc=La({opSnippet:Uc,packedOpSnippet:Uc,cpuKernelImpl:sn}),Gc={kernelName:o.Floor,backendName:"webgl",kernelFunc:Mc},zc=Ba({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),Xc={kernelName:o.FloorDiv,backendName:"webgl",kernelFunc:zc};class Hc{constructor(e){this.variableNames=["A"];const t=z(),[n,a]=e;this.outputShape=e,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(".concat(a,".0, ").concat(n,".0);\n\n        vec4 values = ").concat(t.texture2D,"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ")}}class qc{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=z(),[n,a]=e;this.outputShape=e,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(".concat(a,".0, ").concat(n,".0);\n            vec4 values = ").concat(t.texture2D,"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ").concat(t.output," = result;\n      }\n    ")}}const Kc={kernelName:o.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e;let{pixels:r}=t;const{numChannels:c}=a,i="undefined"!==typeof HTMLVideoElement&&r instanceof HTMLVideoElement,s="undefined"!==typeof HTMLImageElement&&r instanceof HTMLImageElement,[u,d]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],p=[d,u],h=[d,u,c];if(s||i){const e=(0,o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=jc&&e===Yc||(Yc=e,jc=document.createElement("canvas").getContext("2d",{willReadFrequently:Yc})),jc.canvas.width=u,jc.canvas.height=d,jc.drawImage(r,0,0,u,d),r=jc.canvas}const f=n.makeTensorInfo(p,"int32");n.texData.get(f.dataId).usage=l.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId),r);const x=(0,o.env)().getBool("WEBGL_PACK")?new qc(h):new Hc(h),m=n.runWebGLProgram(x,[f],"int32");return n.disposeData(f.dataId),m}};let jc,Yc=(0,o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const Qc={kernelName:o.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c,bias:i,preluActivationWeights:s}=t,{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:x}=a,m=o.backend_util.convertConv2DDataFormat(d),g=o.backend_util.computeConv2DInfo(r.shape,c.shape,l,p,u,h,!1,m);let b;const v=[],C=null!=i,I=null!=s,y="leakyrelu"===f,w=()=>{const e=[r,c],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=Ha({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return v.push(t),t}return e};if(C&&e.push(t(i,d)),I&&e.push(t(s,d)),y){const t=n.makeTensorInfo([],"float32",o.util.createScalarValue(x,"float32"));e.push(t),v.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&(0,o.env)().getBool("WEBGL_EXP_CONV")){const e=f?Va(f,!0):null,t=new Nr(g,C,e,I,y),a=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],o=w();b=n.runWebGLProgram(t,o,"float32",a)}else if((0,o.env)().getBool("WEBGL_CONV_IM2COL"))b=Fr({x:r,filter:c,convInfo:g,backend:n,bias:i,activation:f,preluActivationWeights:s,leakyreluAlpha:x});else{const e=f?Va(f,!1):null,t=new Tr(g,C,e,I,y),a=w();b=n.runWebGLProgram(t,a,"float32")}else b=Or({x:r,filter:c,convInfo:g,backend:n,bias:i,activation:f,preluActivationWeights:s,leakyreluAlpha:x});const k=Ha({inputs:{x:b},backend:n,attrs:{shape:g.outShape}});return v.push(b),v.forEach((e=>n.disposeIntermediateTensorInfo(e))),k}};const Zc={kernelName:o.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:c,bias:i,preluActivationWeights:s}=t,{strides:l,pad:u,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=a,x=[];let m=d;null==m&&(m=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(l,m),(()=>"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(l," and dilations '").concat(m,"'")));const g=o.backend_util.computeConv2DInfo(r.shape,c.shape,l,m,u,p,!0),b=(0,o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,v=h?Va(h,b):null,C=[r,c],I=null!=i,y=null!=s,w="leakyrelu"===h;if(I&&C.push(i),y&&C.push(s),w){const e=n.makeTensorInfo([],"float32",o.util.createScalarValue(f,"float32"));C.push(e),x.push(e)}let k;k=b?new ic(g,I,v,y,w):new cc(g,I,v,y,w);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],R=n.runWebGLProgram(k,C,"float32",S);return x.forEach((e=>n.disposeIntermediateTensorInfo(e))),R}};class Jc{constructor(e,t,n,a){this.sliceDim=e,this.strides=t,this.paramsShape=a,this.variableNames=["x","indices"],this.outputShape=n;const o=re(n.length);let r="\n    int index;";for(let c=0;c<this.sliceDim;c++)r+="\n          index = round(getIndices(coords[0], ".concat(c,"));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ").concat(this.paramsShape[c],";\n          flattenIndex += index * ").concat(this.strides[c],";");this.userCode="\n         void main() {\n          ".concat(o," coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ").concat(r,"\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      ")}}const $c={kernelName:o.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,c=r.shape,i=c[c.length-1],s=o.util.sizeFromShape(a.shape),[l,u,d,p]=o.backend_util.prepareAndValidate(a,r),h=Ha({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),f=Ha({inputs:{x:a},backend:n,attrs:{shape:[o.util.sizeFromShape(a.shape)/d,d]}});if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(a),o=ln(e,t,a.dtype,u,i,d,p,a.shape,s);return n.makeTensorInfo(l,a.dtype,o.values)}const x=new Jc(i,p,[u,d],a.shape),m=n.runWebGLProgram(x,[f,h],f.dtype),g=Ha({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};class ei{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=re(this.rank),a=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let o=0;o<e.length;o++)2===o?a.push("index"):a.push("".concat(n[o]));return a.join()}(e);this.userCode="\n      void main() {\n        ".concat(n," resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ").concat(e[2],") ? 1.0 : 0.0;\n        setOutput(inBounds * getA(").concat(a,"));\n      }\n    ")}}function ti(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,indices:c}=t,{axis:i,batchDims:s}=a,l=o.util.parseAxisParam(i,r.shape)[0];if((0,o.env)().get("DEBUG")){const e=n.readSync(c.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const a=e[n];o.util.assert(a<=t-1&&a>=0,(()=>"GatherV2: the index value ".concat(a," is not in [0, ").concat(t-1,"]")))}}const u=o.backend_util.segment_util.collectGatherOpShapeInfo(r,c,l,s),d=o.util.sizeFromShape(c.shape),p=[],h=Ha({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Ha({inputs:{x:c},backend:n,attrs:{shape:[u.batchSize,d/u.batchSize]}});p.push(h),p.push(f);const x=[u.batchSize,u.outerSize,d/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,c])||"string"===r.dtype){const e=n.bufferSync(f),t=n.bufferSync(h),a=un(t,e,x);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,a.dtype,a.values)}const m=new ei(h.shape,x),g=n.runWebGLProgram(m,[h,f],h.dtype);p.push(g);const b=Ha({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}const ni={kernelName:o.GatherV2,backendName:"webgl",kernelFunc:ti},ai=Ba({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:dn,dtype:"bool"}),oi={kernelName:o.Greater,backendName:"webgl",kernelFunc:ai},ri=Ba({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:pn}),ci={kernelName:o.GreaterEqual,backendName:"webgl",kernelFunc:ri};const ii={kernelName:o.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fc(a,!0,n)}},si=La({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),li={kernelName:o.IsFinite,backendName:"webgl",kernelFunc:si},ui=La({opSnippet:"return float(isinf(x));",dtype:"bool"}),di={kernelName:o.IsInf,backendName:"webgl",kernelFunc:ui},pi=La({opSnippet:"return float(isnan(x));",dtype:"bool"}),hi={kernelName:o.IsNan,backendName:"webgl",kernelFunc:pi},fi=Ba({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:hn,dtype:"bool"}),xi={kernelName:o.Less,backendName:"webgl",kernelFunc:fi},mi=Ba({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:fn,dtype:"bool"}),gi={kernelName:o.LessEqual,backendName:"webgl",kernelFunc:mi};const bi={kernelName:o.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:o,num:r}=n,c=xn(a,o,r);return t.makeTensorInfo([c.length],"float32",c)}},vi=La({opSnippet:Pa+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:mn}),Ci={kernelName:o.Log,backendName:"webgl",kernelFunc:vi},Ii=La({opSnippet:Pa+"\n  return log(1.0 + x);\n"}),yi={kernelName:o.Log1p,backendName:"webgl",kernelFunc:Ii},wi=Ba({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),ki={kernelName:o.LogicalAnd,backendName:"webgl",kernelFunc:wi},Si=La({opSnippet:"return float(!(x >= 1.0));"}),Ri={kernelName:o.LogicalNot,backendName:"webgl",kernelFunc:Si},Ti=Ba({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Ei={kernelName:o.LogicalOr,backendName:"webgl",kernelFunc:Ti};class Ni{constructor(e,t,n,a,o){this.variableNames=["x"],this.outputShape=[];const r=t,c=e[3]-1;let i;this.outputShape=e;const s="float(".concat(n,") + float(").concat(a,") * sum");i=.5===o?"inversesqrt(".concat(s,")"):1===o?"1.0/(".concat(s,")"):"exp(log(".concat(s,") * float(-").concat(o,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -".concat(r,"; j <= ").concat(r,"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ").concat(c,") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ").concat(i,";\n        setOutput(val);\n      }\n    ")}}class Ai{constructor(e,t,n,a,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,c=e[3]-1;let i;this.outputShape=e;const s="float(".concat(n,") + float(").concat(a,") * sum");i=.5===o?"inversesqrt(".concat(s,")"):1===o?"1.0/(".concat(s,")"):"exp(log(".concat(s,") * float(-").concat(o,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ".concat(this.outputShape[3],";\n        bool hasNextRow = c < ").concat(this.outputShape[2],";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ").concat(r,";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ").concat(r,"; j <= ").concat(r,"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(").concat(c,"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ").concat(i,";\n        setOutput(result);\n      }\n    ")}}const _i={kernelName:o.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:c,bias:i,alpha:s,beta:l}=a,u=(0,o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Ai(r.shape,c,i,s,l):new Ni(r.shape,c,i,s,l);return n.runWebGLProgram(u,[r],r.dtype)}};class Oi{constructor(e,t,n,a,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=a,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ".concat(this.depth,"; ++d) {\n          int depthBegin = int(max(0.0, float(d - ").concat(t,")));\n          int depthEnd = int(min(float(").concat(this.depth,"),\n              float(d + ").concat(t," + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ").concat(this.depth,";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(").concat(a,") * norm + float(").concat(n,");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(").concat(a,")\n                * float(").concat(o,")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ").concat(o,");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ")}}const Fi={kernelName:o.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:o,y:r,dy:c}=t,{depthRadius:i,bias:s,alpha:l,beta:u}=a,d=new Oi(o.shape,i,s,l,u);return n.runWebGLProgram(d,[o,r,c],o.dtype)}};function Di(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:c,keepDims:i}=a,s=r.shape.length,l=o.util.parseAxisParam(c,r.shape);let u=l;const d=o.backend_util.getAxesPermutation(u,s),p=null!=d,h=n.shouldExecuteOnCPU([r]);let f=r;if(p){if(h){const e=n.texData.get(f.dataId).values,t=new Array(s);for(let n=0;n<t.length;n++)t[n]=r.shape[d[n]];const a=Xn(e,r.shape,r.dtype,d,t);f=n.makeTensorInfo(t,r.dtype);n.texData.get(f.dataId).values=a}else f=Ja(r,d,n);u=o.backend_util.getInnerMostAxes(u.length,s)}o.backend_util.assertAxesAreInnerMostDims("max",u,s);const[x,m]=o.backend_util.computeOutAndReduceShapes(f.shape,u);let g,b=x;if(i&&(b=o.backend_util.expandShapeToKeepDim(x,l)),h){const e=n.texData.get(f.dataId).values,t=gn(e,o.util.sizeFromShape(m),b,r.dtype);g=n.makeTensorInfo(b,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,a){const r=o.util.sizeFromShape(t),c=Ha({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/r,r]},backend:a}),i=Ya(c,e.dtype,"max",a),s=Ha({inputs:{x:i},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(c),a.disposeIntermediateTensorInfo(i),s}(f,m,b,n);return p&&n.disposeIntermediateTensorInfo(f),g}const Pi={kernelName:o.Max,backendName:"webgl",kernelFunc:Di},Li=Ba({opSnippet:Ia+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wa+"\n  return result;\n",cpuKernelImpl:bn}),Bi={kernelName:o.Maximum,backendName:"webgl",kernelFunc:Li};const Vi={kernelName:o.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;M(r,"maxPool");const{filterSize:c,strides:i,pad:s,dimRoundingMode:l}=a;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(i," and dilations '").concat(1,"'")));const u=o.backend_util.computePool2DInfo(r.shape,c,i,1,s,l);if(1===u.filterWidth&&1===u.filterHeight&&o.util.arraysEqual(u.inShape,u.outShape))return Sa({inputs:{x:r},backend:n});const d=new Vo(u,"max",!1);return n.runWebGLProgram(d,[r],r.dtype)}};const Wi={kernelName:o.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:c,strides:i,pad:s,dataFormat:l,dimRoundingMode:u}=a,d=o.backend_util.computePool3DInfo(r.shape,c,i,[1,1,1],s,u,l),p=new Wo(d,"max",!1);return n.runWebGLProgram(p,[r],r.dtype)}};class Ui{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,a=e.dilationHeight,o=e.effectiveFilterHeight,r=e.effectiveFilterWidth,c=o-1-e.padInfo.top,i=r-1-e.padInfo.left,s=o*r-1;this.userCode="\n      const ivec2 pads = ivec2(".concat(c,", ").concat(i,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(o,";\n          wR += ").concat(a,") {\n          float dyR = float(dyRCorner + wR) / ").concat(t,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(r,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(n,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ").concat(s," - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ").concat(r," + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class Mi{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,o=e.dilationDepth,r=e.dilationHeight,c=e.dilationWidth,i=e.effectiveFilterDepth,s=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.front,d=s-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*s*l-1;this.userCode="\n      const ivec3 pads = ivec3(".concat(u,", ").concat(d,", ").concat(p,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(i,";\n           wD += ").concat(o,") {\n          float dyD = float(dyDCorner + wD) / ").concat(t,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(e.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(s,";\n              wR += ").concat(r,") {\n            float dyR = float(dyRCorner + wR) / ").concat(n,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(e.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(l,";\n                wC += ").concat(c,") {\n              float dyC = float(dyCCorner + wC) / ").concat(a,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(e.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ").concat(h," -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ").concat(s," * ").concat(l," +\n                  wR * ").concat(l," + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const Gi={kernelName:o.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:c}=t,i=c,{filterSize:s,strides:l,pad:u,dimRoundingMode:d}=a,p=o.backend_util.computePool3DInfo(i.shape,s,l,[1,1,1],u,d),h=new Wo(p,"max",!0),f=n.runWebGLProgram(h,[i],i.dtype),x=new Mi(p),m=n.runWebGLProgram(x,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),m}};const zi={kernelName:o.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:c,output:i}=t,s=c;M([c,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:d,dimRoundingMode:p}=a,h=o.backend_util.computePool2DInfo(s.shape,l,u,1,d,p),f=new Vo(h,"max",!0),x=n.runWebGLProgram(f,[s],s.dtype),m=new Ui(h),g=n.runWebGLProgram(m,[r,x],s.dtype);return n.disposeIntermediateTensorInfo(x),g}};const Xi={kernelName:o.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:a}=e;const{x:r}=t,{filterSize:c,strides:i,pad:s,includeBatchInIndex:l}=n,u=a;o.util.assert(4===r.shape.length,(()=>"Error in maxPool: input must be rank 4 but got rank ".concat(r.shape.length,".")));const d=[1,1];o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,d),(()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(i," and dilations '").concat(d,"'")));const p=o.backend_util.computePool2DInfo(r.shape,c,i,d,s),[h,f]=function(e,t,n,a){let o=new Vo(n,"max",!1);const r=a.runWebGLProgram(o,[e],"float32");return o=new Vo(n,"max",!0,!0,t),[r,a.runWebGLProgram(o,[e],"float32")]}(r,l,p,u);return[h,f]}};const Hi={kernelName:o.Mean,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:a}=e;const{x:r}=t,{keepDims:c,axis:i}=n,s=a,l=r.shape.length,u=o.util.parseAxisParam(i,r.shape);let d=u;const p=o.backend_util.getAxesPermutation(d,l),h=null!=p,f=s.shouldExecuteOnCPU([r]),x=[];let m=r;if(h){if(f){const e=s.texData.get(m.dataId).values,t=new Array(l);for(let a=0;a<t.length;a++)t[a]=r.shape[p[a]];const n=Xn(e,r.shape,r.dtype,p,t);m=s.makeTensorInfo(t,r.dtype);s.texData.get(m.dataId).values=n}else m=Ja(r,p,s);x.push(m),d=o.backend_util.getInnerMostAxes(d.length,l)}o.backend_util.assertAxesAreInnerMostDims("sum",d,l);const[g,b]=o.backend_util.computeOutAndReduceShapes(m.shape,d);let v=g;c&&(v=o.backend_util.expandShapeToKeepDim(g,u));const C=function(e,t,n,a){const r=o.util.sizeFromShape(t),c=Ha({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/r,r]},backend:a}),i=Ya(c,"float32","mean",a),s=Ha({inputs:{x:i},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(c),a.disposeIntermediateTensorInfo(i),s}(m,b,v,s);for(const o of x)s.disposeIntermediateTensorInfo(o);return C}};const qi={kernelName:o.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c,keepDims:i}=a,s=r.shape.length,l=o.util.parseAxisParam(c,r.shape);let u=l;const d=o.backend_util.getAxesPermutation(u,s);let p=r;null!=d&&(p=to({inputs:{x:r},backend:n,attrs:{perm:d}}),u=o.backend_util.getInnerMostAxes(u.length,r.shape.length)),o.backend_util.assertAxesAreInnerMostDims("min",u,s);const[h,f]=o.backend_util.computeOutAndReduceShapes(p.shape,u),x=Ha({inputs:{x:p},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),m=Ya(x,x.dtype,"min",n);let g;if(i){g=Ha({inputs:{x:m},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}})}else g=Ha({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),null!=d&&n.disposeIntermediateTensorInfo(p),g}},Ki=Ba({opSnippet:Ia+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wa+"\n  return result;\n",cpuKernelImpl:vn}),ji={kernelName:o.Minimum,backendName:"webgl",kernelFunc:Ki};class Yi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,o=re(a),r=t.map((e=>e[0])).join(","),c=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),s="reflect"===n?0:1;this.userCode=1!==a?"\n      ".concat(o," start = ").concat(o,"(").concat(r,");\n      ").concat(o," end = ").concat(o,"(").concat(c,");\n\n      void main() {\n        ").concat(o," outC = getOutputCoords();\n        for (int i = 0; i < ").concat(a,"; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ").concat(s,";\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ").concat(s,";\n          }\n        }\n        ").concat(o," coords = outC - start;\n        setOutput(getX(").concat(i,"));\n      }\n    "):"\n        int start = ".concat(r,";\n        int end = ").concat(c,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ").concat(s,";\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ").concat(s,";\n          }\n          setOutput(getX(outC - start));\n        }\n      ")}}class Qi{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,o=re(a),r=t.map((e=>e[0])).join(","),c=t.map(((t,n)=>t[0]+e[n])).join(","),i=Kn("rc",a),s=Kn("source",a),l="".concat(i[a-1]," < ").concat(this.outputShape[a-1]),u=1===a?"source":"vec2(".concat(s.slice(-2).join(),")"),d="reflect"===n?0:1;let p="";if(1===a){const e="\n        ".concat(o," source = rc;\n        if (source < start) {\n          source = start * 2 - source - ").concat(d,";\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ").concat(d,";\n        }\n        source -= start;\n      ");p="\n        ".concat(o," rc = outputLoc;\n        ").concat(e,"\n        result[0] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n        ").concat(i[a-1]," += 1;\n        if(").concat(l,") {\n          ").concat(e,"\n          result[1] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n        }\n      ")}else{const e="\n        ".concat(o," source = rc;\n        ").concat(o," lt = ").concat(o,"(lessThan(source, start));\n        ").concat(o," gte = ").concat(o,"(greaterThanEqual(source, end));\n        ").concat(o," orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ").concat(d,") +\n                gte * ((end - 1) * 2 - source + ").concat(d,");\n        source -= start;\n      ");p="\n        ".concat(o," rc = outputLoc;\n        ").concat(e,"\n        result[0] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n        ").concat(i[a-1]," += 1;\n        if(").concat(l,") {\n          ").concat(e,"\n          result[1] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n        }\n        rc = outputLoc;\n        ").concat(i[a-2]," += 1;\n        if(").concat(i[a-2]," < ").concat(this.outputShape[a-2],") {\n          ").concat(e,"\n          result[2] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n          ").concat(i[a-1]," += 1;\n          if(").concat(l,") {\n            ").concat(e,"\n            result[3] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n          }\n        }\n      ")}this.userCode="\n      const ".concat(o," start = ").concat(o,"(").concat(r,");\n      const ").concat(o," end = ").concat(o,"(").concat(c,");\n\n      void main() {\n        ").concat(o," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(p,"\n        setOutput(result);\n      }\n    ")}}const Zi={kernelName:o.MirrorPad,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e;const{x:r}=t,{paddings:c,mode:i}=a,s=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Qi(r.shape,c,i):new Yi(r.shape,c,i);return n.runWebGLProgram(s,[r],r.dtype)}},Ji=Ba({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+wa+"\n  return result;\n"}),$i={kernelName:o.Mod,backendName:"webgl",kernelFunc:Ji};class es{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ".concat(t-1,"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(").concat(t-1,"));\n      }\n    ")}}const ts=Ba({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),ns={kernelName:o.RealDiv,backendName:"webgl",kernelFunc:ts},as="return a - b;",os=Ba({opSnippet:as,packedOpSnippet:as,supportsComplex:!0,cpuKernelImpl:Mn}),rs={kernelName:o.Sub,backendName:"webgl",kernelFunc:os};function cs(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:c}=a,i=o.util.parseAxisParam([c],r.shape),s=Di({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=o.backend_util.expandShapeToKeepDim(s.shape,i),u=Ha({inputs:{x:s},backend:n,attrs:{shape:l}}),d=os({inputs:{a:r,b:u},backend:n}),p=Sc({inputs:{x:d},backend:n}),h=$a({inputs:{x:p},backend:n,attrs:{axis:i,keepDims:!1}}),f=Ha({inputs:{x:h},backend:n,attrs:{shape:l}}),x=ts({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),x}const is={kernelName:o.Softmax,backendName:"webgl",kernelFunc:cs};const ss={kernelName:o.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{logits:o}=t,{numSamples:r,seed:c,normalized:i}=a,s=i?o:cs({inputs:{logits:o},backend:n,attrs:{dim:o.shape.length-1}}),l=s.shape[0],u=s.shape[1],d=new es(l,u,r),p=[[c]],h=n.runWebGLProgram(d,[s],"int32",p);return i||n.disposeIntermediateTensorInfo(s),h}},ls=ta+"\n  return -x;\n",us="\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";const ds={kernelName:o.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])){const e=n.texData.get(a.dataId),[t,o]=In(e.values,a.shape,a.dtype);return n.makeTensorInfo(o,a.dtype,t)}let r;return r=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fa(a.shape,us):new ea(a.shape,ls),n.runWebGLProgram(r,[a],a.dtype)}},ps=o.kernel_impls.nonMaxSuppressionV3Impl;const hs={kernelName:o.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:c}=t,{maxOutputSize:i,iouThreshold:s,scoreThreshold:l}=a,u=n.readSync(r.dataId),d=n.readSync(c.dataId),{selectedIndices:p}=ps(u,d,i,s,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},fs=o.kernel_impls.nonMaxSuppressionV4Impl;const xs={kernelName:o.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:c}=t,{maxOutputSize:i,iouThreshold:s,scoreThreshold:l,padToMaxOutputSize:u}=a,d=n.readSync(r.dataId),p=n.readSync(c.dataId),{selectedIndices:h,validOutputs:f}=fs(d,p,i,s,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},ms=o.kernel_impls.nonMaxSuppressionV5Impl;const gs={kernelName:o.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:c}=t,{maxOutputSize:i,iouThreshold:s,scoreThreshold:l,softNmsSigma:u}=a,d=n.readSync(r.dataId),p=n.readSync(c.dataId),h=i,f=s,x=l,m=u,{selectedIndices:g,selectedScores:b}=ms(d,p,h,f,x,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class bs{constructor(e,t,n,a){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(".concat(a,"), float(").concat(n,"),\n                      float(index == coords.y)));\n      }\n    ")}}const vs={kernelName:o.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:c,depth:i,onValue:s,offValue:l}=a,u=o.util.sizeFromShape(r.shape),d=new bs(u,i,s,l),p=Ha({inputs:{x:r},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(d,[p],c);n.disposeIntermediateTensorInfo(p);const f=Ha({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(h),f}};function Cs(e){const{inputs:t,backend:n}=e,{x:a}=t;if("complex64"===a.dtype){const e=cr({inputs:{input:a},backend:n}),t=Cs({inputs:{x:e},backend:n}),o=yr({inputs:{input:a},backend:n}),r=Cs({inputs:{x:o},backend:n}),c=Ta({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(r),c}return Lc({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}const Is={kernelName:o.ZerosLike,backendName:"webgl",kernelFunc:Cs};const ys={kernelName:o.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:o}=n;if("string"===o.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===o.dtype){const t=cr({inputs:{input:o},backend:a}),n=e({inputs:{x:t},backend:a}),r=yr({inputs:{input:o},backend:a}),c=Cs({inputs:{x:r},backend:a}),i=Ta({inputs:{real:n,imag:c},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(c),i}return Lc({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:a})}};const ws={kernelName:o.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return Tc({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const c=t[0].shape,i=t[0].dtype;t.forEach((e=>{o.util.assertShapesMatch(c,e.shape,"All tensors passed to stack must have matching shapes"),o.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const s=[],l=Sr({inputs:t.map((e=>{const t=Tc({inputs:{input:e},backend:n,attrs:{dim:r}});return s.push(t),t})),backend:n,attrs:{axis:r}});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class ks{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,o=re(a),r=t.map((e=>e[0])).join(","),c=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?"\n      ".concat(o," start = ").concat(o,"(").concat(r,");\n      ").concat(o," end = ").concat(o,"(").concat(c,");\n\n      void main() {\n        ").concat(o," outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ").concat(o," coords = outC - start;\n          setOutput(getX(").concat(i,"));\n        }\n      }\n    "):"\n        int start = ".concat(r,";\n        int end = ").concat(c,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ")}}class Ss{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,o=re(a),r=t.map((e=>e[0])).join(","),c=t.map(((t,n)=>t[0]+e[n])).join(","),i=Kn("rc",a),s=Kn("source",a),l="".concat(i[a-1]," < ").concat(this.outputShape[a-1]),u=1===a?"source":"vec2(".concat(s.slice(-2).join(),")"),d=["".concat(o," rc = outputLoc;"),"".concat(i[a-1]," += 1;\n       if(").concat(l,") {\n      "),1===a?"":"}\n       rc = outputLoc;\n       ".concat(i[a-2]," += 1;\n       if(").concat(i[a-2]," < ").concat(this.outputShape[a-2],") {"),1===a?"":"  ".concat(i[a-1]," += 1;\n         if(").concat(l,") {")],p=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let f=0,x=1===a?2:4;f<x;f++)h+="\n        ".concat(d[f],"\n        if (").concat(p,") {\n          result[").concat(f,"] = float(value);\n        } else {\n          ").concat(o," source = rc - start;\n          result[").concat(f,"] = getChannel(getX(").concat(s.join(),"), ").concat(u,");\n        }\n      ");h+=1===a?"} ":"}}",this.userCode="\n      const ".concat(o," start = ").concat(o,"(").concat(r,");\n      const ").concat(o," end = ").concat(o,"(").concat(c,");\n\n      void main() {\n        ").concat(o," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(h,"\n        setOutput(result);\n      }\n    ")}}const Rs=e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:c,constantValue:i}=a;if(0===o.util.sizeFromShape(r.shape)){return Lc({backend:n,attrs:{shape:c.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const s=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ss(r.shape,c,i):new ks(r.shape,c,i),l=[[i]];return n.runWebGLProgram(s,[r],r.dtype,l)},Ts={kernelName:o.PadV2,backendName:"webgl",kernelFunc:Rs},Es=Ba({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+wa+"\n  return result;\n"}),Ns={kernelName:o.Pow,backendName:"webgl",kernelFunc:Es};const As={kernelName:o.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:c,keepDims:i}=a,s=r.shape.length,l=[],u=o.util.parseAxisParam(c,r.shape);let d=u;const p=o.backend_util.getAxesPermutation(d,s);let h,f=r;if(null!=p&&(f=to({inputs:{x:r},backend:n,attrs:{perm:p}}),d=o.backend_util.getInnerMostAxes(d.length,s),l.push(f)),o.backend_util.assertAxesAreInnerMostDims("prod",d,s),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:a,outDtype:o}=wn(f.shape,f.dtype,e,d);h=n.makeTensorInfo(a,o,t)}else{const[e,t]=o.backend_util.computeOutAndReduceShapes(f.shape,d),a=o.util.sizeFromShape(t),c=Ha({inputs:{x:f},backend:n,attrs:{shape:[-1,a]}}),i=Ya(c,(0,o.sumOutType)(r.dtype),"prod",n);h=Ha({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(c),l.push(i)}if(i){l.push(h);const e=o.backend_util.expandShapeToKeepDim(h.shape,u);h=Ha({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}};const _s={kernelName:o.RaggedGather,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{paramsNestedSplits:o,paramsDenseValues:r,indices:c}=t,{outputRaggedRank:i}=a,s=o.map((e=>n.readSync(e.dataId))),l=o.map((e=>e.shape)),u=n.readSync(r.dataId),d=n.readSync(c.dataId),[p,h,f]=kn(s,l,u,r.shape,r.dtype,d,c.shape,i),x=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),m=n.makeTensorInfo(f,r.dtype,h);return x.concat([m])}};const Os={kernelName:o.RaggedRange,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:a,limits:o,deltas:r}=t,c=n.readSync(a.dataId),i=n.readSync(o.dataId),s=n.readSync(r.dataId),[l,u]=Sn(c,a.shape,a.dtype,i,o.shape,s,r.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([u.length],a.dtype,u)]}};const Fs={kernelName:o.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{shape:o,values:r,defaultValue:c,rowPartitionTensors:i}=t,{rowPartitionTypes:s}=a,l=n.readSync(o.dataId),u=n.readSync(r.dataId),d=n.readSync(c.dataId),p=i.map((e=>n.readSync(e.dataId))),h=i.map((e=>e.shape)),[f,x]=Rn(l,o.shape,u,r.shape,r.dtype,d,c.shape,p,h,s);return n.makeTensorInfo(f,r.dtype,x)}},Ds=e=>{const{backend:t,attrs:n}=e,{start:a,stop:o,step:r,dtype:c}=n,i=Tn(a,o,r,c);return t.makeTensorInfo([i.length],c,i)},Ps={kernelName:o.Range,backendName:"webgl",kernelFunc:Ds},Ls=La({opSnippet:"return 1.0 / x;"}),Bs={kernelName:o.Reciprocal,backendName:"webgl",kernelFunc:Ls},Vs=La({opSnippet:ta+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Ws={kernelName:o.Relu,backendName:"webgl",kernelFunc:Vs},Us=La({opSnippet:ta+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Ms={kernelName:o.Relu6,backendName:"webgl",kernelFunc:Us};class Gs{constructor(e,t,n,a,o){this.variableNames=["A"],this.outputShape=[];const[r,c,i,s]=e;this.outputShape=[r,t,n,s];const l=[a&&t>1?c-1:c,a&&n>1?i-1:i],u=[a&&t>1?t-1:t,a&&n>1?n-1:n];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],");\n      const vec2 inputShapeRC = vec2(").concat(c,".0, ").concat(i,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ").concat(d,";\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ")}}class zs{constructor(e,t,n,a,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,c,i,s]=e;this.outputShape=[r,t,n,s];const l=[a&&t>1?c-1:c,a&&n>1?i-1:i],u=[a&&t>1?t-1:t,a&&n>1?n-1:n];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],",\n          ").concat(l[1]/u[1],");\n      const vec3 inputShapeRC = vec3(").concat(c,".0, ").concat(i,".0,\n                                     ").concat(i,".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ").concat(d,";\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ").concat(s-1,";\n        bool hasNextRow = coords.z < ").concat(n-1,";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ")}}const Xs={kernelName:o.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:c,halfPixelCenters:i,size:s}=a,[l,u]=s,d=(0,o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zs(r.shape,l,u,c,i):new Gs(r.shape,l,u,c,i);return n.runWebGLProgram(d,[r],"float32")}};class Hs{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,o]=t,[,r,c]=e,i=[n&&r>1?a-1:a,n&&c>1?o-1:o],s=[n&&r>1?r-1:r,n&&c>1?c-1:c],l=i[0]/s[0],u=i[1]/s[1],d=1/l,p=1/u,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(l,");\n        const float widthScale = float(").concat(u,");\n\n        const float invHeightScale = float(").concat(d,");\n        const float invWidthScale = float(").concat(p,");\n\n        const int winHeight = int(").concat(h,");\n        const int winWidth = int(").concat(f,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(r,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(c,") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ").concat(a-1,".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ").concat(o-1,".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")}}const qs={kernelName:o.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:o,dy:r}=t,{alignCorners:c}=a,i=new Hs(r.shape,o.shape,c);return n.runWebGLProgram(i,[r],r.dtype)}};class Ks{constructor(e,t,n,a,o){this.variableNames=["A"],this.outputShape=[];const[r,c,i,s]=e;this.outputShape=[r,t,n,s];const l=[a&&t>1?c-1:c,a&&n>1?i-1:i],u=[a&&t>1?t-1:t,a&&n>1?n-1:n],d=a?"0.5":"0.0";let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],");\n      const vec2 inputShapeRC = vec2(").concat(c,".0, ").concat(i,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ").concat(p,";\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ").concat(d,")));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ")}}class js{constructor(e,t,n,a,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,c,i,s]=e;this.outputShape=[r,t,n,s];const l=[a&&t>1?c-1:c,a&&n>1?i-1:i],u=[a&&t>1?t-1:t,a&&n>1?n-1:n],d=a?"0.5":"0.0";let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],",\n          ").concat(l[1]/u[1],");\n      const vec3 inputShapeRC = vec3(").concat(c,".0, ").concat(i,".0,\n                                     ").concat(i,".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ").concat(p,";\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ").concat(d,")));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ").concat(s-1,";\n        bool hasNextRow = coords.z < ").concat(n-1,";\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    ")}}const Ys={kernelName:o.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:c,halfPixelCenters:i,size:s}=a,[l,u]=s,d=(0,o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new js(r.shape,l,u,c,i):new Ks(r.shape,l,u,c,i);return n.runWebGLProgram(d,[r],r.dtype)}};class Qs{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,o]=t,[,r,c]=e,i=[n&&r>1?a-1:a,n&&c>1?o-1:o],s=[n&&r>1?r-1:r,n&&c>1?c-1:c],l=i[0]/s[0],u=i[1]/s[1],d=1/l,p=1/u,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(l,");\n        const float widthScale = float(").concat(u,");\n\n        const float invHeightScale = float(").concat(d,");\n        const float invWidthScale = float(").concat(p,");\n\n        const int winHeight = int(").concat(h,");\n        const int winWidth = int(").concat(f,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(r,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(c,") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(").concat(i[0],") *\n                (float(dyR) / float(").concat(s[0],"));\n\n            float sourceFracCol =\n                float(").concat(i[1],") *\n                  (float(dyC) / float(").concat(s[1],"));\n\n            int sourceNearestRow = int(min(\n                float(int(").concat(a,") - 1),\n                ").concat(n," ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(").concat(o,") - 1),\n                ").concat(n," ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")}}const Zs={kernelName:o.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:o,dy:r}=t,{alignCorners:c}=a,i=new Qs(r.shape,o.shape,c);return n.runWebGLProgram(i,[r],r.dtype)}};class Js{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-".concat(n," tensor is not yet supported"));if(this.outputShape=e,1===n)return void(this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(".concat(e[0]," - coord - 1));\n        }\n      "));const a=e.map(((n,a)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?"".concat(e[n]," - coords[").concat(n,"] - 1"):"coords[".concat(n,"]"))(a))).join(","),o=re(n);this.userCode="\n      void main() {\n        ".concat(o," coords = getOutputCoords();\n        setOutput(getX(").concat(a,"));\n      }\n    ")}}class $s{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-".concat(n," tensor is not yet supported"));this.outputShape=e;const a=Kn("rc",n),o="".concat(a[n-1]," + 1 < ").concat(this.outputShape[n-1]),r="".concat(a[n-2]," + 1 < ").concat(this.outputShape[n-2]),c=re(n);function i(n){const a=e.map(((a,o)=>function(n,a){return-1!==t.indexOf(n)&&1!==e[n]?"".concat(e[n]," - ").concat(a[n]," - 1"):"".concat(a[n])}(o,n))),o=a.join(","),r=a.slice(-2).join(",");return"getChannel(getX(".concat(o,"), vec2(").concat(r,"))")}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(".concat(e[0]," - rc - 1),\n            ").concat(e[0]," - rc - 1);\n          if(").concat(o,"){\n              result.g = getChannel(getX(").concat(e[0]," - (rc  + 1) - 1),\n                ").concat(e[0]," - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      "):"\n        void main() {\n          ".concat(c," rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ").concat(function(e){return i(e)}(a.slice()),";\n          if(").concat(o,"){\n            result.g = ").concat(function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(a.slice()),";\n          }\n          if(").concat(r,") {\n            result.b = ").concat(function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(a.slice()),";\n            if(").concat(o,") {\n              result.a = ").concat(function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(a.slice()),";\n            }\n          }\n          setOutput(result);\n        }\n    ")}}const el={kernelName:o.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:c}=a,i=r.shape.length,s=o.util.parseAxisParam(c,r.shape);if(0===i)return Sa({inputs:{x:r},backend:n});const l=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $s(r.shape,s):new Js(r.shape,s);return n.runWebGLProgram(l,[r],r.dtype)}};class tl{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],a=e[2];this.outputShape=e;let o="";o="number"===typeof t?"float outputValue = ".concat(t.toFixed(2),";"):"\n        vec3 fill = vec3(".concat(t.join(","),");\n        float outputValue = fill[coords[3]];"),this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ".concat(o,"\n          if(coordX >= 0 && coordX < ").concat(a," && coordY >= 0 && coordY < ").concat(n,") {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")}}const nl={kernelName:o.RotateWithOffset,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:a}=e;const{image:r}=t,{radians:c,fillValue:i,center:s}=n,l=a,u=new tl(r.shape,i),[d,p]=o.backend_util.getImageCenter(s,r.shape[1],r.shape[2]),h=[[d,p,Math.sin(c),Math.cos(c)]];return l.runWebGLProgram(u,[r],r.dtype,h)}},al=La({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),ol={kernelName:o.Round,backendName:"webgl",kernelFunc:al},rl=La({opSnippet:"return inversesqrt(x);",cpuKernelImpl:En}),cl={kernelName:o.Rsqrt,backendName:"webgl",kernelFunc:rl};class il{constructor(e,t,n,a,o,r){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const c=re(o.length),i=re(r.length);let s="";1===n?s="i":2===n&&(s="i, j");const l="getIndices(".concat(s,")");let u="";1===a?u="i":2===a&&(u="i, coords[1]");const d="getUpdates(".concat(u,")"),p=t>1?"strides[j]":"strides";this.userCode="\n        ".concat(c," strides = ").concat(c,"(").concat(o,");\n\n        void main() {\n          ").concat(i," coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ").concat(e,"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ").concat(t,"; j++) {\n              int index = round(").concat(l,");\n              flattenedIndex += index * ").concat(p,";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ").concat(d,";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ")}}const sl={kernelName:o.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:c}=t,{shape:i}=a,{sliceRank:s,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=o.backend_util.calculateShapes(c,r,i),h=[p/u,u];if(0===p)return n.makeTensorInfo(i,r.dtype);const f=Ha({inputs:{x:r},backend:n,attrs:{shape:[l,s]}}),x=Ha({inputs:{x:c},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new il(l,s,f.shape.length,x.shape.length,d,h),b=n.runWebGLProgram(g,[x,f,m],x.dtype),v=Ha({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(m),v}};class ll{constructor(e,t,n,a){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r="for (int i = 0; i < ".concat(Math.ceil(Math.log2(t+1)),"; ++i) { if (left >= right) break;"),c=2===(0,o.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===a?"<":"<=";this.userCode="\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ".concat(c,"\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ").concat(i," value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     ")}}const ul={kernelName:o.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sortedSequence:o,values:r}=t,{side:c}=a,i=new ll(o.shape[0],o.shape[1],r.shape[1],c),s=[[o.shape[1]]];return n.runWebGLProgram(i,[o,r],"int32",s)}};class dl{constructor(e,t,n){let a,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error("Where for rank ".concat(n," is not yet supported"));if(1===n)o="resRC",a="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],c=[];for(let a=0;a<t.length;a++)c.push("".concat(n[a])),a<e&&r.push("".concat(n[a]));a=r.join(),o=c.join()}const r=re(n);this.userCode="\n      void main() {\n        ".concat(r," resRC = getOutputCoords();\n        float cVal = getC(").concat(a,");\n        if (cVal >= 1.0) {\n          setOutput(getA(").concat(o,"));\n        } else {\n          setOutput(getB(").concat(o,"));\n        }\n      }\n    ")}}const pl={kernelName:o.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:c}=t,i=new dl(a.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[a,r,c],(0,o.upcastType)(r.dtype,c.dtype))}},hl=La({opSnippet:"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ".concat(o.backend_util.SELU_SCALEALPHA,";\n  float scale = ").concat(o.backend_util.SELU_SCALE,";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n")}),fl={kernelName:o.Selu,backendName:"webgl",kernelFunc:hl},xl=La({opSnippet:Pa+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:An}),ml={kernelName:o.Sigmoid,backendName:"webgl",kernelFunc:xl},gl=La({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),bl={kernelName:o.Sign,backendName:"webgl",kernelFunc:gl},vl=La({opSnippet:Pa+"\n  return sin(x);\n"}),Cl={kernelName:o.Sin,backendName:"webgl",kernelFunc:vl},Il=La({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),yl={kernelName:o.Sinh,backendName:"webgl",kernelFunc:Il},wl=La({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),kl={kernelName:o.Softplus,backendName:"webgl",kernelFunc:wl},Sl={kernelName:o.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:c,paddings:i}=a;o.util.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const s=c.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let o=1+c.length;o<r.shape.length;++o)l.push([0,0]);const u=[],d=Rs({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),p=o.backend_util.getReshaped(d.shape,c,s,!1),h=o.backend_util.getPermuted(p.length,c.length,!1),f=o.backend_util.getReshapedPermuted(d.shape,c,s,!1),x=Ha({inputs:{x:d},backend:n,attrs:{shape:p}}),m=to({inputs:{x:x},backend:n,attrs:{perm:h}}),g=Ha({inputs:{x:m},backend:n,attrs:{shape:f}});return u.push(d),u.push(x),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const Rl={kernelName:o.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:a,values:o,denseShape:r,defaultValue:c}=t;if(1!==r.shape.length)throw new Error("Dense shape must be a vector, saw:\n         ".concat(r.shape));if(2!==a.shape.length)throw new Error("Indices must be a matrix, saw:\n         ".concat(a.shape));if(1!==o.shape.length)throw new Error("Values must be a vector, saw:\n         ".concat(o.shape));if(0!==c.shape.length)throw new Error("Default value must be a scalar, saw:\n        ".concat(c.shape));const i=n.readSync(a.dataId),s=n.readSync(o.dataId),l=n.readSync(r.dataId),u=n.readSync(c.dataId)[0],[d,p,h,f,x]=Fn(i,a.shape,a.dtype,s,o.dtype,l,u);return[n.makeTensorInfo(p,a.dtype,d),n.makeTensorInfo([p[0]],o.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([x.length],a.dtype,new Int32Array(x))]}};const Tl={kernelName:o.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:o,newShape:r}=t;if(2!==a.shape.length)throw new Error("Input indices should be a matrix but received shape ".concat(a.shape));if(1!==o.shape.length)throw new Error("Input shape should be a vector but received shape ".concat(o.shape));if(1!==r.shape.length)throw new Error("Target shape should be a vector but received shape ".concat(r.shape));const c=Array.from(n.readSync(o.dataId)),i=n.readSync(a.dataId),s=Array.from(n.readSync(r.dataId)),[l,u,d]=Dn(i,a.shape,a.dtype,c,s);return[n.makeTensorInfo(u,a.dtype,l),n.makeTensorInfo([d.length],r.dtype,new Int32Array(d))]}};const El={kernelName:o.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:o,segmentIds:r}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==o.shape.length)throw new Error("Indices should be a vector but received shape\n              ".concat(o.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n              ".concat(r.shape));const c=n.readSync(a.dataId),i=n.readSync(o.dataId),s=n.readSync(r.dataId),[l,u]=Pn(c,a.shape,a.dtype,i,s,!0);return n.makeTensorInfo(u,a.dtype,l)}};const Nl={kernelName:o.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:o,segmentIds:r}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==o.shape.length)throw new Error("Indices should be a vector but received shape\n             ".concat(o.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n             ".concat(r.shape));const c=n.readSync(a.dataId),i=n.readSync(o.dataId),s=n.readSync(r.dataId),[l,u]=Pn(c,a.shape,a.dtype,i,s);return n.makeTensorInfo(u,a.dtype,l)}};const Al={kernelName:o.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:c,defaultValue:i}=t,{outputShape:s}=a,{sliceRank:l,numUpdates:u,sliceSize:d,strides:p,outputSize:h}=o.backend_util.calculateShapes(c,r,s);if("string"===c.dtype){const e=n.bufferSync(r),t=n.bufferSync(c),a=o.util.decodeString(n.readSync(i.dataId)[0]),f=Nn(e,t,s,h,d,u,l,p,a,false);return n.makeTensorInfo(s,f.dtype,f.values)}const f=new il(u,l,r.shape.length,c.shape.length,p,[h,1],false),x=n.runWebGLProgram(f,[c,r,i],c.dtype),m=Ha({inputs:{x:x},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(x),m}};const _l={kernelName:o.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:c,axis:i}=a,s=o.util.parseAxisParam(i,r.shape)[0],l=o.backend_util.prepareSplitSize(r,c,s),u=r.shape.length,d=new Array(u).fill(0),p=r.shape.slice();return l.map((e=>{const t=[...p];t[s]=e;const a=$o({inputs:{x:r},backend:n,attrs:{begin:d,size:t}});return d[s]+=e,a}))}},Ol="return sqrt(x);",Fl=La({opSnippet:Ol,packedOpSnippet:Ol,cpuKernelImpl:Ln}),Dl={kernelName:o.Sqrt,backendName:"webgl",kernelFunc:Fl},Pl=La({opSnippet:"return x * x;"}),Ll={kernelName:o.Square,backendName:"webgl",kernelFunc:Pl},Bl="return (a - b) * (a - b);",Vl=Ba({opSnippet:Bl,packedOpSnippet:Bl}),Wl={kernelName:o.SquaredDifference,backendName:"webgl",kernelFunc:Vl};const Ul={kernelName:o.Step,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e;const{x:o}=t,r=ta+"\n    return x > 0.0 ? 1.0 : float(".concat(n.alpha,");\n  "),c=new ea(o.shape,r);return a.runWebGLProgram(c,[o],o.dtype)}};class Ml{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const a=n.length,o=re(n.length),r=re(n.length);let c="";if(1===a)c="coords * strides + begin";else{let e=0;c=n.map(((t,a)=>(e++,1===n.length?"coords * strides[".concat(a,"] + begin[").concat(a,"]"):"coords[".concat(e-1,"] * strides[").concat(a,"] + begin[").concat(a,"]")))).join(",")}this.userCode="\n      ".concat(o," begin = ").concat(o,"(").concat(e,");\n      ").concat(o," strides = ").concat(o,"(").concat(t,");\n\n      void main() {\n        ").concat(r," coords = getOutputCoords();\n        setOutput(getX(").concat(c,"));\n      }\n    ")}}const Gl={kernelName:o.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:c,end:i,strides:s,beginMask:l,endMask:u,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:h}=a,{finalShapeSparse:f,finalShape:x,isIdentity:m,sliceDim0:g,isSimpleSlice:b,begin:v,end:C,strides:I}=o.slice_util.sliceInfo(r.shape,c,i,s,l,u,d,p,h);let y;if(m)y=Ha({inputs:{x:r},backend:n,attrs:{shape:x}});else if(g||b){o.util.assert(r.shape.length>=1,(()=>"Input must have rank at least 1, got: ".concat(r.shape.length)));const e=o.slice_util.computeOutShape(v,C,I),t=$o({inputs:{x:r},backend:n,attrs:{begin:v,size:e}});y=Ha({inputs:{x:t},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=(0,o.buffer)(r.shape,r.dtype,e),a=Bn(f,t,I,v);y=n.makeTensorInfo(x,r.dtype,a.values)}else{const e=new Ml(v,I,f);y=n.runWebGLProgram(e,[r],r.dtype)}}const w=Ha({inputs:{x:y},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(y),w}};const zl={kernelName:o.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{separator:o,nGramWidths:r,leftPad:c,rightPad:i,padWidth:s,preserveShortSequences:l}=a,{data:u,dataSplits:d}=t,p=n.readSync(u.dataId),h=n.readSync(d.dataId),[f,x]=Vn(p,h,o,r,c,i,s,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",x)]}};const Xl={kernelName:o.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{skipEmpty:o}=a,{input:r,delimiter:c}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error("Input must be a vector, got shape: ".concat(r.shape));if(0!==c.shape.length)throw new Error("Delimiter must be a scalar, got shape: ".concat(c.shape));const i=n.readSync(r.dataId),s=n.readSync(c.dataId)[0],[l,u,d]=Wn(i,s,o),p=u.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",u),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};const Hl={kernelName:o.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{numBuckets:o}=a,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(o<=0)throw new Error("Number of buckets must be at least 1");const c=n.readSync(r.dataId),i=Un(c,o);return n.makeTensorInfo(r.shape,"int32",i)}},ql=La({opSnippet:"return tan(x);"}),Kl={kernelName:o.Tan,backendName:"webgl",kernelFunc:ql},jl=La({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Yl={kernelName:o.Tanh,backendName:"webgl",kernelFunc:jl};class Ql{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const a=re(this.rank),o=function(e){const t=e.length;if(t>5)throw Error("Tile for rank ".concat(t," is not yet supported"));if(1===t)return"imod(resRC, ".concat(e[0],")");const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let o=0;o<e.length;o++)a.push("imod(".concat(n[o],", ").concat(e[o],")"));return a.join()}(e);this.userCode="\n      void main() {\n        ".concat(a," resRC = getOutputCoords();\n        setOutput(getA(").concat(o,"));\n      }\n    ")}}function Zl(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:c}=a;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>o.util.decodeString(e))):e,a=(0,o.buffer)(r.shape,r.dtype,t),i=Gn(a,c);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new Ql(r.shape,c);return n.runWebGLProgram(i,[r],r.dtype)}const Jl={kernelName:o.Tile,backendName:"webgl",kernelFunc:Zl};class $l{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class eu{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function tu(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function nu(e){let t=1;for(;t<e;)t*=2;return t}const au={kernelName:o.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:c,sorted:i}=a,s=(0,o.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,o.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,d=u[u.length-1];if(n.shouldExecuteOnCPU([r])||d<s||c>l){const e=n.readSync(r.dataId),[t,a]=zn(e,u,r.dtype,c,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===c)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===d)return[r,Lc({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const p=n.texData.get(r.dataId),h=null!==p&&p.isPacked,f=h?n.unpackTensor(r):r,x=o.util.sizeFromShape(u)/d,m=Ha({inputs:{x:f},attrs:{shape:[x,d]},backend:n});h&&tu(n,f);const g=nu(c),b=nu(d);let v=null;const C=()=>null===v?[m,m]:[m,v],I=(e,t,a)=>{const o=C(),r=new $l(a),c=[[d],[null===v?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=v;v=n.runWebGLProgram(r,o,"int32",c),tu(n,i)};for(let o=1;o<g;o*=2){const e=2*o;for(let t=o;t>=1;t/=2)I(e,t,[x,b])}for(let o=b;o>g;o/=2){const e=C(),t=new eu([x,o/2]),a=[[d],[null===v?1:0],[g]],r=v;v=n.runWebGLProgram(t,e,"int32",a),tu(n,r);const c=g/2,i=2*c;for(let n=c;n>=1;n/=2)I(i,n,v.shape)}let y=v;v=$o({inputs:{x:v},backend:n,attrs:{begin:0,size:[x,c]}}),tu(n,y);let w=ti({inputs:{x:m,indices:v},backend:n,attrs:{axis:1,batchDims:1}});tu(n,m);const k=u.slice(0,-1);k.push(c),y=v,v=Ha({inputs:{x:v},attrs:{shape:k},backend:n}),tu(n,y);const S=w;return w=Ha({inputs:{x:w},attrs:{shape:k},backend:n}),tu(n,S),[w,v]}};class ou{constructor(e,t,n,a,o,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const c="nearest"===n?1:2;let i;switch(a){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode="\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(".concat(i," == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (").concat(i," == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (").concat(i," == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ").concat(e," && 0 <= coordX && coordX < ").concat(t,") {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(").concat(o,");\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(").concat(o,");\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(").concat(t,"));\n                float mapY = mapCoord(inY, float(").concat(e,"));\n\n                if (").concat(c," == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        ")}}const ru={kernelName:o.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:o,transforms:r}=t,{interpolation:c,fillMode:i,fillValue:s,outputShape:l}=a,[u,d,p,h]=o.shape,[f,x]=null!=l?l:[d,p],m=new ou(d,p,c,i,s,[u,f,x,h]);return n.runWebGLProgram(m,[o,r],"float32")}};const cu={kernelName:o.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:o}=n,{x:r}=t;M(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const c=a.readSync(r.dataId),{outputValues:i,outputShape:s,indices:l}=Hn(c,o,r.shape,r.dtype);return[a.makeTensorInfo(s,r.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}};const iu={kernelName:o.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:o}=t;let{axis:r}=a;r<0&&(r+=o.shape.length);const c=o,i=c.shape.length,s=o.shape[r],l=new Array(i-1);let u=0;for(let x=0;x<i;x++)x!==r&&(l[u++]=c.shape[x]);const d=[],p=new Array(i).fill(0),h=c.shape.slice();h[r]=1;const f=new Array(s);for(let x=0;x<f.length;x++){p[r]=x;const e=$o({inputs:{x:c},backend:n,attrs:{begin:p,size:h}}),t=Ha({inputs:{x:e},backend:n,attrs:{shape:l}});f[x]=t,d.push(e)}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class su{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,a=e.batchSize,o=e.inSize,r=e.numSegments,c=r*Math.ceil(o/n);this.outputShape=[a,c];const i=4*Math.floor(n/4),s=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let u="";o%n>0&&(u="\n        if (inIdx < 0 || inIdx >= ".concat(o,") {\n          return initializationValue;\n        }\n      "));let d="";o%n>0&&(d="\n        if (inIdx < 0 || inIdx >= ".concat(o,") {\n          return -1.0;\n        }\n      ")),this.userCode="\n      const float initializationValue = ".concat("0.0",";\n\n      float getValue(int batch, int inIdx) {\n        ").concat(u,"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ").concat(d,"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ").concat(r,")) * float(").concat(n,"));\n        int currentSeg = int(mod(float(outIdx), float(").concat(r,")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(i,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ").concat(l,"\n        }\n\n        int inIdx = inOffset + ").concat(i,";\n        if (").concat(1===s,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ").concat(l,"\n        } else if (").concat(2===s,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ").concat(l,"\n        } else if (").concat(3===s,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ").concat(l,"\n        }\n        setOutput(").concat("sumValue",");\n      }\n    ")}}const lu=[ro,io,lo,po,xo,bo,vo,Co,Ro,To,No,_o,Fo,Po,Bo,Uo,Mo,Xo,Ho,qo,Yo,tr,nr,ar,lr,pr,xr,Ea,br,Rr,Dr,Wr,Ur,Mr,Gr,zr,Hr,Kr,Yr,tc,nc,ac,rc,sc,dc,pc,fc,mc,gc,vc,Cc,yc,kc,Rc,Ec,_c,Dc,Bc,Wc,Gc,Xc,Kc,Qc,Zc,$c,ni,oi,ci,Ra,ii,wr,li,di,hi,_a,xi,gi,bi,Ci,yi,ki,Ri,Ei,_i,Fi,Pi,Bi,Vi,Wi,Gi,zi,Xi,Hi,qi,ji,Zi,$i,ss,Xa,ds,hs,xs,gs,rr,vs,ys,ws,Ts,Ns,Da,As,_s,Os,Fs,Ps,ir,ns,Bs,Ws,Ms,qa,Xs,qs,Ys,Zs,el,nl,ol,cl,sl,ul,pl,fl,ml,bl,Cl,yl,er,is,kl,Sl,Rl,Tl,El,Nl,Al,_l,Dl,Ll,Wl,Ul,Gl,zl,Xl,Hl,rs,eo,Kl,Yl,Jl,au,ru,no,cu,iu,{kernelName:o.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:c}=t,{numSegments:i}=a,s=r.shape.length,l=[];let u=0;const d=o.backend_util.getAxesPermutation([u],s);let p=r;null!=d&&(p=to({inputs:{x:r},backend:n,attrs:{perm:d}}),l.push(p),u=o.backend_util.getInnerMostAxes(1,s)[0]);const h=o.backend_util.segment_util.computeOutShape(p.shape,u,i),f=o.util.sizeFromShape([p.shape[u]]),x=Ha({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});l.push(x);const m=(0,o.sumOutType)(r.dtype),g=(e,t,a,r,c)=>{const i=e.shape[0],s=e.shape[1],u=o.backend_util.segment_util.segOpComputeOptimalWindowSize(s,c),d=new su({windowSize:u,inSize:s,batchSize:i,numSegments:c},t),p=n.compileAndRun(d,[e,a],r);if(l.push(p),p.shape[1]===c)return p;const h=Ds({backend:n,attrs:{start:0,stop:c,step:1,dtype:"float32"}}),f=Zl({inputs:{x:h},backend:n,attrs:{reps:[s/u]}});l.push(h),l.push(f);return g(p,t,f,r,c)},b=Ha({inputs:{x:g(x,"unsortedSegmentSum",c,m,i)},backend:n,attrs:{shape:h}});let v=b;if(null!=d){l.push(b);const e=o.backend_util.getUndoAxesPermutation(d);v=to({inputs:{x:v},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}},Is];for(const uu of lu)(0,o.registerKernel)(uu)}}]);
//# sourceMappingURL=382.06f0140f.chunk.js.map