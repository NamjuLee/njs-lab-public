{"version":3,"file":"static/js/88220.db0c5121.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Core/DefinitionIndeCanvasCore.ts","njslab/Workshop/workshop-ml/AppTFEnv/Implementation/TFProject/Definition/TFMnist.ts"],"sourcesContent":["import { IndependentPanelCanvas } from '../../../../../../../lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/IndependentPanelCanvas';\r\n\r\nimport { TFProject } from '..';\r\nexport class DefinitionIndeCanvasCore {\r\n    scene: TFProject;\r\n    indeCanvas: IndependentPanelCanvas;\r\n    mOffX = -12;\r\n    mOffY = -12;\r\n    constructor(scene: TFProject, width: number = 650, height: number = 350) {\r\n        this.scene = scene;\r\n        this.scene.definitions.push(this);\r\n        this.InitIndeCanvas(width, height);\r\n    }\r\n    InitIndeCanvas(width: number = 650, height: number = 350) {\r\n        if (this.scene.implementation.app.needUI) {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 50, 50, width, height, true);\r\n        } else {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 1, -25, width, height, true);\r\n        }\r\n        this.indeCanvas.title = 'TF Env';\r\n        this.indeCanvas.btnHam.isHidden = true;\r\n        this.indeCanvas.btnMini.isHidden = true;\r\n        this.indeCanvas.RenderIndependentCanvas = (ctx: CanvasRenderingContext2D) => (this.RenderIndependentCanvas(ctx));\r\n    }\r\n    get width() {\r\n        return this.indeCanvas.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.indeCanvas.canvas.height;\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    MouseMove(x: number, y: number) { /* */ }\r\n    MouseMovePre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMove(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDown(x: number, y: number) { /* */ }\r\n    MouseDownPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDown(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseUp(x: number, y: number) { /* */ }\r\n    MouseUpPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseUp(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDrag(x: number, y: number) { /* */ }\r\n    MouseDragPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDrag(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseLeftClick(x: number, y: number) { /* */ }\r\n    MouseLeftClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseLeftClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseMiddleClick(x: number, y: number) { /* */ }\r\n    MouseMiddleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMiddleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseRightClick(x: number, y: number) { /* */ }\r\n    MouseRightClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseRightClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDoubleClick(x: number, y: number) { /* */ }\r\n    MouseDoubleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDoubleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseWheel(x: number, y: number, v: number) { /* */ }\r\n    MouseWheelPre(x: number, y: number, v: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseWheel(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY, v);\r\n    }\r\n\r\n}","import * as tf from '@tensorflow/tfjs';\r\n\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFMnist extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    col: string[] = ['#ff0000', '#00ff00', '#0000ff', '#00fff0', '#ff0000', '#fff000', '#0fff00'];\r\n\r\n    tfLinearRegression: PolynomialRegression[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF MNist ';\r\n        this.Init();\r\n        this.InitUI();\r\n    }\r\n    Init() {\r\n        this.tfLinearRegression.push(new PolynomialRegression(1));\r\n        this.tfLinearRegression.push(new PolynomialRegression(2));\r\n        this.tfLinearRegression.push(new PolynomialRegression(3));\r\n        this.tfLinearRegression.push(new PolynomialRegression(4));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(2));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(3));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(4));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(5));\r\n\r\n        this.indeCanvas.canvas.style.zIndex = '-1';\r\n\r\n        TFDataUtility.getData().then((d: any) => {\r\n            // console.log(d);\r\n        });\r\n\r\n        // tfData.\r\n\r\n        const data = new MnistData();\r\n        console.log(data.getTrainData());\r\n\r\n    }\r\n    public InitUI() {\r\n        const div = document.createElement('div');\r\n        // div.style.background = '#dddddd';\r\n        div.style.position = 'absolute';\r\n        div.style.left = '40px';\r\n        div.style.color = '#ffffff';\r\n\r\n        let t = document.createElement('p');\r\n        t.textContent = 'click on this screen to add data';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.textContent = 'LinearRegression';\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[0];\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[1];\r\n        t.textContent = 'Degree of polynomial - 2';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[2];\r\n        t.textContent = 'Degree of polynomial - 3';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[3];\r\n        t.textContent = 'Degree of polynomial - 4';\r\n        div.append(t);\r\n\r\n        const divHost = document.getElementById('indePanel');\r\n        if (divHost) {\r\n            divHost.append(div);\r\n\r\n            //     const b = document.createElement('button');\r\n            //     b.textContent = 'run';\r\n            //     b.style.position = 'absolute';\r\n            //     b.style.left = '650px';\r\n            //     b.onclick = () => {\r\n            //         console.log(this);\r\n            //     };\r\n            //     this.scene.implementation.app.model.modelViewCoreWrapper.viewWrapper.div.append(b);\r\n        }\r\n        // this.scene.canvas.canvas.\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n\r\n            for (let m = 0; m < this.tfLinearRegression.length; ++m) {\r\n                const xx = [], yy = [];\r\n                for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n                // console.log(xx);\r\n                // console.log(yy);\r\n                // ............................ train\r\n                this.tfLinearRegression[m].train(xx, yy);\r\n                // ............................ end train\r\n\r\n                this.RenderLine(ctx);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        for (let m = 0; m < this.tfLinearRegression.length; ++m) {\r\n            const curveX: number[] = [];\r\n            for (let x = -1; x <= 1; x += 0.08) {\r\n                curveX.push(x);\r\n            }\r\n\r\n            // ............................ predict\r\n            const ys = tf.tidy(() => {\r\n                return this.tfLinearRegression[m].predict(tf.tensor1d(curveX));\r\n            });\r\n\r\n            let curveY = ys.dataSync();\r\n            ys.dispose();\r\n            // ............................ end predict\r\n\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = this.col[m]; // '#00fff0';\r\n            ctx.beginPath();\r\n            ctx.moveTo(MathUtility.Remap(curveX[0], -1, 1, 0, this.width), MathUtility.Remap(curveY[0], -1, 1, this.height, 0));\r\n\r\n            for (let i = 1; i < curveX.length; ++i) {\r\n                ctx.lineTo(MathUtility.Remap(curveX[i], -1, 1, 0, this.width), MathUtility.Remap(curveY[i], -1, 1, this.height, 0));\r\n            }\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}\r\nclass PolynomialRegression {\r\n    weights: tf.Variable[] = [];\r\n    bias: tf.Variable;\r\n\r\n    dim: number = 3;\r\n    leraningRate: number = 0.2;\r\n    optimizer: tf.AdamOptimizer;\r\n    constructor(dim: number = 0) {\r\n        this.dim = dim;\r\n        for (let i = 0; i < 5; ++i) {\r\n            const weight = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n            weight.print();\r\n            this.weights.push(weight);\r\n        }\r\n\r\n        this.bias = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n        this.optimizer = tf.train.adam(this.leraningRate);\r\n\r\n    }\r\n\r\n    public predict1d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.mul(this.weights[0])\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict2d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.square().mul(this.weights[1])\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict3d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(3)).mul(this.weights[2])\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict4d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(4)).mul(this.weights[3])\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict5d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(5)).mul(this.weights[4])\r\n            .add(x.pow(tf.scalar(4)).mul(this.weights[3]))\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        if (this.dim === 5) { return this.predict5d(x); }\r\n        if (this.dim === 4) { return this.predict4d(x); }\r\n        if (this.dim === 3) { return this.predict3d(x); }\r\n        if (this.dim === 2) { return this.predict2d(x); }\r\n        if (this.dim === 1) { return this.predict1d(x); }\r\n        return this.predict1d(x);\r\n    }\r\n    public loss(pred: tf.Tensor<tf.Rank>, label: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return pred.sub(label).square().mean();\r\n    }\r\n    public train(xVal: number[], yVal: number[]) {\r\n\r\n        tf.tidy(() => {\r\n            const xs = tf.tensor1d(xVal);\r\n            const ys = tf.tensor1d(yVal);\r\n            this.optimizer.minimize((): any => this.loss(this.predict(xs), ys));\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n        // console.log('b:', this.bias, ', w:', this.weight);\r\n        // this.bias.print();\r\n        // this.weight.print();\r\n    }\r\n    // public train(x: tf.Tensor, y: tf.Tensor) {\r\n    //     tf.tidy((): any => {\r\n    //         return this.optimizer.minimize((): any => {\r\n    //             return this.loss(this.predict(x), y);\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n\r\n\r\n// ..............................................................................................................................\r\n\r\nexport const IMAGE_H = 28;\r\nexport const IMAGE_W = 28;\r\nconst IMAGE_SIZE = IMAGE_H * IMAGE_W;\r\nconst NUM_CLASSES = 10;\r\nconst NUM_DATASET_ELEMENTS = 65000;\r\n\r\nconst NUM_TRAIN_ELEMENTS = 55000;\r\n// const NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\r\n\r\nconst MNIST_IMAGES_SPRITE_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\r\nconst MNIST_LABELS_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\r\n\r\n/**\r\n * A class that fetches the sprited MNIST dataset and provide data as\r\n * tf.Tensors.\r\n */\r\nexport class MnistData {\r\n    testLabels: Uint8Array;\r\n    trainLabels: Uint8Array;\r\n    testImages: Float32Array;\r\n    trainImages: Float32Array;\r\n    datasetImages: Float32Array;\r\n    datasetLabels: Uint8Array;\r\n    constructor() { }\r\n\r\n    async load() {\r\n        // Make a request for the MNIST sprited image.\r\n        const img = new Image();\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const imgRequest = new Promise<void>((resolve, reject) => {\r\n            img.crossOrigin = '';\r\n            img.onload = () => {\r\n                img.width = img.naturalWidth;\r\n                img.height = img.naturalHeight;\r\n\r\n                const datasetBytesBuffer =\r\n                    new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\r\n\r\n                const chunkSize = 5000;\r\n                canvas.width = img.width;\r\n                canvas.height = chunkSize;\r\n\r\n                for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\r\n                    const datasetBytesView = new Float32Array(\r\n                        datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\r\n                        IMAGE_SIZE * chunkSize);\r\n                    ctx.drawImage(\r\n                        img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\r\n                        chunkSize);\r\n\r\n                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n                    for (let j = 0; j < imageData.data.length / 4; j++) {\r\n                        // All channels hold an equal value since the image is grayscale, so\r\n                        // just read the red channel.\r\n                        datasetBytesView[j] = imageData.data[j * 4] / 255;\r\n                    }\r\n                }\r\n                this.datasetImages = new Float32Array(datasetBytesBuffer);\r\n\r\n                resolve();\r\n            };\r\n            img.src = MNIST_IMAGES_SPRITE_PATH;\r\n        });\r\n\r\n        const labelsRequest = fetch(MNIST_LABELS_PATH);\r\n        // const [imgResponse, labelsResponse] = await Promise.all([imgRequest, labelsRequest]);\r\n        const result = await Promise.all([imgRequest, labelsRequest]);\r\n        const labelsResponse: any = result[1];\r\n        this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\r\n\r\n        // Slice the the images and labels into train and test sets.\r\n        this.trainImages = this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n        this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n        this.trainLabels = this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n        this.testLabels = this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n    }\r\n\r\n    /**\r\n     * Get all training data as a data tensor and a labels tensor.\r\n     *\r\n     * @returns\r\n     *   xs: The data tensor, of shape `[numTrainExamples, 28, 28, 1]`.\r\n     *   labels: The one-hot encoded labels tensor, of shape\r\n     *     `[numTrainExamples, 10]`.\r\n     */\r\n    getTrainData() {\r\n        const xs = tf.tensor4d(\r\n            this.trainImages,\r\n            [this.trainImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\r\n        const labels = tf.tensor2d(\r\n            this.trainLabels, [this.trainLabels.length / NUM_CLASSES, NUM_CLASSES]);\r\n        return { xs, labels };\r\n    }\r\n\r\n    /**\r\n     * Get all test data as a data tensor a a labels tensor.\r\n     *\r\n     * @param {number} numExamples Optional number of examples to get. If not\r\n     *     provided,\r\n     *   all test examples will be returned.\r\n     * @returns\r\n     *   xs: The data tensor, of shape `[numTestExamples, 28, 28, 1]`.\r\n     *   labels: The one-hot encoded labels tensor, of shape\r\n     *     `[numTestExamples, 10]`.\r\n     */\r\n    getTestData(numExamples: any) {\r\n        let xs = tf.tensor4d(\r\n            this.testImages,\r\n            [this.testImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\r\n        let labels = tf.tensor2d(\r\n            this.testLabels, [this.testLabels.length / NUM_CLASSES, NUM_CLASSES]);\r\n\r\n        if (numExamples != null) {\r\n            xs = xs.slice([0, 0, 0, 0], [numExamples, IMAGE_H, IMAGE_W, 1]);\r\n            labels = labels.slice([0, 0], [numExamples, NUM_CLASSES]);\r\n        }\r\n        return { xs, labels };\r\n    }\r\n}"],"names":["DefinitionIndeCanvasCore","constructor","scene","width","height","indeCanvas","mOffX","mOffY","this","definitions","push","InitIndeCanvas","implementation","app","needUI","IndependentPanelCanvas","viewController","NUIWrapper","NUI","independentPanelWrapper","title","btnHam","isHidden","btnMini","RenderIndependentCanvas","ctx","canvas","Init","MouseMove","x","y","MouseMovePre","IsMouseInsidePanel","vec","HeadHeight","MouseDown","MouseDownPre","MouseUp","MouseUpPre","MouseDrag","MouseDragPre","MouseLeftClick","MouseLeftClickPre","MouseMiddleClick","MouseMiddleClickPre","MouseRightClick","MouseRightClickPre","MouseDoubleClick","MouseDoubleClickPre","MouseWheel","v","MouseWheelPre","TFMnist","tfProjct","super","xpos","ypos","xspeed","yspeed","xdirection","ydirection","rad","vs","selVec","undefined","col","tfLinearRegression","InitUI","PolynomialRegression","style","zIndex","TFDataUtility","then","d","data","MnistData","console","log","getTrainData","div","document","createElement","position","left","color","t","textContent","append","marginTop","marginBottom","divHost","getElementById","m","NVector3","MapX","MapY","i","length","MathUtility","GridLine","strokeStyle","xInterval","yInterval","lineWidth","x0","y0","x1","y1","beginPath","moveTo","lineTo","stroke","fillStyle","rect","closePath","fill","xx","yy","train","RenderLine","arc","Math","PI","font","textAlign","fillText","toFixed","curveX","ys","tf","predict","curveY","dataSync","dispose","dim","weights","bias","leraningRate","optimizer","weight","random","print","predict1d","mul","add","predict2d","square","predict3d","pow","predict4d","predict5d","loss","pred","label","sub","mean","xVal","yVal","xs","minimize","IMAGE_H","IMAGE_W","IMAGE_SIZE","NUM_CLASSES","NUM_TRAIN_ELEMENTS","testLabels","trainLabels","testImages","trainImages","datasetImages","datasetLabels","async","img","Image","getContext","imgRequest","Promise","resolve","reject","crossOrigin","onload","naturalWidth","naturalHeight","datasetBytesBuffer","ArrayBuffer","chunkSize","NUM_DATASET_ELEMENTS","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","src","labelsRequest","fetch","labelsResponse","all","Uint8Array","arrayBuffer","slice","labels","getTestData","numExamples"],"sourceRoot":""}