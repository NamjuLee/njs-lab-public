{"version":3,"file":"static/js/44775.e1258a97.chunk.js","mappings":"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","sources":["njslab/app-legacy/Implementation/Demos/Demo8NTerrain/Asset/index.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/GraphicsCoreWrapper/CanvasWrapper/CameraController.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/GraphicsCoreWrapper/CanvasWrapper/LightingController.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/GraphicsCoreWrapper/CanvasWrapper/CanvasThree.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/GraphicsCoreWrapper/index.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/GeometryCommon/GeometryCommon.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/Definition/index.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/Definition/NTrain/PixelMapTerrain/Pixel.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/Definition/NTrain/PixelMapTerrain/PixelMapTerrain.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/Definition/NTrain/TerrainMapThree.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/SceneWrapper/index.ts","njslab/app-legacy/Implementation/Demos/Demo8NTerrain/index.ts"],"sourcesContent":["const urban = require('./obj/tt.json');\r\nexport class Asset {\r\n    // tslint:disable-next-line:no-any\r\n    urban: any;\r\n\r\n    constructor() {\r\n        this.urban = urban;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three-orbitcontrols-ts';\r\nimport { MouseEventData, CLICK_TYPE } from '../../../../../NJSCore';\r\nimport { CanvasThree } from './CanvasThree';\r\n\r\n// const DeviceOrientationControls = require('../../lib/DeviceOrientationControls');\r\n// const StereoEffect = require('../../lib/StereoEffect');\r\n\r\n// import { StereoEffect } from '../lib/StereoEffect';\r\n\r\nexport enum CAMERA_TYPE {\r\n    PERSPECTIVE = 'PERSPECTIVE',\r\n    ORTHOGRAPHIC = 'ORTHOGRAPHIC',\r\n    STEREO = 'STEREO'\r\n}\r\nexport class CameraControllerThree {\r\n\r\n    canvas: CanvasThree;\r\n    cameraP: THREE.PerspectiveCamera; // Camera;\r\n    cameraO: THREE.OrthographicCamera; // Camera;\r\n    controls: OrbitControls;\r\n\r\n    initX: number = 0;\r\n    initY: number = 0;\r\n    prevX: number = 0;\r\n    prevY: number = 0;\r\n\r\n    yRotRate: number;\r\n    xRotRate: number;\r\n    xPanRate: number;\r\n    yPanRate: number;\r\n    zPanRate: number;\r\n\r\n    rotateRate: number = 150; // 0.000000001; // 150;\r\n    panRate: number = 50; // 0.000000001; // 400;\r\n    zoomRate: number = 200; // 0.000000001; // 200;\r\n\r\n    zoomFactor: number = 1;\r\n\r\n    frustumSize: number = 0.001; // 500;\r\n\r\n    type: CAMERA_TYPE;\r\n    cameraShift: number = 0;\r\n\r\n    width: number;\r\n    height: number;\r\n    ableToMove: boolean = true;\r\n\r\n    // tslint:disable-next-line:no-any\r\n    stereoCamera: THREE.StereoCamera;\r\n\r\n    constructor(canvas: CanvasThree, width: number, height: number, type: CAMERA_TYPE = CAMERA_TYPE.PERSPECTIVE) {\r\n        this.canvas = canvas;\r\n        this.type = type;\r\n        this.width = width; this.height = height;\r\n        // this.aspect = width / height;\r\n\r\n        if (this.type === CAMERA_TYPE.PERSPECTIVE) {\r\n            this.GetPerspective(0, 5, 15);\r\n        } else if (this.type === CAMERA_TYPE.ORTHOGRAPHIC) {\r\n            this.GetOrthographic();\r\n        } else if (this.type === CAMERA_TYPE.STEREO) {\r\n            this.GetStereo();\r\n        }\r\n        this.stereoCamera = new THREE.StereoCamera(); // (this.canvas.renderer);\r\n    }\r\n    GetStereo() {\r\n\r\n        // console.log(StereoEffect);\r\n        // console.log(DeviceOrientationControls);\r\n\r\n    }\r\n    set aspect(aspect: number) {\r\n        if (this.type === CAMERA_TYPE.PERSPECTIVE) {\r\n            this.cameraP.aspect = aspect;\r\n        } else if (this.type === CAMERA_TYPE.ORTHOGRAPHIC) {\r\n            //\r\n        }\r\n    }\r\n    get aspect() {\r\n        return this.width / this.height;\r\n    }\r\n    get camera() {\r\n        if (this.type === CAMERA_TYPE.PERSPECTIVE) {\r\n            return this.cameraP;\r\n        } else if (this.type === CAMERA_TYPE.ORTHOGRAPHIC) {\r\n            return this.cameraO;\r\n        } else {\r\n            return this.cameraP;\r\n        }\r\n    }\r\n    GetPerspective(x: number = 0, y: number = 2, z: number = 2) {\r\n        this.cameraP = new THREE.PerspectiveCamera(45, this.width / this.height, 0.01, 10000);\r\n        this.cameraP.position.set(x, y, z);\r\n        this.InitOrbitController();\r\n    }\r\n    GetOrthographic() {\r\n        this.cameraO = new THREE.OrthographicCamera(this.frustumSize * this.aspect / - 2, this.frustumSize * this.aspect / 2, this.frustumSize / 2, this.frustumSize / - 2, 0.01, 50000);\r\n        this.cameraO.position.set(0, 1, 0);\r\n        this.InitOrbitController();\r\n    }\r\n    InitOrbitController() {\r\n\r\n        if (this.type === CAMERA_TYPE.PERSPECTIVE) {\r\n            this.controls = new OrbitControls(this.cameraP, this.canvas.renderer.domElement);\r\n        } else if (this.type === CAMERA_TYPE.ORTHOGRAPHIC) {\r\n            this.controls = new OrbitControls(this.cameraO, this.canvas.renderer.domElement);\r\n        }\r\n        // this.controls.panningMode = THREE.HorizontalPanning; // default is THREE.ScreenSpacePanning\r\n        this.controls.minDistance = 0.01;\r\n        this.controls.maxDistance = 500;\r\n        // this.controls.maxPolarAngle = Math.PI / 2;\r\n        this.controls.enablePan = true;\r\n        this.controls.enableZoom = true;\r\n\r\n        this.yRotRate = this.rotateRate / this.width * Math.PI / 90;\r\n        this.xRotRate = this.rotateRate / this.height * Math.PI / 180;\r\n        this.xPanRate = (this.panRate / this.width) * this.zoomFactor;\r\n        this.yPanRate = (this.panRate / this.height) * this.zoomFactor;\r\n        this.zPanRate = this.zoomRate / this.height;\r\n        // this.EnableDamping(true);\r\n\r\n        // this.controls.maxPolarAngle = 1.5; // ground\r\n    }\r\n    EnableDamping(v: boolean, factor: number = 0.35) {\r\n        this.controls.enableDamping = v; // an animation loop is required when either damping or auto-rotation are enabled\r\n        this.controls.dampingFactor = factor;\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.initX = this.prevX = x; // - this.offsetX;\r\n        this.initY = this.prevY = y; // - this.offsetY;\r\n    }\r\n    MouseMove(x: number, y: number, shift: boolean = false) {\r\n        if (!this.ableToMove) { return; }\r\n\r\n        // console.log(x,y)\r\n        const dx = x - this.prevX;\t\t// Difference since last mouse move\r\n        const dy = y - this.prevY;\r\n\r\n        // When shift is being helt down, we pan around else we rotate.\r\n        if (!shift) {\r\n            this.controls.rotateLeft(dx * this.xRotRate);\r\n            this.controls.rotateUp(dy * this.yRotRate);\r\n        } else {\r\n            // this.controls.pan(dx * this.xPanRate, dy * this.yPanRate);\r\n\r\n            this.controls.panLeft(dx * this.xPanRate, this.cameraP.matrix);\r\n            this.controls.panUp(dy * this.yPanRate, this.cameraP.matrix);\r\n\r\n            // this.camera.transform.position.x += -dx * this.xPanRate;\r\n            // this.camera.transform.position.y += dy * this.yPanRate;\r\n        }\r\n        // this.controls.panUp(0.001, this.camera.matrix);\r\n        this.prevX = x;\r\n        this.prevY = y;\r\n        // this.controls.update();\r\n    }\r\n    MouseWheel(v: number) {\r\n        // console.log(v);\r\n        this.controls.enableZoom = true;\r\n        v *= 0.1;\r\n\r\n        const dd = this.cameraP.position.length() * 100;\r\n\r\n        this.zoomFactor = dd;\r\n\r\n        if (v > 0) {\r\n            this.cameraP.position.x *= 0.9;\r\n            this.cameraP.position.y *= 0.9;\r\n            this.cameraP.position.z *= 0.9;\r\n        } else {\r\n            this.cameraP.position.x *= 1.1;\r\n            this.cameraP.position.y *= 1.1;\r\n            this.cameraP.position.z *= 1.1;\r\n        }\r\n\r\n    }\r\n    ShiftCamera() {\r\n        this.cameraShift++;\r\n        if (this.cameraShift === 2) { this.cameraShift = 0; }\r\n        if (this.cameraShift === 0) {\r\n            this.GetPerspective();\r\n        } else if (this.cameraShift === 1) {\r\n            this.GetOrthographic();\r\n        }\r\n    }\r\n    MouseEventController(e: MouseEventData) {\r\n        if (e.CLICK_TYPE === CLICK_TYPE.DOWN) { this.MouseDown(e.x, e.y); }\r\n        if (e.CLICK_TYPE === CLICK_TYPE.DRAG) { this.MouseMove(e.x, e.y, e.pressedShift); }\r\n        if (e.CLICK_TYPE === CLICK_TYPE.WHEEL) { this.MouseWheel(e.wheel); }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { CanvasThree } from './CanvasThree';\r\nexport class LightingController {\r\n    canvasThree: CanvasThree;\r\n    hemiLight: THREE.HemisphereLight;\r\n    dirLight: THREE.DirectionalLight;\r\n\r\n    constructor(canvasThree: CanvasThree) {\r\n        this.canvasThree = canvasThree;\r\n        this.Init();\r\n        this.canvasThree.renderer.shadowMap.enabled = true;\r\n    }\r\n    Init() {\r\n        // this.scene.add( LightUtility.GetAmbientLight());\r\n        // this.scene.add( LightUtility.GetHemiLight());\r\n        // this.scene.scene.add( LightUtility.GetDirLight());\r\n\r\n        this.hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);\r\n        this.hemiLight.color.setHSL(0.6, 1, 0.6);\r\n        this.hemiLight.groundColor.setHSL(0.095, 1, 0.75);\r\n        this.hemiLight.position.set(0, 50, 0);\r\n        // hemiLight.shadow.mapSize.width = 2048 * 2;\r\n        // hemiLight.shadow.mapSize.height = 2048 * 2;\r\n        this.canvasThree.scene.add(this.hemiLight);\r\n\r\n        const hemiLightHelper = new THREE.HemisphereLightHelper(this.hemiLight, 10);\r\n        this.canvasThree.scene.add(hemiLightHelper);\r\n        //\r\n        this.dirLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        this.dirLight.color.setHSL(0.1, 1, 0.95);\r\n        this.dirLight.position.set(- 1, 1.75, 1);\r\n        this.dirLight.position.multiplyScalar(30);\r\n        this.canvasThree.scene.add(this.dirLight);\r\n        this.dirLight.castShadow = true;\r\n\r\n        this.dirLight.castShadow = true;\r\n        this.dirLight.shadow.mapSize.width = 2048 * 4;\r\n        this.dirLight.shadow.mapSize.height = 2048 * 4;\r\n\r\n        var d = 50;\r\n        this.dirLight.shadow.camera.left = - d;\r\n        this.dirLight.shadow.camera.right = d;\r\n        this.dirLight.shadow.camera.top = d;\r\n        this.dirLight.shadow.camera.bottom = - d;\r\n\r\n        this.dirLight.shadow.bias = - 0.0000001;\r\n\r\n        this.dirLight.shadow.camera.near = 0.001;\r\n        this.dirLight.shadow.camera.far = 350;\r\n\r\n        const dirLightHeper = new THREE.DirectionalLightHelper(this.dirLight, 10);\r\n        this.canvasThree.scene.add(dirLightHeper);\r\n    }\r\n    Dispose() {\r\n        this.dirLight.visible = false;\r\n        this.hemiLight.visible = false;\r\n        this.canvasThree.scene.remove(this.dirLight);\r\n        this.canvasThree.scene.remove(this.hemiLight);\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { GraphicsCoreWrapper } from '..';\r\nimport { CameraControllerThree } from './CameraController';\r\nimport { LightingController } from './LightingController';\r\nexport class CanvasThree {\r\n    hostDiv: HTMLElement;\r\n    camera: CameraControllerThree;\r\n    scene: THREE.Scene;\r\n    renderer: THREE.WebGLRenderer;\r\n    lightingController: LightingController;\r\n\r\n    graphicsCoreWrapper: GraphicsCoreWrapper;\r\n    vrBtn: HTMLElement;\r\n    bg: number = 0x000000;\r\n    isActive: boolean = true;\r\n\r\n    constructor(graphicsCoreWrapper: GraphicsCoreWrapper, hostDiv: HTMLElement) {\r\n        this.graphicsCoreWrapper = graphicsCoreWrapper;\r\n        this.hostDiv = hostDiv;\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        const width = this.hostDiv.clientWidth;\r\n        const height = this.hostDiv.clientHeight;\r\n\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        this.renderer.setPixelRatio(width / height);\r\n\r\n        this.camera = new CameraControllerThree(this, width, height);\r\n        this.scene = new THREE.Scene();\r\n        // this.scene.background = '#dddddd';\r\n\r\n        this.renderer.domElement.id = 'THREE_WALLPAPER';\r\n        this.renderer.domElement.style.position = 'absolute';\r\n        this.renderer.domElement.style.pointerEvents = 'none';\r\n\r\n        this.renderer.setSize(width, height);\r\n        this.hostDiv.appendChild(this.renderer.domElement);\r\n\r\n        this.lightingController = new LightingController(this);\r\n        this.RenderLoop(this);\r\n    }\r\n    RenderLoop(canvas: CanvasThree) {\r\n        if (!this.isActive) { return; }\r\n        requestAnimationFrame(() => { this.RenderLoop(this); });\r\n        this.UpdateBinding();\r\n\r\n        this.camera.controls.update();\r\n        this.renderer.render(this.scene, this.camera.camera);\r\n    }\r\n    UpdateBinding() {\r\n        console.log('implementation needed');\r\n    }\r\n    ResizeCanvas(width: number, height: number) {\r\n        this.camera.aspect = width / height;\r\n        this.camera.camera.updateProjectionMatrix(); // updateMatrix(); // updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n    }\r\n    ResizeEffect(width: number, height: number) {\r\n        // this.camera.effect.setSize(width, height);\r\n    }\r\n    Remove() {\r\n        while (this.scene.children.length) {\r\n            this.scene.remove(this.scene.children[0]);\r\n        }\r\n        // this.scene.background = 0x000000;\r\n    }\r\n\r\n}","\r\nimport { NTerrain } from '..';\r\n\r\nimport { CanvasThree } from './CanvasWrapper/CanvasThree';\r\n// import { ThemeWrapper } from './ThemeWrapper';\r\n\r\nexport class GraphicsCoreWrapper {\r\n    app: NTerrain;\r\n    canvasWrapper: CanvasThree;\r\n    // themeWrapper: ThemeWrapper;\r\n    constructor(app: NTerrain) {\r\n        this.app = app;\r\n        this.canvasWrapper = new CanvasThree(this, app.hostDiv);\r\n        // this.themeWrapper = new ThemeWrapper(this);\r\n    }\r\n}","import { NVector3 } from '../../../../../NJSCore';\r\nimport { SceneWrapper } from '..';\r\nimport { NTerrain3DField } from '../Definition';\r\nimport * as THREE from 'three';\r\nexport class PointInersection {\r\n    vec: NVector3;\r\n    data: THREE.Intersection;\r\n    constructor(x: number, y: number, z: number) {\r\n        this.vec = new NVector3(x, y, z);\r\n    }\r\n}\r\nexport class GeometryCommon {\r\n\r\n    static list: NTerrain3DField[] = [];\r\n    static listMesh: THREE.Object3D[] = [];\r\n\r\n    scene: SceneWrapper;\r\n\r\n    raycaster: THREE.Raycaster;\r\n    m: THREE.Vector2;\r\n    point: PointInersection | undefined;\r\n\r\n    capture: NTerrain3DField;\r\n\r\n    constructor(scene: SceneWrapper) {\r\n        this.scene = scene;\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.raycaster.params.Points = { threshold: 0.1 };\r\n\r\n        // if (this.raycaster.params.Points) {\r\n        //     this.raycaster.params.Points.threshold = 0.1;\r\n        //     console.log('==================');\r\n        // }\r\n\r\n        this.m = new THREE.Vector2();\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // this.grid = new Grid(this);\r\n        // this.ground = new Ground(this, 0, 0, 0);\r\n\r\n    }\r\n    get Capture() {\r\n        // if (this.capture) { return this.capture; } else { return this.capture; }\r\n        return this.capture;\r\n    }\r\n    set Capture(v: NTerrain3DField) {\r\n        // if (this.capture !== undefined) {\r\n        //     this.capture.isSelected = false;\r\n        // }\r\n        this.capture = v;\r\n        // this.capture.isSelected = true;\r\n\r\n        // console.log(this.capture.uuid);\r\n    }\r\n    Add(g: NTerrain3DField) {\r\n        GeometryCommon.list.push(g);\r\n        GeometryCommon.listMesh.push(g.mesh);\r\n        this.scene.scene.add(g.mesh);\r\n        // console.log(this.scene.scene);\r\n    }\r\n    Remove(g: NTerrain3DField) {\r\n        this.scene.scene.remove(g.mesh);\r\n        GeometryCommon.listMesh.splice(GeometryCommon.listMesh.indexOf(g.mesh), 1);\r\n        GeometryCommon.list.splice(GeometryCommon.list.indexOf(g), 1);\r\n    }\r\n    Update() {\r\n        let i = GeometryCommon.list.length;\r\n        while (i--) { GeometryCommon.list[i].Update(); }\r\n        // GeometryWrapperBase.Update();\r\n    }\r\n    Raycast(x: number, y: number) {\r\n        // this.m.x = (x / this.scene.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvasThree.renderer.domElement.clientWidth) * 2 - 1;\r\n        // this.m.y = - (y / this.scene.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvasThree.renderer.domElement.clientHeight) * 2 + 1;\r\n        // this.raycaster.setFromCamera(this.m, this.scene.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvasThree.camera);\r\n        // let i = GeometryCommon.list.length;\r\n        // while (i--) {\r\n        //     GeometryCommon.list[i].isHover = false;\r\n        // }\r\n        // const intersects = this.raycaster.intersectObjects(GeometryCommon.listMesh);\r\n\r\n        // if (intersects.length > 0) {\r\n        //     this.point = new PointInersection(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z);\r\n        //     this.point.data = intersects[0];\r\n        //     // console.log(this.point);\r\n        //     // tslint:disable-next-line:no-string-literal\r\n        //     let geo = intersects[0].object['geo'] as NTerrain3DField;\r\n        //     geo.isHover = true;\r\n        //     this.Capture = geo;\r\n        //     // helper.position.set(0, 0, 0);\r\n        //     // helper.lookAt(intersects[0].face.normal);\r\n        //     // helper.position.copy(intersects[0].point);\r\n        //     return this.Capture;\r\n        // }\r\n        // // }\r\n        // this.point = undefined;\r\n        // return undefined;\r\n    }\r\n    // RaycastHover(x: number, y: number) {\r\n    //     this.m.x = (x / this.scene.renderer.domElement.clientWidth) * 2 - 1;\r\n    //     this.m.y = - (y / this.scene.renderer.domElement.clientHeight) * 2 + 1;\r\n    //     this.raycaster.setFromCamera(this.m, this.scene.camera.camera);\r\n    //     const intersects = this.raycaster.intersectObjects(GeometryCommon.listMesh);\r\n\r\n    //     if (intersects.length > 0) {\r\n    //         // tslint:disable-next-line:no-string-literal\r\n    //         let geo = intersects[0].object['geo'] as NTerrain3DField;\r\n    //         geo.isHover = true;\r\n    //     }\r\n    // }\r\n\r\n    // ...............................................................\r\n\r\n    // InitLighting() {\r\n    //     this.scene.scene.add(new THREE.AmbientLight(0xf0f0f0));\r\n    //     var light = new THREE.SpotLight(0xffffff, 1.5);\r\n    //     light.position.set(0, 1500, 200);\r\n    //     light.castShadow = true;\r\n    //     // light.shadow  // shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(70, 1, 200, 2000));\r\n    //     light.shadow.bias = -0.000222;\r\n    //     light.shadow.mapSize.width = 1024;\r\n    //     light.shadow.mapSize.height = 1024;\r\n    //     this.scene.scene.add(light);\r\n    //     // spotlight = light;\r\n\r\n    // }\r\n    RemoveAllMesh() {\r\n        let i = GeometryCommon.list.length;\r\n        while (i--) { this.Remove(GeometryCommon.list[i]); }\r\n        // i = GeometryWrapperBase.list.length;\r\n        // while (i--) { GeometryWrapperBase.list[i].Remove(); }\r\n    }\r\n}","\r\nimport { NVector3, NVectorUtility, NumericalMotion, ColorUtility, MouseEventData } from '../../../../../NJSCore';\r\nimport { SceneWrapper } from '..';\r\nimport * as THREE from 'three';\r\nimport { Vector3 } from 'three';\r\nexport class Node {\r\n    parent: NTerrain3DField;\r\n    v: Vector3;\r\n    col: number[];\r\n    theta: number;\r\n    phi: number;\r\n    size: number;\r\n    id: number;\r\n    edges: Edge[];\r\n    seedRandom: number;\r\n    t: number;\r\n    tForR: number;\r\n\r\n    needUpdate: boolean;\r\n\r\n    constructor(parent: NTerrain3DField, i: number, v: Vector3, c: number[], s: number) {\r\n        this.parent = parent;\r\n        this.t = 0.0;\r\n        this.v = v;\r\n        this.id = i;\r\n        this.col = c;\r\n        this.size = s;\r\n        this.tForR = 0.0;\r\n\r\n        this.seedRandom = Math.random();\r\n    }\r\n    Translate(x: number, y: number, z: number) {\r\n        this.v.setX(this.parent.attributePositions.getX(this.id));\r\n        this.v.setY(this.parent.attributePositions.getY(this.id));\r\n        this.v.setZ(this.parent.attributePositions.getZ(this.id));\r\n        this.parent.attributePositions.setXYZ(this.id, this.v.x + x, this.v.y + y, this.v.z + z);\r\n    }\r\n    Scale(s: number) {\r\n        this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, this.size + s);\r\n    }\r\n    ScalebyValue(s: number) {\r\n        this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, s);\r\n    }\r\n    SetScale(s: number) {\r\n        // this.size = this.parent.attributeSize.getX(this.id);\r\n        this.parent.attributeSize.setX(this.id, s);\r\n        this.needUpdate = true;\r\n        this.tForR = 0.0;\r\n        this.t = 0.0;\r\n    }\r\n    Update(t: number) {\r\n        if (!this.needUpdate) { return; }\r\n        this.t += 0.019;\r\n        this.ScalebyValue(NumericalMotion.easeOutElastic2(this.tForR) * this.seedRandom);\r\n        this.tForR += 0.01;\r\n\r\n        if (this.t > 1) {\r\n            this.needUpdate = false;\r\n            this.SetScale(0.1);\r\n        }\r\n    }\r\n}\r\nexport class Edge {\r\n\r\n    parent: NTerrain3DField;\r\n    n0: Node;\r\n    n1: Node;\r\n    size: number;\r\n    id: number;\r\n    seedRandom: number;\r\n\r\n    constructor(parent: NTerrain3DField, i: number, n0: Node, n1: Node, s: number) {\r\n        this.parent = parent;\r\n        this.id = i;\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.size = s;\r\n        this.seedRandom = Math.random();\r\n    }\r\n    Update(t: number) {\r\n        //\r\n    }\r\n}\r\n\r\nexport class NTerrain3DField {\r\n\r\n    shaderVert = `\r\n    attribute float size;\r\n    attribute vec3 customColor;\r\n    varying vec3 vColor;\r\n\r\n    void main() {\r\n        vColor = customColor;\r\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n        gl_PointSize = size * ( 300.0 / -mvPosition.z );\r\n        gl_Position = projectionMatrix * mvPosition;\r\n    }\r\n    `;\r\n\r\n    shaderFrag = `\r\n    uniform vec3 color;\r\n    uniform sampler2D texture;\r\n    varying vec3 vColor;\r\n\r\n\tvoid main() {\r\n        gl_FragColor = vec4(color * vColor, 1.0);\r\n        gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\r\n        if (gl_FragColor.a < ALPHATEST) discard;\r\n    }\r\n    `;\r\n\r\n    attributePositions: THREE.BufferAttribute;\r\n    attributeColors: THREE.BufferAttribute;\r\n    attributeSize: THREE.BufferAttribute;\r\n\r\n    currentHex: string;\r\n    globe: THREE.Group;\r\n    particles: THREE.Points;\r\n\r\n    nodes: Node[];\r\n    edges: Edge[];\r\n    vecs: Vector3[];\r\n    nVecs: NVector3[];\r\n\r\n    PARTICLE_SIZE: number;\r\n    DOT_COLOR: string;\r\n    SPEED_ROTATION: number;\r\n\r\n    geometry: THREE.BufferGeometry;\r\n    mesh: THREE.Object3D;\r\n    material: THREE.Material;\r\n\r\n    uuid: string;\r\n    isHover: boolean = false;\r\n    isLeave: boolean = false;\r\n    isSelected: boolean = false;\r\n    isDrag: boolean = false;\r\n    isMove: boolean = false;\r\n\r\n    hasPopup: boolean = false;\r\n\r\n    vec: NVector3 = new NVector3(0, 0, 0);\r\n    scale: NVector3 = new NVector3(1, 1, 1);\r\n\r\n    t: number = 0.0;\r\n    tOver: number = 0.0;\r\n    tDown1: number = 0.0;\r\n    tDown2: number = 0.0;\r\n    tUp: number = 0.0;\r\n\r\n    I_STEP_ANI: number = 10;\r\n\r\n    lineSegments: THREE.LineSegments;\r\n    lineSegGeo: THREE.BufferGeometry;\r\n\r\n    box: THREE.Mesh;\r\n\r\n    mouse: THREE.Vector2;\r\n    scene: SceneWrapper;\r\n\r\n    constructor(scene: SceneWrapper) {\r\n        this.scene = scene;\r\n\r\n        this.vec = new NVector3(0, 0, 0);\r\n        this.scale = new NVector3(1, 1, 1);\r\n        this.currentHex = '0xff0000'; // ;this.mesh.material[0].emissive.getHex();\r\n\r\n        this.DOT_COLOR = ColorUtility.GetRandomHex(); //  '#7116b7';\r\n        this.PARTICLE_SIZE = 0.055;\r\n        this.I_STEP_ANI = Math.floor(Math.random() * 10) * 2;\r\n        this.SPEED_ROTATION = 0.0005 + Math.random() * 0.001;\r\n\r\n        this.mouse = new THREE.Vector2();\r\n\r\n        this.Init();\r\n\r\n        this.Add();\r\n    }\r\n    Init(num: number = 7) {\r\n        this.InitVec(num);\r\n        const buff = this.InitNode();\r\n        this.InitBuffer(buff[0], buff[1], buff[2]);\r\n\r\n        this.InitGeometry();\r\n        this.InitMaterial();\r\n        this.InitMesh();\r\n\r\n    }\r\n    InitVec(num: number = 10) {\r\n        this.nVecs = NVectorUtility.GetGridVec3d(num, num, num, -5, -2, -5, 5, 2, 5);\r\n        this.vecs = [];\r\n        for (let i = 0; i < this.nVecs.length; ++i) {\r\n            this.vecs.push(new Vector3(this.nVecs[i].x, this.nVecs[i].y, this.nVecs[i].z));\r\n        }\r\n    }\r\n    InitNode() {\r\n        let positions = []; let colors = []; let sizes = []; this.nodes = [];\r\n        for (let i = 0; i < this.vecs.length; ++i) {\r\n            positions.push(this.vecs[i].x, this.vecs[i].y, this.vecs[i].z);\r\n            let col = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.2 + Math.random() * 0.7);\r\n            colors.push(col[0] / 255, col[1] / 255, col[2] / 255, col[3]);\r\n            let size = i * 0.0005; // this.PARTICLE_SIZE + (Math.random() - 0.5) * 0.15;\r\n            // let size = i + this.PARTICLE_SIZE + (Math.random() - 0.5) * 0.15;\r\n            sizes.push(size);\r\n            const dot = new Node(this, i, this.vecs[i], col, size);\r\n            this.nodes.push(dot);\r\n        }\r\n        return [positions, colors, sizes];\r\n    }\r\n    InitBuffer(positions: number[], colors: number[], sizes: number[]) {\r\n        this.attributePositions = new THREE.BufferAttribute(new Float32Array(positions), 3);\r\n        this.attributeColors = new THREE.BufferAttribute(new Float32Array(colors), 4);\r\n        this.attributeSize = new THREE.BufferAttribute(new Float32Array(sizes), 1);\r\n    }\r\n    async InitGeometry() {\r\n        // this.globe = new THREE.Group();\r\n\r\n        this.geometry = new THREE.BufferGeometry();\r\n        this.geometry.setAttribute('position', this.attributePositions);\r\n        this.geometry.setAttribute('customColor', this.attributeColors);\r\n        this.geometry.setAttribute('size', this.attributeSize);\r\n\r\n        // let file = 'dotTexture.png';\r\n        // let path = `${location.origin}/njslabSandboxStatic/img/${file}`;\r\n        // let path = `njslabSandboxStatic/img/${file}`;\r\n        let path = 'http://njslab.com/NJSLabCore/njslabSandboxStatic/img/dotTexture.png';\r\n        console.log(path);\r\n        let material = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                color: { value: new THREE.Color(0xffffff) },\r\n                texture: { value: new THREE.TextureLoader().load(path) }\r\n            },\r\n            vertexShader: this.shaderVert,\r\n            fragmentShader: this.shaderFrag,\r\n            alphaTest: 0.9\r\n        });\r\n        material.transparent = true;\r\n\r\n        // let geometry = new THREE.BoxBufferGeometry(0.1, 0.1, 0.1);\r\n        // let box = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff }));\r\n        // AppWallPaperGL.app.canvasThree.scene.add(box);\r\n        // this.box = box;\r\n\r\n        // var wrap = new THREE.Points(geo, material);\r\n        // this.mesh = wrap;\r\n        // AppWallPaperGL.app.canvasThree.scene.add(wrap);\r\n\r\n        // let blendings = ['NoBlending', 'NormalBlending', 'AdditiveBlending', 'SubtractiveBlending', 'MultiplyBlending'];\r\n        // material.blending = THREE[blendings[2]];\r\n        // console.log(path);\r\n        // let material = new THREE.PointsMaterial({ color: 0x888888 }); // new THREE.ShaderMaterial();\r\n\r\n        this.particles = new THREE.Points(this.geometry, material);\r\n        this.mesh = this.particles;\r\n        // this.globe.add(this.mesh);\r\n        // AppWallPaperGL.app.canvasThree.scene.add(this.mesh);\r\n\r\n        // Create white segments\r\n        this.lineSegGeo = new THREE.BufferGeometry();\r\n        var segmentsMat = new THREE.LineBasicMaterial({\r\n            color: 0xffffff,\r\n            transparent: true,\r\n            opacity: 0.3,\r\n            vertexColors: true\r\n        });\r\n        // segmentsMat.blending = THREE[blendings[4]];\r\n        const lns = [];\r\n        this.edges = [];\r\n        let theIndex = 0;\r\n        for (let i = 0; i < this.nodes.length - 1; ++i) {\r\n            for (let j = i; j < this.nodes.length; ++j) {\r\n                if (this.vecs[i].distanceTo(this.vecs[j]) < 2.15) {\r\n                    lns.push(this.vecs[i], this.vecs[j]);\r\n                    // this.lineSegGeo.vertices.push(this.vecs[i]);\r\n                    // this.lineSegGeo.vertices.push(this.vecs[j]);\r\n\r\n                    // const c0 = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.7 + (Math.random() - 0.5) * 0.7);\r\n                    // const c1 = ColorUtility.GetRandomColorByLightness(this.DOT_COLOR, 0.4 + (Math.random() - 0.5) * 0.3);\r\n\r\n                    const c0 = this.nodes[i].col;\r\n                    const c1 = this.nodes[j].col;\r\n                    // this.lineSegGeo.colors.push(new THREE.Color(c0[0] / 255, c0[1] / 255, c0[2] / 255));\r\n                    // this.lineSegGeo.colors.push(new THREE.Color(c1[0] / 255, c1[1] / 255, c1[2] / 255));\r\n\r\n                    this.edges.push(new Edge(this, theIndex, this.nodes[i], this.nodes[j], 0.01));\r\n                    theIndex++;\r\n                }\r\n            }\r\n        }\r\n        this.lineSegments = new THREE.LineSegments(this.lineSegGeo, segmentsMat);\r\n\r\n        // this.globe.add(this.lineSegments);\r\n        // this.mesh = this.globe;\r\n        // AppWallPaperGL.app.canvasThree.scene.add(this.globe);\r\n        // console.log(\"ddd\");\r\n        this.scene.scene.add(this.lineSegments);\r\n    }\r\n    InitMaterial() {\r\n        this.material = new THREE.MeshNormalMaterial();\r\n    }\r\n    InitMesh() {\r\n        // this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n        // // this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z); // = x; this.mesh.position.y = y; this.mesh.position.z = z;\r\n        // this.mesh.receiveShadow = true;\r\n        // this.mesh.castShadow = true;\r\n        // this.mesh.position.setX(Math.random() * 100);\r\n    }\r\n\r\n    // ............................................................................................\r\n    UpdatePost(): void {\r\n        for (let i = 0; i < this.nodes.length; ++i) { this.nodes[i].Update(this.t); }\r\n        for (let i = 0; i < this.edges.length; ++i) { this.edges[i].Update(this.t); }\r\n        // this.lineSegGeo.verticesNeedUpdate = true;\r\n\r\n        this.attributePositions.needsUpdate = true;\r\n        this.attributeSize.needsUpdate = true;\r\n\r\n        // this.particles.rotation.x += 0.0005;\r\n        // this.globe.rotation.z += this.SPEED_ROTATION; // 0.0005\r\n\r\n        // this.mesh.rotation.z += this.SPEED_ROTATION;\r\n        // this.lineSegments.rotation.z += this.SPEED_ROTATION;\r\n\r\n        // for (let i = 0; i < this.attributePositions.array.length; i++) {\r\n        //     this.attributePositions.setXYZ(i, Math.random(), Math.random(), Math.random());\r\n        // }\r\n        // this.mesh.position[0].setX(0.1 + this.mesh.position[0].clientX);\r\n\r\n        // this.UpdateDotAnimation();\r\n        // AppWallPaperGL.app.canvasThree.camera.camera.rotateY(this.t * 0.001);\r\n        // this.segmentsGeom.verticesNeedUpdate = true;\r\n        this.t += 0.0005;\r\n    }\r\n    UpdateDotAnimation() {\r\n        let ii = 0;\r\n        for (let i = 0; i < this.nodes.length; i += this.I_STEP_ANI) {\r\n            let rnd = this.nodes[i].seedRandom - 0.5;\r\n            let theT = this.t * rnd;\r\n            if (ii % 3 === 0) {\r\n                this.nodes[i].Translate(Math.sin(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd);\r\n            } else if (ii % 3 === 1) {\r\n                this.nodes[i].Translate(Math.sin(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd, Math.cos(theT) * 0.005 * rnd);\r\n            } else {\r\n                this.nodes[i].Translate(Math.cos(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd, Math.sin(theT) * 0.005 * rnd);\r\n            }\r\n            ii++;\r\n            // this.nodes[i].Scale(Math.sin(theT) * 0.000005 * rnd * rnd);\r\n        }\r\n    }\r\n    Raycast(x: number, y: number) {\r\n        // const canvasThree = this.scene.implementation.app.model.graphicsCoreWrapper.model.graphicsCoreWrapper.canvasWrapper.canvasThree;\r\n        // this.mouse.x = (x / canvasThree.renderer.domElement.clientWidth) * 2 - 1;\r\n        // this.mouse.y = - (y / canvasThree.renderer.domElement.clientHeight) * 2 + 1;\r\n\r\n        // this.scene.geometryCommon.raycaster.setFromCamera(this.mouse, canvasThree.camera.camera);\r\n        // const intersects = this.scene.geometryCommon.raycaster.intersectObjects([this.mesh]);\r\n\r\n        // if (intersects.length > 0) {\r\n        //     // console.log(intersects[0]);\r\n        //     // console.log(pos[intersects[0].index]);\r\n\r\n        //     // this.attributePositions.setXYZ(intersects[0].index, 0.1, 0.1, 0.1); this.attributePositions.needsUpdate = true;\r\n        //     // this.attributeSize.setX(intersects[0].index, 1); this.attributeSize.needsUpdate = true;\r\n\r\n        //     // this.box.position.setX(intersects[0].point.x);\r\n        //     // this.box.position.setY(intersects[0].point.y);\r\n        //     // this.box.position.setZ(intersects[0].point.z);\r\n\r\n        //     return intersects[0].index;\r\n        // }\r\n        // return undefined;\r\n    }\r\n    MouseDown(m: MouseEventData) {\r\n        // console.log('down');\r\n        this.Init(9);\r\n        // const d = this.Raycast(m.x, m.y);\r\n\r\n        // // const d = this.Raycast(m.x, m.y);\r\n        // console.log(d);\r\n    }\r\n    MouseMove(m: MouseEventData) {\r\n        // // // console.log('move');\r\n        // // console.log(m.x, m.y);\r\n        // const d = this.Raycast(m.x, m.y);\r\n        // if (d) {\r\n        //     this.nodes[d].SetScale(Math.random());\r\n        //     // console.log(d.object.visible = false);\r\n        // }\r\n        // // // const d = AppWallPaperGL.app.canvasThree.geometryCommon.Raycast(m.x, m.y);\r\n        // // console.log(d);\r\n    }\r\n    Add() {\r\n        // console.log(AppVisThree.app.canvasThree);\r\n        this.uuid = this.mesh.uuid;\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.mesh['geo'] = this;\r\n        this.scene.geometryCommon.Add(this);\r\n        // console.log(this);\r\n    }\r\n    Update() {\r\n        this.t += 0.1;\r\n        this.UpdatePost();\r\n    }\r\n    Remove() {\r\n        // this.scene.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvasThree.scene.remove(this.lineSegments);\r\n        // this.scene.geometryCommon.Remove(this);\r\n\r\n    }\r\n    Dispose() {\r\n        this.Remove();\r\n        this.geometry.dispose();\r\n        this.lineSegGeo.dispose();\r\n    }\r\n}","import { NVector3 } from '../../../../../../../NJSCore/';\r\nimport { PixelMapTerrain } from './PixelMapTerrain';\r\nexport class Pixel {\r\n    static ID = 0;\r\n\r\n    map: PixelMapTerrain;\r\n    vec: NVector3;\r\n    norV: NVector3;\r\n    nPix: Pixel[] = [];\r\n    recVec: NVector3[];\r\n    i: number = -1;\r\n    j: number = -1;\r\n    k: number = -1;\r\n    u: number = -1;\r\n    v: number = -1;\r\n    id: number;\r\n    data: {};\r\n\r\n    static GetID() { return Pixel.ID++; }\r\n\r\n    constructor(map: PixelMapTerrain, v: NVector3 = new NVector3(0, 0, 0)) {\r\n        this.map = map;\r\n        this.vec = v;\r\n        this.nPix = [];\r\n        this.recVec = [];\r\n        this.i = -1;\r\n        this.j = -1;\r\n        this.k = -1;\r\n        this.id = Pixel.GetID();\r\n        this.data = {};\r\n    }\r\n    ToString() {\r\n        let temp = 'Pixel' + this.id;\r\n        console.log(temp);\r\n        return temp;\r\n    }\r\n    Update() {\r\n        /* */\r\n    }\r\n    Render() {\r\n        /* */\r\n    }\r\n}\r\n","import { ColorUtility, NVector3 } from '../../../../../../../NJSCore/';\r\n\r\nimport { Pixel } from './Pixel';\r\n// function NDataPixelInit() {\r\n// \tconsole.log('NDataPixel is init...');\r\n// \tpMap = new PixelMapTerrain();\r\n// \tpMap.rx = 10;\r\n// \tpMap.ry = 10;\r\n// \tpMap.p0 = new NPoint3d(-10, -10,0);\r\n// \tpMap.p1 = new NPoint3d(10,10,0);\r\n// \tpMap.Init();\r\n\r\n// \tpMap.VisCenterPoints();\r\n// \tpMap.VisLineGrid();\r\n// \tpMap.VisMeshGrid();\r\n// };\r\n\r\n/////////////////// PixelMapTerrain class\r\nexport class PixelMapTerrain {\r\n    public static img: HTMLImageElement;\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public img: HTMLImageElement;\r\n    public listPixel: Pixel[] = [];\r\n    public width: number;\r\n    public height: number;\r\n    public rx: number = 0;\r\n    public ry: number = 0;\r\n    public sx: number = 0;\r\n    public sy: number = 0;\r\n    public sz: number = 0;\r\n    public ddx: number = 0.0;\r\n    public ddy: number = 0.0;\r\n    public v0: NVector3;\r\n    public v1: NVector3;\r\n\r\n    constructor(img: HTMLImageElement, rx: number = 250, ry: number = 250, sx: number = 1, sy: number = 1, sz: number = 1) {\r\n        this.img = img;\r\n        console.log(img);\r\n\r\n        let canvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        canvas.width = this.img.width * sx;\r\n        canvas.height = this.img.height * sy;\r\n        this.ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        // this.img.width = this.img.width * sx;\r\n        // this.img.height = this.img.height * sy;\r\n        this.ctx.drawImage(this.img, 0, 0);\r\n\r\n        this.width = this.img.width;\r\n        this.height = this.img.height;\r\n\r\n        console.log(this.img.width, this.img.height, 'lllllllllllllll');\r\n        this.rx = rx; this.ry = ry;\r\n        this.sx = sx; this.sy = sy; this.sz = sz;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        this.v0 = new NVector3(-this.width * 0.5 * this.sx, -this.img.height * this.sy * 0.5, 0);\r\n        this.v1 = new NVector3(this.width * 0.5 * this.sx, this.img.height * this.sy * 0.5, 0);\r\n\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.ddx = this.width * this.sx / (this.rx - 1.0);\r\n        this.ddy = this.height * this.sy / (this.ry - 1.0);\r\n        console.log('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n        console.log('Pixe Map was executed...');\r\n        this.InitGrid();\r\n    }\r\n    InitGrid() {\r\n        console.log(this);\r\n        let vv = 0;\r\n        for (let y = 0; y < this.ry; ++y) {\r\n            let uu = 0;\r\n            for (let x = 0; x < this.rx; ++x) {\r\n\r\n                let px = new Pixel(this);\r\n\r\n                px.i = x; px.j = y;\r\n                px.u = uu; px.v = vv;\r\n\r\n                let theX = this.v0.x + (this.ddx * x);\r\n                let theY = this.v0.y + (this.ddy * y);\r\n\r\n                let dd = this.ctx.getImageData((this.ddx * x / this.sx), (this.ddx * y / this.sy), 1, 1).data;\r\n                let zVal = ColorUtility.RGBtoGray(dd[0], dd[1], dd[2]);\r\n                let theZ = -zVal * this.sz;\r\n\r\n                let pos = [theX, theY, theZ];\r\n                px.vec = new NVector3(pos[0], pos[1], pos[2]);\r\n                px.norV = NVector3.Normalize(px.vec);\r\n\r\n                pos = [theX - this.ddx * 0.5, theY - this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX + this.ddx * 0.5, theY - this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX + this.ddx * 0.5, theY + this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX - this.ddx * 0.5, theY + this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // console.log(zz);\r\n\r\n                this.listPixel.push(px);\r\n                uu++;\r\n            }\r\n            vv++;\r\n        }\r\n        // console.log(this.listPixel);\r\n        this.InitGridNeighbor();\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                px0.nPix = [];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n        console.log('done for computing neighbors ');\r\n    }\r\n    GetPixelAtPoint(pt: NVector3) {\r\n        let pixelMap = this;\r\n        let dp = new NVector3(pt.x - pixelMap.v0.x, pt.y - pixelMap.v0.y, pt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx);\r\n        let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    ////////////////// event\r\n    MouseMove(x: number, y: number, z: number) {\r\n        let pixelMap = this;\r\n        console.log('mouseMove x:' + x + ', y:' + y + ', z:' + z);\r\n        let cpt = pixelMap.GetPixelAtPoint(new NVector3(x, y, z));\r\n        console.log(cpt.nPix);\r\n        // VisBufferPointsFromVecs(cpt.ptsCenter, 100);\r\n    }\r\n    onDocumentMouseMove() {\r\n        console.log('move');\r\n    }\r\n    onmouseenter() {\r\n        console.log('enter');\r\n    }\r\n    ////////////////// visualization\r\n    CVisLineGrid(ctx: CanvasRenderingContext2D) {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            let color = '#ff0000';\r\n            // console.log('d');\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(pixelMap.listPixel[i].recVec[0].x, pixelMap.listPixel[i].recVec[0].y);\r\n            // console.log(pixelMap.listPixel[i].recVec)\r\n            for (let j = 1; j < pixelMap.listPixel[i].recVec.length; ++j) {\r\n                ctx.lineTo(pixelMap.listPixel[i].recVec[j].x, pixelMap.listPixel[i].recVec[j].y);\r\n                // console.log(pixelMap.listPixel[i].nPix[j].vec.x, pixelMap.listPixel[i].nPix[j].vec.y);\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.strokeStyle = color; // ColorUtility.HexToCanvasColor(color, 1);\r\n            ctx.stroke();\r\n            // ctx.fill();\r\n        }\r\n    }\r\n    VisMeshGrid() {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        }\r\n    }\r\n    VisCenterPoints() {\r\n        let pixelMap = this;\r\n        let pts: NVector3[] = [];\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            pts.push(pixelMap.listPixel[i].vec);\r\n        }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    GetTriFloatArray() { return new Float32Array(this.GetTriArray()); }\r\n    GetTriArray() {\r\n        let array: number[] = [];\r\n        // for (let i = 0; i < this.listPixel.length; ++i) {\r\n        //     p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[3]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[1]; array.push(p.x, p.y, p.z);\r\n\r\n        // }\r\n        for (let j = 0; j < this.ry - 1; ++j) {\r\n            let p = new Pixel(this, NVector3.Origin());\r\n            for (let i = 0; i < this.rx - 1; ++i) {\r\n                let k = j * this.rx + i;\r\n                p = this.listPixel[k]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n    GetPtFloatArray() { return new Float32Array(this.GetPtArray()); }\r\n    GetPtArray() {\r\n        let array: number[] = [];\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let p = this.listPixel[i].vec;\r\n            array.push(p.x, p.y, p.z);\r\n        }\r\n        return array;\r\n    }\r\n    GetNormalFloatArray() { return new Float32Array(this.GetNormalArray()); }\r\n    GetNormalArray() {\r\n        let array: number[] = [];\r\n\r\n        // let p = NVector3.origin;\r\n        // for (let i = 0; i < this.listPixel.length; ++i) {\r\n        //     p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[3]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[1]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        // }\r\n\r\n        let p = new Pixel(this, NVector3.Origin());\r\n        let v = new NVector3(0, 0, 0);\r\n        for (let j = 0; j < this.ry - 1; ++j) {\r\n            for (let i = 0; i < this.rx - 1; ++i) {\r\n                let k = i + j * this.rx;\r\n                p = this.listPixel[k]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n\r\n            }\r\n        }\r\n\r\n        return array;\r\n    }\r\n    GetTexCoordinFloatArray() { return new Float32Array(this.GetTexCoordinArray()); }\r\n    GetTexCoordinArray() {\r\n        let array: number[] = [];\r\n        // let p = NVector3.origin;\r\n\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let u = this.listPixel[i].u / (this.rx - 1);\r\n            let v = this.listPixel[i].v / (this.ry - 1);\r\n            array.push(u, v);\r\n            array.push(u, v + this.ddy);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u, v);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u + this.ddx, v);\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n        }\r\n\r\n        return array;\r\n    }\r\n}","import { PixelMapTerrain } from './PixelMapTerrain/PixelMapTerrain';\r\nimport * as THREE from 'three';\r\n\r\nexport abstract class GeometryWrapperBase {\r\n    private static list: GeometryWrapperBase[] = [];\r\n\r\n    static update(): void {\r\n        for (let i = GeometryWrapperBase.list.length - 1; i >= 0; i--) {\r\n            GeometryWrapperBase.list[i].update();\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        GeometryWrapperBase.list.push(this);\r\n    }\r\n\r\n    update(): void {\r\n        this.updatePost();\r\n    }\r\n\r\n    remove(): void { /* */ }\r\n    protected updatePost(): void { /* */ }\r\n}\r\n\r\nexport class TerrainMapThree extends GeometryWrapperBase {\r\n    private static instance: TerrainMapThree | undefined;\r\n\r\n    private geometry: THREE.BufferGeometry;\r\n    private mesh: THREE.Mesh;\r\n    private pixelMapTerrain: PixelMapTerrain;\r\n    private img: HTMLImageElement;\r\n    private scene: THREE.Scene;\r\n\r\n    static shiftShader(): void {\r\n        TerrainMapThree.instance?.shiftShader();\r\n    }\r\n\r\n    constructor(scene: THREE.Scene) {\r\n        super();\r\n        this.scene = scene;\r\n        this.loadImage();\r\n    }\r\n\r\n    private async loadImage(): Promise<void> {\r\n        const file = 'fragment.png';\r\n        const imagePath = `njslabSandboxStatic/img/${file}`;\r\n\r\n        try {\r\n            this.img = await this.loadImageAsync(imagePath);\r\n            this.initDataStructure();\r\n            this.initGeometry();\r\n            this.initMesh();\r\n        } catch (error) {\r\n            console.error('Failed to load image:', error);\r\n        }\r\n    }\r\n\r\n    private loadImageAsync(src: string): Promise<HTMLImageElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.src = src;\r\n        });\r\n    }\r\n\r\n    private initDataStructure(): void {\r\n        console.log(this.img.width);\r\n        this.pixelMapTerrain = new PixelMapTerrain(this.img, 40, 40, 1, 1, 0.2);\r\n    }\r\n\r\n    private initGeometry(): void {\r\n        const vs = this.pixelMapTerrain.GetTriFloatArray();\r\n        const vertices = new Float32Array(vs);\r\n        const indices = [];\r\n\r\n        for (let i = 0; i < vertices.length / 3 - 2; i += 3) {\r\n            indices.push(i, i + 1, i + 2);\r\n        }\r\n\r\n        this.geometry = new THREE.BufferGeometry();\r\n        this.geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        this.geometry.setIndex(indices);\r\n        this.geometry.rotateX(Math.PI * 0.5);\r\n        this.geometry.computeVertexNormals();\r\n    }\r\n\r\n    private initMesh(): void {\r\n        this.mesh = new THREE.Mesh(this.geometry, new THREE.MeshNormalMaterial());\r\n        this.mesh.scale.set(0.04, 0.04, 0.04);\r\n        this.mesh.position.y = -1;\r\n        this.scene.add(this.mesh);\r\n    }\r\n\r\n    remove(): void {\r\n        TerrainMapThree.instance = undefined;\r\n        this.scene.remove(this.mesh);\r\n    }\r\n\r\n    shiftShader(): void {\r\n        // Implement shader shifting logic here if needed\r\n    }\r\n\r\n    protected updatePost(): void {\r\n        // Implement update logic here if needed\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { NTerrain } from '..';\r\nimport { GeometryCommon } from './GeometryCommon/GeometryCommon';\r\nimport { NTerrain3DField } from './Definition';\r\nimport { TerrainMapThree } from './Definition/NTrain/TerrainMapThree';\r\nexport class SceneWrapper {\r\n    app: NTerrain;\r\n    geometryCommon: GeometryCommon;\r\n    scene: THREE.Scene;\r\n    definition: NTerrain3DField;\r\n    constructor(app: NTerrain) {\r\n        this.app = app;\r\n        this.scene = this.app.graphicsCoreWrapper.canvasWrapper.scene;\r\n        this.app.graphicsCoreWrapper.canvasWrapper.UpdateBinding = () => { this.Update(); };\r\n        this.geometryCommon = new GeometryCommon(this);\r\n        this.Init();\r\n    }\r\n    public Init() {\r\n        this.definition = new NTerrain3DField(this);\r\n        this.scene.add(this.definition.mesh);\r\n\r\n        const dd = new TerrainMapThree(this.scene);\r\n        console.log(dd);\r\n    }\r\n    public Update() {\r\n        console.log('loop...');\r\n    }\r\n}","import { Asset } from './Asset';\r\nimport { GraphicsCoreWrapper } from './GraphicsCoreWrapper';\r\nimport { SceneWrapper } from './SceneWrapper';\r\nexport class NTerrain {\r\n    asset: Asset;\r\n    graphicsCoreWrapper: GraphicsCoreWrapper;\r\n    sceneWrapper: SceneWrapper;\r\n    hostDiv: HTMLElement;\r\n    public static Init(id: string = 'main') {\r\n        new NTerrain(id);\r\n    }\r\n    constructor(id: string = 'main') {\r\n        const div = document.getElementById(id);\r\n        if (div) { this.hostDiv = div; }\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.asset = new Asset();\r\n        this.graphicsCoreWrapper = new GraphicsCoreWrapper(this);\r\n        this.sceneWrapper = new SceneWrapper(this);\r\n    }\r\n}"],"names":["urban","require","Asset","constructor","this","CAMERA_TYPE","CameraControllerThree","canvas","width","height","type","PERSPECTIVE","cameraP","cameraO","controls","initX","initY","prevX","prevY","yRotRate","xRotRate","xPanRate","yPanRate","zPanRate","rotateRate","panRate","zoomRate","zoomFactor","frustumSize","cameraShift","ableToMove","stereoCamera","GetPerspective","ORTHOGRAPHIC","GetOrthographic","STEREO","GetStereo","THREE","aspect","camera","x","y","z","position","set","InitOrbitController","OrbitControls","renderer","domElement","minDistance","maxDistance","enablePan","enableZoom","Math","PI","EnableDamping","v","factor","enableDamping","dampingFactor","MouseDown","MouseMove","shift","dx","dy","panLeft","matrix","panUp","rotateLeft","rotateUp","MouseWheel","dd","length","ShiftCamera","MouseEventController","e","CLICK_TYPE","pressedShift","wheel","LightingController","canvasThree","hemiLight","dirLight","Init","shadowMap","enabled","color","setHSL","groundColor","scene","add","hemiLightHelper","multiplyScalar","castShadow","shadow","mapSize","left","right","top","bottom","bias","near","far","dirLightHeper","Dispose","visible","remove","CanvasThree","graphicsCoreWrapper","hostDiv","lightingController","vrBtn","bg","isActive","clientWidth","clientHeight","antialias","alpha","setPixelRatio","id","style","pointerEvents","setSize","appendChild","RenderLoop","requestAnimationFrame","UpdateBinding","update","render","console","log","ResizeCanvas","updateProjectionMatrix","ResizeEffect","Remove","children","GraphicsCoreWrapper","app","canvasWrapper","GeometryCommon","raycaster","m","point","capture","params","Points","threshold","Capture","Add","g","list","push","listMesh","mesh","splice","indexOf","Update","i","Raycast","RemoveAllMesh","Node","parent","c","s","col","theta","phi","size","edges","seedRandom","t","tForR","needUpdate","random","Translate","setX","attributePositions","getX","setY","getY","setZ","getZ","setXYZ","Scale","attributeSize","ScalebyValue","SetScale","NumericalMotion","Edge","n0","n1","NTerrain3DField","shaderVert","shaderFrag","attributeColors","currentHex","globe","particles","nodes","vecs","nVecs","PARTICLE_SIZE","DOT_COLOR","SPEED_ROTATION","geometry","material","uuid","isHover","isLeave","isSelected","isDrag","isMove","hasPopup","vec","NVector3","scale","tOver","tDown1","tDown2","tUp","I_STEP_ANI","lineSegments","lineSegGeo","box","mouse","ColorUtility","floor","num","InitVec","buff","InitNode","InitBuffer","InitGeometry","InitMaterial","InitMesh","NVectorUtility","Vector3","positions","colors","sizes","dot","Float32Array","async","setAttribute","path","uniforms","value","texture","load","vertexShader","fragmentShader","alphaTest","transparent","segmentsMat","opacity","vertexColors","lns","theIndex","j","distanceTo","UpdatePost","needsUpdate","UpdateDotAnimation","ii","rnd","theT","sin","cos","geometryCommon","dispose","Pixel","static","ID","map","norV","nPix","recVec","k","u","data","GetID","ToString","temp","Render","PixelMapTerrain","img","rx","ry","sx","sy","sz","ctx","listPixel","ddx","ddy","v0","v1","document","createElement","getContext","drawImage","InitGrid","vv","uu","px","theX","theY","getImageData","theZ","pos","InitGridNeighbor","px0","GetPixelAtPoint","pt","pixelMap","dp","round","cpt","onDocumentMouseMove","onmouseenter","CVisLineGrid","lineWidth","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","VisMeshGrid","VisCenterPoints","pts","GetTriFloatArray","GetTriArray","array","p","GetPtFloatArray","GetPtArray","GetNormalFloatArray","GetNormalArray","Normalize","GetTexCoordinFloatArray","GetTexCoordinArray","GeometryWrapperBase","updatePost","TerrainMapThree","instance","shiftShader","super","pixelMapTerrain","loadImage","imagePath","loadImageAsync","initDataStructure","initGeometry","initMesh","error","src","Promise","resolve","reject","Image","onload","onerror","vs","vertices","indices","setIndex","rotateX","computeVertexNormals","undefined","SceneWrapper","definition","NTerrain","asset","sceneWrapper","div","getElementById"],"sourceRoot":""}