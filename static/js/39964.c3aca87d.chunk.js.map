{"version":3,"file":"static/js/39964.c3aca87d.chunk.js","mappings":"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","sources":["njslab/Tools/Delaunay-3d/index.ts"],"sourcesContent":["import * as THREE from \"three\";\r\nimport { RendererThree } from \"../../../lib\";\r\n\r\n// https://d3js.org/d3-delaunay/delaunay\r\nimport { Delaunay } from \"d3-delaunay\";\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n  pointLight: THREE.PointLight;\r\n\r\n  raycaster = new THREE.Raycaster();\r\n  mouse = new THREE.Vector2();\r\n  m = new THREE.Vector3();\r\n\r\n  sphere: THREE.Mesh;\r\n\r\n  obj: THREE.Mesh[] = [];\r\n\r\n  private points: THREE.Vector3[] = [];\r\n  private delaunay: Delaunay<[number, number, number]>;\r\n\r\n  private geometry: THREE.BufferGeometry;\r\n  private material: THREE.MeshBasicMaterial;\r\n  private mesh: THREE.Mesh;\r\n\r\n  private pointGeometry: THREE.SphereGeometry;\r\n  private pointMaterial: THREE.MeshBasicMaterial;\r\n  private dummy: THREE.Object3D;\r\n\r\n  private pointsMesh: THREE.InstancedMesh;\r\n\r\n  constructor(id: string = \"main\") {\r\n    super(id);\r\n\r\n    const ambientLight = new THREE.AmbientLight(0x555555);\r\n    this.scene.add(ambientLight);\r\n\r\n    this.pointLight = new THREE.PointLight(0xffffff, 100);\r\n    this.pointLight.position.x = 10;\r\n    this.pointLight.castShadow = true;\r\n    this.scene.add(this.pointLight);\r\n\r\n    const axis = new THREE.AxesHelper(5);\r\n    axis.position.y = 0.001;\r\n    this.scene.add(axis);\r\n    this.scene.add(new THREE.GridHelper(10, 10));\r\n\r\n    this.initPost();\r\n\r\n    this.start();\r\n  }\r\n  public initPost() {\r\n\r\n    this.delaunay = Delaunay.from([]);\r\n\r\n    this.geometry = new THREE.BufferGeometry();\r\n     // @ts-ignore\r\n    this.material = new THREE.MeshBasicMaterial({color: 0xffffff, emissive: 0x00ff00, emissiveIntensity: 1, wireframe: true, });\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n\r\n    this.pointGeometry = new THREE.SphereGeometry(0.05);\r\n    this.pointMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n    this.dummy = new THREE.Object3D();\r\n\r\n    this.generatePoints();\r\n    this.createPointsMesh();\r\n\r\n\r\n\r\n    this.scene.add(this.mesh);\r\n    this.scene.add(this.pointsMesh);\r\n\r\n\r\n    const matrix = new THREE.Matrix4();\r\n    matrix.makeRotationX(Math.PI / 2);\r\n\r\n    this.pointLight.position.applyMatrix4(matrix);\r\n    this.mesh.applyMatrix4(matrix);\r\n    this.pointsMesh.applyMatrix4(matrix)\r\n  }\r\n\r\n  private createPointsMesh(): void {\r\n    this.pointsMesh = new THREE.InstancedMesh(this.pointGeometry, this.pointMaterial, this.points.length);\r\n    this.updatePointsMesh();\r\n  }\r\n\r\n  private updatePointsMesh(): void {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.dummy.position.copy(this.points[i]);\r\n      this.dummy.updateMatrix();\r\n      this.pointsMesh.setMatrixAt(i, this.dummy.matrix);\r\n    }\r\n    this.pointsMesh.instanceMatrix.needsUpdate = true;\r\n  }\r\n\r\n  private generatePoints(): void {\r\n    for (let i = 0; i < 50; i++) {\r\n      this.points.push(\r\n        new THREE.Vector3(\r\n          Math.random() * 4 - 2,\r\n          Math.random() * 4 - 2,\r\n          Math.random() * 1 - 0.5,\r\n        )\r\n      );\r\n    }\r\n  }\r\n  private updatePoints(): void {\r\n    for (let point of this.points) {\r\n      point.x += (Math.random() - 0.5) * 0.01;\r\n      point.y += (Math.random() - 0.5) * 0.01;\r\n      point.z += (Math.random() - 0.5) * 0.01;\r\n    }\r\n  }\r\n\r\n  public add(object: THREE.Mesh, picking = true) {\r\n    this.scene.add(object);\r\n    if (picking) {\r\n      this.obj.push(object);\r\n    }\r\n  }\r\n  public mouseMove(e: MouseEvent): void {\r\n    this.picking(e);\r\n  }\r\n  public picking(e: MouseEvent) {\r\n    this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\r\n    this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\r\n\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n\r\n    // Calculate objects intersecting the picking ray\r\n    const intersects = this.raycaster.intersectObjects(this.obj);\r\n\r\n    if (intersects.length > 0) {\r\n      this.m.set(\r\n        intersects[0].point.x,\r\n        intersects[0].point.y,\r\n        intersects[0].point.z\r\n      );\r\n      // console.log(intersects[0]); // This will give you the first object intersected\r\n\r\n      // console.log(this.m);\r\n\r\n      if (intersects[0].object !== this.sphere) {\r\n        this.sphere.position.set(\r\n          intersects[0].point.x,\r\n          intersects[0].point.y,\r\n          intersects[0].point.z\r\n        );\r\n      }\r\n      return intersects;\r\n    }\r\n    return undefined;\r\n  }\r\n  public mouseClick(e: MouseEvent): void {\r\n    const mesh = this.picking(e);\r\n    if (mesh) {\r\n      // console.log({mesh})\r\n    }\r\n  }\r\n\r\n  public update(scene: THREE.Scene) {\r\n\r\n\r\n    this.updatePoints();\r\n    this.updatePointsMesh();\r\n\r\n    this.delaunay = updateDelaunay(this.points, this.delaunay);\r\n\r\n    createDelaunayMesh(this.geometry, this.points, this.delaunay);\r\n\r\n\r\n\r\n\r\n   \r\n  }\r\n  public destroy() {\r\n    while (this.hostDiv.lastElementChild) {\r\n      this.hostDiv.removeChild(this.hostDiv.lastElementChild);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst updateDelaunay = (points, delaunay) => {\r\n    const pointsArray = points.map(\r\n      (p) => [p.x, p.y, p.z] as [number, number, number]\r\n    );\r\n    return delaunay = Delaunay.from(pointsArray as any);\r\n}\r\n\r\nconst createDelaunayMesh = (geometry, points, delaunay ) => {\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n      positions.push(points[i].x, points[i].y, points[i].z);\r\n    }\r\n\r\n    for (let i = 0; i < delaunay.triangles.length; i += 3) {\r\n      indices.push( delaunay.triangles[i], delaunay.triangles[i + 1], delaunay.triangles[i + 2]);\r\n    }\r\n\r\n    const voronoi = delaunay.voronoi([0, 0, 640, 480]);\r\n    // console.log({voronoi, delaunay})\r\n\r\n\r\n    geometry.setAttribute( \"position\", new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setIndex(indices);\r\n}"],"names":["Solution","RendererThree","constructor","super","pointLight","raycaster","THREE","mouse","m","sphere","obj","points","delaunay","geometry","material","mesh","pointGeometry","pointMaterial","dummy","pointsMesh","ambientLight","this","scene","add","position","x","castShadow","axis","y","initPost","start","Delaunay","color","emissive","emissiveIntensity","wireframe","generatePoints","createPointsMesh","matrix","makeRotationX","Math","PI","applyMatrix4","length","updatePointsMesh","i","copy","updateMatrix","setMatrixAt","instanceMatrix","needsUpdate","push","random","updatePoints","point","z","object","picking","mouseMove","e","offsetX","renderer","domElement","clientWidth","offsetY","clientHeight","setFromCamera","camera","intersects","intersectObjects","set","mouseClick","update","updateDelaunay","createDelaunayMesh","destroy","hostDiv","lastElementChild","removeChild","pointsArray","map","p","positions","indices","triangles","voronoi","setAttribute","setIndex"],"sourceRoot":""}