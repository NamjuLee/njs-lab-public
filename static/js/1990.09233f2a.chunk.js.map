{"version":3,"file":"static/js/1990.09233f2a.chunk.js","mappings":"gKAeO,MAAMA,EAITC,YAAYC,EAAUC,GAOlB,GAP8B,KAH3BC,cAAQ,OACRC,WAAK,EAIRC,KAAKF,SAAW,GAKZD,EACAG,KAAKD,MAAQF,MACV,CACHG,KAAKD,MAAQ,GAEb,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAUK,IAAK,CAC/B,IAAIC,EAAQC,KAAKC,SAAWD,KAAKE,GAAK,EACtCL,KAAKD,MAAME,GAAK,IAAIK,EAAAA,EAAQH,KAAKI,IAAIL,GAAQC,KAAKK,IAAIN,IACtDF,KAAKD,MAAME,GAAGQ,MAAMN,KAAKC,SAAWJ,KAAKF,SAC7C,CACJ,CAIAE,KAAKD,MAAM,GAAGW,WAClB,CAIOC,UAAUC,GACb,IAAIC,EAAQ,IAAIC,MAAMd,KAAKD,MAAMgB,QAE7BJ,EAAYR,KAAKa,MAAMb,KAAKC,SAAYJ,KAAKD,MAAMgB,QAEvD,IAAK,IAAId,EAAI,EAAGA,EAAID,KAAKD,MAAMgB,OAAQd,IAChBY,EAAMZ,GAArBA,EAAIU,EAAsBX,KAAKD,MAAME,GACzBW,EAAQb,MAAME,GAGlC,OADe,IAAIP,EAAImB,EAE3B,CAGOI,OAAOC,GACV,IAAK,IAAIjB,EAAI,EAAGA,EAAID,KAAKD,MAAMgB,OAAQd,IACnC,GAAIE,KAAKC,SAAWc,EAAG,CACnB,IAAIhB,EAAQC,KAAKC,SAAYD,KAAKE,GAClCL,KAAKD,MAAME,GAAK,IAAIK,EAAAA,EAAQH,KAAKI,IAAIL,GAAQC,KAAKK,IAAIN,IACtDF,KAAKD,MAAME,GAAGQ,MAAMN,KAAKC,SAAWJ,KAAKF,UAK/B,IAANG,GAASD,KAAKD,MAAME,GAAGS,WAC/B,CAER,ECtDG,MAAMS,EAKTxB,YAAYyB,GAAe,KAJpBA,aAAO,OACPC,SAAG,OACHC,YAAM,OACbC,cAAQ,EAEJvB,KAAKoB,QAAUA,CAmBnB,CACOI,UACH,KAAOxB,KAAKoB,QAAQK,kBAChBzB,KAAKoB,QAAQM,YAAY1B,KAAKoB,QAAQK,iBAE9C,EAKG,MAAME,UAAiBC,EAAAA,GAY1BjC,YAAYkC,GACRC,MAAMD,GAAK,KAZfE,MAAgB,EAAM,KACtBb,EAAc,CAAC,EAAG,GAAE,KAGpBc,EAAY,EAAI,KAEhBC,eAAS,OACTC,gBAAU,OACVC,YAAM,OACNC,gBAAU,OACVC,eAAS,EAGLrC,KAAKsC,OAAOC,MAAMC,SAAW,WAC7BxC,KAAKsC,OAAOC,MAAME,MAAQ,OAC1BzC,KAAKsC,OAAOC,MAAMG,OAAS,OAM3B1C,KAAKiC,UAAY,EACjBjC,KAAKkC,WAzBE,GA2BPlC,KAAKmC,OAAS,IAAIQ,EAAS3C,KAAKsC,OAAOG,MAAQ,EAAI,GAAI,GAAI,GAAI,IAI/DzC,KAAKoC,WAAa,IAAIQ,EAAW5C,KAAKmC,OADnB,IACyC,KAG5DnC,KAAKqC,UAAY,GAEjBrC,KAAKqC,UAAUQ,KAAK,IAAIF,EAAS3C,KAAKsC,OAAOG,MAAQ,EAAI,IAAKzC,KAAKsC,OAAOI,OAAS,EAAG,IAAK,KAI3F1C,KAAK8C,OACT,CACOC,WAAWC,EAAWC,GAE7B,CACOC,UAAUF,EAAWC,GAExBjD,KAAKkB,EAAE,GAAK8B,EACZhD,KAAKkB,EAAE,GAAK+B,CAChB,CACOE,OAAOC,GACVpD,KAAKgC,GAAK,IACVhC,KAAKqD,OAAOD,EAIhB,CACOC,OAAOD,GAMNpD,KAAKiC,UA/DF,IAgEHjC,KAAKoC,WAAWL,KAAK/B,KAAKqC,UAAWe,GACjCpD,KAAKoC,WAAWkB,iBAAmBtD,KAAKiC,UAAYjC,KAAKkC,aACzDlC,KAAKkC,WAAalC,KAAKiC,WAE3BjC,KAAKiC,cAGLjC,KAAKiC,UAAY,EACjBjC,KAAKoC,WAAWmB,cAChBvD,KAAKoC,WAAWoB,YAChBxD,KAAKoC,WAAWqB,gBAOpB,IAAK,IAAIxD,EAAI,EAAGA,EAAID,KAAKqC,UAAUtB,OAAQd,IACvCD,KAAKqC,UAAUpC,GAAGyD,QAAQN,GAc9BA,EAAIO,YACJP,EAAIQ,IAAI5D,KAAKkB,EAAE,GAAIlB,KAAKkB,EAAE,GAAI,GAAI,EAAa,EAAVf,KAAKE,IAC1C+C,EAAIS,YACJT,EAAIU,OAEJ9D,KAAKmC,OAAOuB,QAAQN,EACxB,EAmBJ,MAAMW,EAiBFpE,YAAYqE,EAAc7B,EAAQ8B,EAAKC,GAAe,KAhBtDC,kBAAY,OACZC,cAAQ,OACR5B,cAAQ,OACR6B,OAAC,OACDJ,SAAG,OACHK,gBAAU,OACVC,gBAAU,OACVC,aAAO,OACPC,iBAAW,OACXC,iBAAW,OACXC,eAAS,OAETxC,YAAM,OAENiB,SAAG,EAGCpD,KAAKmC,OAASA,EAGdnC,KAAKmE,aAAe,IAAI7D,EAAAA,EAAQ,EAAG,EAAG,GACtCN,KAAKoE,SAAW,IAAI9D,EAAAA,EAAQ,EAAG,EAAG,GAClCN,KAAKwC,UAAWoC,EAAAA,EAAAA,IAASZ,GACzBhE,KAAKqE,EAAI,EACTrE,KAAKiE,IAAMA,EACXjE,KAAKsE,WAAa,EAClBtE,KAAKuE,WAAa,IAElBvE,KAAKwE,QAAU,EACfxE,KAAKyE,YAAc,EACnBzE,KAAK0E,aAAc,EACnB1E,KAAK2E,WAAY,CACrB,CAOOpB,cACCvD,KAAKuE,WAAa,IAAGvE,KAAKuE,WAAa,GAG3CvE,KAAKwE,QAAU,GAAKxE,KAAKsE,WAAatE,KAAKuE,YAG3CvE,KAAKwE,QAAUrE,KAAK0E,IAAI7E,KAAKwE,QAAS,GAElCxE,KAAK0E,cAAa1E,KAAKwE,SAAW,IAClCxE,KAAK2E,YAAW3E,KAAKwE,SAAW,EACxC,CAIOM,IAAIC,EAAI3B,IAGN,EAAIpD,KAAKwC,SAASQ,GACtBI,EAAId,OAAOG,MAAQzC,KAAKwC,SAASQ,GACjC,EAAIhD,KAAKwC,SAASS,GAClBG,EAAId,OAAOI,OAAS1C,KAAKwC,SAASS,KAEnCjD,KAAK0E,aAAc,GAId1E,KAAK0E,aAAgB1E,KAAK2E,YAC3B3E,KAAKgF,WAAWhF,KAAKiE,IAAIlE,MAAMC,KAAKyE,cACpCzE,KAAKyE,aAAezE,KAAKyE,YAAc,GAAKzE,KAAKiE,IAAIlE,MAAMgB,OAC3Df,KAAKqD,SAELrD,KAAKqC,UAAU0C,IAOd/E,KAAK0E,aACN1E,KAAK0D,QAAQN,EAErB,CAEO6B,YAAY7B,GACf,IAAI8B,GAAIC,EAAAA,EAAAA,IACJnF,KAAKwC,SAASQ,EACdhD,KAAKwC,SAASS,EACd,EACAjD,KAAKmC,OAAOK,SAASQ,EACrBhD,KAAKmC,OAAOK,SAASS,EACrB,GAEAiC,EAAIlF,KAAKuE,aAAYvE,KAAKuE,WAAaW,GAEvClF,KAAKmC,OAAOiD,SAASpF,KAAKwC,YAAcxC,KAAK2E,UAE7C3E,KAAK2E,WAAY,EAWT3E,KAAK2E,WACb3E,KAAKsE,YAEb,CAGOjC,UAAU0C,GACb,IAAK,IAAI9E,EAAI,EAAGA,EAAI8E,EAAGhE,OAAQd,IAAK,CACtB8E,EAAG9E,GACLmF,SAASpF,KAAKwC,YAClBxC,KAAK0E,aAAc,EAE3B,CACJ,CACOM,WAAWK,GACdrF,KAAKmE,aAAamB,IAAID,EAC1B,CACOhC,SACHrD,KAAKoE,SAASkB,IAAItF,KAAKmE,cACvBnE,KAAKwC,SAAS8C,IAAItF,KAAKoE,UACvBpE,KAAKmE,aAAa1D,MAAM,EAC5B,CACOiD,QAAQN,GA2BXA,EAAIO,YACJP,EAAIQ,IAAI5D,KAAKwC,SAASQ,EAAGhD,KAAKwC,SAASS,EAAG,GAAI,EAAa,EAAV9C,KAAKE,IACtD+C,EAAIS,YACJT,EAAIU,MAGR,CACOyB,aACH,OAAOvF,KAAKwE,OAChB,CACOgB,SACH,OAAOxF,KAAKiE,GAChB,CACOwB,UACH,OAAOzF,KAAK0E,WAChB,EAGJ,MAAM/B,EAEFhD,YAAYqD,EAAGC,EAAGyC,EAAGC,GAAI,KADlBnD,cAAQ,OAAEkD,OAAC,OAAEC,OAAC,EAEjB3F,KAAKwC,SAAW,IAAIlC,EAAAA,EAAQ0C,EAAGC,EAAG,GAClCjD,KAAK0F,EAAIA,EACT1F,KAAK2F,EAAIA,CACb,CACOjC,QAAQN,GAKXA,EAAIO,YACJP,EAAIwC,KAAK5F,KAAKwC,SAASQ,EAAGhD,KAAKwC,SAASS,EAAGjD,KAAK0F,EAAG1F,KAAK2F,GACxDvC,EAAIS,YACJT,EAAIU,MACR,CACOsB,SAASS,GACZ,OACIA,EAAK7C,EAAIhD,KAAKwC,SAASQ,GACvB6C,EAAK7C,EAAIhD,KAAKwC,SAASQ,EAAIhD,KAAK0F,GAChCG,EAAK5C,EAAIjD,KAAKwC,SAASS,GACvB4C,EAAK5C,EAAIjD,KAAKwC,SAASS,EAAIjD,KAAK2F,CAMxC,EAiBJ,MAAM/C,EAMFjD,YAAYwC,EAAQjB,EAAG4E,GAAM,KAL7BC,kBAAY,OACZ3D,gBAAU,OACV4D,gBAAU,OACVC,iBAAW,OACX9D,YAAM,EAEFnC,KAAKmC,OAASA,EACdnC,KAAK+F,aAAe7E,EACpBlB,KAAKoC,WAAa,IAAItB,MAAMgF,GAC5B9F,KAAKgG,WAAa,GAClBhG,KAAKiG,YAAc,EAEnB,IAAK,IAAIhG,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IAAK,CAC7C,IAAIuC,EAAW,IAAIlC,EAAAA,EAAQ,IAAS,KACpCN,KAAKoC,WAAWnC,GAAK,IAAI8D,EACrBvB,EACAxC,KAAKmC,OACL,IAAIzC,EAvWL,IAwWCM,KAAKoC,WAAWrB,OAExB,CACJ,CACOgB,KAAKgD,EAAI3B,GAEZ,IAAK,IAAInD,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IAExCD,KAAKoC,WAAWnC,GAAGgF,YAAY7B,GAC/BpD,KAAKoC,WAAWnC,GAAG6E,IAAIC,EAAI3B,EAEnC,CAEOE,gBACH,IAAK,IAAIrD,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IACxC,GAAID,KAAKoC,WAAWnC,GAAG0E,UAAW,OAAO,EAE7C,OAAO,CACX,CAEOpB,cACH,IAAK,IAAItD,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IACxCD,KAAKoC,WAAWnC,GAAGsD,aAE3B,CAEOC,YAEHxD,KAAKgG,WAAa,GAGlB,IAAIE,EAAalG,KAAKmG,gBAMtB,IAAK,IAAIlG,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IAAK,CAC7C,IAAImG,GAAgBC,EAAAA,EAAAA,IAChBrG,KAAKoC,WAAWnC,GAAGsF,aACnB,EACAW,EACA,EACA,GAEAI,EAAInG,KAAKa,MAAsB,IAAhBoF,GACnB,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAGC,IACnBvG,KAAKgG,WAAWnD,KAAK7C,KAAKoC,WAAWnC,GAE7C,CACJ,CAEOwD,eAEH,IAAK,IAAIxD,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IAAK,CAE7C,IAAIiB,EAAIf,KAAKa,MAAMb,KAAKC,SAAYJ,KAAKgG,WAAWjF,QAChDmE,EAAI/E,KAAKa,MAAMb,KAAKC,SAAYJ,KAAKgG,WAAWjF,QAEhDyF,EAAMxG,KAAKgG,WAAW9E,GACtBuF,EAAMzG,KAAKgG,WAAWd,GAEtBwB,EAAWF,EAAIhB,SACfmB,EAAWF,EAAIjB,SAEf3E,EAAQ6F,EAAS/F,UAAUgG,GAE/B9F,EAAMI,OAAOjB,KAAK+F,cAElB,IAAIvD,EAAW,IAAIlC,EAAAA,EAAQ,IAAS,KACpCN,KAAKoC,WAAWnC,GAAK,IAAI8D,EAAOvB,EAAUxC,KAAKmC,OAAQtB,EAAOb,KAAKoC,WAAWrB,OAClF,CACAf,KAAKiG,aACT,CACOW,iBACH,OAAO5G,KAAKiG,WAChB,CAEOE,gBACH,IAAIU,EAAS,EACb,IAAK,IAAI5G,EAAI,EAAGA,EAAID,KAAKoC,WAAWrB,OAAQd,IACpCD,KAAKoC,WAAWnC,GAAGsF,aAAesB,IAClCA,EAAS7G,KAAKoC,WAAWnC,GAAGsF,cAGpC,OAAOsB,CACX,E","sources":["njslab/Tools/GAvec/DNA.ts","njslab/Tools/GAvec/index.ts"],"sourcesContent":["import { Vector3 } from '../../../lib'\n\n// Smart Rockets\n// The Nature of Code\n// The Coding Train / Daniel Shiffman\n// https://youtu.be/_of6UVV4HGo\n// https://thecodingtrain.com/more/achive/nature-of-code/9-genetic-algorithms/9.5-fitness-genotype-vs-phenotype.html\n// https://editor.p5js.org/codingtrain/sketches/BOTCxBDbO\n\n// http://natureofcode.com\n\n// Pathfinding w/ Genetic Algorithms\n\n// DNA is an array of vectors\n\nexport class DNA {\n    public maxForce\n    public genes: Vector3[]\n    // lifetime\n    constructor(lifetime, newgenes?) {\n        // The maximum strength of the forces\n        this.maxForce = 0.1;\n\n        //   debugger\n\n        // The genetic sequence\n        if (newgenes) {\n            this.genes = newgenes;\n        } else {\n            this.genes = [];\n            // Constructor (makes a DNA of random PVectors)\n            for (let i = 0; i < lifetime; i++) {\n                let angle = Math.random() * Math.PI * 2;\n                this.genes[i] = new Vector3(Math.cos(angle), Math.sin(angle));\n                this.genes[i].multi(Math.random() * this.maxForce);\n            }\n        }\n\n        // Let's give each Rocket an extra boost of strength for its first frame\n        // console.log(this.genes[0])\n        this.genes[0].normalize();\n    }\n\n    // CROSSOVER\n    // Creates new DNA sequence from two (this & and a partner)\n    public crossover(partner) {\n        let child = new Array(this.genes.length);\n        // Pick a midpoint\n        let crossover = Math.floor(Math.random() * (this.genes.length));\n        // Take \"half\" from one and \"half\" from the other\n        for (let i = 0; i < this.genes.length; i++) {\n            if (i > crossover) child[i] = this.genes[i];\n            else child[i] = partner.genes[i];\n        }\n        let newGenes = new DNA(child);\n        return newGenes;\n    }\n\n    // Based on a mutation probability, picks a new random Vector\n    public mutate(m) {\n        for (let i = 0; i < this.genes.length; i++) {\n            if (Math.random() < m) {\n                let angle = Math.random() * (Math.PI);\n                this.genes[i] = new Vector3(Math.cos(angle), Math.sin(angle));\n                this.genes[i].multi(Math.random() * this.maxForce);\n                //        let angle = random(-0.1,0.1);\n                //        genes[i].rotate(angle);\n                //        let factor = random(0.9,1.1);\n                //        genes[i].mult(factor);\n                if (i === 0) this.genes[i].normalize();\n            }\n        }\n    }\n}\n","// import { NJSCORE, } from '../../../lib'\r\n\r\nimport { RendererCanvas, Vector3, deepCopy, normalize, crossProduct, distanceEuclidean, remap } from '../../../lib'\r\nimport { DNA } from './DNA';\r\n// const getDiv = (text, event) => {\r\n//     const div = document.createElement('div')\r\n//     const txtDiv = document.createElement('span')\r\n//     txtDiv.textContent = text\r\n//     const myInput = document.createElement('input')\r\n//     myInput.oninput = (e) => event(e)\r\n\r\n//     div.append(txtDiv)\r\n//     div.append(myInput)\r\n//     return div\r\n// }\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/BOTCxBDbO\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public out: HTMLElement;\r\n    public outHis: HTMLElement;\r\n    renderer: Renderer;\r\n    constructor(divHost: any) {\r\n        this.divHost = divHost;\r\n        // const container = document.createElement('div');\r\n        // container.style.display ='flex'\r\n        // this.divHost.append(container)\r\n\r\n        // const inA = getDiv('A * B + C === Target: ',(e) => {\r\n        //     const val = +e.target.value;\r\n        //     this.compute(val)\r\n        // });\r\n        // container.append(inA)\r\n        // this.out = document.createElement('div');\r\n        // this.out.style.marginTop = '10px'\r\n        // this.divHost.append(this.out)\r\n        // this.outHis = document.createElement('div');\r\n        // this.outHis.style.marginTop = '10px'\r\n        // this.divHost.append(this.outHis)\r\n\r\n        // this.renderer = new Renderer(this.divHost);\r\n\r\n    }\r\n    public destroy() {\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nlet lifetime = 50;\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    live: boolean = false;\r\n    m: number[] = [0, 0]\r\n    // walls: Wall[] = [];\r\n    // sun: Sun;\r\n    t: number = 0.0;\r\n    // lifetime;\r\n    lifecycle;\r\n    recordTime: number;\r\n    target;\r\n    population: Population;\r\n    obstacles\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n\r\n        // this.lifetime = 1000;\r\n\r\n        // Initialize variables\r\n        this.lifecycle = 0;\r\n        this.recordTime = lifetime;\r\n\r\n        this.target = new Obstacle(this.canvas.width / 2 - 12, 24, 24, 24);\r\n\r\n        // Create a population with a mutation rate, and population max\r\n        let mutationRate = 0.01;\r\n        this.population = new Population(this.target, mutationRate, 100);\r\n\r\n        // Create the obstacle course\r\n        this.obstacles = [];\r\n        // this.obstacles.push(new Obstacle(100, 300, 500, 10));\r\n        this.obstacles.push(new Obstacle(this.canvas.width / 2 - 100, this.canvas.height / 2, 200, 10));\r\n\r\n\r\n\r\n        this.start();\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n        \r\n    }\r\n    public mouseMove(x: number, y: number): void {\r\n        // this.sun.updateDirection(x, y);\r\n        this.m[0] = x;\r\n        this.m[1] = y;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        this.t += 0.01;\r\n        this.update(ctx);\r\n\r\n        // this.walls.forEach((w) => { w.draw(ctx); });\r\n        // this.sun.draw(ctx, this.t);\r\n    }\r\n    public update(ctx: CanvasRenderingContext2D) {\r\n\r\n        // Draw the start and target positions\r\n\r\n\r\n        // If the generation hasn't ended yet\r\n        if (this.lifecycle < lifetime) {\r\n            this.population.live(this.obstacles, ctx);\r\n            if (this.population.targetReached() && this.lifecycle < this.recordTime) {\r\n                this.recordTime = this.lifecycle;\r\n            }\r\n            this.lifecycle++;\r\n            // Otherwise a new generation\r\n        } else {\r\n            this.lifecycle = 0;\r\n            this.population.calcFitness();\r\n            this.population.selection();\r\n            this.population.reproduction();\r\n        }\r\n\r\n\r\n\r\n        // Draw the obstacles\r\n        // console.log()\r\n        for (let i = 0; i < this.obstacles.length; i++) {\r\n            this.obstacles[i].display(ctx);\r\n        }\r\n\r\n        // Display some info\r\n\r\n        // fill(0);\r\n        // noStroke();\r\n        // text(\"Generation #: \" + this.population.getGenerations(), 10, 18);\r\n        // text(\"Cycles left: \" + (this.lifetime - this.lifecycle), 10, 36);\r\n        // text(\"Record cycles: \" + this.recordtime, 10, 54);\r\n\r\n\r\n        // console.log(ctx)\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.m[0], this.m[1], 10, 0, Math.PI * 2)\r\n        ctx.closePath();\r\n        ctx.fill()\r\n\r\n        this.target.display(ctx);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Smart Rockets\r\n// The Nature of Code\r\n// The Coding Train / Daniel Shiffman\r\n// https://youtu.be/_of6UVV4HGo\r\n// https://thecodingtrain.com/more/achive/nature-of-code/9-genetic-algorithms/9.5-fitness-genotype-vs-phenotype.html\r\n// https://editor.p5js.org/codingtrain/sketches/BOTCxBDbO\r\n\r\n// http://natureofcode.com\r\n\r\n// Rocket class -- this is just like our Boid / Particle class\r\n// the only difference is that it has DNA & fitness\r\n\r\nclass Rocket {\r\n    acceleration\r\n    velocity: Vector3\r\n    position: Vector3\r\n    r\r\n    dna\r\n    finishTime\r\n    recordDist\r\n    fitness\r\n    geneCounter\r\n    hitObstacle\r\n    hitTarget\r\n\r\n    target\r\n\r\n    ctx\r\n\r\n    constructor(pos: Vector3, target, dna, totalRockets) {\r\n        this.target = target;\r\n        // console.log(pos)\r\n        // All of our physics stuff\r\n        this.acceleration = new Vector3(0, 0, 0);\r\n        this.velocity = new Vector3(0, 0, 0);\r\n        this.position = deepCopy(pos)\r\n        this.r = 4;\r\n        this.dna = dna;\r\n        this.finishTime = 0; // We're going to count how long it takes to reach target\r\n        this.recordDist = 10000; // Some high number that will be beat instantly\r\n\r\n        this.fitness = 0;\r\n        this.geneCounter = 0;\r\n        this.hitObstacle = false; // Am I stuck on an obstacle?\r\n        this.hitTarget = false; // Did I reach the target\r\n    }\r\n\r\n    // FITNESS FUNCTION\r\n    // distance = distance from target\r\n    // finish = what order did i finish (first, second, etc. . .)\r\n    // f(distance,finish) =   (1.0f / finish^1.5) * (1.0f / distance^6);\r\n    // a lower finish is rewarded (exponentially) and/or shorter distance to target (exponetially)\r\n    public calcFitness() {\r\n        if (this.recordDist < 1) this.recordDist = 1;\r\n\r\n        // Reward finishing faster and getting close\r\n        this.fitness = 1 / (this.finishTime * this.recordDist);\r\n\r\n        // Make the function exponential\r\n        this.fitness = Math.pow(this.fitness, 4);\r\n\r\n        if (this.hitObstacle) this.fitness *= 0.1; // lose 90% of fitness hitting an obstacle\r\n        if (this.hitTarget) this.fitness *= 2; // twice the fitness for finishing!\r\n    }\r\n\r\n    // Run in relation to all the obstacles\r\n    // If I'm stuck, don't bother updating or checking for intersection\r\n    public run(os, ctx: CanvasRenderingContext2D) {\r\n\r\n\r\n        if ((0 > this.position.x) ||\r\n        (ctx.canvas.width < this.position.x) ||\r\n        (0 > this.position.y) ||\r\n        (ctx.canvas.height < this.position.y)) {\r\n\r\n        this.hitObstacle = true;\r\n    }\r\n\r\n\r\n        if (!this.hitObstacle && !this.hitTarget) {\r\n            this.applyForce(this.dna.genes[this.geneCounter]);\r\n            this.geneCounter = (this.geneCounter + 1) % this.dna.genes.length;\r\n            this.update();\r\n            // If I hit an edge or an obstacle\r\n            this.obstacles(os);\r\n\r\n\r\n\r\n\r\n        }\r\n        // Draw me!\r\n        if (!this.hitObstacle) {\r\n            this.display(ctx);\r\n        }\r\n    }\r\n    // Did I make it to the target?\r\n    public checkTarget(ctx: CanvasRenderingContext2D) {\r\n        let d = distanceEuclidean(\r\n            this.position.x,\r\n            this.position.y,\r\n            0,\r\n            this.target.position.x,\r\n            this.target.position.y,\r\n            0\r\n        );\r\n        if (d < this.recordDist) this.recordDist = d;\r\n\r\n        if (this.target.contains(this.position) && !this.hitTarget) {\r\n\r\n            this.hitTarget = true;\r\n\r\n            // if ((0 > this.position.x) ||\r\n            //     (ctx.canvas.width < this.position.x ) ||\r\n            //     (0 > this.position.y) ||\r\n            //     (ctx.canvas.height < this.position.y) ) {\r\n\r\n            //     this.hitTarget = true;\r\n            // }\r\n\r\n\r\n        } else if (!this.hitTarget) {\r\n            this.finishTime++;\r\n        }\r\n    }\r\n\r\n    // Did I hit an obstacle?\r\n    public obstacles(os) {\r\n        for (let i = 0; i < os.length; i++) {\r\n            let obs = os[i];\r\n            if (obs.contains(this.position)) {\r\n                this.hitObstacle = true;\r\n            }\r\n        }\r\n    }\r\n    public applyForce(f) {\r\n        this.acceleration.add(f);\r\n    }\r\n    public update() {\r\n        this.velocity.add(this.acceleration);\r\n        this.position.add(this.velocity);\r\n        this.acceleration.multi(0);\r\n    }\r\n    public display(ctx: CanvasRenderingContext2D) {\r\n\r\n        // console.log(this.position);\r\n\r\n        //   //background(255,0,0);\r\n        //   let theta = this.velocity.heading() + Math.PI / 2;\r\n        //   fill(200, 100);\r\n        //   stroke(0);\r\n        //   strokeWeight(1);\r\n        //   push();\r\n        //   translate(this.position.x, this.position.y);\r\n        //   rotate(theta);\r\n\r\n        //   // Thrusters\r\n        //   rectMode(CENTER);\r\n        //   fill(0);\r\n        //   rect(-this.r / 2, this.r * 2, this.r / 2, this.r);\r\n        //   rect(this.r / 2, this.r * 2, this.r / 2, this.r);\r\n\r\n        //   // Rocket body\r\n        //   fill(175);\r\n        //   beginShape(TRIANGLES);\r\n        //   vertex(0, -this.r * 2);\r\n        //   vertex(-this.r, this.r * 2);\r\n        //   vertex(this.r, this.r * 2);\r\n        //   endShape();\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI * 2)\r\n        ctx.closePath()\r\n        ctx.fill();\r\n\r\n        //   pop();\r\n    }\r\n    public getFitness() {\r\n        return this.fitness;\r\n    }\r\n    public getDNA() {\r\n        return this.dna;\r\n    }\r\n    public stopped() {\r\n        return this.hitObstacle;\r\n    }\r\n}\r\n\r\nclass Obstacle {\r\n    public position; w; h\r\n    constructor(x, y, w, h) {\r\n        this.position = new Vector3(x, y, 0);\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n    public display(ctx: CanvasRenderingContext2D) {\r\n        //   stroke(0);\r\n        //   fill(175);\r\n        //   strokeWeight(2);\r\n        //   rectMode(CORNER);\r\n        ctx.beginPath();\r\n        ctx.rect(this.position.x, this.position.y, this.w, this.h);\r\n        ctx.closePath()\r\n        ctx.fill()\r\n    }\r\n    public contains(spot) {\r\n        if (\r\n            spot.x > this.position.x &&\r\n            spot.x < this.position.x + this.w &&\r\n            spot.y > this.position.y &&\r\n            spot.y < this.position.y + this.h\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Smart Rockets\r\n// The Nature of Code\r\n// The Coding Train / Daniel Shiffman\r\n// https://youtu.be/_of6UVV4HGo\r\n// https://thecodingtrain.com/more/achive/nature-of-code/9-genetic-algorithms/9.5-fitness-genotype-vs-phenotype.html\r\n// https://editor.p5js.org/codingtrain/sketches/BOTCxBDbO\r\n\r\n// http://natureofcode.com\r\n\r\n// Pathfinding w/ Genetic Algorithms\r\n\r\n// A class to describe a population of \"creatures\"\r\n\r\n// Initialize the population\r\nclass Population {\r\n    mutationRate\r\n    population\r\n    matingPool\r\n    generations\r\n    target\r\n    constructor(target, m, num) {\r\n        this.target = target;\r\n        this.mutationRate = m; // Mutation rate\r\n        this.population = new Array(num); // Array to hold the current population\r\n        this.matingPool = []; // ArrayList which we will use for our \"mating pool\"\r\n        this.generations = 0; // Number of generations\r\n        //make a new set of creatures\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            let position = new Vector3(500 / 2, 500 + 20);\r\n            this.population[i] = new Rocket(\r\n                position, \r\n                this.target,\r\n                new DNA(lifetime),\r\n                this.population.length\r\n            );\r\n        }\r\n    }\r\n    public live(os, ctx: CanvasRenderingContext2D) {\r\n        // For every creature\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            // If it finishes, mark it down as done!\r\n            this.population[i].checkTarget(ctx);\r\n            this.population[i].run(os, ctx);\r\n        }\r\n    }\r\n    // Did anything finish?\r\n    public targetReached() {\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            if (this.population[i].hitTarget) return true;\r\n        }\r\n        return false;\r\n    }\r\n    // Calculate fitness for each creature\r\n    public calcFitness() {\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            this.population[i].calcFitness();\r\n        }\r\n    }\r\n    // Generate a mating pool\r\n    public selection() {\r\n        // Clear the ArrayList\r\n        this.matingPool = [];\r\n\r\n        // Calculate total fitness of whole population\r\n        let maxFitness = this.getMaxFitness();\r\n\r\n        // Calculate fitness for each member of the population (scaled to value between 0 and 1)\r\n        // Based on fitness, each member will get added to the mating pool a certain number of times\r\n        // A higher fitness = more entries to mating pool = more likely to be picked as a parent\r\n        // A lower fitness = fewer entries to mating pool = less likely to be picked as a parent\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            let fitnessNormal = remap(\r\n                this.population[i].getFitness(),\r\n                0,\r\n                maxFitness,\r\n                0,\r\n                1\r\n            );\r\n            let n = Math.floor(fitnessNormal * 100); // Arbitrary multiplier\r\n            for (let j = 0; j < n; j++) {\r\n                this.matingPool.push(this.population[i]);\r\n            }\r\n        }\r\n    }\r\n    // Making the next generation\r\n    public reproduction() {\r\n        // Refill the population with children from the mating pool\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            // Sping the wheel of fortune to pick two parents\r\n            let m = Math.floor(Math.random() * (this.matingPool.length));\r\n            let d = Math.floor(Math.random() * (this.matingPool.length));\r\n            // Pick two parents\r\n            let mom = this.matingPool[m];\r\n            let dad = this.matingPool[d];\r\n            // Get their genes\r\n            let momgenes = mom.getDNA();\r\n            let dadgenes = dad.getDNA();\r\n            // Mate their genes\r\n            let child = momgenes.crossover(dadgenes);\r\n            // Mutate their genes\r\n            child.mutate(this.mutationRate);\r\n            // Fill the new population with the new child\r\n            let position = new Vector3(500 / 2, 500 + 20);\r\n            this.population[i] = new Rocket(position, this.target, child, this.population.length);\r\n        }\r\n        this.generations++;\r\n    }\r\n    public getGenerations() {\r\n        return this.generations;\r\n    }\r\n    // Find highest fitness for the population\r\n    public getMaxFitness() {\r\n        let record = 0;\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            if (this.population[i].getFitness() > record) {\r\n                record = this.population[i].getFitness();\r\n            }\r\n        }\r\n        return record;\r\n    }\r\n}\r\n"],"names":["DNA","constructor","lifetime","newgenes","maxForce","genes","this","i","angle","Math","random","PI","Vector3","cos","sin","multi","normalize","crossover","partner","child","Array","length","floor","mutate","m","Solution","divHost","out","outHis","renderer","destroy","lastElementChild","removeChild","Renderer","RendererCanvas","div","super","live","t","lifecycle","recordTime","target","population","obstacles","canvas","style","position","width","height","Obstacle","Population","push","start","mouseClick","x","y","mouseMove","render","ctx","update","targetReached","calcFitness","selection","reproduction","display","beginPath","arc","closePath","fill","Rocket","pos","dna","totalRockets","acceleration","velocity","r","finishTime","recordDist","fitness","geneCounter","hitObstacle","hitTarget","deepCopy","pow","run","os","applyForce","checkTarget","d","distanceEuclidean","contains","f","add","getFitness","getDNA","stopped","w","h","rect","spot","num","mutationRate","matingPool","generations","maxFitness","getMaxFitness","fitnessNormal","remap","n","j","mom","dad","momgenes","dadgenes","getGenerations","record"],"sourceRoot":""}