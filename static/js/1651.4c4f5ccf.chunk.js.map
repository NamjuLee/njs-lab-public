{"version":3,"file":"static/js/1651.4c4f5ccf.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-mapping/UrbanNetwork/01_Interaction.ts","njslab/Workshop/workshop-mapping/UrbanNetwork/03_NetworkAStart.ts"],"sourcesContent":["import { RendererJSAPI } from '../../../../lib'\r\n\r\nimport { distanceTo } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(1268, 1120);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        this.lns.map( (l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map( (p: Point) => {\r\n            return  p.render(ctx, this.time);\r\n        });\r\n\r\n\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for(let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x,y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x,y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n       \r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n            \r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n\r\n       }\r\n\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n        //     console.log(x, y)\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport class InteractivePoint {\r\n    x: number;\r\n    y: number;\r\n    r: number = 10;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#00f'\r\n        ctx.fill();\r\n\r\n        ctx.strokeStyle = '#fff'\r\n        ctx.stroke();\r\n    }\r\n    public inInside(x: number, y: number) {\r\n        if (distanceTo(x, y, 0, this.x, this.y, 0) < this.r + 2){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Line {\r\n    public p0: Point;\r\n    public p1: Point;\r\n    public lineWidth = 2;\r\n    constructor(p0: Point, p1: Point) {\r\n        this.p0 = p0;\r\n        this.p1 = p1;\r\n    }\r\n    render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.p0.x, this.p0.y);\r\n        ctx.lineTo(this.p1.x, this.p1.y);\r\n        ctx.closePath();\r\n\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nexport class Point {\r\n    x: number;\r\n    y: number;\r\n    z: number = 0;\r\n    r: number = 6;\r\n    constructor(x: number, y: number)  {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#0f0'\r\n        ctx.fill();\r\n        ctx.strokeStyle = '#fff'\r\n        ctx.stroke();\r\n    }\r\n}","import { RendererJSAPI } from '../../../../lib'\r\n\r\n// import { getLineSeg, distanceTo, Graph, Node } from 'njscore';\r\n\r\nimport { getLineSeg, AStart, NodeAStar, buildNetwork, distanceTo } from '../../../../lib';\r\n\r\n\r\nimport { Point, Line, InteractivePoint } from './01_Interaction';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n\r\n    nodeAStar: NodeAStar[] = [];\r\n    nodeStart: NodeAStar;\r\n    nodeEnd: NodeAStar;\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(868, 820);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        this.lns.map((l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map((p: Point) => {\r\n            return p.render(ctx, this.time);\r\n        });\r\n\r\n        console.log(this.path)\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for (let i = 1; i < this.path.length; ++i) {\r\n\r\n                if (this.path[i] !== undefined) {\r\n                    ctx.lineTo(this.path[i].x, this.path[i].y);\r\n                }\r\n\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n\r\n        \r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x, y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x, y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n\r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n\r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n            const obj = (JSON.parse(JSON.stringify(this.lns)));\r\n            console.log(getLineSeg(obj))\r\n\r\n            this.nodeAStar = buildNetwork(getLineSeg(obj));\r\n\r\n            this.nodeStart =  getCloseNode(this.ptStart.x, this.ptStart.y, 0, this.nodeAStar);\r\n            this.nodeEnd = getCloseNode(this.ptEnd.x, this.ptEnd.y, 0, this.nodeAStar);\r\n\r\n            this.path = AStart.gePath(this.nodeStart, this.nodeEnd);\r\n\r\n        }\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n\r\n            this.nodeStart =  getCloseNode(this.ptStart.x, this.ptStart.y, 0, this.nodeAStar);\r\n            this.nodeEnd = getCloseNode(this.ptEnd.x, this.ptEnd.y, 0, this.nodeAStar);\r\n\r\n            this.path = AStart.gePath(this.nodeStart, this.nodeEnd);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst getCloseNode = (x: number, y: number, z: number, nodes: NodeAStar[] ) => {\r\n    let dis = 100000;\r\n    let id = -1;\r\n    for(let i = 0 ; i < nodes.length; ++i) {\r\n        let theDis = distanceTo(x, y, z, nodes[i].x, nodes[i].y, nodes[i].z);\r\n        if (theDis < dis) {\r\n            dis = theDis;\r\n            id = i;\r\n        }\r\n    }\r\n    return nodes[id];\r\n}\r\n\r\n"],"names":["Solution","RendererJSAPI","constructor","view","super","pts","lns","path","previousPt","undefined","ptStart","ptEnd","captured","this","mView","on","event","stopPropagation","navigation","mouseWheelZoomEnabled","center","zoom","InteractivePoint","start","render","ctx","map","l","time","p","beginPath","moveTo","x","y","i","length","lineTo","lineWidth","strokeStyle","stroke","Render","mouseDown","inInside","mouseUp","mouseDrag","mouseClick","Point","push","Line","mouseMove","r","t","arc","Math","sin","PI","closePath","fillStyle","fill","distanceTo","p0","p1","z","nodeAStar","nodeStart","nodeEnd","console","log","obj","JSON","parse","stringify","getLineSeg","buildNetwork","getCloseNode","AStart","nodes","dis","id","theDis"],"sourceRoot":""}