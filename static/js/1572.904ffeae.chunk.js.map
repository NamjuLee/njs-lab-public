{"version":3,"file":"static/js/1572.904ffeae.chunk.js","mappings":"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","sources":["njslab/Project/Project_03_SlowZone/01_JSAPI/Tint/FilterGLViewDarkForDarken.ts","njslab/Project/Project_03_SlowZone/01_JSAPI/UI/index.ts","njslab/Project/Project_03_SlowZone/02_Three/index.ts"],"sourcesContent":["import { NVector3, GLShaderCommon } from '../../../../../lib/NJSCore';\n\n// import { Mat3 } from '../../AppCore/GLUtility/Mat3';\n\nexport class FilterGLViewDarkForDarken {\n\n    gl: WebGLRenderingContext;\n    program: WebGLProgram;\n    fragmentShader: WebGLShader;\n    vertexShader: WebGLShader;\n    matrixLocation: WebGLProgram;\n    posBuffer: WebGLBuffer;\n    colBuffer: WebGLBuffer;\n    vertexs: Float32Array;\n\n    posLocAtt: number;\n    colLocAtt: number;\n    matLoc: WebGLUniformLocation;\n    colLoc: WebGLUniformLocation;\n    cVecLoc: WebGLUniformLocation;\n    mouseLoc: WebGLUniformLocation;\n    timeGL: WebGLUniformLocation;\n    // startTime: number;\n    // randomSeed: number;\n\n    vShader: WebGLShader;\n    fShader: WebGLShader;\n\n    v = `\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n    \n    varying vec4 f_color;\n\n    void main() {\n\n        vec2 mouse_distance = vec2(0,0) - (a_position.xy /vec2(2,2));\n        float red = 1.0 - length(mouse_distance);\n        f_color = vec4(a_position, 0, 1.0);\n    \n        // float dis = distance(vec2(a_position.xy), vec2(0,0));\n\n        // f_color = vec4(dis * 0.6, 0,0,1);\n        gl_Position = vec4( a_position, 0, 1);\n    }\n    `;\n\n    f = `\n    precision highp float;\n\n    varying vec4 f_color;\n    \n    void main() {\n        vec2 mouse_distance = vec2(0,0) - (f_color.xy /vec2(5,5));\n\n        float col =  length(mouse_distance*5.);\n        float val = 1.0 - length(mouse_distance*8.);\n        \n        gl_FragColor = vec4(0.19,0.19,0.19, col);\n\n    }\n    `;\n\n    positionAttribLocation: WebGLProgram;\n    colorAttribLocation: WebGLProgram;\n    translation: NVector3;\n    color: number[];\n    colArray: Float32Array;\n\n    constructor(gl: WebGLRenderingContext, xt: number = 100, yt: number = 100, zt: number = 0, xs: number = 1, ys: number = 1, zs: number = 1) {\n        this.gl = gl;\n        // this.translation = new NVector3(xt, yt, zt);\n        // this.angleInRadians = 0;\n        // this.scale = new NVector3(xs, ys, zs);\n        this.color = [Math.random(), Math.random(), Math.random(), 1];\n        this.InitShader();\n    }\n    InitShader() {\n        // let vShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.VERTEX_SHADER,'/shader/vsCanvas.glsl');\n        // let fShader = GLUtility.CreateShaderFromPath(this.gl, this.gl.FRAGMENT_SHADER, '/shader/fsColor.glsl');\n\n        let vShader = GLShaderCommon.CreateShader(this.gl, this.gl.VERTEX_SHADER, this.v); // '/shader/vsCanvas.glsl');\n        let fShader = GLShaderCommon.CreateShader(this.gl, this.gl.FRAGMENT_SHADER, this.f); // '/shader/fsColor.glsl');\n\n        if (vShader && fShader) {\n            this.vShader = vShader;\n            this.fShader = fShader;\n            let program = GLShaderCommon.CreateProgram(this.gl, vShader, fShader);\n            if (program) { this.program = program; }\n        }\n\n        // this.InitVerext();\n    }\n    Render(gl: WebGLRenderingContext) {\n\n        let col = [0.1, 0, 0, 1];\n\n        this.vertexs = new Float32Array([\n            // left column\n            -1, -1, 1, 1, 1, 1,\n            - 1, 1, col[0], col[1], col[2], col[3],\n            1, -1, col[0], col[1], col[2], col[3],\n\n            -1, 1, 1, 1, 1, 1,\n            1, -1, col[0], col[1], col[2], col[3],\n            1, 1, col[0], col[1], col[2], col[3],\n\n        ]);\n\n        this.posBuffer = this.gl.createBuffer() as WebGLBuffer;\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.vertexs), gl.STATIC_DRAW);\n\n        this.posLocAtt = this.gl.getAttribLocation(this.program, 'a_position');\n        // Tell the attribute how to get data out of posBuffer (ARRAY_BUFFER)\n        let size = 2;          // 2 components per iteration\n        let type = gl.FLOAT;   // the data is 32bit floats\n        let normalize = false; // don't normalize the data\n        let stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;        // start at the beginning of the buffer\n        gl.vertexAttribPointer(this.posLocAtt, size, type, normalize, stride, offset);\n        gl.enableVertexAttribArray(this.posLocAtt);\n\n        // this.colLocAtt = this.gl.getAttribLocation(this.program, 'a_color');\n        // size = 4;          // 2 components per iteration\n        // type = gl.FLOAT;   // the data is 32bit floats\n        // normalize = false; // don't normalize the data\n        // stride = 6 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n        // offset = 2 * Float32Array.BYTES_PER_ELEMENT;        // start at the beginning of the buffer\n        // gl.vertexAttribPointer(this.colLocAtt, size, type, normalize, stride, offset);\n        // gl.enableVertexAttribArray(this.colLocAtt);\n\n        gl.useProgram(this.program);\n        let primitiveType = gl.TRIANGLES; // LINE_LOOP; // gl.TRIANGLE_STRIP;\n        offset = 0;\n        let count = 6; // this.vertexs.length * 0.5;\n        gl.drawArrays(primitiveType, offset, count);\n\n    }\n}","import { Solution } from '../';\r\nimport { Solution as Solution3D} from '../../02_Three';\r\nexport class UI {\r\n    solution: Solution | Solution3D;\r\n    hostDiv: HTMLElement;\r\n\r\n    isActive_high_low_connectedness_user = false;\r\n    isActive_Paris_main_st = true;\r\n    isActive_treated_st = false;\r\n    isActive_control_st = false;\r\n    isActive_zones_30 = false;\r\n    isActive_streetOSM = false;\r\n    isActive_node = false;\r\n\r\n    month: number = -1;\r\n\r\n    constructor(solution: Solution | Solution3D) {\r\n        this.solution = solution;\r\n        this.hostDiv = solution.hostDiv;\r\n        this.appendUI();\r\n    }\r\n    public appendUI(){\r\n\r\n        const mainMenu = document.createElement('div');\r\n        mainMenu.style.position = 'absolute';\r\n        this.hostDiv.append(mainMenu);\r\n\r\n        let checkBoxUIA = getCheckBox('high_low_connectedness_user');\r\n        mainMenu.append(checkBoxUIA.div);\r\n        checkBoxUIA.checkBox.onchange = () => {\r\n            if (checkBoxUIA.checkBox.checked === true){\r\n                this.isActive_high_low_connectedness_user = true;\r\n\r\n            } else {\r\n                this.isActive_high_low_connectedness_user = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUIB = getCheckBox('main street');\r\n        mainMenu.append(checkBoxUIB.div);\r\n        checkBoxUIB.checkBox.checked = true;\r\n        checkBoxUIB.checkBox.onchange = () => {\r\n            if (checkBoxUIB.checkBox.checked === true){\r\n                this.isActive_Paris_main_st = true;\r\n            } else {\r\n                this.isActive_Paris_main_st = false;\r\n            }\r\n        }\r\n\r\n        \r\n        let checkBoxUI_OSM = getCheckBox('OSM street');\r\n        mainMenu.append(checkBoxUI_OSM.div);\r\n        checkBoxUI_OSM.checkBox.onchange = () => {\r\n            if (checkBoxUI_OSM.checkBox.checked === true){\r\n                this.isActive_streetOSM = true;\r\n            } else {\r\n                this.isActive_streetOSM = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUIC = getCheckBox('treated street');\r\n        mainMenu.append(checkBoxUIC.div);\r\n        checkBoxUIC.checkBox.onchange = () => {\r\n            if (checkBoxUIC.checkBox.checked === true){\r\n                this.isActive_treated_st = true;\r\n            } else {\r\n                this.isActive_treated_st = false;\r\n            }\r\n        }\r\n\r\n\r\n        let checkBoxUID = getCheckBox('control street');\r\n        mainMenu.append(checkBoxUID.div);\r\n        checkBoxUID.checkBox.onchange = () => {\r\n            if (checkBoxUID.checkBox.checked === true){\r\n                this.isActive_control_st = true;\r\n            } else {\r\n                this.isActive_control_st = false;\r\n            }\r\n        }\r\n\r\n        \r\n        let checkBoxUIE = getCheckBox('zones 30');\r\n        mainMenu.append(checkBoxUIE.div);\r\n        checkBoxUIE.checkBox.onchange = () => {\r\n            if (checkBoxUIE.checkBox.checked === true){\r\n                this.isActive_zones_30 = true;\r\n            } else {\r\n                this.isActive_zones_30 = false;\r\n            }\r\n        }\r\n\r\n        let checkBoxUI_Node = getCheckBox('Node');\r\n        mainMenu.append(checkBoxUI_Node.div);\r\n        checkBoxUI_Node.checkBox.onchange = () => {\r\n            if (checkBoxUI_Node.checkBox.checked === true){\r\n                this.isActive_node = true;\r\n            } else {\r\n                this.isActive_node = false;\r\n            }\r\n        }\r\n\r\n\r\n        let slider = getSlider('Month') \r\n        mainMenu.append(slider.div);\r\n\r\n        slider.slider.onchange = () => {\r\n           this.month = +slider.slider.value;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst getCheckBox = (title: string) => {\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(checkBox);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, checkBox\r\n    }\r\n};\r\n\r\nconst getSlider = (title: string) => {\r\n    // <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\">\r\n    const div = document.createElement('div');\r\n    div.style.display = 'flex';\r\n\r\n    const slider = document.createElement('input');\r\n    slider.type = 'range';\r\n    slider.min = '0';\r\n    slider.max = '12';\r\n\r\n    const text = document.createElement('div');\r\n    text.textContent = title;\r\n    text.style.color = '#aaa';\r\n    div.appendChild(slider);\r\n    div.appendChild(text);\r\n\r\n    return {\r\n        div, slider\r\n    }\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, MercatorProjection, getCSVFromURL } from '../../../../lib';\r\nimport { getJSONFromURL, } from 'njscore';\r\n\r\nimport { FilterGLViewDarkForDarken } from '../01_JSAPI/Tint/FilterGLViewDarkForDarken';\r\nimport { UI } from '../01_JSAPI/UI';\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n    zones15: any = [];\r\n    routesMain: any = [];\r\n\r\n    ui: UI;\r\n    meshTwitter: THREE.Points;\r\n    meshStreet: THREE.LineSegments;\r\n    meshNode: THREE.Points;\r\n    meshTreated: THREE.LineSegments;\r\n    meshControl: THREE.LineSegments;\r\n    meshPolygon: THREE.Mesh;\r\n    meshRoutesMain: THREE.LineSegments;\r\n\r\n    meshAreaGon: THREE.Mesh;\r\n\r\n    meshPolygon2: THREE.Mesh;\r\n\r\n    pts: number[] = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n\r\n        const canvasGL = document.createElement('canvas');\r\n        canvasGL.style.position = 'absolute';\r\n        canvasGL.style.pointerEvents = 'none';\r\n        canvasGL.style.mixBlendMode = 'darken';\r\n        canvasGL.width = this.hostDiv.clientWidth;\r\n        canvasGL.height = this.hostDiv.clientHeight;\r\n        this.hostDiv.appendChild(canvasGL);\r\n        const glCtx = canvasGL.getContext('webgl');\r\n        const d = new FilterGLViewDarkForDarken(glCtx, 0.5, 5)\r\n        d.Render(glCtx);\r\n\r\n        this.ui = new UI(this);\r\n\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL(process.env.PUBLIC_URL + path + 'street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshStreet = renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n            this.meshNode = renderPoints(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n\r\n            getCSVFromURL(process.env.PUBLIC_URL + path + 'high_low_connectedness_user.csv').then((d) => {\r\n\r\n                const xOFf = -15478803.88731685;\r\n                const yOFf = -4766681.448690384;\r\n                const scale = 0.01;\r\n\r\n                const line = d.split(/\\r\\n|\\r|\\n/g);\r\n                // console.log(line)\r\n                const colors = [];\r\n                for (let i = 1; i < line.length; ++i) {\r\n                    const values = line[i].split(',');\r\n                    const lon = +values[3];\r\n                    const lat = +values[4];\r\n                    if ((lon !== 0 && lat !== 0) && (!isNaN(lon) && !isNaN(lat))) {\r\n\r\n                        const [xPro, yPro] = MercatorProjection(lon, lat);\r\n\r\n                        const x = (xPro + xOFf) * scale\r\n                        const y = (yPro + yOFf) * scale\r\n\r\n                        this.pts.push(x, 0, y);\r\n                        colors.push(0, 0.5, 0.5);\r\n                    }\r\n                }\r\n\r\n                // console.log(this.pts)\r\n                const geometry = new THREE.BufferGeometry();\r\n                const material = new THREE.PointsMaterial({ vertexColors: true, size: 1.5 });\r\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(this.pts, 3));\r\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n                geometry.computeBoundingSphere();\r\n\r\n                this.meshTwitter = new THREE.Points(geometry, material);\r\n                this.scene.add(this.meshTwitter);\r\n\r\n\r\n            });\r\n\r\n\r\n            getJSONFromURL(process.env.PUBLIC_URL + path + 'Paris-main-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesMain.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshRoutesMain = renderLines(this.scene, this.routesMain, [1, 1, 0]);\r\n            });\r\n\r\n            getJSONFromURL(process.env.PUBLIC_URL + path + 'treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshTreated = renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL(process.env.PUBLIC_URL + path + 'control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshControl = renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            getJSONFromURL(process.env.PUBLIC_URL + path + 'zones-30.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.zones30.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                // this.meshPolygon = renderMultiPolygon(this.scene, this.zones30, [0, 1, 0]);\r\n\r\n            });\r\n\r\n            getJSONFromURL(process.env.PUBLIC_URL + path + 'zones_15_innerouter_byyr.geojson').then((geoJSON) => {\r\n                for (let i = 0; i < geoJSON['features'].length; ++i) {\r\n                    this.zones15.push(geoJSON['features'][i]['geometry']['coordinates']);\r\n                }\r\n                // this.meshPolygon = renderMultiPolygon(this.scene, this.zones15, [0, 1, 0]);\r\n                console.log(geoJSON);\r\n\r\n                this.meshAreaGon = renderCustomPolygon(this.scene, geoJSON);\r\n\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n\r\n    public update(scene: THREE.Scene) {\r\n\r\n        if (this.meshTwitter !== undefined) {\r\n            if (this.ui.isActive_high_low_connectedness_user) { this.meshTwitter.visible = true; } else { this.meshTwitter.visible = false; }\r\n        }\r\n\r\n        if (this.meshRoutesMain !== undefined) {\r\n            if (this.ui.isActive_Paris_main_st) { this.meshRoutesMain.visible = true; } else { this.meshRoutesMain.visible = false; }\r\n        }\r\n\r\n        if (this.meshStreet !== undefined) {\r\n            if (this.ui.isActive_streetOSM) { this.meshStreet.visible = true; } else { this.meshStreet.visible = false; }\r\n        }\r\n\r\n        if (this.meshNode !== undefined) {\r\n            if (this.ui.isActive_node) { this.meshNode.visible = true; } else { this.meshNode.visible = false; }\r\n        }\r\n\r\n        if (this.meshTreated !== undefined) {\r\n            if (this.ui.isActive_treated_st) { this.meshTreated.visible = true; } else { this.meshTreated.visible = false; }\r\n        }\r\n\r\n        if (this.meshControl !== undefined) {\r\n            if (this.ui.isActive_control_st) { this.meshControl.visible = true; } else { this.meshControl.visible = false; }\r\n        }\r\n\r\n        if (this.meshPolygon !== undefined) {\r\n            if (this.ui.isActive_zones_30) { this.meshPolygon.visible = true; } else { this.meshPolygon.visible = false; }\r\n        }\r\n\r\n\r\n        // this.meshPolygon2.visible = true;\r\n        // const geo = this.meshAre\r\n        // console.log(geo);\r\n\r\n    }\r\n}\r\nconst renderCustomPolygon = (scene: THREE.Scene, geojson: any) => {\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n    const shapes = [];\r\n\r\n    let count = 0;\r\n\r\n    for (let index = 0; index < geojson['features'].length; ++index) {\r\n        const multiPolygon = geojson['features'][index]['geometry']['coordinates'];\r\n        const meta = geojson['features'][index];\r\n        // console.log(meta)\r\n        const meta_yr = meta['properties'].yr;\r\n        // console.log(meta_yr)\r\n\r\n\r\n\r\n        const shape = new THREE.Shape();\r\n        const holes = [];\r\n        const shapePts = [];\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n            // if (polyI === 0) {\r\n\r\n            //     path.moveTo\r\n            // }\r\n            // console.log(multiPolygon)\r\n            // break;\r\n            console.log(polygon.length)\r\n\r\n\r\n            let path = new THREE.Path();\r\n\r\n            for (let i = 0; i < polygon.length; ++i) {\r\n                const [xPro, yPro] = MercatorProjection(polygon[i][0], polygon[i][1]);\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                //     // console.log(x, y)\r\n\r\n                if (polyI === 0) {\r\n                    shapePts.push(new THREE.Vector2(x, y));\r\n                } else {\r\n                    if (i === 0) {\r\n                        path.moveTo(x, y);\r\n\r\n                    } else {\r\n                        path.lineTo(x, y);\r\n\r\n                        if (i === polygon.length - 1) {\r\n                            path.closePath()\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            holes.push(path);\r\n            // shape.uuid = meta_yr;\r\n\r\n            // // shape\r\n            // count++;\r\n            // shape.holes.push()\r\n            // break;\r\n        }\r\n        const shapeThree = new THREE.Shape(holes);\r\n        // shapeThree.holes.push(...holes)\r\n        shapes.push(shapeThree);\r\n        // break;\r\n\r\n    }\r\n\r\n\r\n    let geometry = new THREE.ShapeGeometry(shapes);\r\n    console.log(count)\r\n    console.log(geometry)\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide, color: 0x00ff00,\r\n        transparent: true,\r\n        opacity: 0.3\r\n    });\r\n    let mesh = new THREE.Mesh(geometry, mat);\r\n    scene.add(mesh);\r\n    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n    return mesh;\r\n}\r\nconst renderMultiPolygon = (scene: THREE.Scene, paths: any, colorArray: number[]) => {\r\n    // if (multiPolygons === undefined) return;\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    // const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.MeshBasicMaterial( { vertexColors: true } );\r\n\r\n    const positions = [];\r\n\r\n    const shapes = [];\r\n\r\n\r\n\r\n    for (let multi = 0; multi < paths.length; ++multi) {\r\n        const multiPolygon = paths[multi];\r\n\r\n        for (let polyI = 0; polyI < multiPolygon.length; ++polyI) {\r\n            const polygon = multiPolygon[polyI];\r\n\r\n\r\n\r\n            if (polygon.length === 1) {\r\n                const thePolygon = polygon[0];\r\n\r\n                const shape = [];\r\n\r\n                for (let i = 0; i < thePolygon.length; ++i) {\r\n\r\n                    const [xPro, yPro] = MercatorProjection(thePolygon[i][0], thePolygon[i][1]);\r\n\r\n                    const x = (xPro + xOFf) * scale\r\n                    const y = (yPro + yOFf) * scale\r\n                    // console.log(x, y)\r\n                    // positions.push(x, 0, y)\r\n\r\n                    shape.push(new THREE.Vector2(x, y));\r\n                }\r\n                shapes.push(new THREE.Shape(shape));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    let geometry = new THREE.ShapeGeometry(shapes);\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        side: THREE.DoubleSide, color: 0x00ff00,\r\n        transparent: true,\r\n        opacity: 0.3\r\n    });\r\n    let mesh = new THREE.Mesh(geometry, mat);\r\n    scene.add(mesh);\r\n    mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\r\n    return mesh;\r\n};\r\n\r\n\r\nconst renderPoints = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n\r\n    const mesh = new THREE.Points(geometry, material);\r\n    scene.add(mesh);\r\n    return mesh;\r\n\r\n}\r\n\r\nconst renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    // const material = new THREE.PointsMaterial( { vertexColors: true, size: 0.1 } );\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                // console.log(x, y)\r\n                positions.push(x, 0, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // console.log(xC / Count, yC / Count)\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    // generateMorphTargets( geometry );\r\n\r\n    geometry.computeBoundingSphere();\r\n\r\n    const mesh = new THREE.LineSegments(geometry, material);\r\n    scene.add(mesh);\r\n    return mesh;\r\n\r\n};"],"names":["FilterGLViewDarkForDarken","gl","program","fragmentShader","vertexShader","matrixLocation","posBuffer","colBuffer","vertexs","posLocAtt","colLocAtt","matLoc","colLoc","cVecLoc","mouseLoc","timeGL","vShader","fShader","v","f","positionAttribLocation","colorAttribLocation","translation","color","colArray","this","Math","random","InitShader","GLShaderCommon","VERTEX_SHADER","FRAGMENT_SHADER","col","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","getAttribLocation","type","FLOAT","stride","BYTES_PER_ELEMENT","offset","vertexAttribPointer","enableVertexAttribArray","useProgram","primitiveType","TRIANGLES","drawArrays","UI","solution","hostDiv","isActive_high_low_connectedness_user","isActive_Paris_main_st","isActive_treated_st","isActive_control_st","isActive_zones_30","isActive_streetOSM","isActive_node","month","appendUI","mainMenu","document","createElement","style","position","append","checkBoxUIA","getCheckBox","div","checkBox","onchange","checked","checkBoxUIB","checkBoxUI_OSM","checkBoxUIC","checkBoxUID","checkBoxUIE","checkBoxUI_Node","slider","getSlider","value","title","display","text","textContent","appendChild","min","max","Solution","id","streetOSM","routesTreated","routesControl","zones30","zones15","routesMain","ui","meshTwitter","meshStreet","meshNode","meshTreated","meshControl","meshPolygon","meshRoutesMain","meshAreaGon","meshPolygon2","pts","light","THREE","camera","add","scene","canvasGL","pointerEvents","mixBlendMode","width","clientWidth","height","clientHeight","glCtx","getContext","d","Render","set","path","getJSONFromURL","process","then","data","i","length","push","renderLines","renderPoints","getCSVFromURL","line","split","colors","values","lon","lat","isNaN","MercatorProjection","x","y","geometry","material","vertexColors","size","setAttribute","computeBoundingSphere","geoJSON","console","log","renderCustomPolygon","start","undefined","visible","RendererThree","geojson","shapes","index","multiPolygon","holes","yr","shapePts","polyI","polygon","moveTo","lineTo","closePath","shapeThree","mat","side","transparent","opacity","mesh","rotateOnAxis","PI","paths","positions","route","j","k","indices","xPro","yPro","floor","setIndex"],"sourceRoot":""}