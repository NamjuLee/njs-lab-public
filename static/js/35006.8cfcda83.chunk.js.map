{"version":3,"file":"static/js/35006.8cfcda83.chunk.js","mappings":"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","sources":["njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GAUtility.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GAStringWrapper.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GANumberWrapper.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GASystem/GeneticAlgorithm/Core/index.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GASystem/GeneticAlgorithm/GeneticAlgorithm.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/GASystem/GASystem.ts","njslab/app-legacy/Implementation/Demos/Demo300GA/index.ts","njslab/app-legacy/NJSCore/Core/Algorithm/GeneticAlgorithm/index.ts"],"sourcesContent":["export const shuffle = <T> ( list: T[] ) => {\r\n    let n = list.length;\r\n    while (n > 1) {\r\n      n--;\r\n      let k = Math.floor( Math.random() * ( n + 1 ) );\r\n    // let k = Math.random() + (n + 1);\r\n      let data = list[k];\r\n      list[k] = list[n];\r\n      list[n] = data;\r\n    }\r\n};\r\nexport const replaceAt = (input: string, index: number, char: string): string => {\r\n    //   char[] chars = input.ToCharArray();\r\n    //   chars[index] = newChar;\r\n    //   let newstring = input;\r\n    //   newstring.\r\n    return input.substr(0, index) + char + input.substr(index + char.length);\r\n};\r\nexport const getRandomString = (len: number): string => {\r\n   return Math.random().toString(36).substr(2, len + 2);\r\n};\r\nexport const getRandomStringByPool = (len: number, charSet: string | undefined  = undefined) => {\r\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let randomString = '';\r\n    for (let i = 0; i < len; i++) {\r\n        let randomPoz = Math.floor(Math.random() * charSet.length);\r\n        randomString += charSet.substring(randomPoz, randomPoz + 1);\r\n    }\r\n    return randomString;\r\n};\r\nexport const getRandomNum = (len: number) => {\r\n    let charSet = '0123456789';\r\n    let randomString = '';\r\n    for (let i = 0; i < len; i++) {\r\n        let randomPoz = Math.floor(Math.random() * charSet.length);\r\n        randomString += charSet.substring(randomPoz, randomPoz + 1);\r\n    }\r\n    return +randomString;\r\n};\r\nexport const getRandomNumMinMax = (len: number, min: number = 0, max: number = 9 ) => {\r\n    let randomString = '';\r\n    while (randomString.length < len) {\r\n        let randomPoz = Math.floor(Math.random() * 10);\r\n        if (randomPoz > min && randomPoz < max) {\r\n            randomString += randomPoz;\r\n        }\r\n    }\r\n    return +randomString;\r\n};\r\nexport const getIndexAscending = (data: number[] ) => {\r\n    let len = data.length;\r\n    let indices = new Array(len);\r\n    for (var i = 0; i < len; ++i) { indices[i] = i; }\r\n    indices.sort( (a, b) => { return data[a] < data[b] ? -1 : data[a] > data[b] ? 1 : 0; });\r\n    return indices;\r\n};","import { getRandomStringByPool, getIndexAscending, shuffle, replaceAt,  } from './GAUtility';\r\n\r\nexport class GAStringWrapper {\r\n    constructor(txt: string = 'NJnamju6178607084') {\r\n        const gas = new GAString(txt);\r\n        console.log(gas.Evloution());\r\n        console.log(gas.history);\r\n        console.log(gas.historyScore);\r\n    }\r\n}\r\nexport class GAString {\r\n    public history: string[] = [];\r\n    public historyScore: number[] = [];\r\n    public keyword: string = '00110001';\r\n    numGeneration: number = 5000;\r\n    numPopulation: number = 100;\r\n    best_sample: number = 20;\r\n    lucky_few: number = 0;\r\n    n_child: number = 5;\r\n\r\n    length: number = 10;\r\n\r\n    chance_of_mutation: number = 0.5;\r\n\r\n    public constructor(keyword: string = '00110001') {\r\n      this.keyword = keyword;\r\n      this.length = keyword.length;\r\n      this.history = [];\r\n    }\r\n    public Evloution(): string {\r\n      let population: string[] = this.InitPopulation(this.numPopulation);\r\n      let lenData = 0;\r\n      for (let i = 0 ; i < this.numGeneration; ++i) {\r\n\r\n        const outFit = this.ComputeFitness(population, this.keyword);\r\n\r\n        const scoreSorted: number[] = outFit.scoreOrdered;\r\n        const populationSorted: string[] = outFit.popOrdered;\r\n        lenData = outFit.pred_len;\r\n\r\n        if (scoreSorted[0] === 1) {\r\n          console.log('SUCCESS! The word is \"' + (populationSorted[0]) + '');\r\n          this.history.push( i + ' Iter, Done: ' + populationSorted[0] + ', Score: ' + scoreSorted[0]);\r\n          this.historyScore.push(scoreSorted[0]);\r\n          return populationSorted[0];\r\n          // break;\r\n        }\r\n\r\n        const selection: string[] = this.Selection(populationSorted, this.best_sample, this.lucky_few, lenData);\r\n        const production: string[] = this.ComputeReproductions(selection, this.n_child);\r\n        const newGeneration: string[] = this.ComputeMutations(production, this.chance_of_mutation);\r\n        population = newGeneration;\r\n\r\n        this.history.push(i + ' Iter: ' + populationSorted[0] + ', Score: ' + scoreSorted[0]);\r\n        this.historyScore.push(scoreSorted[0]);\r\n      }\r\n      return '';\r\n    }\r\n    public ComputeMutations( population: string[], chance_of_mutation: number): string[] {\r\n      for (let i = 0 ; i < population.length; ++i) {\r\n        if (Math.random() < chance_of_mutation) {\r\n          population[i] = this.Mutation(population[i]);\r\n        }\r\n      }\r\n      return population;\r\n    }\r\n    private Mutation(word: string): string {\r\n      const theString = getRandomStringByPool(5);\r\n      const idx = Math.fround((Math.random() * word.length));\r\n      return replaceAt(word, idx, theString[0]);\r\n    }\r\n\r\n    // // ..........................\r\n\r\n    public ComputeReproductions(parents: string[], n_child: number): string[] {\r\n      const next_population: string[] = [];\r\n      for (let i = 0 ; i < parents.length / 2; ++i) {\r\n        for (let j = 0; j < n_child; ++j) {\r\n          next_population.push(this.Reproduction(parents[i], parents[parents.length - 1 - i]));\r\n        }\r\n      }\r\n      return next_population;\r\n    }\r\n    private Reproduction(individual1: string, individual2: string): string {\r\n      let child = '';\r\n      for (let i = 0 ; i < this.length; ++i) {\r\n        if (Math.random() < 0.499) {\r\n          child += individual1[i];\r\n        } else {\r\n          child += individual2[i];\r\n        }\r\n      }\r\n      return child;\r\n    }\r\n    public Selection( population_sorted: string[],  best_sample: number, lucky_few: number, password_len: number): string[] {\r\n      const nextGeneration: string[] = [];\r\n\r\n      for (let i = 0; i < best_sample; ++i) {\r\n        nextGeneration.push(population_sorted[i]);\r\n      }\r\n\r\n      for ( let i = 0 ; i < lucky_few; ++i) {\r\n        const theIndex = Math.floor(Math.random() * (population_sorted.length - best_sample));\r\n        nextGeneration.push(population_sorted[theIndex + best_sample]);\r\n      }\r\n\r\n      // generate new population if next_generation is too small\r\n      while (nextGeneration.length < best_sample + lucky_few) {\r\n        nextGeneration.push(getRandomStringByPool(password_len));\r\n      }\r\n      shuffle(nextGeneration);\r\n      return nextGeneration;\r\n\r\n    }\r\n    public ComputeFitness( population: string[] , password: string ) {\r\n      let pred_len: number = -1;\r\n      const popOrder: string[] = [];\r\n      const scoreOrder: number[] = [];\r\n\r\n      for (let i = 0 ; i < population.length; ++i) {\r\n        const individual: string = population[i];\r\n        const score = this.Fitness(password, individual);\r\n\r\n        if (score > 0) pred_len = individual.length;\r\n\r\n        popOrder.push(individual);\r\n        scoreOrder.push(score);\r\n      }\r\n\r\n      const indexOrder: number[] = getIndexAscending(scoreOrder);\r\n      const popOrdered: string[] = [];\r\n      const scoreOrdered: number[] = [];\r\n\r\n      for (let i = indexOrder.length - 1 ; i > -1; --i) {\r\n        popOrdered.push(popOrder[indexOrder[i]]);\r\n        scoreOrdered.push(scoreOrder[indexOrder[i]]);\r\n      }\r\n\r\n      return {\r\n          'popOrdered': popOrdered,\r\n          'scoreOrdered': scoreOrdered,\r\n          'pred_len': pred_len,\r\n      };\r\n    }\r\n    private Fitness(password: string, test_word: string): number {\r\n      let score = 0;\r\n\r\n      if (password.length !== test_word.length) { return score; }\r\n      let len_score = 0.5;\r\n      score += len_score;\r\n\r\n      for (let i = 0; i < password.length; ++i) {\r\n        if (password[i] === test_word[i]) {\r\n          score += 1;\r\n        }\r\n      }\r\n      return score / (password.length + len_score);\r\n    }\r\n\r\n\r\n    public InitPopulation(numPop: number): string[] {\r\n      const population: string[] = [];\r\n      for (let i = 0 ; i < numPop; ++i) {\r\n        population.push(getRandomStringByPool(this.length));\r\n      }\r\n      return population;\r\n    }\r\n\r\n    // private RandomString(length: number): string {\r\n    //   if (length > 11) length = 11;\r\n    //   let theString = Path.GetRandomFileName();\r\n    //   theString = theString.Replace(\".\", \"\"); // Remove period.\r\n    //   return Slice(theString, 0, length);\r\n    // }\r\n\r\n    // // ......................................................... Utility\r\n    // public string Slice(string source, int start, int end) {\r\n    //   if (end < 0) {\r\n    //     end = source.Length + end;\r\n    //   }\r\n    //   int len = end - start;               // Calculate length\r\n    //   return source.Substring(start, len); // Return Substring of length\r\n    // }\r\n    // public List<int> GetIndexAscending(List < double > data) {\r\n    //   var sorted = data\r\n    //     .Select((x, i) => new KeyValuePair<double, int>(x, i))\r\n    //     .OrderBy(x => x.Key)\r\n    //     .ToList();\r\n    //   List<int> index = sorted.Select(x => x.Value).ToList();\r\n    //   return index;\r\n    // }\r\n    // public void Shuffle(List < string > list) {\r\n    //     int n = list.Count;\r\n    //     while (n > 1) {\r\n    //       n--;\r\n    //       int k = rnd.Next(n + 1);\r\n    //       string data = list[k];\r\n    //       list[k] = list[n];\r\n    //       list[n] = data;\r\n    //     }\r\n    //   }\r\n\r\n    // public string ReplaceAt(input: string, index: number, char newChar) {\r\n    //   char[] chars = input.ToCharArray();\r\n    //   chars[index] = newChar;\r\n    //   return new string(chars);\r\n    // }\r\n    // .........................................................\r\n  }\r\n\r\n","import { getIndexAscending,  } from './GAUtility';\r\n\r\n\r\nconst compute = (param: Param) => {\r\n  return param.param[0] * param.param[1] - param.param[2] + param.param[3];\r\n};\r\nconst costFunction = (param: Param, learningRate =  0.02) => {\r\n  let result =  compute(param);\r\n  result = result - 500;\r\n  return Math.pow(1 - learningRate, Math.abs(result));\r\n};\r\nexport class GANumberWrapper {\r\n    constructor(len: number = 4) {\r\n        const gas = new GANumber(len);\r\n\r\n        for (let i = 0 ; i < 100; ++i ) {\r\n          console.log(gas.Evloution());\r\n          // console.log(gas.history);\r\n          // console.log(gas.historyScore);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Param {\r\n  param: number [] = [];\r\n  constructor(num: number) {\r\n    this.param = [];\r\n    for (let i = 0; i < num; ++i) {\r\n      this.param.push((Math.random() - 0.5) * 10);\r\n    }\r\n  }\r\n  public mutation() {\r\n    for (let i = 0 ; i < this.param.length; ++i) {\r\n      if (Math.random() < 0.5) {\r\n        const result =  (Math.random() - 0.5); // * Math.random() * 10\r\n        this.param[i] += result;\r\n      }\r\n    }\r\n  }\r\n  public toString() {\r\n    let paramString  = '';\r\n    for (let i = 0 ; i < this.param.length; ++i) {\r\n      paramString += this.param[i] + ', ';\r\n    }\r\n    return paramString;\r\n  }\r\n}\r\nexport class GANumber {\r\n    public history: string[] = [];\r\n    public historyScore: number[] = [];\r\n    // public keyword: number[] = [];\r\n    numGeneration: number = 200;\r\n    numPopulation: number = 100;\r\n    best_sample: number = 20;\r\n    lucky_few: number = 0;\r\n    n_child: number = 5;\r\n\r\n    length: number = 10;\r\n\r\n    chance_of_mutation: number = 0.5;\r\n\r\n    public constructor(len: number) {\r\n      this.length = len;\r\n      this.history = [];\r\n    }\r\n    public Evloution(): Param | undefined {\r\n      let population: Param[] = this.InitPopulation(this.numPopulation);\r\n\r\n      for (let i = 0 ; i < this.numGeneration; ++i) {\r\n        const outFit = this.ComputeFitness(population);\r\n        const scoreSorted: number[] = outFit.scoreOrdered;\r\n        const populationSorted: Param[] = outFit.popOrdered;\r\n\r\n\r\n        if (scoreSorted[0] > 0.98) {\r\n          console.log('SUCCESS! The word is \"' + (populationSorted[0]) + '\"', ', Score: ' + scoreSorted[0]);\r\n          console.log('compute: ', compute(populationSorted[0]) - 500 );\r\n          this.history.push( i + ' Iter, Done: ' + populationSorted[0].toString() + ', Score: ' + scoreSorted[0]);\r\n          this.historyScore.push(scoreSorted[0]);\r\n          return populationSorted[0]; // populationSorted[0].toString();\r\n        }\r\n\r\n        const selection: Param[] = this.Selection(populationSorted, this.best_sample, this.lucky_few);\r\n        const production: Param[] = this.ComputeReproductions(selection, this.n_child);\r\n        const newGeneration: Param[] = this.ComputeMutations(production, this.chance_of_mutation);\r\n        population = newGeneration;\r\n\r\n        this.history.push(i + ' Iter: ' + populationSorted[0] + ', Score: ' + scoreSorted[0]);\r\n        this.historyScore.push(scoreSorted[0]);\r\n      }\r\n      return undefined;\r\n    }\r\n    public ComputeMutations( population: Param[], chance_of_mutation: number): Param[] {\r\n      for ( let i = 0 ; i < population.length; ++i) {\r\n        if (Math.random() < chance_of_mutation) {\r\n          population[i].mutation();\r\n        }\r\n      }\r\n      return population;\r\n    }\r\n\r\n    // // ..........................\r\n\r\n\r\n    public ComputeReproductions(parents: Param[], n_child: number): Param[] {\r\n      const next_population: Param[] = [];\r\n      for (let i = 0 ; i < parents.length / 2; ++i) {\r\n        for (let j = 0; j < n_child; ++j) {\r\n          next_population.push(this.Reproduction(parents[i], parents[parents.length - 1 - i]));\r\n        }\r\n      }\r\n      return next_population;\r\n    }\r\n    private Reproduction(individual1: Param, individual2: Param): Param {\r\n      let child = new Param(4);\r\n\r\n      for (let i = 0 ; i < individual1.param.length; ++i) {\r\n        if (Math.random() < 0.499) {\r\n          child.param[i] += individual1.param[i];\r\n        } else {\r\n          child.param[i] += individual2.param[i];\r\n        }\r\n      }\r\n      return child;\r\n    }\r\n    public Selection( population_sorted: Param[],  best_sample: number, lucky_few: number): Param[] {\r\n      const nextGeneration: Param[] = [];\r\n\r\n      for (let i = 0; i < best_sample; ++i) {\r\n        nextGeneration.push(population_sorted[i]);\r\n      }\r\n\r\n      for (let i = 0 ; i < lucky_few; ++i) {\r\n        const theIndex = Math.floor(Math.random() * (population_sorted.length - best_sample));\r\n        nextGeneration.push(population_sorted[theIndex + best_sample]);\r\n      }\r\n\r\n      // generate new population if next_generation is too small\r\n      while (nextGeneration.length < best_sample + lucky_few) {\r\n        nextGeneration.push(new Param(4));\r\n      }\r\n      shuffle(nextGeneration);\r\n      return nextGeneration;\r\n\r\n    }\r\n    public ComputeFitness( population: Param[] ) {\r\n      // let pred_len: number = -1;\r\n      const popOrder: Param[] = [];\r\n      const scoreOrder: number[] = [];\r\n\r\n      for (let i = 0 ; i < population.length; ++i) {\r\n        const individual: Param = population[i];\r\n        const score = this.Fitness(individual);\r\n\r\n        // if(score > 0) pred_len = individual.param.length;\r\n\r\n        popOrder.push(individual);\r\n        scoreOrder.push(score);\r\n      }\r\n\r\n      const indexOrder: number[] = getIndexAscending(scoreOrder);\r\n      const popOrdered: Param[] = [];\r\n      const scoreOrdered: number[] = [];\r\n\r\n      for (let i = indexOrder.length - 1 ; i > -1; --i) {\r\n        popOrdered.push(popOrder[indexOrder[i]]);\r\n        scoreOrdered.push(scoreOrder[indexOrder[i]]);\r\n      }\r\n\r\n\r\n      return {\r\n          'popOrdered': popOrdered,\r\n          'scoreOrdered': scoreOrdered\r\n      };\r\n    }\r\n    private Fitness(password: Param ): number {\r\n      return costFunction(password);\r\n      // let score = 0;\r\n      // let len_score = 0.5;\r\n      // score += len_score;\r\n      // return score / (password.length + len_score);\r\n    }\r\n\r\n\r\n\r\n    public InitPopulation(numPop: number): Param[] {\r\n      const population: Param[] = [];\r\n      for (let i = 0 ; i < numPop; ++i) {\r\n        population.push(new Param(4));\r\n      }\r\n      return population;\r\n    }\r\n\r\n    // private RandomString(length: number): string {\r\n    //   if (length > 11) length = 11;\r\n    //   let theString = Path.GetRandomFileName();\r\n    //   theString = theString.Replace(\".\", \"\"); // Remove period.\r\n    //   return Slice(theString, 0, length);\r\n    // }\r\n\r\n    // // ......................................................... Utility\r\n    // public string Slice(string source, int start, int end) {\r\n    //   if (end < 0) {\r\n    //     end = source.Length + end;\r\n    //   }\r\n    //   int len = end - start;               // Calculate length\r\n    //   return source.Substring(start, len); // Return Substring of length\r\n    // }\r\n    // public List<int> GetIndexAscending(List < double > data) {\r\n    //   var sorted = data\r\n    //     .Select((x, i) => new KeyValuePair<double, int>(x, i))\r\n    //     .OrderBy(x => x.Key)\r\n    //     .ToList();\r\n    //   List<int> index = sorted.Select(x => x.Value).ToList();\r\n    //   return index;\r\n    // }\r\n    // public void Shuffle(List < string > list) {\r\n    //     int n = list.Count;\r\n    //     while (n > 1) {\r\n    //       n--;\r\n    //       int k = rnd.Next(n + 1);\r\n    //       string data = list[k];\r\n    //       list[k] = list[n];\r\n    //       list[n] = data;\r\n    //     }\r\n    //   }\r\n\r\n    // public string ReplaceAt(input: string, index: number, char newChar) {\r\n    //   char[] chars = input.ToCharArray();\r\n    //   chars[index] = newChar;\r\n    //   return new string(chars);\r\n    // }\r\n    // .........................................................\r\n  }\r\n\r\nexport const shuffle = <T>( list: T[] ) => {\r\n    let n = list.length;\r\n    while (n > 1) {\r\n      n--;\r\n      let k = Math.floor( Math.random() * ( n + 1 ) );\r\n    //   let k = Math.random() + (n + 1);\r\n      let data = list[k];\r\n      list[k] = list[n];\r\n      list[n] = data;\r\n    }\r\n};","import { shuffle } from '../../../../../NUtility/Math/MathUtility';\r\nimport { NVector3 } from '../../../../../CoreGeometry/NGeometry/NVector3';\r\nexport class Node {\r\n    public vec: NVector3;\r\n    public id: number = -1;\r\n    constructor(x: number, y: number, long: number, lat: number) {\r\n        this.vec = new NVector3(x, y, 0);\r\n        this.vec.long = long;\r\n        this.vec.lat = lat;\r\n    }\r\n    public distanceTo(node: Node) {\r\n        return this.vec.Distance(node.vec);\r\n    }\r\n}\r\nexport class Path {\r\n    public pathsOrigin: Node[] = [];\r\n    public nodes: (Node | undefined)[] = [];\r\n    public fitness = 0.0;\r\n    public distance = 0;\r\n    constructor(pathsOrigin: Node[] ) {\r\n        this.pathsOrigin = pathsOrigin;\r\n        this.nodes = [];\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n\r\n        for (let i = 0 ; i < this.pathsOrigin.length; ++i) {\r\n            this.nodes.push(undefined);\r\n        }\r\n    }\r\n    public generateIndividual() {\r\n        for (let cityIndex = 0; cityIndex < this.pathsOrigin.length; ++cityIndex) {\r\n            this.setCityInit(cityIndex, this.pathsOrigin[cityIndex]);\r\n        }\r\n        shuffle(this.nodes);\r\n    }\r\n    public setCityInit(i: number, city: Node) {\r\n        this.nodes[i] = city;\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n    }\r\n    public getFitness() {\r\n        if (this.fitness === 0) {\r\n            this.fitness = 1.0 / (this.getDistance());\r\n        }\r\n        return this.fitness;\r\n    }\r\n    public getDistance() {\r\n        if (this.distance === 0) {\r\n            let tourDistance = 0;\r\n            for (let i = 0 ; i < this.nodes.length; ++i ) {\r\n                let fromNode = this.nodes[i];\r\n\r\n                if (fromNode) {\r\n                    let otherNode = undefined;\r\n                    if (i === this.nodes.length - 1) {\r\n                        otherNode = this.nodes[0];\r\n                    } else {\r\n                        otherNode = this.nodes[i + 1];\r\n                    }\r\n                    if (otherNode) {\r\n                        tourDistance += fromNode.distanceTo(otherNode);\r\n                    }\r\n                }\r\n            }\r\n            this.distance = tourDistance;\r\n        }\r\n        return this.distance;\r\n    }\r\n    public containsCity(city: Node): boolean {\r\n        for (let i = 0 ; i < this.nodes.length; ++i) {\r\n            if (this.nodes[i] === city) { return true; }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class Population {\r\n    public paths: (Path | undefined) [] = [];\r\n    constructor(nodes: Node[] , populationSize: number, initialise: boolean) {\r\n        this.paths = [];\r\n        for (let i = 0; i < populationSize; ++i) {\r\n            this.paths.push(undefined);\r\n        }\r\n        if (initialise) {\r\n            for (let i = 0 ; i < populationSize; ++i) {\r\n                let newTour = new Path(nodes);\r\n                newTour.generateIndividual();\r\n                this.paths[i] = newTour;\r\n            }\r\n        }\r\n    }\r\n    public getFittestPath() {\r\n        let fittest: undefined | Path = this.paths[0];\r\n        for (let i = 0; i < this.paths.length; ++i) {\r\n            let other = this.paths[i];\r\n            if (fittest && other) {\r\n                if (fittest.getFitness() <= other.getFitness()) {\r\n                    fittest = other;\r\n                }\r\n            }\r\n        }\r\n        return fittest;\r\n    }\r\n}","// \"\"\"\r\n// This Python code is based on Java code by Lee Jacobson found in an article\r\n// entitled \"Applying a genetic algorithm to the travelling salesman problem\"\r\n// that can be found at: http://goo.gl/cJEY1\r\n// https://gist.github.com/turbofart/3428880\r\n// \"\"\"\r\nimport { Population, Node, Path } from './Core';\r\n\r\nexport class GeneticAlgorithm {\r\n    private nodes: Node[];\r\n    private mutationRate: number;\r\n    private nodeSize: number;\r\n    private elitism: boolean;\r\n    constructor (tourmanager: Node[], mutationRate: number = 0.05, nodeSize: number = 5, elitism = true) {\r\n        this.nodes = tourmanager;\r\n        this.mutationRate = mutationRate;\r\n        this.nodeSize = nodeSize;\r\n        this.elitism = elitism;\r\n    }\r\n    public evolvePopulation(pop: Population) {\r\n        const newPopulation = new Population(this.nodes, pop.paths.length, false);\r\n        let elitismOffset = 0;\r\n        if (this.elitism) {\r\n            const thePath = pop.getFittestPath();\r\n            if (thePath) {\r\n                newPopulation.paths[0] = thePath;\r\n                elitismOffset = 1;\r\n            }\r\n        }\r\n        for (let i = elitismOffset; i < newPopulation.paths.length; ++i) {\r\n            let parent1 = this.tournamentSelection(pop);\r\n            let parent2 = this.tournamentSelection(pop);\r\n            if (parent1 && parent2) {\r\n                let child = this.crossover(parent1, parent2);\r\n                newPopulation.paths[i] = child;\r\n            }\r\n        }\r\n        for (let i = elitismOffset; i < newPopulation.paths.length; ++i) {\r\n            let path = newPopulation.paths[i];\r\n            if (path) {\r\n                this.mutate(path);\r\n            }\r\n        }\r\n        return newPopulation;\r\n    }\r\n    private crossover(parent1: Path, parent2: Path) {\r\n        let child = new Path(this.nodes);\r\n        let startPos = Math.floor(Math.random() * parent1.nodes.length);\r\n        let endPos = Math.floor(Math.random() * parent1.nodes.length);\r\n\r\n        for (let i = 0; i < child.nodes.length; ++i) {\r\n            const place = parent1.nodes[i];\r\n            if (place) {\r\n                if (startPos < endPos && i > startPos && i < endPos) {\r\n                    child.setCityInit(i, place);\r\n                } else if (startPos > endPos) {\r\n                    if ((i < startPos && i > endPos) === false ) {\r\n                        child.setCityInit(i, place);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < parent2.nodes.length; ++i) {\r\n            const place = parent2.nodes[i];\r\n            if (place) {\r\n                if (child.containsCity(place) === false ) {\r\n                    for (let ii = 0; ii < child.nodes.length; ++ii) {\r\n                        if (child.nodes[ii] === undefined) {\r\n                            child.setCityInit(ii, place);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return child;\r\n    }\r\n    private mutate(path: Path) {\r\n        for (let tourPos1 = 0; tourPos1 < path.nodes.length; ++tourPos1) {\r\n            if (Math.random() < this.mutationRate) {\r\n                let tourPos2 = Math.floor(path.nodes.length * Math.random());\r\n                let city1 = path.nodes[tourPos1];\r\n                let city2 = path.nodes[tourPos2];\r\n                if (city1 && city2) {\r\n                    path.setCityInit(tourPos2, city1);\r\n                    path.setCityInit(tourPos1, city2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private tournamentSelection(pop: Population) {\r\n        let populationNew = new Population(this.nodes, this.nodeSize, false);\r\n        for (let i = 0; i < this.nodeSize; ++i) {\r\n            let randomId = Math.floor(Math.random() * pop.paths.length);\r\n            populationNew.paths[i] = pop.paths[randomId];\r\n        }\r\n        let fittest = populationNew.getFittestPath();\r\n        return fittest;\r\n    }\r\n}\r\n","import { Population, Path, Node } from './GeneticAlgorithm/Core';\r\nimport { GeneticAlgorithm } from './GeneticAlgorithm/GeneticAlgorithm';\r\nimport { random } from '../../../NUtility/Math/MathUtility';\r\n\r\n// import { AgencySystem } from '../';\r\nexport class GASystem {\r\n\r\n    public static Init() {\r\n\r\n        const ga = new GASystem();\r\n        console.log(ga);\r\n        return ga;\r\n    }\r\n\r\n\r\n    // agencySystem: AgencySystem;\r\n    cities: Node[];\r\n    placesAll: Node[];\r\n    ga: GeneticAlgorithm;\r\n    pop: Population;\r\n    pathFittest: Path | undefined = undefined;\r\n    timer = 0;\r\n    cost = Number.MAX_VALUE;\r\n    posByMouse: number[][] = [];\r\n    random: () => number;\r\n    constructor( seed: number = 0) {\r\n       // this.agencySystem = agencySystem;\r\n        this.random = random(seed);\r\n        this.posByMouse = [];\r\n\r\n        let n_cities = 5;\r\n\r\n        for (let i = 0 ; i < n_cities; ++i ) {\r\n            let x = (this.random() * 700) + 50;\r\n            let y = (this.random() * 700) + 50;\r\n            this.posByMouse.push([x, y]);\r\n        }\r\n\r\n        this.init();\r\n    }\r\n    public mouseClick(x: number, y: number) {\r\n        this.posByMouse.push([x, y]);\r\n        this.init();\r\n    }\r\n    public init() {\r\n        let population_size = 5;\r\n        let mutationRate = 0.1;\r\n        let tournamentSize = this.posByMouse.length ; // 10\r\n\r\n        // # Setup cities and tour\r\n        this.placesAll = [];\r\n\r\n        for (let i = 0 ; i < this.posByMouse.length; ++i ) {\r\n           // let pos = this.posByMouse[i]\r\n          //  const goePos = this.agencySystem.nnaEngine.app.definition.app.projection.ToMap(pos[0], pos[1]);\r\n           // const place = new Node(pos[0], pos[1], goePos[0], goePos[1] );\r\n          //  place.id = this.placesAll.length;\r\n          //  this.placesAll.push(place)\r\n        }\r\n\r\n        // # Initialize population\r\n        this.pop = new Population(this.placesAll, population_size, true);\r\n\r\n        this.pathFittest = this.pop.getFittestPath();\r\n        if (this.pathFittest) {\r\n            console.log('Initial distance: ' + (this.pathFittest.getDistance()));\r\n        }\r\n\r\n        // # Evolve population\r\n        this.ga = new GeneticAlgorithm(this.placesAll, mutationRate, tournamentSize);\r\n    }\r\n    public optimize() {\r\n        this.pop = this.ga.evolvePopulation(this.pop);\r\n        this.pathFittest = this.pop.getFittestPath();\r\n        if (this.pathFittest) {\r\n            const result = this.pathFittest.getDistance();\r\n            if (result < this.cost) {\r\n                console.log('iter optimization' , this.timer);\r\n                console.log('Final distance: ', result);\r\n                console.log('Solution:');\r\n                console.log(this.pathFittest);\r\n                this.cost = result;\r\n            }\r\n            this.timer++;\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPan: boolean) {\r\n        this.optimize();\r\n\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.lineWidth  = 1;\r\n\r\n        if (isPan) {\r\n            for (let i = 0 ; i < this.placesAll.length; ++i) {\r\n              //  const geoPos = this.agencySystem.nnaEngine.app.definition.app.projection.ToScreen( this.placesAll[i].vec.long, this.placesAll[i].vec.lat,);\r\n              //  this.placesAll[i].vec.x = geoPos[0];\r\n              //  this.placesAll[i].vec.y = geoPos[1];\r\n\r\n                ctx.beginPath();\r\n                const place = this.placesAll[i];\r\n                ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        if (this.pathFittest) {\r\n            for (let i = 0 ; i < this.pathFittest.nodes.length - 1; i++) {\r\n                let p0 = this.pathFittest.nodes[i];\r\n                let p1 = this.pathFittest.nodes[i + 1];\r\n                if (p0 && p1) {\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(p0.vec.x, p0.vec.y);\r\n                    ctx.lineTo(p1.vec.x, p1.vec.y);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for (let i = 0 ; i < this.placesAll.length; ++i) {\r\n            ctx.beginPath();\r\n            const place = this.placesAll[i];\r\n            ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        // console.log('rnding...');\r\n\r\n    }\r\n}\r\n","import { MouseEventData } from './IO/Mouseinteraction/MouseInteraction';\r\nimport { Asset } from './Asset';\r\nimport { ViewWrapper } from './ViewWrapper';\r\nimport { GraphicsCoreWrapper } from './GraphicsCoreWrapper';\r\nimport { SceneWrapper } from './SceneWrapper';\r\nimport { IO } from './IO';\r\n\r\nimport { initTestingNum, initTesting } from '../../../NJSCore/Core/Algorithm/GeneticAlgorithm';\r\nimport { initTestingNetwork } from '../../../NJSCore/Core/Algorithm/GeneticAlgorithm';\r\n\r\nexport class Demo300GA {\r\n    divHost: HTMLElement;\r\n    asset: Asset;\r\n    viewWrapper: ViewWrapper;\r\n    graphicsCoreWrapper: GraphicsCoreWrapper;\r\n    sceneWrapper: SceneWrapper;\r\n    io: IO;\r\n    public static Init(id: string) {\r\n        new Demo300GA(id);\r\n    }\r\n    constructor(id: string) {\r\n        const div = document.getElementById(id);\r\n        if (div) { this.divHost = div; }\r\n\r\n        // this.asset = new Asset();\r\n        // this.viewWrapper = new ViewWrapper(this);\r\n        // this.graphicsCoreWrapper = new GraphicsCoreWrapper(this);\r\n        // this.sceneWrapper = new SceneWrapper(this);\r\n        // this.io = new IO(this);\r\n\r\n        initTesting('NJ3N6am8j');\r\n        initTestingNum(4);\r\n        initTestingNetwork();\r\n        console.log('GA..');\r\n\r\n    }\r\n    MouseEventController(e: MouseEventData) {\r\n        this.sceneWrapper.activeCommandController.MouseEventController(e);\r\n    }\r\n    Resize(width: number, height: number) {\r\n        this.graphicsCoreWrapper.Resize(width, height);\r\n    }\r\n    Dispose() {\r\n        this.graphicsCoreWrapper.Dispose();\r\n        this.sceneWrapper.Dispose();\r\n    }\r\n    Dummy() {/* */ }\r\n}","import { GAStringWrapper} from './GAStringWrapper';\r\n\r\nimport { GANumberWrapper} from './GANumberWrapper';\r\nimport { GASystem} from './GASystem/GASystem';\r\n\r\nexport const initTestingNum = (txt: number = 4) => {\r\n    return new GANumberWrapper(txt);\r\n};\r\nexport const initTesting = (txt: string) => {\r\n    return new GAStringWrapper(txt);\r\n};\r\nexport const initTestingNetwork = (txt: number = 4) => {\r\n    return GASystem.Init();\r\n};"],"names":["getRandomStringByPool","len","charSet","undefined","randomString","i","randomPoz","Math","floor","random","length","substring","getIndexAscending","data","indices","Array","sort","a","b","GAStringWrapper","constructor","gas","GAString","console","log","Evloution","history","historyScore","keyword","numGeneration","numPopulation","best_sample","lucky_few","n_child","chance_of_mutation","this","population","InitPopulation","lenData","outFit","ComputeFitness","scoreSorted","scoreOrdered","populationSorted","popOrdered","pred_len","push","selection","Selection","production","ComputeReproductions","ComputeMutations","Mutation","word","theString","idx","fround","input","index","char","substr","parents","next_population","j","Reproduction","individual1","individual2","child","population_sorted","password_len","nextGeneration","theIndex","list","n","k","shuffle","password","popOrder","scoreOrder","individual","score","Fitness","indexOrder","test_word","numPop","compute","param","GANumberWrapper","GANumber","Param","num","mutation","result","toString","paramString","learningRate","pow","abs","costFunction","Path","pathsOrigin","nodes","fitness","distance","generateIndividual","cityIndex","setCityInit","city","getFitness","getDistance","tourDistance","fromNode","otherNode","distanceTo","containsCity","Population","populationSize","initialise","paths","newTour","getFittestPath","fittest","other","GeneticAlgorithm","tourmanager","mutationRate","nodeSize","elitism","evolvePopulation","pop","newPopulation","elitismOffset","thePath","parent1","tournamentSelection","parent2","crossover","path","mutate","startPos","endPos","place","ii","tourPos1","tourPos2","city1","city2","populationNew","randomId","GASystem","ga","seed","cities","placesAll","pathFittest","timer","cost","Number","MAX_VALUE","posByMouse","x","y","init","mouseClick","tournamentSize","optimize","render","ctx","isPan","fillStyle","strokeStyle","lineWidth","beginPath","arc","vec","PI","closePath","fill","p0","p1","moveTo","lineTo","stroke","Demo300GA","id","divHost","asset","viewWrapper","graphicsCoreWrapper","sceneWrapper","io","div","document","getElementById","initTestingNum","Init","MouseEventController","e","activeCommandController","Resize","width","height","Dispose","Dummy"],"sourceRoot":""}