{"version":3,"file":"static/js/30134.f77a972e.chunk.js","mappings":"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","sources":["njslab/Lab/AppTFEnv/Implementation/TFProject/Core/ActiveCommandController.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Core/DefinitionIndeCanvasCore.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/JSLinearRegression01.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/JSLinearRegressionGradientDescent02.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFLinearRegressionGradientDescent01.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFPolynomialRegressionGradientDescent02.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFPolynomialRegressionGradientDescent03Interaction.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFModel01.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFModel02XOR.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFModel03Iris.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFModel03SmartDrawing.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFModel01HorsepowerAndMilesPerGallon.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/TFMnist.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/Definition/Blank.ts","njslab/Lab/AppTFEnv/Implementation/TFProject/index.ts"],"sourcesContent":["import { CLICK_TYPE } from '../../../lib';\r\n\r\nimport { MouseEventData } from '../../../Model/AppCoreWrapper/IOWrapper/EventInteraction/MouseInteraction';\r\n\r\nimport { TFProject } from '..';\r\n\r\nexport class ActiveCommandController {\r\n    scene: TFProject;\r\n\r\n    constructor(scene: TFProject) {\r\n        this.scene = scene;\r\n    }\r\n    MouseEventController(e: MouseEventData) {\r\n\r\n        if (e.CLICK_TYPE === CLICK_TYPE.LEFT) {\r\n            this.MouseLeftClickPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.MIDDLE) {\r\n            this.MouseMiddleClickPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.DOWN_RIGHT) {\r\n            this.MouseRightClickPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.DOUBLE) {\r\n            this.MouseDoubleClickPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.MOVE) {\r\n            this.MouseMovePre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.DRAG) {\r\n            this.MouseDragPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.DOWN) {\r\n            this.MouseDownPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.WHEEL) {\r\n            this.MouseWheelPre(e); return;\r\n        } else if (e.CLICK_TYPE === CLICK_TYPE.UP) { this.MouseUpPre(e); return; }\r\n    }\r\n\r\n    // .......................................................\r\n    MouseDown(e: MouseEventData) {/* */ }\r\n    MouseDownPre(e: MouseEventData) {\r\n        this.scene.MouseDown(e.x, e.y);\r\n        this.MouseDown(e);\r\n    }\r\n    MouseLeftClick(e: MouseEventData) {/* */ }\r\n    MouseLeftClickPre(e: MouseEventData) {\r\n        this.scene.MouseLeftClick(e.x, e.y);\r\n        this.MouseLeftClick(e);\r\n    }\r\n    MouseMiddleClick(e: MouseEventData) {/* */ }\r\n    MouseMiddleClickPre(e: MouseEventData) {\r\n        this.scene.MouseMiddleClick(e.x, e.y);\r\n        this.MouseMiddleClick(e);\r\n    }\r\n    MouseRightClick(e: MouseEventData) { /* */ }\r\n    MouseRightClickPre(e: MouseEventData) {\r\n        this.scene.MouseRightClick(e.x, e.y);\r\n        this.MouseRightClick(e);\r\n    }\r\n    MouseUp(e: MouseEventData) { /* */ }\r\n    MouseUpPre(e: MouseEventData) {\r\n        this.scene.MouseUp(e.x, e.y);\r\n        this.MouseUp(e);\r\n\r\n    }\r\n    MouseDoubleClick(e: MouseEventData) {/* */ }\r\n    MouseDoubleClickPre(e: MouseEventData) {\r\n        this.scene.MouseDoubleClick(e.x, e.y);\r\n        this.MouseDoubleClick(e);\r\n    }\r\n    MouseMove(e: MouseEventData) {/* */ }\r\n    MouseMovePre(e: MouseEventData) {\r\n        this.scene.MouseMove(e.x, e.y);\r\n        this.MouseMove(e);\r\n    }\r\n    MouseDrag(e: MouseEventData) {/* */ }\r\n    MouseDragPre(e: MouseEventData) {\r\n        this.scene.MouseDrag(e.x, e.y);\r\n        this.MouseDrag(e);\r\n    }\r\n    MouseWheel(e: MouseEventData) {/* */ }\r\n    MouseWheelPre(e: MouseEventData) {\r\n        this.scene.MouseWheel(e.x, e.y, e.wheel);\r\n        // console.log(\"drag\");\r\n        this.MouseWheel(e);\r\n    }\r\n}","import { IndependentPanelCanvas } from '../../../../../../lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/IndependentPanelCanvas';\r\n\r\nimport { TFProject } from '..';\r\nexport class DefinitionIndeCanvasCore {\r\n    scene: TFProject;\r\n    indeCanvas: IndependentPanelCanvas;\r\n    mOffX = -12;\r\n    mOffY = -12;\r\n    constructor(scene: TFProject, width: number = 650, height: number = 350) {\r\n        this.scene = scene;\r\n        this.scene.definitions.push(this);\r\n        this.InitIndeCanvas(width, height);\r\n    }\r\n    InitIndeCanvas(width: number = 650, height: number = 350) {\r\n        if (this.scene.implementation.app.needUI) {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 50, 50, width, height, true);\r\n        } else {\r\n            this.indeCanvas = new IndependentPanelCanvas(this.scene.implementation.app.viewController.NUIWrapper.NUI.independentPanelWrapper, 1, -25, width, height, true);\r\n        }\r\n        this.indeCanvas.title = 'TF Env';\r\n        this.indeCanvas.btnHam.isHidden = true;\r\n        this.indeCanvas.btnMini.isHidden = true;\r\n        this.indeCanvas.RenderIndependentCanvas = (ctx: CanvasRenderingContext2D) => (this.RenderIndependentCanvas(ctx));\r\n    }\r\n    get width() {\r\n        return this.indeCanvas.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.indeCanvas.canvas.height;\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n    MouseMove(x: number, y: number) { /* */ }\r\n    MouseMovePre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMove(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDown(x: number, y: number) { /* */ }\r\n    MouseDownPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDown(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseUp(x: number, y: number) { /* */ }\r\n    MouseUpPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseUp(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDrag(x: number, y: number) { /* */ }\r\n    MouseDragPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDrag(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseLeftClick(x: number, y: number) { /* */ }\r\n    MouseLeftClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseLeftClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseMiddleClick(x: number, y: number) { /* */ }\r\n    MouseMiddleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseMiddleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseRightClick(x: number, y: number) { /* */ }\r\n    MouseRightClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseRightClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseDoubleClick(x: number, y: number) { /* */ }\r\n    MouseDoubleClickPre(x: number, y: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseDoubleClick(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY);\r\n    }\r\n    MouseWheel(x: number, y: number, v: number) { /* */ }\r\n    MouseWheelPre(x: number, y: number, v: number) {\r\n        if (!this.indeCanvas.IsMouseInsidePanel(x, y)) { return; }\r\n        this.MouseWheel(x - this.indeCanvas.vec.x + this.mOffX, y - this.indeCanvas.vec.y - this.indeCanvas.HeadHeight + this.mOffY, v);\r\n    }\r\n\r\n}","import { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { TFProject } from '..';\r\n\r\n// import * as tf from '@tensorflow/tfjs';\r\nimport { NVector3, MathUtility } from '../../../lib';\r\nexport class JSLinearRegression01 extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n\r\n    a: number = 1;\r\n    bias: number = 0;\r\n\r\n    constructor(tfProjct: TFProject) {\r\n        super(tfProjct);\r\n        this.indeCanvas.title = 'LinearRegression';\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, 0, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, 0);\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.LinearRegression();\r\n        this.RenderLine(ctx);\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(MathUtility.Remap(this.vs[i].x, 0, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, 0, 1, this.height, 0), 5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        let x0 = 0;\r\n        let y0 = this.a * x0 + this.bias;\r\n\r\n        let x1 = 1;\r\n        let y1 = this.a * x1 + this.bias;\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = '#00fff0';\r\n        ctx.beginPath();\r\n        ctx.moveTo(MathUtility.Remap(x0, 0, 1, 0, this.width), MathUtility.Remap(y0, 0, 1, this.height, 0));\r\n        ctx.lineTo(MathUtility.Remap(x1, 0, 1, 0, this.width), MathUtility.Remap(y1, 0, 1, this.height, 0));\r\n        ctx.stroke();\r\n    }\r\n    public LinearRegression() {\r\n        let xSum = 0;\r\n        let ySum = 0;\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            xSum += this.vs[i].x;\r\n            ySum += this.vs[i].y;\r\n        }\r\n        let xMean = xSum / this.vs.length;\r\n        let yMean = ySum / this.vs.length;\r\n\r\n        let num = 0;\r\n        let den = 0;\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            num += (this.vs[i].x - xMean) * (this.vs[i].y - yMean);\r\n            den += (this.vs[i].x - xMean) * (this.vs[i].x - xMean);\r\n        }\r\n        this.a = num / den;\r\n        this.bias = yMean - this.a * xMean;\r\n    }\r\n}","import { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { TFProject } from '..';\r\n\r\n// import * as tf from '@tensorflow/tfjs';\r\nimport { NVector3, MathUtility } from '../../../lib';\r\nexport class JSLinearRegressionGradientDescent02 extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n\r\n    weight: number = 1;\r\n    bias: number = 0;\r\n\r\n    constructor(tfProjct: TFProject) {\r\n        super(tfProjct);\r\n        this.indeCanvas.title = 'LinearRegression';\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, 0, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, 0);\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            this.RenderLine(ctx);\r\n        }\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(MathUtility.Remap(this.vs[i].x, 0, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, 0, 1, this.height, 0), 5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        let x0 = 0;\r\n        let y0 = this.weight * x0 + this.bias;\r\n\r\n        let x1 = 1;\r\n        let y1 = this.weight * x1 + this.bias;\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = '#00fff0';\r\n        ctx.beginPath();\r\n        ctx.moveTo(MathUtility.Remap(x0, 0, 1, 0, this.width), MathUtility.Remap(y0, 0, 1, this.height, 0));\r\n        ctx.lineTo(MathUtility.Remap(x1, 0, 1, 0, this.width), MathUtility.Remap(y1, 0, 1, this.height, 0));\r\n        ctx.stroke();\r\n    }\r\n    public GradientDescent() {\r\n        let learningRate = 0.1;\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let x = this.vs[i].x;\r\n            let y = this.vs[i].y;\r\n            let hypothesis = this.weight * x + this.bias;\r\n            let error = y - hypothesis;\r\n\r\n            this.weight = this.weight + (error * x) * learningRate;\r\n            this.bias = this.bias + (error) * learningRate;\r\n            // console.log(error);\r\n        }\r\n    }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\n// import { TFUtility } from '../../../../../../NJSCore/ML/NMacineLearning';\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n\r\nexport class TFLinearRegressionGradientDescent01 extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    vsTemp: NVector3[] = [];\r\n\r\n    tfLinearRegression: TFLinearRegression;\r\n    t: number = 0.0;\r\n    constructor(tfProjct: TFProject) {\r\n        super(tfProjct);\r\n        this.indeCanvas.title = 'TF LinearRegression GradientDescent 01';\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n\r\n        this.tfLinearRegression = new TFLinearRegression();\r\n\r\n        this.InitData();\r\n        this.InitUI();\r\n    }\r\n    public InitUI() {\r\n        const div = document.createElement('div');\r\n        // div.style.background = '#dddddd';\r\n        div.style.position = 'absolute';\r\n        div.style.left = '400px';\r\n        div.style.color = '#ffffff';\r\n\r\n        const t = document.createElement('p');\r\n        t.textContent = 'click on this screen to add data';\r\n        div.append(t);\r\n\r\n        const divHost = document.getElementById('indePanel');\r\n        if (divHost) {\r\n            divHost.append(div);\r\n        }\r\n        // this.scene.canvas.canvas.\r\n    }\r\n    InitData() {\r\n        TFDataUtility.getData().then((d: any) => {\r\n            let xMin = Number.MAX_SAFE_INTEGER;\r\n            let xMax = Number.MIN_SAFE_INTEGER;\r\n            let yMin = Number.MAX_SAFE_INTEGER;\r\n            let yMax = Number.MIN_SAFE_INTEGER;\r\n\r\n            d.forEach((data: any) => {\r\n                let x = (data['horsepower']);\r\n                if (x > xMax) { xMax = x; }\r\n                if (x < xMin) { xMin = x; }\r\n\r\n                let y = (data['mpg']);\r\n                if (y > yMax) { yMax = y; }\r\n                if (y < yMin) { yMin = y; }\r\n            });\r\n\r\n            for (let data of d) {\r\n                let x = (data['horsepower']);\r\n                let y = (data['mpg']);\r\n                this.vsTemp.push(new NVector3(\r\n                    MathUtility.Remap(x, xMin, xMax, 0.1, 0.9),\r\n                    MathUtility.Remap(y, yMin, yMax, 0.1, 0.9)));\r\n            }\r\n        });\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, 0, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, 0);\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        if ((this.t & 2) === 0) {\r\n            const v = this.vsTemp.pop();\r\n            if (v) {\r\n                this.vs.push(v);\r\n            }\r\n        }\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n\r\n            // ............................ train\r\n            this.tfLinearRegression.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(MathUtility.Remap(this.vs[i].x, 0, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, 0, 1, this.height, 0), 5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        this.t += 0.3;\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        const lineX = [0, 1];\r\n\r\n        // ............................ predict\r\n        const ys = tf.tidy(() => {\r\n            return this.tfLinearRegression.predict(tf.tensor1d(lineX));\r\n        });\r\n\r\n        let lineY = ys.dataSync();\r\n        ys.dispose();\r\n        // ............................ end predict\r\n\r\n        let x0 = 0;\r\n        let y0 = lineY[0];\r\n\r\n        let x1 = 1;\r\n        let y1 = lineY[1];\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = '#00fff0';\r\n        ctx.beginPath();\r\n        ctx.moveTo(MathUtility.Remap(x0, 0, 1, 0, this.width), MathUtility.Remap(y0, 0, 1, this.height, 0));\r\n        ctx.lineTo(MathUtility.Remap(x1, 0, 1, 0, this.width), MathUtility.Remap(y1, 0, 1, this.height, 0));\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nclass TFLinearRegression {\r\n    weight: tf.Variable;\r\n    bias: tf.Variable;\r\n\r\n    leraningRate: number = 0.5;\r\n    optimizer: tf.Optimizer;\r\n    constructor() {\r\n        this.weight = tf.variable(tf.scalar(Math.random()));\r\n        this.bias = tf.variable(tf.scalar(Math.random()));\r\n\r\n        this.optimizer = tf.train.sgd(this.leraningRate);\r\n    }\r\n    public predict(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return x.mul(this.weight).add(this.bias);\r\n    }\r\n    public loss(pred: tf.Tensor<tf.Rank>, label: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return pred.sub(label).square().mean();\r\n    }\r\n    public train(xVal: number[], yVal: number[]) {\r\n\r\n        tf.tidy(() => {\r\n            const xs = tf.tensor1d(xVal);\r\n            const ys = tf.tensor1d(yVal);\r\n            this.optimizer.minimize((): any => this.loss(this.predict(xs), ys));\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n        // console.log('b:', this.bias, ', w:', this.weight);\r\n        // this.bias.print();\r\n        // this.weight.print();\r\n    }\r\n    // public train(x: tf.Tensor, y: tf.Tensor) {\r\n    //     tf.tidy((): any => {\r\n    //         return this.optimizer.minimize((): any => {\r\n    //             return this.loss(this.predict(x), y);\r\n    //         });\r\n    //     });\r\n    // }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n\r\n// import { TFUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFPolynomialRegressionGradientDescent02 extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    vsTemp: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    tfLinearRegression: PolynomialRegression;\r\n    t: number = 0.0;\r\n    constructor(tfProjct: TFProject) {\r\n        super(tfProjct);\r\n        this.indeCanvas.title = 'TF LinearRegression GradientDescent 01';\r\n        this.Init();\r\n        this.InitData();\r\n        this.InitUI();\r\n    }\r\n    public InitUI() {\r\n        const div = document.createElement('div');\r\n        // div.style.background = '#dddddd';\r\n        div.style.position = 'absolute';\r\n        div.style.left = '400px';\r\n        div.style.color = '#ffffff';\r\n\r\n        const t = document.createElement('p');\r\n        t.textContent = 'click on this screen to add data';\r\n        div.append(t);\r\n\r\n\r\n        const divHost = document.getElementById('indePanel');\r\n        if (divHost) {\r\n            divHost.append(div);\r\n\r\n            const b = document.createElement('button');\r\n            b.textContent = 'run';\r\n            b.style.position = 'absolute';\r\n            b.style.left = '650px';\r\n            b.onclick = () => {\r\n            //     console.log(this);\r\n            };\r\n            this.scene.implementation.app.model.modelViewCoreWrapper.viewWrapper.div.append(b);\r\n        }\r\n        // this.scene.canvas.canvas.\r\n    }\r\n    InitData() {\r\n        TFDataUtility.getData().then((d: any) => {\r\n            let xMin = Number.MAX_SAFE_INTEGER;\r\n            let xMax = Number.MIN_SAFE_INTEGER;\r\n            let yMin = Number.MAX_SAFE_INTEGER;\r\n            let yMax = Number.MIN_SAFE_INTEGER;\r\n\r\n            d.forEach((data: any) => {\r\n                let x = (data['horsepower']);\r\n                if (x > xMax) { xMax = x; }\r\n                if (x < xMin) { xMin = x; }\r\n\r\n                let y = (data['mpg']);\r\n                if (y > yMax) { yMax = y; }\r\n                if (y < yMin) { yMin = y; }\r\n            });\r\n\r\n            for (let data of d) {\r\n                let x = (data['horsepower']);\r\n                let y = (data['mpg']);\r\n                this.vsTemp.push(new NVector3(\r\n                    MathUtility.Remap(x, xMin, xMax, -0.9, 0.9),\r\n                    MathUtility.Remap(y, yMin, yMax, -0.9, 0.9)));\r\n            }\r\n        });\r\n    }\r\n    Init() {\r\n    //     console.log(tf.version);\r\n\r\n        this.tfLinearRegression = new PolynomialRegression();\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    Grid(ctx: CanvasRenderingContext2D) {\r\n        // for (let i = -10; i < 10; ++i) {\r\n        //     for (let j = -10; j < 10; ++j) {\r\n        //         ctx.beginPath();\r\n        //         ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';\r\n        //         ctx.arc(i, j, 0.05, 0, Math.PI * 2);\r\n        //         ctx.closePath();\r\n        //         ctx.fill();\r\n        //     }\r\n        // }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        this.Grid(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        if ((this.t & 2) === 0) {\r\n            const v = this.vsTemp.pop();\r\n            if (v) {\r\n                this.vs.push(v);\r\n            }\r\n        }\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n            // console.log(xx);\r\n            // console.log(yy);\r\n            // ............................ train\r\n            this.tfLinearRegression.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        this.t += 0.3;\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        const curveX: number[] = [];\r\n        for (let x = -1; x <= 1; x += 0.05) {\r\n            curveX.push(x);\r\n        }\r\n\r\n        // ............................ predict\r\n        const ys = tf.tidy(() => {\r\n            // return this.tfLinearRegression.predict(tf.tensor1d(curveX));\r\n            return this.tfLinearRegression.predict2d(tf.tensor1d(curveX));\r\n        });\r\n\r\n        let curveY = ys.dataSync();\r\n        ys.dispose();\r\n        // ............................ end predict\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = '#00fff0';\r\n        ctx.beginPath();\r\n        ctx.moveTo(MathUtility.Remap(curveX[0], -1, 1, 0, this.width), MathUtility.Remap(curveY[0], -1, 1, this.height, 0));\r\n\r\n        for (let i = 1; i < curveX.length; ++i) {\r\n            ctx.lineTo(MathUtility.Remap(curveX[i], -1, 1, 0, this.width), MathUtility.Remap(curveY[i], -1, 1, this.height, 0));\r\n        }\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nclass PolynomialRegression {\r\n    weights: tf.Variable[] = [];\r\n    bias: tf.Variable;\r\n\r\n    dim: number = 1;\r\n    leraningRate: number = 0.2;\r\n    optimizer: tf.AdamOptimizer;\r\n    constructor() {\r\n        for (let i = 0; i < 5; ++i) {\r\n            const weight = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n            weight.print();\r\n            this.weights.push(weight);\r\n        }\r\n\r\n        this.bias = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n        this.optimizer = tf.train.adam(this.leraningRate);\r\n    }\r\n\r\n    public predict1d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.mul(this.weights[0])\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict2d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.square().mul(this.weights[1])\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict3d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(3)).mul(this.weights[2])\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict4d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(4)).mul(this.weights[3])\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict5d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(5)).mul(this.weights[4])\r\n            .add(x.pow(tf.scalar(4)).mul(this.weights[3]))\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        if (this.dim === 5) { return this.predict5d(x); }\r\n        if (this.dim === 4) { return this.predict4d(x); }\r\n        if (this.dim === 3) { return this.predict3d(x); }\r\n        if (this.dim === 2) { return this.predict2d(x); }\r\n\r\n        return this.predict1d(x);\r\n    }\r\n    public loss(pred: tf.Tensor<tf.Rank>, label: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return pred.sub(label).square().mean();\r\n    }\r\n    public train(xVal: number[], yVal: number[]) {\r\n\r\n        tf.tidy(() => {\r\n            const xs = tf.tensor1d(xVal);\r\n            const ys = tf.tensor1d(yVal);\r\n            this.optimizer.minimize((): any => this.loss(this.predict(xs), ys));\r\n        });\r\n    //     console.log(tf.memory().numTensors);\r\n        // console.log('b:', this.bias, ', w:', this.weight);\r\n        // this.bias.print();\r\n        // this.weight.print();\r\n    }\r\n    // public train(x: tf.Tensor, y: tf.Tensor) {\r\n    //     tf.tidy((): any => {\r\n    //         return this.optimizer.minimize((): any => {\r\n    //             return this.loss(this.predict(x), y);\r\n    //         });\r\n    //     });\r\n    // }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFPolynomialRegressionGradientDescent03Interaction extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    tfLinearRegression: PolynomialRegression;\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF LinearRegression GradientDescent 01';\r\n        this.Init();\r\n\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n\r\n        this.tfLinearRegression = new PolynomialRegression();\r\n\r\n        this.indeCanvas.canvas.style.zIndex = '-1';\r\n        // this.indeCanvas.bodyDiv.divHost.style.pointerEvents = 'auto';\r\n        // this.indeCanvas.bodyDiv.div.style.pointerEvents = 'auto';\r\n\r\n        // const div = document.createElement('div');\r\n        // div.style.background = '#ff0000';\r\n        // div.style.width = '100px';\r\n        // div.style.height = '100px';\r\n        // div.style.position = 'absolute';\r\n        // div.style.zIndex = '1';\r\n        // div.onclick = (e: MouseEvent) => {\r\n        // //     console.log(e);\r\n        //     // e.cancelBubble = true;\r\n        //     // e.preventDefault();\r\n        // };\r\n        // console.log(this.indeCanvas);\r\n\r\n        // let input = document.createElement('input');\r\n        // input.type = 'radio';\r\n\r\n        // input.onclick = (e: MouseEvent) => {\r\n        // //     console.log(e);\r\n        //     // e.cancelBubble = true;\r\n        //     // e.stopPropagation();\r\n        // };\r\n        // div.append(input);\r\n\r\n        // input = document.createElement('input');\r\n        // input.type = 'radio';\r\n\r\n        // input.onclick = (e: MouseEvent) => {\r\n        // //     console.log(e);\r\n        //     // e.cancelBubble = true;\r\n        //     // e.stopPropagation();\r\n        // };\r\n        // div.append(input);\r\n\r\n        // input = document.createElement('input');\r\n        // input.type = 'radio';\r\n\r\n        // input.onclick = (e: MouseEvent) => {\r\n        // //     console.log(e);\r\n        //     // e.cancelBubble = true;\r\n        //     // e.stopPropagation();\r\n        // };\r\n        // div.append(input);\r\n\r\n        // this.indeCanvas.bodyDiv.div.append(div);\r\n\r\n        TFDataUtility.getData().then((d: any) => {\r\n            // console.log(d);\r\n        });\r\n\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n            // console.log(xx);\r\n            // console.log(yy);\r\n            // ............................ train\r\n            this.tfLinearRegression.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        const curveX: number[] = [];\r\n        for (let x = -1; x <= 1; x += 0.05) {\r\n            curveX.push(x);\r\n        }\r\n\r\n        // ............................ predict\r\n        const ys = tf.tidy(() => {\r\n            return this.tfLinearRegression.predict(tf.tensor1d(curveX));\r\n        });\r\n\r\n        let curveY = ys.dataSync();\r\n        ys.dispose();\r\n        // ............................ end predict\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.strokeStyle = '#00fff0';\r\n        ctx.beginPath();\r\n        ctx.moveTo(MathUtility.Remap(curveX[0], -1, 1, 0, this.width), MathUtility.Remap(curveY[0], -1, 1, this.height, 0));\r\n\r\n        for (let i = 1; i < curveX.length; ++i) {\r\n            ctx.lineTo(MathUtility.Remap(curveX[i], -1, 1, 0, this.width), MathUtility.Remap(curveY[i], -1, 1, this.height, 0));\r\n        }\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nclass PolynomialRegression {\r\n    weights: tf.Variable[] = [];\r\n    bias: tf.Variable;\r\n\r\n    dim: number = 3;\r\n    leraningRate: number = 0.2;\r\n    optimizer: tf.AdamOptimizer;\r\n    constructor() {\r\n        for (let i = 0; i < 5; ++i) {\r\n            const weight = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n            weight.print();\r\n            this.weights.push(weight);\r\n        }\r\n\r\n        this.bias = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n        this.optimizer = tf.train.adam(this.leraningRate);\r\n    }\r\n\r\n    public predict1d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.mul(this.weights[0])\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict2d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.square().mul(this.weights[1])\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict3d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(3)).mul(this.weights[2])\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict4d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(4)).mul(this.weights[3])\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict5d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(5)).mul(this.weights[4])\r\n            .add(x.pow(tf.scalar(4)).mul(this.weights[3]))\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        if (this.dim === 5) { return this.predict5d(x); }\r\n        if (this.dim === 4) { return this.predict4d(x); }\r\n        if (this.dim === 3) { return this.predict3d(x); }\r\n        if (this.dim === 2) { return this.predict2d(x); }\r\n\r\n        return this.predict1d(x);\r\n    }\r\n    public loss(pred: tf.Tensor<tf.Rank>, label: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return pred.sub(label).square().mean();\r\n    }\r\n    public train(xVal: number[], yVal: number[]) {\r\n\r\n        tf.tidy(() => {\r\n            const xs = tf.tensor1d(xVal);\r\n            const ys = tf.tensor1d(yVal);\r\n            this.optimizer.minimize((): any => this.loss(this.predict(xs), ys));\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n        // console.log('b:', this.bias, ', w:', this.weight);\r\n        // this.bias.print();\r\n        // this.weight.print();\r\n    }\r\n    // public train(x: tf.Tensor, y: tf.Tensor) {\r\n    //     tf.tidy((): any => {\r\n    //         return this.optimizer.minimize((): any => {\r\n    //             return this.loss(this.predict(x), y);\r\n    //         });\r\n    //     });\r\n    // }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n// import { LayersModel } from '@tensorflow/tfjs-layers';\r\nimport { ModelCompileArgs, ModelFitArgs } from '@tensorflow/tfjs';\r\n\r\n// import { TFDataUtility } from '../../../../../../NJSCore/ML/NMacineLearning';\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\n\r\nexport class TFModel01 extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    tfModel: TFModel;\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n        this.tfModel = new TFModel();\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n            // console.log(xx);\r\n            // console.log(yy);\r\n            // ............................ train\r\n            // this.tfModel.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        // const curveX: number[] = [];\r\n        // for (let x = -1; x <= 1; x += 0.05) {\r\n        //     curveX.push(x);\r\n        // }\r\n\r\n        // // ............................ predict\r\n        // const ys = tf.tidy(() => {\r\n        //     return this.tfModel.predict(tf.tensor1d(curveX));\r\n        // });\r\n\r\n        // let curveY = ys.dataSync();\r\n        // ys.dispose();\r\n        // // ............................ end predict\r\n\r\n        // ctx.lineWidth = 3;\r\n        // ctx.strokeStyle = '#00fff0';\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(MathUtility.Remap(curveX[0], -1, 1, 0, this.width), MathUtility.Remap(curveY[0], -1, 1, this.height, 0));\r\n\r\n        // for (let i = 1; i < curveX.length; ++i) {\r\n        //     ctx.lineTo(MathUtility.Remap(curveX[i], -1, 1, 0, this.width), MathUtility.Remap(curveY[i], -1, 1, this.height, 0));\r\n        // }\r\n        // ctx.stroke();\r\n\r\n    }\r\n}\r\nclass TFModel {\r\n    model: tf.Sequential;\r\n    constructor() {\r\n        this.model = tf.sequential();\r\n\r\n        const hidden = tf.layers.dense({\r\n            inputShape: [2],\r\n            units: 4,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            units: 1,\r\n            activation: 'sigmoid',\r\n\r\n        });\r\n\r\n        this.model.add(hidden);\r\n        this.model.add(output);\r\n\r\n        const compileArgs: ModelCompileArgs = {\r\n            optimizer: tf.train.sgd(0.1),\r\n            loss: tf.losses.meanSquaredError,\r\n        };\r\n\r\n        this.model.compile(compileArgs);\r\n\r\n        // const data = tf.tensor2d([\r\n        //     [0.25, 0.92]\r\n        // ]);\r\n        this.train1().then(() => {\r\n            const x = tf.tensor2d([\r\n                [0, 0],\r\n                [0.5, 0.5],\r\n                [1, 1],\r\n            ]);\r\n            const result = this.model.predict(x);\r\n            (result as tf.Tensor).print();\r\n        });\r\n    }\r\n    train0() {\r\n        const x = tf.tensor2d([\r\n            [0, 0],\r\n            [0.5, 0.5],\r\n            [1, 1],\r\n            // [0.1, 0.22],\r\n        ]);\r\n        const y = tf.tensor2d([\r\n            [1],\r\n            [0.5],\r\n            [0],\r\n        ]);\r\n        const config = {\r\n            epochs: 10\r\n        };\r\n        this.model.fit(x, y, config).then((response) => console.log(response.history));\r\n        const outResult: tf.Tensor<tf.Rank> | tf.Tensor<tf.Rank>[] = this.model.predict(x);\r\n        // console.log(outResult);\r\n        (outResult as tf.Tensor).print();\r\n    }\r\n    async train1() {\r\n        const xTrain = tf.tensor2d([\r\n            [0, 0],\r\n            [0.5, 0.5],\r\n            [1, 1],\r\n            // [0.1, 0.22],\r\n        ]);\r\n        const yTrain = tf.tensor2d([\r\n            [1],\r\n            [0.5],\r\n            [0],\r\n        ]);\r\n        const config: ModelFitArgs = {\r\n            epochs: 10,\r\n            shuffle: true,\r\n        };\r\n\r\n        for (let i = 0; i < 500; ++i) {\r\n            const response = await this.model.fit(xTrain, yTrain, config);\r\n            // response;\r\n        //     console.log(i, response.history.loss);\r\n        }\r\n\r\n    }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\n// import { TFDataUtility } from '../../../../../../NJSCore/ML/NMacineLearning';\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\n\r\nexport class TFModel02XOR extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    tfModel: TFModel;\r\n    xPredict: any; // tf.Tensor<tf.Rank>;\r\n    inputs: number[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF XOR';\r\n        this.Init();\r\n        this.InitUI();\r\n    }\r\n    public InitUI() {\r\n        const div = document.createElement('div');\r\n        // div.style.background = '#dddddd';\r\n        div.style.position = 'absolute';\r\n        div.style.left = '10px';\r\n        div.style.color = '#ffffff';\r\n\r\n        const t = document.createElement('p');\r\n        t.textContent = 'ref: Coding Challenge #106: XOR Problem with TensorFlow.js by The Cording Train';\r\n        t.style.fontSize = '11px';\r\n        div.append(t);\r\n\r\n        const divHost = document.getElementById('indePanel');\r\n        if (divHost) {\r\n            divHost.append(div);\r\n        }\r\n        // this.scene.canvas.canvas.\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n        this.tfModel = new TFModel();\r\n\r\n        let inputs = [];\r\n        for (let i = 0; i <= 10; ++i) {\r\n            for (let j = 0; j <= 10; ++j) {\r\n                // let x1 = i / 10;\r\n                // let x2 = j / 10;\r\n                inputs.push([j * 0.1, i * 0.1]);\r\n            }\r\n        }\r\n        // console.log(inputs);\r\n        // console.log(;)\r\n        this.xPredict = tf.tensor2d(inputs);\r\n        // console.log(xPredict);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // let ys = this.tfModel.model.predict(this.xPredict);\r\n\r\n        // (ys as tf.Tensor<tf.Rank.R2>).print();\r\n        // let y_values = ys.dataSync();\r\n\r\n        tf.tidy(() => {\r\n            const d = this.tfModel.model.predict(this.xPredict);\r\n            const result = (d as tf.Tensor2D).dataSync();\r\n\r\n\r\n            // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n            ctx.fillStyle = '#000000';\r\n            ctx.beginPath();\r\n            ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n\r\n\r\n\r\n            let index = 0;\r\n            for (let i = 0; i <= 10; i++) {\r\n                for (let j = 0; j <= 10; j++) {\r\n                    this.inputs.push(i);\r\n                    let offset = 42;\r\n                    let x = i * offset;\r\n                    let y = j * offset;\r\n                    const out = result[index];\r\n\r\n                    ctx.fillStyle = `rgba(${out * 255},${0},${0},1)`;\r\n                    // console.log(out);\r\n                    ctx.beginPath();\r\n                    ctx.rect(x, y, offset, offset);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n\r\n                    index++;\r\n                }\r\n            }\r\n            // console.log(index);\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n    }\r\n}\r\nclass TFModel {\r\n    model: tf.Sequential;\r\n    xTrain = tf.tensor2d([\r\n        [0.0, 0.0],\r\n        [1.0, 0.0],\r\n        [0.0, 1.0],\r\n        [1.0, 1.0]\r\n    ]);\r\n    yTrain = tf.tensor2d([\r\n        [0.0],\r\n        [1.0],\r\n        [1.0],\r\n        [0.0]\r\n    ]);\r\n    constructor() {\r\n        this.model = tf.sequential();\r\n\r\n        const hidden = tf.layers.dense({\r\n            inputShape: [2],\r\n            units: 16,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            units: 1,\r\n            activation: 'sigmoid',\r\n        });\r\n        this.model.add(hidden);\r\n        this.model.add(output);\r\n        this.model.compile({\r\n            optimizer: tf.train.adam(0.05),\r\n            loss: tf.losses.meanSquaredError,\r\n        });\r\n        this.trainLoop();\r\n    }\r\n    public trainLoop() {\r\n        this.train().then((result: any) => {\r\n            // console.log(result.history.loss[0]);\r\n            setTimeout(() => this.trainLoop(), 1);\r\n        });\r\n    }\r\n    public async train() {\r\n        return await this.model.fit(this.xTrain, this.yTrain, {\r\n            epochs: 10,\r\n            shuffle: true,\r\n        });\r\n    }\r\n}","import * as tf from '@tensorflow/tfjs';\r\n// import * as tfvis from '@tensorflow/tfjs-vis';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\n\r\nexport class TFModel03Iris extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    // vs: NVector3[] = [];\r\n    // selVec: NVector3 | undefined = undefined;\r\n\r\n    tfModel: TFModel;\r\n    xPredict: any; // tf.Tensor<tf.Rank>;\r\n    inputs: number[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    Init() {\r\n        this.tfModel = new TFModel();\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n\r\n        tf.tidy(() => {\r\n            //\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n    }\r\n}\r\nclass TFModel {\r\n    model: tf.Sequential;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n\r\n    // xTrain = tf.tensor2d([\r\n    //     [0.0, 0.0],\r\n    //     [1.0, 0.0],\r\n    //     [0.0, 1.0],\r\n    //     [1.0, 1.0]\r\n    // ]);\r\n    // yTrain = tf.tensor2d([\r\n    //     [0.0],\r\n    //     [1.0],\r\n    //     [1.0],\r\n    //     [0.0]\r\n    // ]);\r\n    constructor() {\r\n        const d = TFDataUtility.GetIrisData();\r\n        tf.util.shuffle(d);\r\n        // console.log(d);\r\n\r\n        const inputs = [];\r\n        for (let i = 0; i < d.length; ++i) {\r\n            let row = [];\r\n            for (let j = 0; j < d[i].length - 1; ++j) {\r\n                row.push(d[i][j]);\r\n            }\r\n            inputs.push(row);\r\n        }\r\n\r\n        const labels = []; //  d.map((d: number[]) => [d[d.length - 1]]);\r\n        for (let i = 0; i < d.length; ++i) {\r\n            if (d[i][d[i].length - 1] === 0) {\r\n                labels.push([1, 0, 0]);\r\n            } else if (d[i][d[i].length - 1] === 1) {\r\n                labels.push([0, 1, 0]);\r\n            } else if (d[i][d[i].length - 1] === 2) {\r\n                labels.push([0, 0, 1]);\r\n            }\r\n\r\n        }\r\n\r\n        // console.log(inputs);\r\n        // console.log(labels);\r\n\r\n        // console.log('tensor......................');\r\n        this.inputsTensor = tf.tensor2d(inputs);\r\n        this.labelsTensor = tf.tensor2d(labels);\r\n        // console.log(this.inputsTensor);\r\n        // console.log(this.labelsTensor);\r\n        this.inputsTensor.print();\r\n        this.labelsTensor.print();\r\n\r\n        this.model = tf.sequential();\r\n\r\n        // console.log(this.inputsTensor.shape[1]);\r\n\r\n        const hidden = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 10,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: 3,\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden);\r\n        this.model.add(output);\r\n        this.model.compile({\r\n            optimizer: tf.train.adam(),\r\n            // loss: tf.losses.meanSquaredError,\r\n            // metrics: ['mse'],\r\n            loss: tf.losses.softmaxCrossEntropy,  // 'categoricalCrossentropy',\r\n            metrics: ['accuracy'],\r\n        });\r\n        this.model.summary();\r\n        // tfvis.show.modelSummary({ name: 'Model Summary' }, this.model);\r\n\r\n        this.trainLoop();\r\n    }\r\n    public async trainLoop() {\r\n        await this.model.save('downloads://my-model');\r\n        const saveResults = await this.model.save('localstorage://ml/my-model-1');\r\n    //     console.log(saveResults);\r\n        this.train().then((result: any) => {\r\n        //     console.log(result.history.loss[0]);\r\n            setTimeout(() => this.trainLoop(), 1);\r\n        });\r\n    }\r\n    public async train() {\r\n        return await this.model.fit(this.inputsTensor, this.labelsTensor, {\r\n            // batchSize: 100,\r\n            epochs: 50,\r\n            shuffle: true,\r\n            validationData: [this.inputsTensor, this.labelsTensor],\r\n        });\r\n    }\r\n}","import * as tf from '@tensorflow/tfjs';\r\n// import * as tfvis from '@tensorflow/tfjs-vis';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\n// import { NVector3, MathUtility } from '../../../lib';\r\n\r\n// import { csv } from './smartDrawingTrainData.csv';\r\n\r\n// import { TFDataUtility } from '../../../../../../NJSCore/ML/NMacineLearning';\r\n\r\n// const csv = require('./smartDrawingTrainData.csv');\r\n\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\n\r\nexport class TFModel03SmartDrawing extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    // vs: NVector3[] = [];\r\n    // selVec: NVector3 | undefined = undefined;\r\n\r\n    tfModel: TFModel;\r\n    xPredict: any; // tf.Tensor<tf.Rank>;\r\n    inputs: number[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    async Init() {\r\n        const d = new DataProcess();\r\n        await d.Init().then(() => {\r\n            this.tfModel = new TFModel('model1', d.inputsTensor, d.labelsTensor);\r\n            this.tfModel.CreateModel01();\r\n\r\n            this.tfModel = new TFModel('model2', d.inputsTensor, d.labelsTensor);\r\n            this.tfModel.CreateModel02();\r\n\r\n        });\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n\r\n        tf.tidy(() => {\r\n            //\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n    }\r\n}\r\n\r\nclass DataProcess {\r\n    raw: any;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n    constructor() {\r\n        //\r\n    }\r\n    async Init() {\r\n        const d = await this.OpenCSV();\r\n        if (d) {\r\n            this.raw = this.processData(d);\r\n            tf.util.shuffle(this.raw);\r\n            // console.log(this.raw);\r\n\r\n            const inputs = [];\r\n            const labelsTemp = [];\r\n            for (let i = 0; i < this.raw.length; ++i) {\r\n                let row = [];\r\n                for (let j = 0; j < this.raw[i].length - 1; ++j) { row.push(this.raw[i][j]); }\r\n                inputs.push(row);\r\n                labelsTemp.push(this.raw[i][this.raw[i].length - 1]);\r\n            }\r\n        //     console.log(inputs);\r\n        //     console.log(labelsTemp);\r\n            const max = tf.max(labelsTemp);\r\n            const maxNum = max.dataSync();\r\n\r\n            const labels = [];\r\n            for (let i = 0; i < labelsTemp.length; ++i) {\r\n                const label = [];\r\n                for (let j = 0; j <= maxNum[0]; ++j) {\r\n                    if (j === labelsTemp[i]) {\r\n                        label.push(1);\r\n                    } else {\r\n                        label.push(0);\r\n                    }\r\n                }\r\n                labels.push(label);\r\n            }\r\n        //     console.log(labels);\r\n\r\n            this.inputsTensor = tf.tensor2d(inputs);\r\n            this.labelsTensor = tf.tensor2d(labels);\r\n\r\n            this.inputsTensor.print();\r\n            this.labelsTensor.print();\r\n        }\r\n    }\r\n    private processData(allText: any) {\r\n        const allTextLines = allText.split(/\\r\\n|\\n/);\r\n        const headers = allTextLines[0].split(',');\r\n        const lines = [];\r\n\r\n        for (let i = 1; i < allTextLines.length; i++) {\r\n            const data = allTextLines[i].split(',');\r\n            if (data.length === headers.length) {\r\n\r\n                const tarr = [];\r\n                for (let j = 0; j < headers.length; j++) {\r\n                    const dataTemp = +data[j];\r\n                    if (isNaN(dataTemp)) {\r\n                        tarr.push(data[j]);\r\n                    } else {\r\n                        tarr.push(dataTemp);\r\n                    }\r\n                }\r\n                lines.push(tarr);\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n    public async OpenCSV() {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'smartDrawingTrainData.csv';\r\n        // console.log(location.host);\r\n        return fetch(`njslabSandboxStatic/ML/SmartDrawing/${file}`)\r\n            .then((response: Response) => {\r\n            //     console.log(response);\r\n                return response.text();\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n}\r\n\r\nclass TFModel {\r\n    t0: number;\r\n    t1: number;\r\n    name: string;\r\n    model: tf.Sequential;\r\n    inputsTensor: tf.Tensor<tf.Rank.R2>;\r\n    labelsTensor: tf.Tensor<tf.Rank.R2>;\r\n    constructor(name: string, inputsTensor: tf.Tensor<tf.Rank.R2>, labelsTensor: tf.Tensor<tf.Rank.R2>) {\r\n        this.name = name;\r\n        this.inputsTensor = inputsTensor;\r\n        this.labelsTensor = labelsTensor;\r\n    }\r\n    CreateModel01() {\r\n        this.model = tf.sequential();\r\n        const hidden01 = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 20,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: this.labelsTensor.shape[1],\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden01);\r\n        this.model.add(output);\r\n        this.Compile();\r\n    }\r\n    CreateModel02() {\r\n        this.model = tf.sequential();\r\n        const hidden01 = tf.layers.dense({\r\n            inputShape: [this.inputsTensor.shape[1]],\r\n            units: 20,\r\n            activation: 'sigmoid',\r\n        });\r\n        const hidden02 = tf.layers.dense({\r\n            // inputShape: [this.inputsTensor.shape[1]],\r\n            units: 15,\r\n            activation: 'sigmoid',\r\n        });\r\n        const output = tf.layers.dense({\r\n            // inputShape: [10],\r\n            units: this.labelsTensor.shape[1],\r\n            activation: 'softmax',\r\n        });\r\n        this.model.add(hidden01);\r\n        this.model.add(hidden02);\r\n        this.model.add(output);\r\n        this.Compile();\r\n    }\r\n    Compile() {\r\n        this.model.compile({\r\n            optimizer: tf.train.adam(),\r\n            // loss: tf.losses.meanSquaredError,\r\n            // metrics: ['mse'],\r\n            loss: tf.losses.softmaxCrossEntropy,  // 'categoricalCrossentropy',\r\n            metrics: ['accuracy'],\r\n        });\r\n        this.model.summary();\r\n        // tfvis.show.modelSummary({ name: 'Model Summary' }, this.model);\r\n\r\n        this.trainLoop();\r\n    }\r\n    public async trainLoop() {\r\n        this.t0 = performance.now();\r\n\r\n        await this.model.save('downloads://my-model');\r\n        // const saveResults = await this.model.save('localstorage://ml/my-model-1');\r\n        // console.log(saveResults);\r\n        this.train().then((result: any) => {\r\n            this.t1 = performance.now();\r\n        //     console.log(`${this.name}: ${result.history.loss[0]}, ${this.t1 - this.t0} `);\r\n            setTimeout(() => this.trainLoop(), 1);\r\n        });\r\n    }\r\n    public async train() {\r\n        // return await this.model.fit(this.inputsTensor, this.labelsTensor, {\r\n        //     batchSize: 100,\r\n        //     epochs: 10,\r\n        //     shuffle: true,\r\n        //     validationData: [this.inputsTensor, this.labelsTensor],\r\n        // });\r\n    }\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// // https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFModel01HorsepowerAndMilesPerGallon extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    // tfModel: ModelForHorsepowerGallon;\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF Horsepower and Miles Per Gallon';\r\n        this.Init();\r\n\r\n    }\r\n    Init() {\r\n        // console.log(tf.version);\r\n\r\n        TFDataUtility.getData().then((d: any) => {\r\n            // this.tfModel = new ModelForHorsepowerGallon();\r\n            // this.train(d);\r\n            this.train(d);\r\n\r\n\r\n        });\r\n\r\n    }\r\n    async train(d: any) {\r\n        const tensorData = convertToTensor(d);\r\n        // console.log(tensorData);\r\n        const { inputs, labels } = tensorData;\r\n        // console.log(inputs, labels);\r\n        const model = createModel();\r\n\r\n        tfvis.show.modelSummary({ name: 'Model Summary' }, model);\r\n        // Train the model\r\n        await trainModel(model, inputs, labels);\r\n        // console.log('Done Training');\r\n        testModel(model, d, tensorData);\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n            const xx = [], yy = [];\r\n            for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n            // console.log(xx);\r\n            // console.log(yy);\r\n            // ............................ train\r\n            // this.tfModel.train(xx, yy);\r\n            // ............................ end train\r\n\r\n            this.RenderLine(ctx);\r\n        }\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        const curveX: number[] = [];\r\n        for (let x = -1; x <= 1; x += 0.05) {\r\n            curveX.push(x);\r\n        }\r\n    }\r\n}\r\n\r\nfunction testModel(model: tf.Sequential, inputData: any, normalizationData: any) {\r\n    const { inputMax, inputMin, labelMin, labelMax } = normalizationData;\r\n\r\n    // Generate predictions for a uniform range of numbers between 0 and 1;\r\n    // We un-normalize the data by doing the inverse of the min-max scaling\r\n    // that we did earlier.\r\n    const [xs, preds] = tf.tidy(() => {\r\n\r\n        const xs = tf.linspace(0, 1, 100);\r\n        const preds = model.predict(xs.reshape([100, 1])) as any;\r\n\r\n        const unNormXs = xs\r\n            .mul(inputMax.sub(inputMin))\r\n            .add(inputMin);\r\n\r\n        const unNormPreds = preds.mul(labelMax.sub(labelMin))\r\n            .add(labelMin);\r\n\r\n        // Un-normalize the data\r\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\r\n    });\r\n\r\n\r\n    const predictedPoints = Array.from(xs).map((val, i) => {\r\n        return { x: val, y: preds[i] };\r\n    });\r\n\r\n    const originalPoints = inputData.map((d: any) => ({\r\n        x: d.horsepower, y: d.mpg,\r\n    }));\r\n\r\n    tfvis.render.scatterplot(\r\n        { name: 'Model Predictions vs Original Data' },\r\n        { values: [originalPoints, predictedPoints], series: ['original', 'predicted'] },\r\n        {\r\n            xLabel: 'Horsepower',\r\n            yLabel: 'MPG',\r\n            height: 300\r\n        }\r\n    );\r\n}\r\n\r\n\r\nasync function trainModel(model: tf.Sequential, inputs: tf.Tensor<tf.Rank>, labels: tf.Tensor<tf.Rank>) {\r\n    // Prepare the model for training.\r\n    model.compile({\r\n        optimizer: tf.train.adam(),\r\n        loss: tf.losses.meanSquaredError,\r\n        metrics: ['mse'],\r\n    });\r\n\r\n    const batchSize = 32;\r\n    const epochs = 50;\r\n\r\n    return await model.fit(inputs, labels, {\r\n        batchSize,\r\n        epochs,\r\n        shuffle: true,\r\n        callbacks: tfvis.show.fitCallbacks(\r\n            { name: 'Training Performance' },\r\n            ['loss', 'mse'],\r\n            { height: 200, callbacks: ['onEpochEnd'] }\r\n        )\r\n    });\r\n}\r\n\r\n\r\nexport const createModel = () => {\r\n    // Create a sequential model\r\n    const model = tf.sequential();\r\n    // Add a single hidden layer\r\n    model.add(tf.layers.dense({\r\n        inputShape: [1],\r\n        units: 16,\r\n        useBias: true\r\n    }));\r\n    // Add an output layer\r\n    model.add(tf.layers.dense({\r\n        units: 1,\r\n        useBias: true\r\n    }));\r\n    return model;\r\n};\r\nexport const convertToTensor = (data: any) => {\r\n    // Wrapping these calculations in a tidy will dispose any\r\n    // intermediate tensors.\r\n\r\n    return tf.tidy(() => {\r\n        // Step 1. Shuffle the data\r\n        tf.util.shuffle(data);\r\n\r\n        // Step 2. Convert data to Tensor\r\n        const inputs = data.map((d: any) => d.horsepower);\r\n        const labels = data.map((d: any) => d.mpg);\r\n\r\n        const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\r\n        const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\r\n\r\n        // Step 3. Normalize the data to the range 0 - 1 using min-max scaling\r\n        const inputMax = inputTensor.max();\r\n        const inputMin = inputTensor.min();\r\n        const labelMax = labelTensor.max();\r\n        const labelMin = labelTensor.min();\r\n\r\n        const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\r\n        const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\r\n\r\n        return {\r\n            inputs: normalizedInputs,\r\n            labels: normalizedLabels,\r\n            // Return the min/max bounds so we can use them later.\r\n            inputMax,\r\n            inputMin,\r\n            labelMax,\r\n            labelMin,\r\n        };\r\n    });\r\n};","import * as tf from '@tensorflow/tfjs';\r\n\r\nimport { TFProject } from '..';\r\nimport { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { NVector3, MathUtility } from '../../../lib';\r\n\r\nimport { TFDataUtility } from '../../../../../../lib/NJSCore/ML/NMacineLearning';\r\n// https://editor.p5js.org/codingtrain/sketches/UdXRZxF7e\r\nexport class TFMnist extends DefinitionIndeCanvasCore {\r\n\r\n    xpos: number = 100;\r\n    ypos: number = 100;\r\n\r\n    xspeed: number = 10;\r\n    yspeed: number = 10;\r\n\r\n    xdirection: number = 1;\r\n    ydirection: number = 1;\r\n\r\n    rad: number = 50;\r\n    vs: NVector3[] = [];\r\n    selVec: NVector3 | undefined = undefined;\r\n\r\n    col: string[] = ['#ff0000', '#00ff00', '#0000ff', '#00fff0', '#ff0000', '#fff000', '#0fff00'];\r\n\r\n    tfLinearRegression: PolynomialRegression[] = [];\r\n\r\n    constructor(tfProjct: TFProject, width: number = 650, height: number = 350) {\r\n        super(tfProjct, width, height);\r\n        this.indeCanvas.title = 'TF MNist ';\r\n        this.Init();\r\n        this.InitUI();\r\n    }\r\n    Init() {\r\n        this.tfLinearRegression.push(new PolynomialRegression(1));\r\n        this.tfLinearRegression.push(new PolynomialRegression(2));\r\n        this.tfLinearRegression.push(new PolynomialRegression(3));\r\n        this.tfLinearRegression.push(new PolynomialRegression(4));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(2));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(3));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(4));\r\n        // this.tfLinearRegression.push(new PolynomialRegression(5));\r\n\r\n        this.indeCanvas.canvas.style.zIndex = '-1';\r\n\r\n        TFDataUtility.getData().then((d: any) => {\r\n            // console.log(d);\r\n        });\r\n\r\n        // tfData.\r\n\r\n        const data = new MnistData();\r\n    //     console.log(data.getTrainData());\r\n\r\n    }\r\n    public InitUI() {\r\n        const div = document.createElement('div');\r\n        // div.style.background = '#dddddd';\r\n        div.style.position = 'absolute';\r\n        div.style.left = '40px';\r\n        div.style.color = '#ffffff';\r\n\r\n        let t = document.createElement('p');\r\n        t.textContent = 'click on this screen to add data';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.textContent = 'LinearRegression';\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[0];\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[1];\r\n        t.textContent = 'Degree of polynomial - 2';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[2];\r\n        t.textContent = 'Degree of polynomial - 3';\r\n        div.append(t);\r\n\r\n        t = document.createElement('p');\r\n        t.style.marginTop = '0px';\r\n        t.style.marginBottom = '0px';\r\n        t.style.color = this.col[3];\r\n        t.textContent = 'Degree of polynomial - 4';\r\n        div.append(t);\r\n\r\n        const divHost = document.getElementById('indePanel');\r\n        if (divHost) {\r\n            divHost.append(div);\r\n\r\n            //     const b = document.createElement('button');\r\n            //     b.textContent = 'run';\r\n            //     b.style.position = 'absolute';\r\n            //     b.style.left = '650px';\r\n            //     b.onclick = () => {\r\n            //     //     console.log(this);\r\n            //     };\r\n            //     this.scene.implementation.app.model.modelViewCoreWrapper.viewWrapper.div.append(b);\r\n        }\r\n        // this.scene.canvas.canvas.\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            if (NVector3.Distance(m, this.vs[i]) < 0.05) {\r\n                this.selVec = this.vs[i];\r\n                return;\r\n            }\r\n        }\r\n        this.vs.push(new NVector3(this.MapX(x), this.MapY(y)));\r\n        // console.log(this.vs);\r\n    }\r\n    MouseDoubleClick() {\r\n        // console.log(this.tfLinearRegression.dim);\r\n        // this.tfLinearRegression.dim++;\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        let selVec: undefined | NVector3 = undefined;\r\n        const m = new NVector3(this.MapX(x), this.MapY(y));\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            let theDis = NVector3.Distance(m, this.vs[i]);\r\n            if (theDis < 0.05) {\r\n                selVec = this.vs[i];\r\n            }\r\n        }\r\n        if (selVec) {\r\n            this.selVec = selVec;\r\n        } else {\r\n            this.selVec = undefined;\r\n        }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        if (this.selVec) {\r\n            this.selVec.x = this.MapX(x);\r\n            this.selVec.y = this.MapY(y);\r\n        }\r\n    }\r\n    MouseUp() {\r\n        this.selVec = undefined;\r\n    }\r\n    MapX(v: number) {\r\n        return MathUtility.Remap(v, 0, this.width, -1, 1);\r\n    }\r\n    MapY(v: number) {\r\n        return MathUtility.Remap(v, 0, this.height, 1, -1);\r\n    }\r\n    GridLine(ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = '#555555';\r\n        const xInterval = this.width / 20 - 1;\r\n        const yInterval = this.height / 20 - 1;\r\n        for (let i = 0; i < 20; i += 1) {\r\n            if (i === 10) {\r\n                ctx.lineWidth = 3;\r\n            } else {\r\n                ctx.lineWidth = 1;\r\n            }\r\n            let x0 = xInterval * i;\r\n            let y0 = 0;\r\n            let x1 = x0;\r\n            let y1 = this.height;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n\r\n            x0 = 0;\r\n            y0 = yInterval * i;\r\n            x1 = this.width;\r\n            y1 = y0;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x0, y0);\r\n            ctx.lineTo(x1, y1);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        // ctx.translate(ctx.canvas.width * 0.5, ctx.canvas.height * 0.5);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        this.GridLine(ctx);\r\n\r\n        // this.GradientDescent();\r\n        if (this.vs.length > 1) {\r\n\r\n            for (let m = 0; m < this.tfLinearRegression.length; ++m) {\r\n                const xx = [], yy = [];\r\n                for (let i = 0; i < this.vs.length; ++i) { xx.push(this.vs[i].x); yy.push(this.vs[i].y); }\r\n                // console.log(xx);\r\n                // console.log(yy);\r\n                // ............................ train\r\n                this.tfLinearRegression[m].train(xx, yy);\r\n                // ............................ end train\r\n\r\n                this.RenderLine(ctx);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = '#00ff00';\r\n        for (let i = 0; i < this.vs.length; ++i) {\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                MathUtility.Remap(this.vs[i].x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.vs[i].y, -1, 1, this.height, 0),\r\n                5, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.selVec) {\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '15px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(`x:${this.selVec.x.toFixed(3)}, y${this.selVec.y.toFixed(3)}`,\r\n                MathUtility.Remap(this.selVec.x, -1, 1, 0, this.width),\r\n                MathUtility.Remap(this.selVec.y, -1, 1, this.height, 0) - 9,\r\n            );\r\n        }\r\n\r\n    }\r\n    public RenderLine(ctx: CanvasRenderingContext2D) {\r\n        for (let m = 0; m < this.tfLinearRegression.length; ++m) {\r\n            const curveX: number[] = [];\r\n            for (let x = -1; x <= 1; x += 0.08) {\r\n                curveX.push(x);\r\n            }\r\n\r\n            // ............................ predict\r\n            const ys = tf.tidy(() => {\r\n                return this.tfLinearRegression[m].predict(tf.tensor1d(curveX));\r\n            });\r\n\r\n            let curveY = ys.dataSync();\r\n            ys.dispose();\r\n            // ............................ end predict\r\n\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = this.col[m]; // '#00fff0';\r\n            ctx.beginPath();\r\n            ctx.moveTo(MathUtility.Remap(curveX[0], -1, 1, 0, this.width), MathUtility.Remap(curveY[0], -1, 1, this.height, 0));\r\n\r\n            for (let i = 1; i < curveX.length; ++i) {\r\n                ctx.lineTo(MathUtility.Remap(curveX[i], -1, 1, 0, this.width), MathUtility.Remap(curveY[i], -1, 1, this.height, 0));\r\n            }\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}\r\nclass PolynomialRegression {\r\n    weights: tf.Variable[] = [];\r\n    bias: tf.Variable;\r\n\r\n    dim: number = 3;\r\n    leraningRate: number = 0.2;\r\n    optimizer: tf.AdamOptimizer;\r\n    constructor(dim: number = 0) {\r\n        this.dim = dim;\r\n        for (let i = 0; i < 5; ++i) {\r\n            const weight = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n            weight.print();\r\n            this.weights.push(weight);\r\n        }\r\n\r\n        this.bias = tf.variable(tf.scalar((Math.random() * 2) - 1));\r\n        this.optimizer = tf.train.adam(this.leraningRate);\r\n\r\n    }\r\n\r\n    public predict1d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.mul(this.weights[0])\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict2d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.square().mul(this.weights[1])\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict3d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(3)).mul(this.weights[2])\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict4d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(4)).mul(this.weights[3])\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict5d(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        // y = ax^3 + bx^2 + cx + d\r\n        const ys = x.pow(tf.scalar(5)).mul(this.weights[4])\r\n            .add(x.pow(tf.scalar(4)).mul(this.weights[3]))\r\n            .add(x.pow(tf.scalar(3)).mul(this.weights[2]))\r\n            .add(x.square().mul(this.weights[1]))\r\n            .add(x.mul(this.weights[0]))\r\n            .add(this.bias);\r\n        return ys;\r\n    }\r\n    public predict(x: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        if (this.dim === 5) { return this.predict5d(x); }\r\n        if (this.dim === 4) { return this.predict4d(x); }\r\n        if (this.dim === 3) { return this.predict3d(x); }\r\n        if (this.dim === 2) { return this.predict2d(x); }\r\n        if (this.dim === 1) { return this.predict1d(x); }\r\n        return this.predict1d(x);\r\n    }\r\n    public loss(pred: tf.Tensor<tf.Rank>, label: tf.Tensor<tf.Rank>): tf.Tensor<tf.Rank> {\r\n        return pred.sub(label).square().mean();\r\n    }\r\n    public train(xVal: number[], yVal: number[]) {\r\n\r\n        tf.tidy(() => {\r\n            const xs = tf.tensor1d(xVal);\r\n            const ys = tf.tensor1d(yVal);\r\n            this.optimizer.minimize((): any => this.loss(this.predict(xs), ys));\r\n        });\r\n        // console.log(tf.memory().numTensors);\r\n        // console.log('b:', this.bias, ', w:', this.weight);\r\n        // this.bias.print();\r\n        // this.weight.print();\r\n    }\r\n    // public train(x: tf.Tensor, y: tf.Tensor) {\r\n    //     tf.tidy((): any => {\r\n    //         return this.optimizer.minimize((): any => {\r\n    //             return this.loss(this.predict(x), y);\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n\r\n\r\n// ..............................................................................................................................\r\n\r\nexport const IMAGE_H = 28;\r\nexport const IMAGE_W = 28;\r\nconst IMAGE_SIZE = IMAGE_H * IMAGE_W;\r\nconst NUM_CLASSES = 10;\r\nconst NUM_DATASET_ELEMENTS = 65000;\r\n\r\nconst NUM_TRAIN_ELEMENTS = 55000;\r\n// const NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\r\n\r\nconst MNIST_IMAGES_SPRITE_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\r\nconst MNIST_LABELS_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\r\n\r\n/**\r\n * A class that fetches the sprited MNIST dataset and provide data as\r\n * tf.Tensors.\r\n */\r\nexport class MnistData {\r\n    testLabels: Uint8Array;\r\n    trainLabels: Uint8Array;\r\n    testImages: Float32Array;\r\n    trainImages: Float32Array;\r\n    datasetImages: Float32Array;\r\n    datasetLabels: Uint8Array;\r\n    constructor() { }\r\n\r\n    async load() {\r\n        // Make a request for the MNIST sprited image.\r\n        const img = new Image();\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const imgRequest = new Promise((resolve, reject) => {\r\n            img.crossOrigin = '';\r\n            img.onload = () => {\r\n                img.width = img.naturalWidth;\r\n                img.height = img.naturalHeight;\r\n\r\n                const datasetBytesBuffer =\r\n                    new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\r\n\r\n                const chunkSize = 5000;\r\n                canvas.width = img.width;\r\n                canvas.height = chunkSize;\r\n\r\n                for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\r\n                    const datasetBytesView = new Float32Array(\r\n                        datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\r\n                        IMAGE_SIZE * chunkSize);\r\n                    ctx.drawImage(\r\n                        img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\r\n                        chunkSize);\r\n\r\n                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n                    for (let j = 0; j < imageData.data.length / 4; j++) {\r\n                        // All channels hold an equal value since the image is grayscale, so\r\n                        // just read the red channel.\r\n                        datasetBytesView[j] = imageData.data[j * 4] / 255;\r\n                    }\r\n                }\r\n                this.datasetImages = new Float32Array(datasetBytesBuffer);\r\n\r\n                // resolve();\r\n            };\r\n            img.src = MNIST_IMAGES_SPRITE_PATH;\r\n        });\r\n\r\n        const labelsRequest = fetch(MNIST_LABELS_PATH);\r\n        // const [imgResponse, labelsResponse] = await Promise.all([imgRequest, labelsRequest]);\r\n        const result = await Promise.all([imgRequest, labelsRequest]);\r\n        const labelsResponse: any = result[1];\r\n        this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\r\n\r\n        // Slice the the images and labels into train and test sets.\r\n        this.trainImages = this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n        this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n        this.trainLabels = this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n        this.testLabels = this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n    }\r\n\r\n    /**\r\n     * Get all training data as a data tensor and a labels tensor.\r\n     *\r\n     * @returns\r\n     *   xs: The data tensor, of shape `[numTrainExamples, 28, 28, 1]`.\r\n     *   labels: The one-hot encoded labels tensor, of shape\r\n     *     `[numTrainExamples, 10]`.\r\n     */\r\n    getTrainData() {\r\n        const xs = tf.tensor4d(\r\n            this.trainImages,\r\n            [this.trainImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\r\n        const labels = tf.tensor2d(\r\n            this.trainLabels, [this.trainLabels.length / NUM_CLASSES, NUM_CLASSES]);\r\n        return { xs, labels };\r\n    }\r\n\r\n    /**\r\n     * Get all test data as a data tensor a a labels tensor.\r\n     *\r\n     * @param {number} numExamples Optional number of examples to get. If not\r\n     *     provided,\r\n     *   all test examples will be returned.\r\n     * @returns\r\n     *   xs: The data tensor, of shape `[numTestExamples, 28, 28, 1]`.\r\n     *   labels: The one-hot encoded labels tensor, of shape\r\n     *     `[numTestExamples, 10]`.\r\n     */\r\n    getTestData(numExamples: any) {\r\n        let xs = tf.tensor4d(\r\n            this.testImages,\r\n            [this.testImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\r\n        let labels = tf.tensor2d(\r\n            this.testLabels, [this.testLabels.length / NUM_CLASSES, NUM_CLASSES]);\r\n\r\n        if (numExamples != null) {\r\n            xs = xs.slice([0, 0, 0, 0], [numExamples, IMAGE_H, IMAGE_W, 1]);\r\n            labels = labels.slice([0, 0], [numExamples, NUM_CLASSES]);\r\n        }\r\n        return { xs, labels };\r\n    }\r\n}","import { DefinitionIndeCanvasCore } from '../Core/DefinitionIndeCanvasCore';\r\n\r\nimport { TFProject } from '..';\r\nimport * as tf from '@tensorflow/tfjs';\r\nexport class Blank extends DefinitionIndeCanvasCore {\r\n    p: number[] = [0, 0];\r\n    constructor(tfProject: TFProject) {\r\n        super(tfProject);\r\n\r\n        this.Init();\r\n    }\r\n    Init() {\r\n    //     console.log(tf.version);\r\n    }\r\n    RenderIndependentCanvas(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.beginPath();\r\n        ctx.arc(this.p[0], this.p[1], 5, 0, 3.14 * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        this.p = [x, y];\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        this.p = [x, y];\r\n    }\r\n}","import { Canvas } from '../../Model/GraphicsCoreWrapper/CanvasWrapper/Canvas/Canvas';\r\nimport { ActiveCommandController } from './Core/ActiveCommandController';\r\n\r\nimport { DefinitionIndeCanvasCore } from './Core/DefinitionIndeCanvasCore';\r\nimport { JSLinearRegression01 } from './Definition/JSLinearRegression01';\r\nimport { JSLinearRegressionGradientDescent02 } from './Definition/JSLinearRegressionGradientDescent02';\r\n\r\nimport { TFLinearRegressionGradientDescent01 } from './Definition/TFLinearRegressionGradientDescent01';\r\nimport { TFPolynomialRegressionGradientDescent02 } from './Definition/TFPolynomialRegressionGradientDescent02';\r\nimport { TFPolynomialRegressionGradientDescent03Interaction } from './Definition/TFPolynomialRegressionGradientDescent03Interaction';\r\nimport { TFModel01 } from './Definition/TFModel01';\r\nimport { TFModel02XOR } from './Definition/TFModel02XOR';\r\nimport { TFModel03Iris } from './Definition/TFModel03Iris';\r\nimport { TFModel03SmartDrawing } from './Definition/TFModel03SmartDrawing';\r\n\r\nimport { TFModel01HorsepowerAndMilesPerGallon } from './Definition/TFModel01HorsepowerAndMilesPerGallon';\r\nimport { TFMnist } from './Definition/TFMnist';\r\n\r\nimport { Blank } from './Definition/Blank';\r\nimport { Implementation } from '..';\r\nexport class TFProject {\r\n    implementation: Implementation;\r\n    canvas: Canvas;\r\n    activeCommandController: ActiveCommandController;\r\n\r\n    definitions: DefinitionIndeCanvasCore[] = [];\r\n\r\n    constructor(implementation: Implementation) {\r\n        this.implementation = implementation;\r\n        this.canvas = implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvas;\r\n\r\n        this.activeCommandController = new ActiveCommandController(this);\r\n        this.Init();\r\n        this.InitDefinition();\r\n        this.InitDefault();\r\n        this.InitPullDown();\r\n    }\r\n    public Init() {\r\n        this.definitions = [];\r\n    }\r\n    get width() {\r\n        return this.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvas.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvas.canvas.height;\r\n    }\r\n    InitDefinition() {\r\n        for (let d of this.definitions) { d.Init(this.implementation.app.model.graphicsCoreWrapper.canvasWrapper.canvas.ctx); }\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // for (let d of this.definitions) {d.Render(ctx); }\r\n    }\r\n    MouseMove(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseMovePre(x, y); }\r\n    }\r\n    MouseLeftClick(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseLeftClickPre(x, y); }\r\n    }\r\n    MouseDown(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseDownPre(x, y); }\r\n    }\r\n    MouseUp(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseUpPre(x, y); }\r\n    }\r\n    MouseDrag(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseDragPre(x, y); }\r\n    }\r\n    MouseMiddleClick(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseMiddleClickPre(x, y); }\r\n    }\r\n    MouseRightClick(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseRightClickPre(x, y); }\r\n    }\r\n    MouseDoubleClick(x: number, y: number) {\r\n        for (let d of this.definitions) { d.MouseDoubleClickPre(x, y); }\r\n    }\r\n    MouseWheel(x: number, y: number, v: number) {\r\n        for (let d of this.definitions) { d.MouseWheelPre(x, y, v); }\r\n    }\r\n    Dispose() {\r\n        this.definitions = [];\r\n    }\r\n    InitDefault() {\r\n        // new TFModel03SmartDrawing(this);\r\n\r\n    }\r\n    LoadDefinition(v: string) {\r\n        // console.log('project code', v);\r\n        if (v === 'blank') { new Blank(this); }\r\n\r\n        // ...............................................................................\r\n\r\n        if (v === 'TFModel02XOR') { new TFModel02XOR(this, 480, 500); }\r\n        if (v === 'TFModel03Iris') { new TFModel03Iris(this, 480, 500); }\r\n        if (v === 'TFModel03SmartDrawing') { new TFModel03SmartDrawing(this, 480, 500); }\r\n\r\n        if (v === 'TFModel01HorsepowerAndMilesPerGallon') { new TFModel01HorsepowerAndMilesPerGallon(this, 500, 500); }\r\n\r\n        // ...............................................................................\r\n        if (v === 'TFModel01') { new TFModel01(this, 500, 500); }\r\n\r\n        if (v === 'JSLinearRegression') { new JSLinearRegression01(this); }\r\n        if (v === 'JSLinearRegressionGD') { new JSLinearRegressionGradientDescent02(this); }\r\n        if (v === 'TFLinearRegressionGD') { new TFLinearRegressionGradientDescent01(this); }\r\n\r\n        if (v === 'TFPolynomialRegression GD') { new TFPolynomialRegressionGradientDescent02(this); }\r\n        if (v === 'TFPolyRegress Interaction') { new TFPolynomialRegressionGradientDescent03Interaction(this, 500, 500); }\r\n\r\n        if (v === 'TFMnist') { new TFMnist(this, 500, 500); }\r\n\r\n    //     console.log(v);\r\n        // ...............................................................................\r\n    }\r\n    public InitPullDown() {\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@TFModel01');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@TFModel02XOR');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@TFModel03Iris');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@--');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@TFModel03SmartDrawing');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('mlProject@TFModel01HorsepowerAndMilesPerGallon');\r\n\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TFPlayground01');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@JSLinearRegression');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@JSLinearRegressionGD');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TFLinearRegressionGD');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@--');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TFPolynomialRegression GD');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TFPolyRegress Interaction');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TFPolyRegress Miles/Gallon');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@--');\r\n        this.implementation.app.viewController.NUIWrapper.NUI.pullDownMenuWrapper.menus[1].AddApp('tfProject@TF Regression');\r\n    }\r\n}"],"names":["ActiveCommandController","constructor","scene","this","MouseEventController","e","CLICK_TYPE","MouseUpPre","MouseWheelPre","MouseDownPre","MouseDragPre","MouseMovePre","MouseDoubleClickPre","MouseRightClickPre","MouseMiddleClickPre","MouseLeftClickPre","MouseDown","x","y","MouseLeftClick","MouseMiddleClick","MouseRightClick","MouseUp","MouseDoubleClick","MouseMove","MouseDrag","MouseWheel","wheel","DefinitionIndeCanvasCore","width","height","indeCanvas","mOffX","mOffY","definitions","push","InitIndeCanvas","implementation","app","needUI","IndependentPanelCanvas","viewController","NUIWrapper","NUI","independentPanelWrapper","title","btnHam","isHidden","btnMini","RenderIndependentCanvas","ctx","canvas","Init","IsMouseInsidePanel","vec","HeadHeight","v","JSLinearRegression01","tfProjct","super","xpos","ypos","xspeed","yspeed","xdirection","ydirection","rad","vs","a","bias","NVector3","MapX","MapY","MathUtility","fillStyle","beginPath","rect","closePath","fill","LinearRegression","RenderLine","i","length","arc","Math","PI","y0","y1","lineWidth","strokeStyle","moveTo","lineTo","stroke","xSum","ySum","xMean","yMean","num","den","JSLinearRegressionGradientDescent02","weight","GradientDescent","error","TFLinearRegressionGradientDescent01","vsTemp","tfLinearRegression","t","TFLinearRegression","InitData","InitUI","div","document","createElement","style","position","left","color","textContent","append","divHost","getElementById","TFDataUtility","then","d","xMin","Number","MAX_SAFE_INTEGER","xMax","MIN_SAFE_INTEGER","yMin","yMax","forEach","data","pop","xx","yy","train","lineX","ys","tf","predict","lineY","dataSync","dispose","leraningRate","optimizer","random","mul","add","loss","pred","label","sub","square","mean","xVal","yVal","xs","minimize","TFPolynomialRegressionGradientDescent02","selVec","undefined","b","onclick","model","modelViewCoreWrapper","viewWrapper","PolynomialRegression","Grid","curveX","predict2d","curveY","weights","dim","print","predict1d","predict3d","pow","predict4d","predict5d","TFPolynomialRegressionGradientDescent03Interaction","zIndex","m","GridLine","xInterval","yInterval","x0","x1","font","textAlign","fillText","toFixed","TFModel01","tfModel","TFModel","hidden","inputShape","units","activation","output","compileArgs","compile","train1","train0","fit","epochs","response","console","log","history","async","xTrain","yTrain","config","shuffle","TFModel02XOR","xPredict","inputs","fontSize","j","result","index","offset","out","trainLoop","setTimeout","TFModel03Iris","inputsTensor","labelsTensor","row","labels","shape","metrics","summary","save","validationData","TFModel03SmartDrawing","DataProcess","CreateModel01","CreateModel02","raw","OpenCSV","processData","labelsTemp","maxNum","allText","allTextLines","split","headers","lines","tarr","dataTemp","isNaN","fetch","text","catch","err","name","t0","t1","hidden01","Compile","hidden02","performance","now","TFModel01HorsepowerAndMilesPerGallon","tensorData","convertToTensor","createModel","tfvis","batchSize","callbacks","trainModel","inputData","normalizationData","inputMax","inputMin","labelMin","labelMax","preds","reshape","unNormXs","unNormPreds","predictedPoints","Array","from","map","val","originalPoints","horsepower","mpg","values","series","xLabel","yLabel","testModel","useBias","inputTensor","labelTensor","max","min","TFMnist","col","MnistData","marginTop","marginBottom","IMAGE_SIZE","IMAGE_H","NUM_CLASSES","testLabels","trainLabels","testImages","trainImages","datasetImages","datasetLabels","img","Image","getContext","imgRequest","Promise","resolve","reject","crossOrigin","onload","naturalWidth","naturalHeight","datasetBytesBuffer","ArrayBuffer","NUM_DATASET_ELEMENTS","chunkSize","datasetBytesView","Float32Array","drawImage","imageData","getImageData","src","labelsRequest","labelsResponse","all","Uint8Array","arrayBuffer","slice","getTrainData","getTestData","numExamples","Blank","tfProject","p","TFProject","activeCommandController","graphicsCoreWrapper","canvasWrapper","InitDefinition","InitDefault","InitPullDown","Render","Dispose","LoadDefinition","pullDownMenuWrapper","menus","AddApp"],"sourceRoot":""}