{"version":3,"file":"static/js/9982.60dbda8e.chunk.js","mappings":"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","sources":["../node_modules/openai/src/version.ts","../node_modules/openai/src/_shims/registry.ts","../node_modules/openai/src/_shims/MultipartBody.ts","../node_modules/openai/_shims/index.mjs","../node_modules/openai/src/_shims/web-runtime.ts","../node_modules/openai/src/error.ts","../node_modules/openai/src/streaming.ts","../node_modules/openai/src/uploads.ts","../node_modules/openai/src/core.ts","../node_modules/openai/src/pagination.ts","../node_modules/openai/src/resource.ts","../node_modules/openai/src/resources/completions.ts","../node_modules/openai/src/resources/chat/completions.ts","../node_modules/openai/src/resources/chat/chat.ts","../node_modules/openai/src/resources/embeddings.ts","../node_modules/openai/src/resources/files.ts","../node_modules/openai/src/resources/images.ts","../node_modules/openai/src/resources/audio/speech.ts","../node_modules/openai/src/resources/audio/transcriptions.ts","../node_modules/openai/src/resources/audio/translations.ts","../node_modules/openai/src/resources/audio/audio.ts","../node_modules/openai/src/resources/moderations.ts","../node_modules/openai/src/resources/models.ts","../node_modules/openai/src/resources/fine-tuning/jobs.ts","../node_modules/openai/src/resources/fine-tuning/fine-tuning.ts","../node_modules/openai/src/resources/beta/assistants/files.ts","../node_modules/openai/src/resources/beta/assistants/assistants.ts","../node_modules/openai/src/lib/RunnableFunction.ts","../node_modules/openai/src/lib/chatCompletionUtils.ts","../node_modules/openai/src/lib/AbstractChatCompletionRunner.ts","../node_modules/openai/src/lib/ChatCompletionRunner.ts","../node_modules/openai/src/lib/ChatCompletionStream.ts","../node_modules/openai/src/lib/ChatCompletionStreamingRunner.ts","../node_modules/openai/src/resources/beta/chat/completions.ts","../node_modules/openai/src/resources/beta/chat/chat.ts","../node_modules/openai/src/resources/beta/threads/messages/files.ts","../node_modules/openai/src/resources/beta/threads/messages/messages.ts","../node_modules/openai/src/resources/beta/threads/runs/steps.ts","../node_modules/openai/src/resources/beta/threads/runs/runs.ts","../node_modules/openai/src/resources/beta/threads/threads.ts","../node_modules/openai/src/resources/beta/beta.ts","../node_modules/openai/src/index.ts"],"sourcesContent":["export const VERSION = '4.28.4'; // x-release-please-version\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  ReadableStream: any;\n  getMultipartRequestOptions: <T = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let ReadableStream: Shims['ReadableStream'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`,\n    );\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  ReadableStream = shims.ReadableStream;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n  constructor(public body: any) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'openai/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { MultipartBody } from './MultipartBody';\nimport { type RequestOptions } from '../core';\nimport { type Shims } from './registry';\n\nexport function getRuntime({ manuallyImported }: { manuallyImported?: boolean } = {}): Shims {\n  const recommendation =\n    manuallyImported ?\n      `You may need to use polyfills`\n    : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n\n  let _fetch, _Request, _Response, _Headers;\n  try {\n    // @ts-ignore\n    _fetch = fetch;\n    // @ts-ignore\n    _Request = Request;\n    // @ts-ignore\n    _Response = Response;\n    // @ts-ignore\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(\n      `this environment is missing the following Web Fetch API type: ${\n        (error as any).message\n      }. ${recommendation}`,\n    );\n  }\n\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData:\n      // @ts-ignore\n      typeof FormData !== 'undefined' ? FormData : (\n        class FormData {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    Blob:\n      typeof Blob !== 'undefined' ? Blob : (\n        class Blob {\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    File:\n      // @ts-ignore\n      typeof File !== 'undefined' ? File : (\n        class File {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    ReadableStream:\n      // @ts-ignore\n      typeof ReadableStream !== 'undefined' ? ReadableStream : (\n        class ReadableStream {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    getMultipartRequestOptions: async <T = Record<string, unknown>>(\n      // @ts-ignore\n      form: FormData,\n      opts: RequestOptions<T>,\n    ): Promise<RequestOptions<T>> => ({\n      ...opts,\n      body: new MultipartBody(form) as any,\n    }),\n    getDefaultAgent: (url: string) => undefined,\n    fileFromPath: () => {\n      throw new Error(\n        'The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads',\n      );\n    },\n    isFsReadStream: (value: any) => false,\n  };\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { castToError, Headers } from './core';\n\nexport class OpenAIError extends Error {}\n\nexport class APIError extends OpenAIError {\n  readonly status: number | undefined;\n  readonly headers: Headers | undefined;\n  readonly error: Object | undefined;\n\n  readonly code: string | null | undefined;\n  readonly param: string | null | undefined;\n  readonly type: string | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    super(`${APIError.makeMessage(status, error, message)}`);\n    this.status = status;\n    this.headers = headers;\n\n    const data = error as Record<string, any>;\n    this.error = data;\n    this.code = data?.['code'];\n    this.param = data?.['param'];\n    this.type = data?.['type'];\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg =\n      error?.message ?\n        typeof error.message === 'string' ?\n          error.message\n        : JSON.stringify(error.message)\n      : error ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return '(no status code or body)';\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    if (!status) {\n      return new APIConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = (errorResponse as Record<string, any>)?.['error'];\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new APIError(status, error, message, headers);\n  }\n}\n\nexport class APIUserAbortError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message }: { message?: string } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\n\nexport class APIConnectionError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class APIConnectionTimeoutError extends APIConnectionError {\n  constructor({ message }: { message?: string } = {}) {\n    super({ message: message ?? 'Request timed out.' });\n  }\n}\n\nexport class BadRequestError extends APIError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends APIError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends APIError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends APIError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends APIError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends APIError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends APIError {\n  override readonly status: 429 = 429;\n}\n\nexport class InternalServerError extends APIError {}\n","import { ReadableStream, type Response } from './_shims/index';\nimport { OpenAIError } from './error';\n\nimport { APIError } from \"./error\";\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController) {\n    let consumed = false;\n    const decoder = new SSEDecoder();\n\n    async function* iterMessages(): AsyncGenerator<ServerSentEvent, void, unknown> {\n      if (!response.body) {\n        controller.abort();\n        throw new OpenAIError(`Attempted to iterate over a response with no body`);\n      }\n\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(response.body);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          const sse = decoder.decode(line);\n          if (sse) yield sse;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        const sse = decoder.decode(line);\n        if (sse) yield sse;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of iterMessages()) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (sse.event === null) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, undefined);\n            }\n\n            yield data;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController) {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n","import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options: FilePropertyBag | undefined = {},\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n        ?.name}; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n","import { VERSION } from './version';\nimport { Stream } from './streaming';\nimport {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n} from './error';\nimport {\n  kind as shimsKind,\n  type Readable,\n  getDefaultAgent,\n  type Agent,\n  fetch,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/index';\nexport { type Response };\nimport { isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    debug('response', response.status, response.url, response.headers, response.body);\n\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n\n    if (props.options.__streamClass) {\n      return props.options.__streamClass.fromSSEResponse(response, props.controller) as any;\n    }\n\n    return Stream.fromSSEResponse(response, props.controller) as any;\n  }\n\n  // fetch refuses to read the body when the status code is 204.\n  if (response.status === 204) {\n    return null as T;\n  }\n\n  if (props.options.__binaryResponse) {\n    return response as unknown as T;\n  }\n\n  const contentType = response.headers.get('content-type');\n  const isJSON =\n    contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\n  if (isJSON) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  return text as unknown as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries = 2,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req>(options: FinalRequestOptions<Req>): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders = this.buildHeaders({ options, headers, contentLength });\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    return { req, url, timeout };\n  }\n\n  private buildHeaders({\n    options,\n    headers,\n    contentLength,\n  }: {\n    options: FinalRequestOptions;\n    headers: Record<string, string | null | undefined>;\n    contentLength: string | null | undefined;\n  }): Record<string, string> {\n    const reqHeaders: Record<string, string> = {};\n    if (contentLength) {\n      reqHeaders['content-length'] = contentLength;\n    }\n\n    const defaultHeaders = this.defaultHeaders(options);\n    applyHeadersMut(reqHeaders, defaultHeaders);\n    applyHeadersMut(reqHeaders, headers);\n\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\n      delete reqHeaders['content-type'];\n    }\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return reqHeaders;\n  }\n\n  /**\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\n   */\n  protected async prepareOptions(options: FinalRequestOptions): Promise<void> {}\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest<Req>(\n    optionsInput: PromiseOrValue<FinalRequestOptions<Req>>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    await this.prepareOptions(options);\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch((e) => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\n      url.search = this.stringifyQuery(query as Record<string, unknown>);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new OpenAIError(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return (\n      this.getRequestClient()\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, { signal: controller.signal as any, ...options })\n        .finally(() => {\n          clearTimeout(timeout);\n        })\n    );\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    let timeoutMillis: number | undefined;\n\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n    if (retryAfterMillisHeader) {\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\n      if (!Number.isNaN(timeoutMs)) {\n        timeoutMillis = timeoutMs;\n      }\n    }\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader && !timeoutMillis) {\n      const timeoutSeconds = parseFloat(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n\n    return this.makeRequest(options, retriesRemaining - 1);\n  }\n\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 8.0;\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n\n    // Apply some jitter, take up to at most 25 percent of the retry time.\n    const jitter = 1 - Math.random() * 0.25;\n\n    return sleepSeconds * jitter * 1000;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new OpenAIError(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value as any);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req = unknown | Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | null | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n\n  __binaryResponse?: boolean | undefined;\n  __streamClass?: typeof Stream;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n\n  __binaryResponse: true,\n  __streamClass: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req = unknown | Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new OpenAIError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new OpenAIError(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env]?.trim() ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env)?.trim();\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders: Headers, newHeaders: Headers): void {\n  for (const k in newHeaders) {\n    if (!hasOwn(newHeaders, k)) continue;\n    const lowerKey = k.toLowerCase();\n    if (!lowerKey) continue;\n\n    const val = newHeaders[k];\n\n    if (val === null) {\n      delete targetHeaders[lowerKey];\n    } else if (val !== undefined) {\n      targetHeaders[lowerKey] = val;\n    }\n  }\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getRequiredHeader = (headers: HeadersLike, header: string): string => {\n  const lowerCasedHeader = header.toLowerCase();\n  if (isHeadersProtocol(headers)) {\n    // to deal with the case where the header looks like Stainless-Event-Id\n    const intercapsHeader =\n      header[0]?.toUpperCase() +\n      header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n      const value = headers.get(key);\n      if (value) {\n        return value;\n      }\n    }\n  }\n\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === lowerCasedHeader) {\n      if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n        return value[0];\n      }\n      return value;\n    }\n  }\n\n  throw new Error(`Could not find ${header} header`);\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { AbstractPage, Response, APIClient, FinalRequestOptions, PageInfo } from './core';\n\nexport interface PageResponse<Item> {\n  data: Array<Item>;\n\n  object: string;\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page<Item> extends AbstractPage<Item> implements PageResponse<Item> {\n  data: Array<Item>;\n\n  object: string;\n\n  constructor(client: APIClient, response: Response, body: PageResponse<Item>, options: FinalRequestOptions) {\n    super(client, response, body, options);\n\n    this.data = body.data || [];\n    this.object = body.object;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams(): null {\n    return null;\n  }\n\n  nextPageInfo(): null {\n    return null;\n  }\n}\n\nexport interface CursorPageResponse<Item> {\n  data: Array<Item>;\n}\n\nexport interface CursorPageParams {\n  after?: string;\n\n  limit?: number;\n}\n\nexport class CursorPage<Item extends { id: string }>\n  extends AbstractPage<Item>\n  implements CursorPageResponse<Item>\n{\n  data: Array<Item>;\n\n  constructor(\n    client: APIClient,\n    response: Response,\n    body: CursorPageResponse<Item>,\n    options: FinalRequestOptions,\n  ) {\n    super(client, response, body, options);\n\n    this.data = body.data || [];\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams(): Partial<CursorPageParams> | null {\n    const info = this.nextPageInfo();\n    if (!info) return null;\n    if ('params' in info) return info.params;\n    const params = Object.fromEntries(info.url.searchParams);\n    if (!Object.keys(params).length) return null;\n    return params;\n  }\n\n  nextPageInfo(): PageInfo | null {\n    const data = this.getPaginatedItems();\n    if (!data.length) {\n      return null;\n    }\n\n    const id = data[data.length - 1]?.id;\n    if (!id) {\n      return null;\n    }\n\n    return { params: { after: id } };\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport type { OpenAI } from './index';\n\nexport class APIResource {\n  protected _client: OpenAI;\n\n  constructor(client: OpenAI) {\n    this._client = client;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIPromise } from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as CompletionsAPI from \"./completions\";\nimport { Stream } from \"../streaming\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a completion for the provided prompt and parameters.\n   */\n  create(body: CompletionCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Completion>;\n  create(\n    body: CompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion>>;\n  create(\n    body: CompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion> | Completion>;\n  create(\n    body: CompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Completion> | APIPromise<Stream<Completion>> {\n    return this._client.post('/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<Completion>\n      | APIPromise<Stream<Completion>>;\n  }\n}\n\n/**\n * Represents a completion response from the API. Note: both the streamed and\n * non-streamed response objects share the same shape (unlike the chat endpoint).\n */\nexport interface Completion {\n  /**\n   * A unique identifier for the completion.\n   */\n  id: string;\n\n  /**\n   * The list of completion choices the model generated for the input prompt.\n   */\n  choices: Array<CompletionChoice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"text_completion\"\n   */\n  object: 'text_completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: CompletionUsage;\n}\n\nexport interface CompletionChoice {\n  /**\n   * The reason the model stopped generating tokens. This will be `stop` if the model\n   * hit a natural stop point or a provided stop sequence, `length` if the maximum\n   * number of tokens specified in the request was reached, or `content_filter` if\n   * content was omitted due to a flag from our content filters.\n   */\n  finish_reason: 'stop' | 'length' | 'content_filter';\n\n  index: number;\n\n  logprobs: CompletionChoice.Logprobs | null;\n\n  text: string;\n}\n\nexport namespace CompletionChoice {\n  export interface Logprobs {\n    text_offset?: Array<number>;\n\n    token_logprobs?: Array<number>;\n\n    tokens?: Array<string>;\n\n    top_logprobs?: Array<Record<string, number>>;\n  }\n}\n\n/**\n * Usage statistics for the completion request.\n */\nexport interface CompletionUsage {\n  /**\n   * Number of tokens in the generated completion.\n   */\n  completion_tokens: number;\n\n  /**\n   * Number of tokens in the prompt.\n   */\n  prompt_tokens: number;\n\n  /**\n   * Total number of tokens used in the request (prompt + completion).\n   */\n  total_tokens: number;\n}\n\nexport type CompletionCreateParams = CompletionCreateParamsNonStreaming | CompletionCreateParamsStreaming;\n\nexport interface CompletionCreateParamsBase {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: (string & {}) | 'gpt-3.5-turbo-instruct' | 'davinci-002' | 'babbage-002';\n\n  /**\n   * The prompt(s) to generate completions for, encoded as a string, array of\n   * strings, array of tokens, or array of token arrays.\n   *\n   * Note that <|endoftext|> is the document separator that the model sees during\n   * training, so if a prompt is not specified the model will generate as if from the\n   * beginning of a new document.\n   */\n  prompt: string | Array<string> | Array<number> | Array<Array<number>> | null;\n\n  /**\n   * Generates `best_of` completions server-side and returns the \"best\" (the one with\n   * the highest log probability per token). Results cannot be streamed.\n   *\n   * When used with `n`, `best_of` controls the number of candidate completions and\n   * `n` specifies how many to return – `best_of` must be greater than `n`.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  best_of?: number | null;\n\n  /**\n   * Echo back the prompt in addition to the completion\n   */\n  echo?: boolean | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in the GPT\n   * tokenizer) to an associated bias value from -100 to 100. You can use this\n   * [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs.\n   * Mathematically, the bias is added to the logits generated by the model prior to\n   * sampling. The exact effect will vary per model, but values between -1 and 1\n   * should decrease or increase likelihood of selection; values like -100 or 100\n   * should result in a ban or exclusive selection of the relevant token.\n   *\n   * As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token\n   * from being generated.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * Include the log probabilities on the `logprobs` most likely output tokens, as\n   * well the chosen tokens. For example, if `logprobs` is 5, the API will return a\n   * list of the 5 most likely tokens. The API will always return the `logprob` of\n   * the sampled token, so there may be up to `logprobs+1` elements in the response.\n   *\n   * The maximum value for `logprobs` is 5.\n   */\n  logprobs?: number | null;\n\n  /**\n   * The maximum number of [tokens](/tokenizer) that can be generated in the\n   * completion.\n   *\n   * The token count of your prompt plus `max_tokens` cannot exceed the model's\n   * context length.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n   * for counting tokens.\n   */\n  max_tokens?: number | null;\n\n  /**\n   * How many completions to generate for each prompt.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  n?: number | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * If specified, our system will make a best effort to sample deterministically,\n   * such that repeated requests with the same `seed` and parameters should return\n   * the same result.\n   *\n   * Determinism is not guaranteed, and you should refer to the `system_fingerprint`\n   * response parameter to monitor changes in the backend.\n   */\n  seed?: number | null;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: boolean | null;\n\n  /**\n   * The suffix that comes after a completion of inserted text.\n   */\n  suffix?: string | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace CompletionCreateParams {\n  export type CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export type CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n\nexport interface CompletionCreateParamsNonStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: false | null;\n}\n\nexport interface CompletionCreateParamsStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream: true;\n}\n\nexport namespace Completions {\n  export import Completion = CompletionsAPI.Completion;\n  export import CompletionChoice = CompletionsAPI.CompletionChoice;\n  export import CompletionUsage = CompletionsAPI.CompletionUsage;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIPromise } from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as ChatCompletionsAPI from \"./completions\";\nimport * as CompletionsAPI from \"../completions\";\nimport * as Shared from \"../shared\";\nimport { Stream } from \"../../streaming\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a model response for the given chat conversation.\n   */\n  create(\n    body: ChatCompletionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk>>;\n  create(\n    body: ChatCompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion> | APIPromise<Stream<ChatCompletionChunk>> {\n    return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<ChatCompletion>\n      | APIPromise<Stream<ChatCompletionChunk>>;\n  }\n}\n\n/**\n * Represents a chat completion response returned by model, based on the provided\n * input.\n */\nexport interface ChatCompletion {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletion.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for the chat completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion`.\n   */\n  object: 'chat.completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: CompletionsAPI.CompletionUsage;\n}\n\nexport namespace ChatCompletion {\n  export interface Choice {\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, `tool_calls` if the\n     * model called a tool, or `function_call` (deprecated) if the model called a\n     * function.\n     */\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call';\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs: Choice.Logprobs | null;\n\n    /**\n     * A chat completion message generated by the model.\n     */\n    message: ChatCompletionsAPI.ChatCompletionMessage;\n  }\n\n  export namespace Choice {\n    /**\n     * Log probability information for the choice.\n     */\n    export interface Logprobs {\n      /**\n       * A list of message content tokens with log probability information.\n       */\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\n    }\n  }\n}\n\nexport interface ChatCompletionAssistantMessageParam {\n  /**\n   * The role of the messages author, in this case `assistant`.\n   */\n  role: 'assistant';\n\n  /**\n   * The contents of the assistant message. Required unless `tool_calls` or\n   * `function_call` is specified.\n   */\n  content?: string | null;\n\n  /**\n   * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n   * that should be called, as generated by the model.\n   */\n  function_call?: ChatCompletionAssistantMessageParam.FunctionCall;\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n\n  /**\n   * The tool calls generated by the model, such as function calls.\n   */\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\n}\n\nexport namespace ChatCompletionAssistantMessageParam {\n  /**\n   * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n   * that should be called, as generated by the model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionChunk {\n  /**\n   * A unique identifier for the chat completion. Each chunk has the same ID.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionChunk.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created. Each\n   * chunk has the same timestamp.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion.chunk`.\n   */\n  object: 'chat.completion.chunk';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n}\n\nexport namespace ChatCompletionChunk {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    delta: Choice.Delta;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, `tool_calls` if the\n     * model called a tool, or `function_call` (deprecated) if the model called a\n     * function.\n     */\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | 'function_call' | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs?: Choice.Logprobs | null;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Delta {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      /**\n       * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n       * that should be called, as generated by the model.\n       */\n      function_call?: Delta.FunctionCall;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: 'system' | 'user' | 'assistant' | 'tool';\n\n      tool_calls?: Array<Delta.ToolCall>;\n    }\n\n    export namespace Delta {\n      /**\n       * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n       * that should be called, as generated by the model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n\n      export interface ToolCall {\n        index: number;\n\n        /**\n         * The ID of the tool call.\n         */\n        id?: string;\n\n        function?: ToolCall.Function;\n\n        /**\n         * The type of the tool. Currently, only `function` is supported.\n         */\n        type?: 'function';\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          /**\n           * The arguments to call the function with, as generated by the model in JSON\n           * format. Note that the model does not always generate valid JSON, and may\n           * hallucinate parameters not defined by your function schema. Validate the\n           * arguments in your code before calling your function.\n           */\n          arguments?: string;\n\n          /**\n           * The name of the function to call.\n           */\n          name?: string;\n        }\n      }\n    }\n\n    /**\n     * Log probability information for the choice.\n     */\n    export interface Logprobs {\n      /**\n       * A list of message content tokens with log probability information.\n       */\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\n    }\n  }\n}\n\nexport type ChatCompletionContentPart = ChatCompletionContentPartText | ChatCompletionContentPartImage;\n\nexport interface ChatCompletionContentPartImage {\n  image_url: ChatCompletionContentPartImage.ImageURL;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'image_url';\n}\n\nexport namespace ChatCompletionContentPartImage {\n  export interface ImageURL {\n    /**\n     * Either a URL of the image or the base64 encoded image data.\n     */\n    url: string;\n\n    /**\n     * Specifies the detail level of the image. Learn more in the\n     * [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).\n     */\n    detail?: 'auto' | 'low' | 'high';\n  }\n}\n\nexport interface ChatCompletionContentPartText {\n  /**\n   * The text content.\n   */\n  text: string;\n\n  /**\n   * The type of the content part.\n   */\n  type: 'text';\n}\n\n/**\n * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model\n * to call that function.\n */\nexport interface ChatCompletionFunctionCallOption {\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n}\n\nexport interface ChatCompletionFunctionMessageParam {\n  /**\n   * The contents of the function message.\n   */\n  content: string | null;\n\n  /**\n   * The name of the function to call.\n   */\n  name: string;\n\n  /**\n   * The role of the messages author, in this case `function`.\n   */\n  role: 'function';\n}\n\n/**\n * A chat completion message generated by the model.\n */\nexport interface ChatCompletionMessage {\n  /**\n   * The contents of the message.\n   */\n  content: string | null;\n\n  /**\n   * The role of the author of this message.\n   */\n  role: 'assistant';\n\n  /**\n   * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n   * that should be called, as generated by the model.\n   */\n  function_call?: ChatCompletionMessage.FunctionCall;\n\n  /**\n   * The tool calls generated by the model, such as function calls.\n   */\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\n}\n\nexport namespace ChatCompletionMessage {\n  /**\n   * Deprecated and replaced by `tool_calls`. The name and arguments of a function\n   * that should be called, as generated by the model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\nexport type ChatCompletionMessageParam =\n  | ChatCompletionSystemMessageParam\n  | ChatCompletionUserMessageParam\n  | ChatCompletionAssistantMessageParam\n  | ChatCompletionToolMessageParam\n  | ChatCompletionFunctionMessageParam;\n\nexport interface ChatCompletionMessageToolCall {\n  /**\n   * The ID of the tool call.\n   */\n  id: string;\n\n  /**\n   * The function that the model called.\n   */\n  function: ChatCompletionMessageToolCall.Function;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\nexport namespace ChatCompletionMessageToolCall {\n  /**\n   * The function that the model called.\n   */\n  export interface Function {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * Specifies a tool the model should use. Use to force the model to call a specific\n * function.\n */\nexport interface ChatCompletionNamedToolChoice {\n  function: ChatCompletionNamedToolChoice.Function;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\nexport namespace ChatCompletionNamedToolChoice {\n  export interface Function {\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * The role of the author of a message\n */\nexport type ChatCompletionRole = 'system' | 'user' | 'assistant' | 'tool' | 'function';\n\nexport interface ChatCompletionSystemMessageParam {\n  /**\n   * The contents of the system message.\n   */\n  content: string;\n\n  /**\n   * The role of the messages author, in this case `system`.\n   */\n  role: 'system';\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n}\n\nexport interface ChatCompletionTokenLogprob {\n  /**\n   * The token.\n   */\n  token: string;\n\n  /**\n   * A list of integers representing the UTF-8 bytes representation of the token.\n   * Useful in instances where characters are represented by multiple tokens and\n   * their byte representations must be combined to generate the correct text\n   * representation. Can be `null` if there is no bytes representation for the token.\n   */\n  bytes: Array<number> | null;\n\n  /**\n   * The log probability of this token.\n   */\n  logprob: number;\n\n  /**\n   * List of the most likely tokens and their log probability, at this token\n   * position. In rare cases, there may be fewer than the number of requested\n   * `top_logprobs` returned.\n   */\n  top_logprobs: Array<ChatCompletionTokenLogprob.TopLogprob>;\n}\n\nexport namespace ChatCompletionTokenLogprob {\n  export interface TopLogprob {\n    /**\n     * The token.\n     */\n    token: string;\n\n    /**\n     * A list of integers representing the UTF-8 bytes representation of the token.\n     * Useful in instances where characters are represented by multiple tokens and\n     * their byte representations must be combined to generate the correct text\n     * representation. Can be `null` if there is no bytes representation for the token.\n     */\n    bytes: Array<number> | null;\n\n    /**\n     * The log probability of this token.\n     */\n    logprob: number;\n  }\n}\n\nexport interface ChatCompletionTool {\n  function: Shared.FunctionDefinition;\n\n  /**\n   * The type of the tool. Currently, only `function` is supported.\n   */\n  type: 'function';\n}\n\n/**\n * Controls which (if any) function is called by the model. `none` means the model\n * will not call a function and instead generates a message. `auto` means the model\n * can pick between generating a message or calling a function. Specifying a\n * particular function via\n * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n * call that function.\n *\n * `none` is the default when no functions are present. `auto` is the default if\n * functions are present.\n */\nexport type ChatCompletionToolChoiceOption = 'none' | 'auto' | ChatCompletionNamedToolChoice;\n\nexport interface ChatCompletionToolMessageParam {\n  /**\n   * The contents of the tool message.\n   */\n  content: string;\n\n  /**\n   * The role of the messages author, in this case `tool`.\n   */\n  role: 'tool';\n\n  /**\n   * Tool call that this message is responding to.\n   */\n  tool_call_id: string;\n}\n\nexport interface ChatCompletionUserMessageParam {\n  /**\n   * The contents of the user message.\n   */\n  content: string | Array<ChatCompletionContentPart>;\n\n  /**\n   * The role of the messages author, in this case `user`.\n   */\n  role: 'user';\n\n  /**\n   * An optional name for the participant. Provides the model information to\n   * differentiate between participants of the same role.\n   */\n  name?: string;\n}\n\n/**\n * @deprecated ChatCompletionMessageParam should be used instead\n */\nexport type CreateChatCompletionRequestMessage = ChatCompletionMessageParam;\n\nexport type ChatCompletionCreateParams =\n  | ChatCompletionCreateParamsNonStreaming\n  | ChatCompletionCreateParamsStreaming;\n\nexport interface ChatCompletionCreateParamsBase {\n  /**\n   * A list of messages comprising the conversation so far.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n   */\n  messages: Array<ChatCompletionMessageParam>;\n\n  /**\n   * ID of the model to use. See the\n   * [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n   * table for details on which models work with the Chat API.\n   */\n  model:\n    | (string & {})\n    | 'gpt-4-0125-preview'\n    | 'gpt-4-turbo-preview'\n    | 'gpt-4-1106-preview'\n    | 'gpt-4-vision-preview'\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0301'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-1106'\n    | 'gpt-3.5-turbo-0125'\n    | 'gpt-3.5-turbo-16k-0613';\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * Deprecated in favor of `tool_choice`.\n   *\n   * Controls which (if any) function is called by the model. `none` means the model\n   * will not call a function and instead generates a message. `auto` means the model\n   * can pick between generating a message or calling a function. Specifying a\n   * particular function via `{\"name\": \"my_function\"}` forces the model to call that\n   * function.\n   *\n   * `none` is the default when no functions are present. `auto` is the default if\n   * functions are present.\n   */\n  function_call?: 'none' | 'auto' | ChatCompletionFunctionCallOption;\n\n  /**\n   * Deprecated in favor of `tools`.\n   *\n   * A list of functions the model may generate JSON inputs for.\n   */\n  functions?: Array<ChatCompletionCreateParams.Function>;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in the\n   * tokenizer) to an associated bias value from -100 to 100. Mathematically, the\n   * bias is added to the logits generated by the model prior to sampling. The exact\n   * effect will vary per model, but values between -1 and 1 should decrease or\n   * increase likelihood of selection; values like -100 or 100 should result in a ban\n   * or exclusive selection of the relevant token.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * Whether to return log probabilities of the output tokens or not. If true,\n   * returns the log probabilities of each output token returned in the `content` of\n   * `message`. This option is currently not available on the `gpt-4-vision-preview`\n   * model.\n   */\n  logprobs?: boolean | null;\n\n  /**\n   * The maximum number of [tokens](/tokenizer) that can be generated in the chat\n   * completion.\n   *\n   * The total length of input tokens and generated tokens is limited by the model's\n   * context length.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n   * for counting tokens.\n   */\n  max_tokens?: number | null;\n\n  /**\n   * How many chat completion choices to generate for each input message. Note that\n   * you will be charged based on the number of generated tokens across all of the\n   * choices. Keep `n` as `1` to minimize costs.\n   */\n  n?: number | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * An object specifying the format that the model must output. Compatible with\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n   * all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  response_format?: ChatCompletionCreateParams.ResponseFormat;\n\n  /**\n   * This feature is in Beta. If specified, our system will make a best effort to\n   * sample deterministically, such that repeated requests with the same `seed` and\n   * parameters should return the same result. Determinism is not guaranteed, and you\n   * should refer to the `system_fingerprint` response parameter to monitor changes\n   * in the backend.\n   */\n  seed?: number | null;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: boolean | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * Controls which (if any) function is called by the model. `none` means the model\n   * will not call a function and instead generates a message. `auto` means the model\n   * can pick between generating a message or calling a function. Specifying a\n   * particular function via\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n   * call that function.\n   *\n   * `none` is the default when no functions are present. `auto` is the default if\n   * functions are present.\n   */\n  tool_choice?: ChatCompletionToolChoiceOption;\n\n  /**\n   * A list of tools the model may call. Currently, only functions are supported as a\n   * tool. Use this to provide a list of functions the model may generate JSON inputs\n   * for.\n   */\n  tools?: Array<ChatCompletionTool>;\n\n  /**\n   * An integer between 0 and 5 specifying the number of most likely tokens to return\n   * at each token position, each with an associated log probability. `logprobs` must\n   * be set to `true` if this parameter is used.\n   */\n  top_logprobs?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace ChatCompletionCreateParams {\n  export interface Function {\n    /**\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n     * underscores and dashes, with a maximum length of 64.\n     */\n    name: string;\n\n    /**\n     * A description of what the function does, used by the model to choose when and\n     * how to call the function.\n     */\n    description?: string;\n\n    /**\n     * The parameters the functions accepts, described as a JSON Schema object. See the\n     * [guide](https://platform.openai.com/docs/guides/text-generation/function-calling)\n     * for examples, and the\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n     * documentation about the format.\n     *\n     * Omitting `parameters` defines a function with an empty parameter list.\n     */\n    parameters?: Shared.FunctionParameters;\n  }\n\n  /**\n   * An object specifying the format that the model must output. Compatible with\n   * [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and\n   * all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n   *\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\n   * message the model generates is valid JSON.\n   *\n   * **Important:** when using JSON mode, you **must** also instruct the model to\n   * produce JSON yourself via a system or user message. Without this, the model may\n   * generate an unending stream of whitespace until the generation reaches the token\n   * limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n   * the message content may be partially cut off if `finish_reason=\"length\"`, which\n   * indicates the generation exceeded `max_tokens` or the conversation exceeded the\n   * max context length.\n   */\n  export interface ResponseFormat {\n    /**\n     * Must be one of `text` or `json_object`.\n     */\n    type?: 'text' | 'json_object';\n  }\n\n  export type ChatCompletionCreateParamsNonStreaming =\n    ChatCompletionsAPI.ChatCompletionCreateParamsNonStreaming;\n  export type ChatCompletionCreateParamsStreaming = ChatCompletionsAPI.ChatCompletionCreateParamsStreaming;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParams instead\n */\nexport type CompletionCreateParams = ChatCompletionCreateParams;\n\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream?: false | null;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsNonStreaming instead\n */\nexport type CompletionCreateParamsNonStreaming = ChatCompletionCreateParamsNonStreaming;\n\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n   */\n  stream: true;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsStreaming instead\n */\nexport type CompletionCreateParamsStreaming = ChatCompletionCreateParamsStreaming;\n\nexport namespace Completions {\n  export import ChatCompletion = ChatCompletionsAPI.ChatCompletion;\n  export import ChatCompletionAssistantMessageParam = ChatCompletionsAPI.ChatCompletionAssistantMessageParam;\n  export import ChatCompletionChunk = ChatCompletionsAPI.ChatCompletionChunk;\n  export import ChatCompletionContentPart = ChatCompletionsAPI.ChatCompletionContentPart;\n  export import ChatCompletionContentPartImage = ChatCompletionsAPI.ChatCompletionContentPartImage;\n  export import ChatCompletionContentPartText = ChatCompletionsAPI.ChatCompletionContentPartText;\n  export import ChatCompletionFunctionCallOption = ChatCompletionsAPI.ChatCompletionFunctionCallOption;\n  export import ChatCompletionFunctionMessageParam = ChatCompletionsAPI.ChatCompletionFunctionMessageParam;\n  export import ChatCompletionMessage = ChatCompletionsAPI.ChatCompletionMessage;\n  export import ChatCompletionMessageParam = ChatCompletionsAPI.ChatCompletionMessageParam;\n  export import ChatCompletionMessageToolCall = ChatCompletionsAPI.ChatCompletionMessageToolCall;\n  export import ChatCompletionNamedToolChoice = ChatCompletionsAPI.ChatCompletionNamedToolChoice;\n  export import ChatCompletionRole = ChatCompletionsAPI.ChatCompletionRole;\n  export import ChatCompletionSystemMessageParam = ChatCompletionsAPI.ChatCompletionSystemMessageParam;\n  export import ChatCompletionTokenLogprob = ChatCompletionsAPI.ChatCompletionTokenLogprob;\n  export import ChatCompletionTool = ChatCompletionsAPI.ChatCompletionTool;\n  export import ChatCompletionToolChoiceOption = ChatCompletionsAPI.ChatCompletionToolChoiceOption;\n  export import ChatCompletionToolMessageParam = ChatCompletionsAPI.ChatCompletionToolMessageParam;\n  export import ChatCompletionUserMessageParam = ChatCompletionsAPI.ChatCompletionUserMessageParam;\n  /**\n   * @deprecated ChatCompletionMessageParam should be used instead\n   */\n  export import CreateChatCompletionRequestMessage = ChatCompletionsAPI.CreateChatCompletionRequestMessage;\n  export import ChatCompletionCreateParams = ChatCompletionsAPI.ChatCompletionCreateParams;\n  export import CompletionCreateParams = ChatCompletionsAPI.CompletionCreateParams;\n  export import ChatCompletionCreateParamsNonStreaming = ChatCompletionsAPI.ChatCompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsNonStreaming = ChatCompletionsAPI.CompletionCreateParamsNonStreaming;\n  export import ChatCompletionCreateParamsStreaming = ChatCompletionsAPI.ChatCompletionCreateParamsStreaming;\n  export import CompletionCreateParamsStreaming = ChatCompletionsAPI.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as CompletionsAPI from \"./completions\";\n\nexport class Chat extends APIResource {\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\n}\n\nexport namespace Chat {\n  export import Completions = CompletionsAPI.Completions;\n  export import ChatCompletion = CompletionsAPI.ChatCompletion;\n  export import ChatCompletionAssistantMessageParam = CompletionsAPI.ChatCompletionAssistantMessageParam;\n  export import ChatCompletionChunk = CompletionsAPI.ChatCompletionChunk;\n  export import ChatCompletionContentPart = CompletionsAPI.ChatCompletionContentPart;\n  export import ChatCompletionContentPartImage = CompletionsAPI.ChatCompletionContentPartImage;\n  export import ChatCompletionContentPartText = CompletionsAPI.ChatCompletionContentPartText;\n  export import ChatCompletionFunctionCallOption = CompletionsAPI.ChatCompletionFunctionCallOption;\n  export import ChatCompletionFunctionMessageParam = CompletionsAPI.ChatCompletionFunctionMessageParam;\n  export import ChatCompletionMessage = CompletionsAPI.ChatCompletionMessage;\n  export import ChatCompletionMessageParam = CompletionsAPI.ChatCompletionMessageParam;\n  export import ChatCompletionMessageToolCall = CompletionsAPI.ChatCompletionMessageToolCall;\n  export import ChatCompletionNamedToolChoice = CompletionsAPI.ChatCompletionNamedToolChoice;\n  export import ChatCompletionRole = CompletionsAPI.ChatCompletionRole;\n  export import ChatCompletionSystemMessageParam = CompletionsAPI.ChatCompletionSystemMessageParam;\n  export import ChatCompletionTokenLogprob = CompletionsAPI.ChatCompletionTokenLogprob;\n  export import ChatCompletionTool = CompletionsAPI.ChatCompletionTool;\n  export import ChatCompletionToolChoiceOption = CompletionsAPI.ChatCompletionToolChoiceOption;\n  export import ChatCompletionToolMessageParam = CompletionsAPI.ChatCompletionToolMessageParam;\n  export import ChatCompletionUserMessageParam = CompletionsAPI.ChatCompletionUserMessageParam;\n  /**\n   * @deprecated ChatCompletionMessageParam should be used instead\n   */\n  export import CreateChatCompletionRequestMessage = CompletionsAPI.CreateChatCompletionRequestMessage;\n  export import ChatCompletionCreateParams = CompletionsAPI.ChatCompletionCreateParams;\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\n  export import ChatCompletionCreateParamsNonStreaming = CompletionsAPI.ChatCompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsNonStreaming = CompletionsAPI.CompletionCreateParamsNonStreaming;\n  export import ChatCompletionCreateParamsStreaming = CompletionsAPI.ChatCompletionCreateParamsStreaming;\n  export import CompletionCreateParamsStreaming = CompletionsAPI.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as EmbeddingsAPI from \"./embeddings\";\n\nexport class Embeddings extends APIResource {\n  /**\n   * Creates an embedding vector representing the input text.\n   */\n  create(\n    body: EmbeddingCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<CreateEmbeddingResponse> {\n    return this._client.post('/embeddings', { body, ...options });\n  }\n}\n\nexport interface CreateEmbeddingResponse {\n  /**\n   * The list of embeddings generated by the model.\n   */\n  data: Array<Embedding>;\n\n  /**\n   * The name of the model used to generate the embedding.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"list\".\n   */\n  object: 'list';\n\n  /**\n   * The usage information for the request.\n   */\n  usage: CreateEmbeddingResponse.Usage;\n}\n\nexport namespace CreateEmbeddingResponse {\n  /**\n   * The usage information for the request.\n   */\n  export interface Usage {\n    /**\n     * The number of tokens used by the prompt.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used by the request.\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * Represents an embedding vector returned by embedding endpoint.\n */\nexport interface Embedding {\n  /**\n   * The embedding vector, which is a list of floats. The length of vector depends on\n   * the model as listed in the\n   * [embedding guide](https://platform.openai.com/docs/guides/embeddings).\n   */\n  embedding: Array<number>;\n\n  /**\n   * The index of the embedding in the list of embeddings.\n   */\n  index: number;\n\n  /**\n   * The object type, which is always \"embedding\".\n   */\n  object: 'embedding';\n}\n\nexport interface EmbeddingCreateParams {\n  /**\n   * Input text to embed, encoded as a string or array of tokens. To embed multiple\n   * inputs in a single request, pass an array of strings or array of token arrays.\n   * The input must not exceed the max input tokens for the model (8192 tokens for\n   * `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048\n   * dimensions or less.\n   * [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n   * for counting tokens.\n   */\n  input: string | Array<string> | Array<number> | Array<Array<number>>;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: (string & {}) | 'text-embedding-ada-002' | 'text-embedding-3-small' | 'text-embedding-3-large';\n\n  /**\n   * The number of dimensions the resulting output embeddings should have. Only\n   * supported in `text-embedding-3` and later models.\n   */\n  dimensions?: number;\n\n  /**\n   * The format to return the embeddings in. Can be either `float` or\n   * [`base64`](https://pypi.org/project/pybase64/).\n   */\n  encoding_format?: 'float' | 'base64';\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace Embeddings {\n  export import CreateEmbeddingResponse = EmbeddingsAPI.CreateEmbeddingResponse;\n  export import Embedding = EmbeddingsAPI.Embedding;\n  export import EmbeddingCreateParams = EmbeddingsAPI.EmbeddingCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport { isRequestOptions } from \"../core\";\nimport { type Response } from \"../_shims/index\";\nimport { sleep } from \"../core\";\nimport { APIConnectionTimeoutError } from \"../error\";\nimport * as FilesAPI from \"./files\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../core\";\nimport { Page } from \"../pagination\";\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. The size of all the\n   * files uploaded by one organization can be up to 100 GB.\n   *\n   * The size of individual files can be a maximum of 512 MB or 2 million tokens for\n   * Assistants. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) to\n   * learn more about the types of files supported. The Fine-tuning API only supports\n   * `.jsonl` files.\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body: FileCreateParams, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.post('/files', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.get(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns a list of files that belong to the user's organization.\n   */\n  list(query?: FileListParams, options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileObjectsPage, FileObject> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });\n  }\n\n  /**\n   * Delete a file.\n   */\n  del(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileDeleted> {\n    return this._client.delete(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileId: string, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.get(`/files/${fileId}/content`, { ...options, __binaryResponse: true });\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(fileId: string, options?: Core.RequestOptions): Core.APIPromise<string> {\n    return this._client.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/json', ...options?.headers },\n    });\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileObjectsPage extends Page<FileObject> {}\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'file';\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file, in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always `file`.\n   */\n  object: 'file';\n\n  /**\n   * The intended purpose of the file. Supported values are `fine-tune`,\n   * `fine-tune-results`, `assistants`, and `assistants_output`.\n   */\n  purpose: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n\n  /**\n   * Deprecated. The current status of the file, which can be either `uploaded`,\n   * `processed`, or `error`.\n   */\n  status: 'uploaded' | 'processed' | 'error';\n\n  /**\n   * Deprecated. For details on why a fine-tuning training file failed validation,\n   * see the `error` field on `fine_tuning.job`.\n   */\n  status_details?: string;\n}\n\nexport interface FileCreateParams {\n  /**\n   * The File object (not file name) to be uploaded.\n   */\n  file: Uploadable;\n\n  /**\n   * The intended purpose of the uploaded file.\n   *\n   * Use \"fine-tune\" for\n   * [Fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning) and\n   * \"assistants\" for\n   * [Assistants](https://platform.openai.com/docs/api-reference/assistants) and\n   * [Messages](https://platform.openai.com/docs/api-reference/messages). This allows\n   * us to validate the format of the uploaded file is correct for fine-tuning.\n   */\n  purpose: 'fine-tune' | 'assistants';\n}\n\nexport interface FileListParams {\n  /**\n   * Only return files with the given purpose.\n   */\n  purpose?: string;\n}\n\nexport namespace Files {\n  export import FileContent = FilesAPI.FileContent;\n  export import FileDeleted = FilesAPI.FileDeleted;\n  export import FileObject = FilesAPI.FileObject;\n  export import FileObjectsPage = FilesAPI.FileObjectsPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as ImagesAPI from \"./images\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../core\";\n\nexport class Images extends APIResource {\n  /**\n   * Creates a variation of a given image.\n   */\n  createVariation(\n    body: ImageCreateVariationParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/variations', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an edited or extended image given an original image and a prompt.\n   */\n  edit(body: ImageEditParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/edits', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an image given a prompt.\n   */\n  generate(body: ImageGenerateParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this._client.post('/images/generations', { body, ...options });\n  }\n}\n\n/**\n * Represents the url or the content of an image generated by the OpenAI API.\n */\nexport interface Image {\n  /**\n   * The base64-encoded JSON of the generated image, if `response_format` is\n   * `b64_json`.\n   */\n  b64_json?: string;\n\n  /**\n   * The prompt that was used to generate the image, if there was any revision to the\n   * prompt.\n   */\n  revised_prompt?: string;\n\n  /**\n   * The URL of the generated image, if `response_format` is `url` (default).\n   */\n  url?: string;\n}\n\nexport interface ImagesResponse {\n  created: number;\n\n  data: Array<Image>;\n}\n\nexport interface ImageCreateVariationParams {\n  /**\n   * The image to use as the basis for the variation(s). Must be a valid PNG file,\n   * less than 4MB, and square.\n   */\n  image: Uploadable;\n\n  /**\n   * The model to use for image generation. Only `dall-e-2` is supported at this\n   * time.\n   */\n  model?: (string & {}) | 'dall-e-2' | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only\n   * `n=1` is supported.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageEditParams {\n  /**\n   * The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask\n   * is not provided, image must have transparency, which will be used as the mask.\n   */\n  image: Uploadable;\n\n  /**\n   * A text description of the desired image(s). The maximum length is 1000\n   * characters.\n   */\n  prompt: string;\n\n  /**\n   * An additional image whose fully transparent areas (e.g. where alpha is zero)\n   * indicate where `image` should be edited. Must be a valid PNG file, less than\n   * 4MB, and have the same dimensions as `image`.\n   */\n  mask?: Uploadable;\n\n  /**\n   * The model to use for image generation. Only `dall-e-2` is supported at this\n   * time.\n   */\n  model?: (string & {}) | 'dall-e-2' | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageGenerateParams {\n  /**\n   * A text description of the desired image(s). The maximum length is 1000\n   * characters for `dall-e-2` and 4000 characters for `dall-e-3`.\n   */\n  prompt: string;\n\n  /**\n   * The model to use for image generation.\n   */\n  model?: (string & {}) | 'dall-e-2' | 'dall-e-3' | null;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only\n   * `n=1` is supported.\n   */\n  n?: number | null;\n\n  /**\n   * The quality of the image that will be generated. `hd` creates images with finer\n   * details and greater consistency across the image. This param is only supported\n   * for `dall-e-3`.\n   */\n  quality?: 'standard' | 'hd';\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or\n   * `1024x1792` for `dall-e-3` models.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792' | null;\n\n  /**\n   * The style of the generated images. Must be one of `vivid` or `natural`. Vivid\n   * causes the model to lean towards generating hyper-real and dramatic images.\n   * Natural causes the model to produce more natural, less hyper-real looking\n   * images. This param is only supported for `dall-e-3`.\n   */\n  style?: 'vivid' | 'natural' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace Images {\n  export import Image = ImagesAPI.Image;\n  export import ImagesResponse = ImagesAPI.ImagesResponse;\n  export import ImageCreateVariationParams = ImagesAPI.ImageCreateVariationParams;\n  export import ImageEditParams = ImagesAPI.ImageEditParams;\n  export import ImageGenerateParams = ImagesAPI.ImageGenerateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport { type Response } from \"../../_shims/index\";\nimport * as SpeechAPI from \"./speech\";\n\nexport class Speech extends APIResource {\n  /**\n   * Generates audio from the input text.\n   */\n  create(body: SpeechCreateParams, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.post('/audio/speech', { body, ...options, __binaryResponse: true });\n  }\n}\n\nexport interface SpeechCreateParams {\n  /**\n   * The text to generate audio for. The maximum length is 4096 characters.\n   */\n  input: string;\n\n  /**\n   * One of the available [TTS models](https://platform.openai.com/docs/models/tts):\n   * `tts-1` or `tts-1-hd`\n   */\n  model: (string & {}) | 'tts-1' | 'tts-1-hd';\n\n  /**\n   * The voice to use when generating the audio. Supported voices are `alloy`,\n   * `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are\n   * available in the\n   * [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech/voice-options).\n   */\n  voice: 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\n\n  /**\n   * The format to return audio in. Supported formats are `mp3`, `opus`, `aac`,\n   * `flac`, `pcm`, and `wav`.\n   *\n   * The `pcm` audio format, similar to `wav` but without a header, utilizes a 24kHz\n   * sample rate, mono channel, and 16-bit depth in signed little-endian format.\n   */\n  response_format?: 'mp3' | 'opus' | 'aac' | 'flac' | 'pcm' | 'wav';\n\n  /**\n   * The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is\n   * the default.\n   */\n  speed?: number;\n}\n\nexport namespace Speech {\n  export import SpeechCreateParams = SpeechAPI.SpeechCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranscriptionsAPI from \"./transcriptions\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\n    return this._client.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Transcription {\n  text: string;\n}\n\nexport interface TranscriptionCreateParams {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n   * improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should match the audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n\n  /**\n   * The timestamp granularities to populate for this transcription. Any of these\n   * options: `word`, or `segment`. Note: There is no additional latency for segment\n   * timestamps, but generating word timestamps incurs additional latency.\n   */\n  timestamp_granularities?: Array<'word' | 'segment'>;\n}\n\nexport namespace Transcriptions {\n  export import Transcription = TranscriptionsAPI.Transcription;\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranslationsAPI from \"./translations\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\n    return this._client.post('/audio/translations', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should be in English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import Translation = TranslationsAPI.Translation;\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as SpeechAPI from \"./speech\";\nimport * as TranscriptionsAPI from \"./transcriptions\";\nimport * as TranslationsAPI from \"./translations\";\n\nexport class Audio extends APIResource {\n  transcriptions: TranscriptionsAPI.Transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n  translations: TranslationsAPI.Translations = new TranslationsAPI.Translations(this._client);\n  speech: SpeechAPI.Speech = new SpeechAPI.Speech(this._client);\n}\n\nexport namespace Audio {\n  export import Transcriptions = TranscriptionsAPI.Transcriptions;\n  export import Transcription = TranscriptionsAPI.Transcription;\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\n  export import Translations = TranslationsAPI.Translations;\n  export import Translation = TranslationsAPI.Translation;\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n  export import Speech = SpeechAPI.Speech;\n  export import SpeechCreateParams = SpeechAPI.SpeechCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as ModerationsAPI from \"./moderations\";\n\nexport class Moderations extends APIResource {\n  /**\n   * Classifies if text violates OpenAI's Content Policy\n   */\n  create(\n    body: ModerationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ModerationCreateResponse> {\n    return this._client.post('/moderations', { body, ...options });\n  }\n}\n\nexport interface Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  categories: Moderation.Categories;\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  category_scores: Moderation.CategoryScores;\n\n  /**\n   * Whether the content violates\n   * [OpenAI's usage policies](/policies/usage-policies).\n   */\n  flagged: boolean;\n}\n\nexport namespace Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  export interface Categories {\n    /**\n     * Content that expresses, incites, or promotes harassing language towards any\n     * target.\n     */\n    harassment: boolean;\n\n    /**\n     * Harassment content that also includes violence or serious harm towards any\n     * target.\n     */\n    'harassment/threatening': boolean;\n\n    /**\n     * Content that expresses, incites, or promotes hate based on race, gender,\n     * ethnicity, religion, nationality, sexual orientation, disability status, or\n     * caste. Hateful content aimed at non-protected groups (e.g., chess players) is\n     * harassment.\n     */\n    hate: boolean;\n\n    /**\n     * Hateful content that also includes violence or serious harm towards the targeted\n     * group based on race, gender, ethnicity, religion, nationality, sexual\n     * orientation, disability status, or caste.\n     */\n    'hate/threatening': boolean;\n\n    /**\n     * Content that promotes, encourages, or depicts acts of self-harm, such as\n     * suicide, cutting, and eating disorders.\n     */\n    'self-harm': boolean;\n\n    /**\n     * Content that encourages performing acts of self-harm, such as suicide, cutting,\n     * and eating disorders, or that gives instructions or advice on how to commit such\n     * acts.\n     */\n    'self-harm/instructions': boolean;\n\n    /**\n     * Content where the speaker expresses that they are engaging or intend to engage\n     * in acts of self-harm, such as suicide, cutting, and eating disorders.\n     */\n    'self-harm/intent': boolean;\n\n    /**\n     * Content meant to arouse sexual excitement, such as the description of sexual\n     * activity, or that promotes sexual services (excluding sex education and\n     * wellness).\n     */\n    sexual: boolean;\n\n    /**\n     * Sexual content that includes an individual who is under 18 years old.\n     */\n    'sexual/minors': boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury.\n     */\n    violence: boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury in graphic detail.\n     */\n    'violence/graphic': boolean;\n  }\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  export interface CategoryScores {\n    /**\n     * The score for the category 'harassment'.\n     */\n    harassment: number;\n\n    /**\n     * The score for the category 'harassment/threatening'.\n     */\n    'harassment/threatening': number;\n\n    /**\n     * The score for the category 'hate'.\n     */\n    hate: number;\n\n    /**\n     * The score for the category 'hate/threatening'.\n     */\n    'hate/threatening': number;\n\n    /**\n     * The score for the category 'self-harm'.\n     */\n    'self-harm': number;\n\n    /**\n     * The score for the category 'self-harm/instructions'.\n     */\n    'self-harm/instructions': number;\n\n    /**\n     * The score for the category 'self-harm/intent'.\n     */\n    'self-harm/intent': number;\n\n    /**\n     * The score for the category 'sexual'.\n     */\n    sexual: number;\n\n    /**\n     * The score for the category 'sexual/minors'.\n     */\n    'sexual/minors': number;\n\n    /**\n     * The score for the category 'violence'.\n     */\n    violence: number;\n\n    /**\n     * The score for the category 'violence/graphic'.\n     */\n    'violence/graphic': number;\n  }\n}\n\n/**\n * Represents policy compliance report by OpenAI's content moderation model against\n * a given input.\n */\nexport interface ModerationCreateResponse {\n  /**\n   * The unique identifier for the moderation request.\n   */\n  id: string;\n\n  /**\n   * The model used to generate the moderation results.\n   */\n  model: string;\n\n  /**\n   * A list of moderation objects.\n   */\n  results: Array<Moderation>;\n}\n\nexport interface ModerationCreateParams {\n  /**\n   * The input text to classify\n   */\n  input: string | Array<string>;\n\n  /**\n   * Two content moderations models are available: `text-moderation-stable` and\n   * `text-moderation-latest`.\n   *\n   * The default is `text-moderation-latest` which will be automatically upgraded\n   * over time. This ensures you are always using our most accurate model. If you use\n   * `text-moderation-stable`, we will provide advanced notice before updating the\n   * model. Accuracy of `text-moderation-stable` may be slightly lower than for\n   * `text-moderation-latest`.\n   */\n  model?: (string & {}) | 'text-moderation-latest' | 'text-moderation-stable';\n}\n\nexport namespace Moderations {\n  export import Moderation = ModerationsAPI.Moderation;\n  export import ModerationCreateResponse = ModerationsAPI.ModerationCreateResponse;\n  export import ModerationCreateParams = ModerationsAPI.ModerationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as ModelsAPI from \"./models\";\nimport { Page } from \"../pagination\";\n\nexport class Models extends APIResource {\n  /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */\n  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model> {\n    return this._client.get(`/models/${model}`, options);\n  }\n\n  /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<ModelsPage, Model> {\n    return this._client.getAPIList('/models', ModelsPage, options);\n  }\n\n  /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization to\n   * delete a model.\n   */\n  del(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted> {\n    return this._client.delete(`/models/${model}`, options);\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class ModelsPage extends Page<Model> {}\n\n/**\n * Describes an OpenAI model offering that can be used with the API.\n */\nexport interface Model {\n  /**\n   * The model identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) when the model was created.\n   */\n  created: number;\n\n  /**\n   * The object type, which is always \"model\".\n   */\n  object: 'model';\n\n  /**\n   * The organization that owns the model.\n   */\n  owned_by: string;\n}\n\nexport interface ModelDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: string;\n}\n\nexport namespace Models {\n  export import Model = ModelsAPI.Model;\n  export import ModelDeleted = ModelsAPI.ModelDeleted;\n  export import ModelsPage = ModelsAPI.ModelsPage;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport { isRequestOptions } from \"../../core\";\nimport * as JobsAPI from \"./jobs\";\nimport { CursorPage, type CursorPageParams } from \"../../pagination\";\n\nexport class Jobs extends APIResource {\n  /**\n   * Creates a fine-tuning job which begins the process of creating a new model from\n   * a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  create(body: JobCreateParams, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post('/fine_tuning/jobs', { body, ...options });\n  }\n\n  /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  retrieve(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n  }\n\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(\n    query?: JobListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(\n    query: JobListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });\n  }\n\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n  }\n\n  /**\n   * Get status updates for a fine-tuning job.\n   */\n  listEvents(\n    fineTuningJobId: string,\n    query?: JobListEventsParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    query: JobListEventsParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent> {\n    if (isRequestOptions(query)) {\n      return this.listEvents(fineTuningJobId, {}, query);\n    }\n    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n      query,\n      ...options,\n    });\n  }\n}\n\nexport class FineTuningJobsPage extends CursorPage<FineTuningJob> {}\n\nexport class FineTuningJobEventsPage extends CursorPage<FineTuningJobEvent> {}\n\n/**\n * The `fine_tuning.job` object represents a fine-tuning job that has been created\n * through the API.\n */\nexport interface FineTuningJob {\n  /**\n   * The object identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  error: FineTuningJob.Error | null;\n\n  /**\n   * The name of the fine-tuned model that is being created. The value will be null\n   * if the fine-tuning job is still running.\n   */\n  fine_tuned_model: string | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The\n   * value will be null if the fine-tuning job is still running.\n   */\n  finished_at: number | null;\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for\n   * more details.\n   */\n  hyperparameters: FineTuningJob.Hyperparameters;\n\n  /**\n   * The base model that is being fine-tuned.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"fine_tuning.job\".\n   */\n  object: 'fine_tuning.job';\n\n  /**\n   * The organization that owns the fine-tuning job.\n   */\n  organization_id: string;\n\n  /**\n   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the\n   * results with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  result_files: Array<string>;\n\n  /**\n   * The current status of the fine-tuning job, which can be either\n   * `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.\n   */\n  status: 'validating_files' | 'queued' | 'running' | 'succeeded' | 'failed' | 'cancelled';\n\n  /**\n   * The total number of billable tokens processed by this fine-tuning job. The value\n   * will be null if the fine-tuning job is still running.\n   */\n  trained_tokens: number | null;\n\n  /**\n   * The file ID used for training. You can retrieve the training data with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  training_file: string;\n\n  /**\n   * The file ID used for validation. You can retrieve the validation results with\n   * the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  validation_file: string | null;\n}\n\nexport namespace FineTuningJob {\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  export interface Error {\n    /**\n     * A machine-readable error code.\n     */\n    code: string;\n\n    /**\n     * A human-readable error message.\n     */\n    message: string;\n\n    /**\n     * The parameter that was invalid, usually `training_file` or `validation_file`.\n     * This field will be null if the failure was not parameter-specific.\n     */\n    param: string | null;\n  }\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for\n   * more details.\n   */\n  export interface Hyperparameters {\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset. \"auto\" decides the optimal number of epochs based\n     * on the size of the dataset. If setting the number manually, we support any\n     * number between 1 and 50 epochs.\n     */\n    n_epochs: 'auto' | number;\n  }\n}\n\n/**\n * Fine-tuning job event object\n */\nexport interface FineTuningJobEvent {\n  id: string;\n\n  created_at: number;\n\n  level: 'info' | 'warn' | 'error';\n\n  message: string;\n\n  object: 'fine_tuning.job.event';\n}\n\nexport interface JobCreateParams {\n  /**\n   * The name of the model to fine-tune. You can select one of the\n   * [supported models](https://platform.openai.com/docs/guides/fine-tuning/what-models-can-be-fine-tuned).\n   */\n  model: (string & {}) | 'babbage-002' | 'davinci-002' | 'gpt-3.5-turbo';\n\n  /**\n   * The ID of an uploaded file that contains training data.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/upload)\n   * for how to upload a file.\n   *\n   * Your dataset must be formatted as a JSONL file. Additionally, you must upload\n   * your file with the purpose `fine-tune`.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  training_file: string;\n\n  /**\n   * The hyperparameters used for the fine-tuning job.\n   */\n  hyperparameters?: JobCreateParams.Hyperparameters;\n\n  /**\n   * A string of up to 18 characters that will be added to your fine-tuned model\n   * name.\n   *\n   * For example, a `suffix` of \"custom-model-name\" would produce a model name like\n   * `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.\n   */\n  suffix?: string | null;\n\n  /**\n   * The ID of an uploaded file that contains validation data.\n   *\n   * If you provide this file, the data is used to generate validation metrics\n   * periodically during fine-tuning. These metrics can be viewed in the fine-tuning\n   * results file. The same data should not be present in both train and validation\n   * files.\n   *\n   * Your dataset must be formatted as a JSONL file. You must upload your file with\n   * the purpose `fine-tune`.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  validation_file?: string | null;\n}\n\nexport namespace JobCreateParams {\n  /**\n   * The hyperparameters used for the fine-tuning job.\n   */\n  export interface Hyperparameters {\n    /**\n     * Number of examples in each batch. A larger batch size means that model\n     * parameters are updated less frequently, but with lower variance.\n     */\n    batch_size?: 'auto' | number;\n\n    /**\n     * Scaling factor for the learning rate. A smaller learning rate may be useful to\n     * avoid overfitting.\n     */\n    learning_rate_multiplier?: 'auto' | number;\n\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs?: 'auto' | number;\n  }\n}\n\nexport interface JobListParams extends CursorPageParams {}\n\nexport interface JobListEventsParams extends CursorPageParams {}\n\nexport namespace Jobs {\n  export import FineTuningJob = JobsAPI.FineTuningJob;\n  export import FineTuningJobEvent = JobsAPI.FineTuningJobEvent;\n  export import FineTuningJobsPage = JobsAPI.FineTuningJobsPage;\n  export import FineTuningJobEventsPage = JobsAPI.FineTuningJobEventsPage;\n  export import JobCreateParams = JobsAPI.JobCreateParams;\n  export import JobListParams = JobsAPI.JobListParams;\n  export import JobListEventsParams = JobsAPI.JobListEventsParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as JobsAPI from \"./jobs\";\n\nexport class FineTuning extends APIResource {\n  jobs: JobsAPI.Jobs = new JobsAPI.Jobs(this._client);\n}\n\nexport namespace FineTuning {\n  export import Jobs = JobsAPI.Jobs;\n  export import FineTuningJob = JobsAPI.FineTuningJob;\n  export import FineTuningJobEvent = JobsAPI.FineTuningJobEvent;\n  export import FineTuningJobsPage = JobsAPI.FineTuningJobsPage;\n  export import FineTuningJobEventsPage = JobsAPI.FineTuningJobEventsPage;\n  export import JobCreateParams = JobsAPI.JobCreateParams;\n  export import JobListParams = JobsAPI.JobListParams;\n  export import JobListEventsParams = JobsAPI.JobListEventsParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../pagination\";\n\nexport class Files extends APIResource {\n  /**\n   * Create an assistant file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to an\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants).\n   */\n  create(\n    assistantId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<AssistantFile> {\n    return this._client.post(`/assistants/${assistantId}/files`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves an AssistantFile.\n   */\n  retrieve(\n    assistantId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<AssistantFile> {\n    return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of assistant files.\n   */\n  list(\n    assistantId: string,\n    query?: FileListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantFilesPage, AssistantFile>;\n  list(\n    assistantId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantFilesPage, AssistantFile>;\n  list(\n    assistantId: string,\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantFilesPage, AssistantFile> {\n    if (isRequestOptions(query)) {\n      return this.list(assistantId, {}, query);\n    }\n    return this._client.getAPIList(`/assistants/${assistantId}/files`, AssistantFilesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete an assistant file.\n   */\n  del(\n    assistantId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<FileDeleteResponse> {\n    return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class AssistantFilesPage extends CursorPage<AssistantFile> {}\n\n/**\n * A list of [Files](https://platform.openai.com/docs/api-reference/files) attached\n * to an `assistant`.\n */\nexport interface AssistantFile {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The assistant ID that the file is attached to.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the assistant file was created.\n   */\n  created_at: number;\n\n  /**\n   * The object type, which is always `assistant.file`.\n   */\n  object: 'assistant.file';\n}\n\n/**\n * Deletes the association between the assistant and the file, but does not delete\n * the [File](https://platform.openai.com/docs/api-reference/files) object itself.\n */\nexport interface FileDeleteResponse {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'assistant.file.deleted';\n}\n\nexport interface FileCreateParams {\n  /**\n   * A [File](https://platform.openai.com/docs/api-reference/files) ID (with\n   * `purpose=\"assistants\"`) that the assistant should use. Useful for tools like\n   * `retrieval` and `code_interpreter` that can access files.\n   */\n  file_id: string;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Files {\n  export import AssistantFile = FilesAPI.AssistantFile;\n  export import FileDeleteResponse = FilesAPI.FileDeleteResponse;\n  export import AssistantFilesPage = FilesAPI.AssistantFilesPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as AssistantsAPI from \"./assistants\";\nimport * as Shared from \"../../shared\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../pagination\";\n\nexport class Assistants extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this._client);\n\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(body: AssistantCreateParams, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.post('/assistants', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies an assistant.\n   */\n  update(\n    assistantId: string,\n    body: AssistantUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Assistant> {\n    return this._client.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of assistants.\n   */\n  list(\n    query?: AssistantListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant>;\n  list(options?: Core.RequestOptions): Core.PagePromise<AssistantsPage, Assistant>;\n  list(\n    query: AssistantListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete an assistant.\n   */\n  del(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<AssistantDeleted> {\n    return this._client.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class AssistantsPage extends CursorPage<Assistant> {}\n\n/**\n * Represents an `assistant` that can call the model and use tools.\n */\nexport interface Assistant {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the assistant was created.\n   */\n  created_at: number;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name: string | null;\n\n  /**\n   * The object type, which is always `assistant`.\n   */\n  object: 'assistant';\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools: Array<Assistant.CodeInterpreter | Assistant.Retrieval | Assistant.Function>;\n}\n\nexport namespace Assistant {\n  export interface CodeInterpreter {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface Retrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface Function {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'assistant.deleted';\n}\n\nexport interface AssistantCreateParams {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantCreateParams.AssistantToolsCode\n    | AssistantCreateParams.AssistantToolsRetrieval\n    | AssistantCreateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantCreateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantUpdateParams {\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order. If a\n   * file was previously attached to the list but does not show up in the list, it\n   * will be deleted from the assistant.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model?: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantUpdateParams.AssistantToolsCode\n    | AssistantUpdateParams.AssistantToolsRetrieval\n    | AssistantUpdateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantUpdateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Assistants {\n  export import Assistant = AssistantsAPI.Assistant;\n  export import AssistantDeleted = AssistantsAPI.AssistantDeleted;\n  export import AssistantsPage = AssistantsAPI.AssistantsPage;\n  export import AssistantCreateParams = AssistantsAPI.AssistantCreateParams;\n  export import AssistantUpdateParams = AssistantsAPI.AssistantUpdateParams;\n  export import AssistantListParams = AssistantsAPI.AssistantListParams;\n  export import Files = FilesAPI.Files;\n  export import AssistantFile = FilesAPI.AssistantFile;\n  export import FileDeleteResponse = FilesAPI.FileDeleteResponse;\n  export import AssistantFilesPage = FilesAPI.AssistantFilesPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n","import { type ChatCompletionRunner } from './ChatCompletionRunner';\nimport { type ChatCompletionStreamingRunner } from './ChatCompletionStreamingRunner';\nimport { JSONSchema } from './jsonschema';\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\nexport type RunnableFunctionWithParse<Args extends object> = {\n  /**\n   * @param args the return value from `parse`.\n   * @param runner the runner evaluating this callback.\n   * @returns a string to send back to OpenAI.\n   */\n  function: (\n    args: Args,\n    runner: ChatCompletionRunner | ChatCompletionStreamingRunner,\n  ) => PromiseOrValue<unknown>;\n  /**\n   * @param input the raw args from the OpenAI function call.\n   * @returns the parsed arguments to pass to `function`\n   */\n  parse: (input: string) => PromiseOrValue<Args>;\n  /**\n   * The parameters the function accepts, describes as a JSON Schema object.\n   */\n  parameters: JSONSchema;\n  /**\n   * A description of what the function does, used by the model to choose when and how to call the function.\n   */\n  description: string;\n  /**\n   * The name of the function to be called. Will default to function.name if omitted.\n   */\n  name?: string | undefined;\n};\n\nexport type RunnableFunctionWithoutParse = {\n  /**\n   * @param args the raw args from the OpenAI function call.\n   * @returns a string to send back to OpenAI\n   */\n  function: (\n    args: string,\n    runner: ChatCompletionRunner | ChatCompletionStreamingRunner,\n  ) => PromiseOrValue<unknown>;\n  /**\n   * The parameters the function accepts, describes as a JSON Schema object.\n   */\n  parameters: JSONSchema;\n  /**\n   * A description of what the function does, used by the model to choose when and how to call the function.\n   */\n  description: string;\n  /**\n   * The name of the function to be called. Will default to function.name if omitted.\n   */\n  name?: string | undefined;\n};\n\nexport type RunnableFunction<Args extends object | string> =\n  Args extends string ? RunnableFunctionWithoutParse\n  : Args extends object ? RunnableFunctionWithParse<Args>\n  : never;\n\nexport type RunnableToolFunction<Args extends object | string> =\n  Args extends string ? RunnableToolFunctionWithoutParse\n  : Args extends object ? RunnableToolFunctionWithParse<Args>\n  : never;\n\nexport type RunnableToolFunctionWithoutParse = {\n  type: 'function';\n  function: RunnableFunctionWithoutParse;\n};\nexport type RunnableToolFunctionWithParse<Args extends object> = {\n  type: 'function';\n  function: RunnableFunctionWithParse<Args>;\n};\n\nexport function isRunnableFunctionWithParse<Args extends object>(\n  fn: any,\n): fn is RunnableFunctionWithParse<Args> {\n  return typeof (fn as any).parse === 'function';\n}\n\nexport type BaseFunctionsArgs = readonly (object | string)[];\n\nexport type RunnableFunctions<FunctionsArgs extends BaseFunctionsArgs> =\n  [any[]] extends [FunctionsArgs] ? readonly RunnableFunction<any>[]\n  : {\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableFunction<FunctionsArgs[Index]>\n      : FunctionsArgs[Index];\n    };\n\nexport type RunnableTools<FunctionsArgs extends BaseFunctionsArgs> =\n  [any[]] extends [FunctionsArgs] ? readonly RunnableToolFunction<any>[]\n  : {\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableToolFunction<FunctionsArgs[Index]>\n      : FunctionsArgs[Index];\n    };\n\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */\nexport class ParsingFunction<Args extends object> {\n  function: RunnableFunctionWithParse<Args>['function'];\n  parse: RunnableFunctionWithParse<Args>['parse'];\n  parameters: RunnableFunctionWithParse<Args>['parameters'];\n  description: RunnableFunctionWithParse<Args>['description'];\n  name?: RunnableFunctionWithParse<Args>['name'];\n\n  constructor(input: RunnableFunctionWithParse<Args>) {\n    this.function = input.function;\n    this.parse = input.parse;\n    this.parameters = input.parameters;\n    this.description = input.description;\n    this.name = input.name;\n  }\n}\n\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction<Args extends object> {\n  type: 'function';\n  function: RunnableFunctionWithParse<Args>;\n\n  constructor(input: RunnableFunctionWithParse<Args>) {\n    this.type = 'function';\n    this.function = input;\n  }\n}\n","import {\n  type ChatCompletionAssistantMessageParam,\n  type ChatCompletionFunctionMessageParam,\n  type ChatCompletionMessageParam,\n  type ChatCompletionToolMessageParam,\n} from \"../resources\";\n\nexport const isAssistantMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionAssistantMessageParam => {\n  return message?.role === 'assistant';\n};\n\nexport const isFunctionMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionFunctionMessageParam => {\n  return message?.role === 'function';\n};\n\nexport const isToolMessage = (\n  message: ChatCompletionMessageParam | null | undefined,\n): message is ChatCompletionToolMessageParam => {\n  return message?.role === 'tool';\n};\n\nexport function isPresent<T>(obj: T | null | undefined): obj is T {\n  return obj != null;\n}\n","import * as Core from \"../core\";\nimport { type CompletionUsage } from \"../resources/completions\";\nimport {\n  type Completions,\n  type ChatCompletion,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParams,\n  type ChatCompletionTool,\n} from \"../resources/chat/completions\";\nimport { APIUserAbortError, OpenAIError } from \"../error\";\nimport {\n  type RunnableFunction,\n  isRunnableFunctionWithParse,\n  type BaseFunctionsArgs,\n} from './RunnableFunction';\nimport { ChatCompletionFunctionRunnerParams, ChatCompletionToolRunnerParams } from './ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingFunctionRunnerParams,\n  ChatCompletionStreamingToolRunnerParams,\n} from './ChatCompletionStreamingRunner';\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from './chatCompletionUtils';\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport interface RunnerOptions extends Core.RequestOptions {\n  /** How many requests to make before canceling. Default 10. */\n  maxChatCompletions?: number;\n}\n\nexport abstract class AbstractChatCompletionRunner<\n  Events extends CustomEvents<any> = AbstractChatCompletionRunnerEvents,\n> {\n  controller: AbortController = new AbortController();\n\n  #connectedPromise: Promise<void>;\n  #resolveConnectedPromise: () => void = () => {};\n  #rejectConnectedPromise: (error: OpenAIError) => void = () => {};\n\n  #endPromise: Promise<void>;\n  #resolveEndPromise: () => void = () => {};\n  #rejectEndPromise: (error: OpenAIError) => void = () => {};\n\n  #listeners: { [Event in keyof Events]?: ListenersForEvent<Events, Event> } = {};\n\n  protected _chatCompletions: ChatCompletion[] = [];\n  messages: ChatCompletionMessageParam[] = [];\n\n  #ended = false;\n  #errored = false;\n  #aborted = false;\n  #catchingPromiseCreated = false;\n\n  constructor() {\n    this.#connectedPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveConnectedPromise = resolve;\n      this.#rejectConnectedPromise = reject;\n    });\n\n    this.#endPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveEndPromise = resolve;\n      this.#rejectEndPromise = reject;\n    });\n\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    this.#connectedPromise.catch(() => {});\n    this.#endPromise.catch(() => {});\n  }\n\n  protected _run(executor: () => Promise<any>) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, this.#handleError);\n    }, 0);\n  }\n\n  protected _addChatCompletion(chatCompletion: ChatCompletion): ChatCompletion {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message as ChatCompletionMessageParam);\n    return chatCompletion;\n  }\n\n  protected _addMessage(message: ChatCompletionMessageParam, emit = true) {\n    if (!('content' in message)) message.content = null;\n\n    this.messages.push(message);\n\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content as string);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n\n  protected _connected() {\n    if (this.ended) return;\n    this.#resolveConnectedPromise();\n    this._emit('connect');\n  }\n\n  get ended(): boolean {\n    return this.#ended;\n  }\n\n  get errored(): boolean {\n    return this.#errored;\n  }\n\n  get aborted(): boolean {\n    return this.#aborted;\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener });\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners = this.#listeners[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex((l) => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener, once: true });\n    return this;\n  }\n\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted<Event extends keyof Events>(\n    event: Event,\n  ): Promise<\n    EventParameters<Events, Event> extends [infer Param] ? Param\n    : EventParameters<Events, Event> extends [] ? void\n    : EventParameters<Events, Event>\n  > {\n    return new Promise((resolve, reject) => {\n      this.#catchingPromiseCreated = true;\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve as any);\n    });\n  }\n\n  async done(): Promise<void> {\n    this.#catchingPromiseCreated = true;\n    await this.#endPromise;\n  }\n\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion(): Promise<ChatCompletion> {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n\n  #getFinalContent(): string | null {\n    return this.#getFinalMessage().content ?? null;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent(): Promise<string | null> {\n    await this.done();\n    return this.#getFinalContent();\n  }\n\n  #getFinalMessage(): ChatCompletionMessage {\n    let i = this.messages.length;\n    while (i-- > 0) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message)) {\n        return { ...message, content: message.content ?? null };\n      }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage(): Promise<ChatCompletionMessage> {\n    await this.done();\n    return this.#getFinalMessage();\n  }\n\n  #getFinalFunctionCall(): ChatCompletionMessage.FunctionCall | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message) && message?.function_call) {\n        return message.function_call;\n      }\n      if (isAssistantMessage(message) && message?.tool_calls?.length) {\n        return message.tool_calls.at(-1)?.function;\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall(): Promise<ChatCompletionMessage.FunctionCall | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCall();\n  }\n\n  #getFinalFunctionCallResult(): string | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isFunctionMessage(message) && message.content != null) {\n        return message.content;\n      }\n      if (\n        isToolMessage(message) &&\n        message.content != null &&\n        this.messages.some(\n          (x) =>\n            x.role === 'assistant' &&\n            x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id),\n        )\n      ) {\n        return message.content;\n      }\n    }\n\n    return;\n  }\n\n  async finalFunctionCallResult(): Promise<string | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCallResult();\n  }\n\n  #calculateTotalUsage(): CompletionUsage {\n    const total: CompletionUsage = {\n      completion_tokens: 0,\n      prompt_tokens: 0,\n      total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n      if (usage) {\n        total.completion_tokens += usage.completion_tokens;\n        total.prompt_tokens += usage.prompt_tokens;\n        total.total_tokens += usage.total_tokens;\n      }\n    }\n    return total;\n  }\n\n  async totalUsage(): Promise<CompletionUsage> {\n    await this.done();\n    return this.#calculateTotalUsage();\n  }\n\n  allChatCompletions(): ChatCompletion[] {\n    return [...this._chatCompletions];\n  }\n\n  #handleError = (error: unknown) => {\n    this.#errored = true;\n    if (error instanceof Error && error.name === 'AbortError') {\n      error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n      this.#aborted = true;\n      return this._emit('abort', error);\n    }\n    if (error instanceof OpenAIError) {\n      return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n      const openAIError: OpenAIError = new OpenAIError(error.message);\n      // @ts-ignore\n      openAIError.cause = error;\n      return this._emit('error', openAIError);\n    }\n    return this._emit('error', new OpenAIError(String(error)));\n  };\n\n  protected _emit<Event extends keyof Events>(event: Event, ...args: EventParameters<Events, Event>) {\n    // make sure we don't emit any events after end\n    if (this.#ended) {\n      return;\n    }\n\n    if (event === 'end') {\n      this.#ended = true;\n      this.#resolveEndPromise();\n    }\n\n    const listeners: ListenersForEvent<Events, Event> | undefined = this.#listeners[event];\n    if (listeners) {\n      this.#listeners[event] = listeners.filter((l) => !l.once) as any;\n      listeners.forEach(({ listener }: any) => listener(...args));\n    }\n\n    if (event === 'abort') {\n      const error = args[0] as APIUserAbortError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n      return;\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n\n      const error = args[0] as OpenAIError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n    }\n  }\n\n  protected _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.#getFinalMessage();\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = this.#getFinalContent();\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = this.#getFinalFunctionCall();\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = this.#getFinalFunctionCallResult();\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some((c) => c.usage)) {\n      this._emit('totalUsage', this.#calculateTotalUsage());\n    }\n  }\n\n  #validateParams(params: ChatCompletionCreateParams): void {\n    if (params.n != null && params.n > 1) {\n      throw new OpenAIError(\n        'ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.',\n      );\n    }\n  }\n\n  protected async _createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#validateParams(params);\n\n    const chatCompletion = await completions.create(\n      { ...params, stream: false },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    return this._addChatCompletion(chatCompletion);\n  }\n\n  protected async _runChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(completions, params, options);\n  }\n\n  protected async _runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    completions: Completions,\n    params:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'function' as const;\n    const { function_call = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions: ChatCompletionCreateParams.Function[] = params.functions.map(\n      (f): ChatCompletionCreateParams.Function => ({\n        name: f.name || f.function.name,\n        parameters: f.parameters as Record<string, unknown>,\n        description: f.description,\n      }),\n    );\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        completions,\n        {\n          ...restParams,\n          function_call,\n          functions,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const { name, arguments: args } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n          .map((f) => JSON.stringify(f.name))\n          .join(', ')}. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(\n          singleFunctionToCall,\n        )} requested. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      }\n\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error),\n        });\n        continue;\n      }\n\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = this.#stringifyFunctionCallResult(rawContent);\n\n      this._addMessage({ role, name, content });\n\n      if (singleFunctionToCall) return;\n    }\n  }\n\n  protected async _runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    completions: Completions,\n    params:\n      | ChatCompletionToolRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'tool' as const;\n    const { tool_choice = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.tools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n\n    const tools: ChatCompletionTool[] =\n      'tools' in params ?\n        params.tools.map((t) =>\n          t.type === 'function' ?\n            {\n              type: 'function',\n              function: {\n                name: t.function.name || t.function.function.name,\n                parameters: t.function.parameters as Record<string, unknown>,\n                description: t.function.description,\n              },\n            }\n          : (t as unknown as ChatCompletionTool),\n        )\n      : (undefined as any);\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        completions,\n        {\n          ...restParams,\n          tool_choice,\n          tools,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls) {\n        return;\n      }\n\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const { name, arguments: args } = tool_call.function;\n        const fn = functionsByName[name];\n\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools\n            .map((f) => JSON.stringify(f.function.name))\n            .join(', ')}. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(\n            singleFunctionToCall,\n          )} requested. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = this.#stringifyFunctionCallResult(rawContent);\n        this._addMessage({ role, tool_call_id, content });\n\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n\n    return;\n  }\n\n  #stringifyFunctionCallResult(rawContent: unknown): string {\n    return (\n      typeof rawContent === 'string' ? rawContent\n      : rawContent === undefined ? 'undefined'\n      : JSON.stringify(rawContent)\n    );\n  }\n}\n\ntype CustomEvents<Event extends string> = {\n  [k in Event]: k extends keyof AbstractChatCompletionRunnerEvents ? AbstractChatCompletionRunnerEvents[k]\n  : (...args: any[]) => void;\n};\n\ntype ListenerForEvent<Events extends CustomEvents<any>, Event extends keyof Events> = Event extends (\n  keyof AbstractChatCompletionRunnerEvents\n) ?\n  AbstractChatCompletionRunnerEvents[Event]\n: Events[Event];\n\ntype ListenersForEvent<Events extends CustomEvents<any>, Event extends keyof Events> = Array<{\n  listener: ListenerForEvent<Events, Event>;\n  once?: boolean;\n}>;\ntype EventParameters<Events extends CustomEvents<any>, Event extends keyof Events> = Parameters<\n  ListenerForEvent<Events, Event>\n>;\n\nexport interface AbstractChatCompletionRunnerEvents {\n  connect: () => void;\n  functionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  message: (message: ChatCompletionMessageParam) => void;\n  chatCompletion: (completion: ChatCompletion) => void;\n  finalContent: (contentSnapshot: string) => void;\n  finalMessage: (message: ChatCompletionMessageParam) => void;\n  finalChatCompletion: (completion: ChatCompletion) => void;\n  finalFunctionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  functionCallResult: (content: string) => void;\n  finalFunctionCallResult: (content: string) => void;\n  error: (error: OpenAIError) => void;\n  abort: (error: APIUserAbortError) => void;\n  end: () => void;\n  totalUsage: (usage: CompletionUsage) => void;\n}\n","import {\n  type Completions,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParamsNonStreaming,\n} from \"../resources/chat/completions\";\nimport { type RunnableFunctions, type BaseFunctionsArgs, RunnableTools } from './RunnableFunction';\nimport {\n  AbstractChatCompletionRunner,\n  AbstractChatCompletionRunnerEvents,\n  RunnerOptions,\n} from './AbstractChatCompletionRunner';\nimport { isAssistantMessage } from './chatCompletionUtils';\n\nexport interface ChatCompletionRunnerEvents extends AbstractChatCompletionRunnerEvents {\n  content: (content: string) => void;\n}\n\nexport type ChatCompletionFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs>;\n};\n\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner<ChatCompletionRunnerEvents> {\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(\n    completions: Completions,\n    params: ChatCompletionFunctionRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(completions, params, opts));\n    return runner;\n  }\n\n  static runTools(\n    completions: Completions,\n    params: ChatCompletionToolRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(completions, params, opts));\n    return runner;\n  }\n\n  override _addMessage(message: ChatCompletionMessageParam) {\n    super._addMessage(message);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content as string);\n    }\n  }\n}\n","import * as Core from \"../core\";\nimport { OpenAIError, APIUserAbortError } from \"../error\";\nimport {\n  Completions,\n  type ChatCompletion,\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParams,\n  type ChatCompletionCreateParamsBase,\n} from \"../resources/chat/completions\";\nimport {\n  AbstractChatCompletionRunner,\n  type AbstractChatCompletionRunnerEvents,\n} from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from \"../_shims/index\";\nimport { Stream } from \"../streaming\";\n\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n}\n\nexport type ChatCompletionStreamParams = Omit<ChatCompletionCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class ChatCompletionStream\n  extends AbstractChatCompletionRunner<ChatCompletionStreamEvents>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  #currentChatCompletionSnapshot: ChatCompletionSnapshot | undefined;\n\n  get currentChatCompletionSnapshot(): ChatCompletionSnapshot | undefined {\n    return this.#currentChatCompletionSnapshot;\n  }\n\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream: ReadableStream): ChatCompletionStream {\n    const runner = new ChatCompletionStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  static createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionStreamParams,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream {\n    const runner = new ChatCompletionStream();\n    runner._run(() =>\n      runner._runChatCompletion(\n        completions,\n        { ...params, stream: true },\n        { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } },\n      ),\n    );\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentChatCompletionSnapshot = undefined;\n  }\n  #addChunk(chunk: ChatCompletionChunk) {\n    if (this.ended) return;\n    const completion = this.#accumulateChatCompletion(chunk);\n    this._emit('chunk', chunk, completion);\n    const delta = chunk.choices[0]?.delta?.content;\n    const snapshot = completion.choices[0]?.message;\n    if (delta != null && snapshot?.role === 'assistant' && snapshot?.content) {\n      this._emit('content', delta, snapshot.content);\n    }\n  }\n  #endRequest(): ChatCompletion {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentChatCompletionSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n    this.#currentChatCompletionSnapshot = undefined;\n    return finalizeChatCompletion(snapshot);\n  }\n\n  protected override async _createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    const stream = await completions.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const chunk of stream) {\n      this.#addChunk(chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    this._connected();\n    const stream = Stream.fromReadableStream<ChatCompletionChunk>(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(this.#endRequest());\n      }\n\n      this.#addChunk(chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  #accumulateChatCompletion(chunk: ChatCompletionChunk): ChatCompletionSnapshot {\n    let snapshot = this.#currentChatCompletionSnapshot;\n    const { choices, ...rest } = chunk;\n    if (!snapshot) {\n      snapshot = this.#currentChatCompletionSnapshot = {\n        ...rest,\n        choices: [],\n      };\n    } else {\n      Object.assign(snapshot, rest);\n    }\n\n    for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n      }\n\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const { content, ...rest } = logprobs;\n          Object.assign(choice.logprobs, rest);\n          if (content) {\n            choice.logprobs.content ??= [];\n            choice.logprobs.content.push(...content);\n          }\n        }\n      }\n\n      if (finish_reason) choice.finish_reason = finish_reason;\n      Object.assign(choice, other);\n\n      if (!delta) continue; // Shouldn't happen; just in case.\n      const { content, function_call, role, tool_calls, ...rest } = delta;\n      Object.assign(choice.message, rest);\n\n      if (content) choice.message.content = (choice.message.content || '') + content;\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            choice.message.function_call.arguments ??= '';\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n        for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n          const tool_call = (choice.message.tool_calls[index] ??= {});\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) tool_call.function ??= { arguments: '' };\n          if (fn?.name) tool_call.function!.name = fn.name;\n          if (fn?.arguments) tool_call.function!.arguments += fn.arguments;\n        }\n      }\n    }\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<ChatCompletionChunk> {\n    const pushQueue: ChatCompletionChunk[] = [];\n    const readQueue: ((chunk: ChatCompletionChunk | undefined) => void)[] = [];\n    let done = false;\n\n    this.on('chunk', (chunk) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ChatCompletionChunk>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ChatCompletionChunk | undefined>((resolve) => readQueue.push(resolve)).then(\n            (chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }),\n          );\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n    };\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\n\nfunction finalizeChatCompletion(snapshot: ChatCompletionSnapshot): ChatCompletion {\n  const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n  return {\n    ...rest,\n    id,\n    choices: choices.map(\n      ({ message, finish_reason, index, logprobs, ...choiceRest }): ChatCompletion.Choice => {\n        if (!finish_reason) throw new OpenAIError(`missing finish_reason for choice ${index}`);\n        const { content = null, function_call, tool_calls, ...messageRest } = message;\n        const role = message.role as 'assistant'; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n        if (!role) throw new OpenAIError(`missing role for choice ${index}`);\n        if (function_call) {\n          const { arguments: args, name } = function_call;\n          if (args == null) throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n          if (!name) throw new OpenAIError(`missing function_call.name for choice ${index}`);\n          return {\n            ...choiceRest,\n            message: { content, function_call: { arguments: args, name }, role },\n            finish_reason,\n            index,\n            logprobs,\n          };\n        }\n        if (tool_calls) {\n          return {\n            ...choiceRest,\n            index,\n            finish_reason,\n            logprobs,\n            message: {\n              ...messageRest,\n              role,\n              content,\n              tool_calls: tool_calls.map((tool_call, i) => {\n                const { function: fn, type, id, ...toolRest } = tool_call;\n                const { arguments: args, name, ...fnRest } = fn || {};\n                if (id == null)\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                if (type == null)\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                if (name == null)\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`,\n                  );\n                if (args == null)\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`,\n                  );\n\n                return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n              }),\n            },\n          };\n        }\n        return {\n          ...choiceRest,\n          message: { ...messageRest, content, role },\n          finish_reason,\n          index,\n          logprobs,\n        };\n      },\n    ),\n    created,\n    model,\n    object: 'chat.completion',\n    ...(system_fingerprint ? { system_fingerprint } : {}),\n  };\n}\n\nfunction str(x: unknown) {\n  return JSON.stringify(x);\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionSnapshot {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionSnapshot.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  // Note we do not include an \"object\" type on the snapshot,\n  // because the object is not a valid \"chat.completion\" until finalized.\n  // object: 'chat.completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n}\n\nexport namespace ChatCompletionSnapshot {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    message: Choice.Message;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: ChatCompletion.Choice['finish_reason'] | null;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs: ChatCompletion.Choice.Logprobs | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Message {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      function_call?: Message.FunctionCall;\n\n      tool_calls?: Array<Message.ToolCall>;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: 'system' | 'user' | 'assistant' | 'function' | 'tool';\n    }\n\n    export namespace Message {\n      export interface ToolCall {\n        /**\n         * The ID of the tool call.\n         */\n        id?: string;\n\n        function?: ToolCall.Function;\n\n        /**\n         * The type of the tool.\n         */\n        type?: 'function';\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          /**\n           * The arguments to call the function with, as generated by the model in JSON\n           * format. Note that the model does not always generate valid JSON, and may\n           * hallucinate parameters not defined by your function schema. Validate the\n           * arguments in your code before calling your function.\n           */\n          arguments?: string;\n\n          /**\n           * The name of the function to call.\n           */\n          name?: string;\n        }\n      }\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n    }\n  }\n}\n","import {\n  Completions,\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParamsStreaming,\n} from \"../resources/chat/completions\";\nimport { RunnerOptions, type AbstractChatCompletionRunnerEvents } from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from \"../_shims/index\";\nimport { RunnableTools, type BaseFunctionsArgs, type RunnableFunctions } from './RunnableFunction';\nimport { ChatCompletionSnapshot, ChatCompletionStream } from './ChatCompletionStream';\n\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n}\n\nexport type ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionStreamingToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs>;\n};\n\nexport class ChatCompletionStreamingRunner\n  extends ChatCompletionStream\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  static override fromReadableStream(stream: ReadableStream): ChatCompletionStreamingRunner {\n    const runner = new ChatCompletionStreamingRunner();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions<T extends (string | object)[]>(\n    completions: Completions,\n    params: ChatCompletionStreamingFunctionRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner {\n    const runner = new ChatCompletionStreamingRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(completions, params, opts));\n    return runner;\n  }\n\n  static runTools<T extends (string | object)[]>(\n    completions: Completions,\n    params: ChatCompletionStreamingToolRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner {\n    const runner = new ChatCompletionStreamingRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(completions, params, opts));\n    return runner;\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from \"../../../lib/ChatCompletionRunner\";\nexport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from \"../../../lib/ChatCompletionRunner\";\nimport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from \"../../../lib/ChatCompletionStreamingRunner\";\nexport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from \"../../../lib/ChatCompletionStreamingRunner\";\nimport { BaseFunctionsArgs } from \"../../../lib/RunnableFunction\";\nexport {\n  RunnableFunction,\n  RunnableFunctions,\n  RunnableFunctionWithParse,\n  RunnableFunctionWithoutParse,\n  ParsingFunction,\n  ParsingToolFunction,\n} from \"../../../lib/RunnableFunction\";\nimport { ChatCompletionToolRunnerParams } from \"../../../lib/ChatCompletionRunner\";\nexport { ChatCompletionToolRunnerParams } from \"../../../lib/ChatCompletionRunner\";\nimport { ChatCompletionStreamingToolRunnerParams } from \"../../../lib/ChatCompletionStreamingRunner\";\nexport { ChatCompletionStreamingToolRunnerParams } from \"../../../lib/ChatCompletionStreamingRunner\";\nimport { ChatCompletionStream, type ChatCompletionStreamParams } from \"../../../lib/ChatCompletionStream\";\nexport { ChatCompletionStream, type ChatCompletionStreamParams } from \"../../../lib/ChatCompletionStream\";\n\nexport class Completions extends APIResource {\n  /**\n   * @deprecated - use `runTools` instead.\n   */\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStreamingRunner;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner | ChatCompletionStreamingRunner {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runFunctions(\n        this._client.chat.completions,\n        body as ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n        options,\n      );\n    }\n    return ChatCompletionRunner.runFunctions(\n      this._client.chat.completions,\n      body as ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n      options,\n    );\n  }\n\n  /**\n   * A convenience helper for using tool calls with the /chat/completions endpoint\n   * which automatically calls the JavaScript functions you provide and sends their\n   * results back to the /chat/completions endpoint, looping as long as the model\n   * requests function calls.\n   *\n   * For more details and examples, see\n   * [the docs](https://github.com/openai/openai-node#automated-function-calls)\n   */\n  runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionToolRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner;\n  runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStreamingRunner;\n  runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    body:\n      | ChatCompletionToolRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner | ChatCompletionStreamingRunner {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runTools(\n        this._client.chat.completions,\n        body as ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n        options,\n      );\n    }\n    return ChatCompletionRunner.runTools(\n      this._client.chat.completions,\n      body as ChatCompletionToolRunnerParams<FunctionsArgs>,\n      options,\n    );\n  }\n\n  /**\n   * Creates a chat completion stream\n   */\n  stream(body: ChatCompletionStreamParams, options?: Core.RequestOptions): ChatCompletionStream {\n    return ChatCompletionStream.createChatCompletion(this._client.chat.completions, body, options);\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../../resource\";\nimport * as CompletionsAPI from \"./completions\";\n\nexport class Chat extends APIResource {\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\n}\n\nexport namespace Chat {\n  export import Completions = CompletionsAPI.Completions;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Files extends APIResource {\n  /**\n   * Retrieves a message file.\n   */\n  retrieve(\n    threadId: string,\n    messageId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<MessageFile> {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of message files.\n   */\n  list(\n    threadId: string,\n    messageId: string,\n    query?: FileListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<MessageFilesPage, MessageFile>;\n  list(\n    threadId: string,\n    messageId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<MessageFilesPage, MessageFile>;\n  list(\n    threadId: string,\n    messageId: string,\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<MessageFilesPage, MessageFile> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, messageId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages/${messageId}/files`, MessageFilesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class MessageFilesPage extends CursorPage<MessageFile> {}\n\n/**\n * A list of files attached to a `message`.\n */\nexport interface MessageFile {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message file was created.\n   */\n  created_at: number;\n\n  /**\n   * The ID of the [message](https://platform.openai.com/docs/api-reference/messages)\n   * that the [File](https://platform.openai.com/docs/api-reference/files) is\n   * attached to.\n   */\n  message_id: string;\n\n  /**\n   * The object type, which is always `thread.message.file`.\n   */\n  object: 'thread.message.file';\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Files {\n  export import MessageFile = FilesAPI.MessageFile;\n  export import MessageFilesPage = FilesAPI.MessageFilesPage;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as MessagesAPI from \"./messages\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Messages extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this._client);\n\n  /**\n   * Create a message.\n   */\n  create(\n    threadId: string,\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this._client.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieve a message.\n   */\n  retrieve(\n    threadId: string,\n    messageId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a message.\n   */\n  update(\n    threadId: string,\n    messageId: string,\n    body: MessageUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of messages for a given thread.\n   */\n  list(\n    threadId: string,\n    query?: MessageListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ThreadMessagesPage, ThreadMessage>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<ThreadMessagesPage, ThreadMessage>;\n  list(\n    threadId: string,\n    query: MessageListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ThreadMessagesPage, ThreadMessage> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class ThreadMessagesPage extends CursorPage<ThreadMessage> {}\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport interface MessageContentImageFile {\n  image_file: MessageContentImageFile.ImageFile;\n\n  /**\n   * Always `image_file`.\n   */\n  type: 'image_file';\n}\n\nexport namespace MessageContentImageFile {\n  export interface ImageFile {\n    /**\n     * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n     * in the message content.\n     */\n    file_id: string;\n  }\n}\n\n/**\n * The text content that is part of a message.\n */\nexport interface MessageContentText {\n  text: MessageContentText.Text;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n}\n\nexport namespace MessageContentText {\n  export interface Text {\n    annotations: Array<Text.FileCitation | Text.FilePath>;\n\n    /**\n     * The data that makes up the text.\n     */\n    value: string;\n  }\n\n  export namespace Text {\n    /**\n     * A citation within the message that points to a specific quote from a specific\n     * File associated with the assistant or the message. Generated when the assistant\n     * uses the \"retrieval\" tool to search files.\n     */\n    export interface FileCitation {\n      end_index: number;\n\n      file_citation: FileCitation.FileCitation;\n\n      start_index: number;\n\n      /**\n       * The text in the message content that needs to be replaced.\n       */\n      text: string;\n\n      /**\n       * Always `file_citation`.\n       */\n      type: 'file_citation';\n    }\n\n    export namespace FileCitation {\n      export interface FileCitation {\n        /**\n         * The ID of the specific File the citation is from.\n         */\n        file_id: string;\n\n        /**\n         * The specific quote in the file.\n         */\n        quote: string;\n      }\n    }\n\n    /**\n     * A URL for the file that's generated when the assistant used the\n     * `code_interpreter` tool to generate a file.\n     */\n    export interface FilePath {\n      end_index: number;\n\n      file_path: FilePath.FilePath;\n\n      start_index: number;\n\n      /**\n       * The text in the message content that needs to be replaced.\n       */\n      text: string;\n\n      /**\n       * Always `file_path`.\n       */\n      type: 'file_path';\n    }\n\n    export namespace FilePath {\n      export interface FilePath {\n        /**\n         * The ID of the file that was generated.\n         */\n        file_id: string;\n      }\n    }\n  }\n}\n\n/**\n * Represents a message within a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface ThreadMessage {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * If applicable, the ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) that\n   * authored this message.\n   */\n  assistant_id: string | null;\n\n  /**\n   * The content of the message in array of text and/or images.\n   */\n  content: Array<MessageContentImageFile | MessageContentText>;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message was created.\n   */\n  created_at: number;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the assistant should use. Useful for tools like retrieval and code_interpreter\n   * that can access files. A maximum of 10 files can be attached to a message.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread.message`.\n   */\n  object: 'thread.message';\n\n  /**\n   * The entity that produced the message. One of `user` or `assistant`.\n   */\n  role: 'user' | 'assistant';\n\n  /**\n   * If applicable, the ID of the\n   * [run](https://platform.openai.com/docs/api-reference/runs) associated with the\n   * authoring of this message.\n   */\n  run_id: string | null;\n\n  /**\n   * The [thread](https://platform.openai.com/docs/api-reference/threads) ID that\n   * this message belongs to.\n   */\n  thread_id: string;\n}\n\nexport interface ThreadMessageDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.message.deleted';\n}\n\nexport interface MessageCreateParams {\n  /**\n   * The content of the message.\n   */\n  content: string;\n\n  /**\n   * The role of the entity that is creating the message. Currently only `user` is\n   * supported.\n   */\n  role: 'user';\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the message should use. There can be a maximum of 10 files attached to a\n   * message. Useful for tools like `retrieval` and `code_interpreter` that can\n   * access and use files.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface MessageUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface MessageListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Messages {\n  export import MessageContentImageFile = MessagesAPI.MessageContentImageFile;\n  export import MessageContentText = MessagesAPI.MessageContentText;\n  export import ThreadMessage = MessagesAPI.ThreadMessage;\n  export import ThreadMessageDeleted = MessagesAPI.ThreadMessageDeleted;\n  export import ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageUpdateParams = MessagesAPI.MessageUpdateParams;\n  export import MessageListParams = MessagesAPI.MessageListParams;\n  export import Files = FilesAPI.Files;\n  export import MessageFile = FilesAPI.MessageFile;\n  export import MessageFilesPage = FilesAPI.MessageFilesPage;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as StepsAPI from \"./steps\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Steps extends APIResource {\n  /**\n   * Retrieves a run step.\n   */\n  retrieve(\n    threadId: string,\n    runId: string,\n    stepId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<RunStep> {\n    return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of run steps belonging to a run.\n   */\n  list(\n    threadId: string,\n    runId: string,\n    query?: StepListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep>;\n  list(\n    threadId: string,\n    runId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep>;\n  list(\n    threadId: string,\n    runId: string,\n    query: StepListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunStepsPage, RunStep> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, runId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class RunStepsPage extends CursorPage<RunStep> {}\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n */\nexport interface CodeToolCall {\n  /**\n   * The ID of the tool call.\n   */\n  id: string;\n\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  code_interpreter: CodeToolCall.CodeInterpreter;\n\n  /**\n   * The type of tool call. This is always going to be `code_interpreter` for this\n   * type of tool call.\n   */\n  type: 'code_interpreter';\n}\n\nexport namespace CodeToolCall {\n  /**\n   * The Code Interpreter tool call definition.\n   */\n  export interface CodeInterpreter {\n    /**\n     * The input to the Code Interpreter tool call.\n     */\n    input: string;\n\n    /**\n     * The outputs from the Code Interpreter tool call. Code Interpreter can output one\n     * or more items, including text (`logs`) or images (`image`). Each of these are\n     * represented by a different object type.\n     */\n    outputs: Array<CodeInterpreter.Logs | CodeInterpreter.Image>;\n  }\n\n  export namespace CodeInterpreter {\n    /**\n     * Text output from the Code Interpreter tool call as part of a run step.\n     */\n    export interface Logs {\n      /**\n       * The text output from the Code Interpreter tool call.\n       */\n      logs: string;\n\n      /**\n       * Always `logs`.\n       */\n      type: 'logs';\n    }\n\n    export interface Image {\n      image: Image.Image;\n\n      /**\n       * Always `image`.\n       */\n      type: 'image';\n    }\n\n    export namespace Image {\n      export interface Image {\n        /**\n         * The [file](https://platform.openai.com/docs/api-reference/files) ID of the\n         * image.\n         */\n        file_id: string;\n      }\n    }\n  }\n}\n\nexport interface FunctionToolCall {\n  /**\n   * The ID of the tool call object.\n   */\n  id: string;\n\n  /**\n   * The definition of the function that was called.\n   */\n  function: FunctionToolCall.Function;\n\n  /**\n   * The type of tool call. This is always going to be `function` for this type of\n   * tool call.\n   */\n  type: 'function';\n}\n\nexport namespace FunctionToolCall {\n  /**\n   * The definition of the function that was called.\n   */\n  export interface Function {\n    /**\n     * The arguments passed to the function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function.\n     */\n    name: string;\n\n    /**\n     * The output of the function. This will be `null` if the outputs have not been\n     * [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n     * yet.\n     */\n    output: string | null;\n  }\n}\n\n/**\n * Details of the message creation by the run step.\n */\nexport interface MessageCreationStepDetails {\n  message_creation: MessageCreationStepDetails.MessageCreation;\n\n  /**\n   * Always `message_creation`.\n   */\n  type: 'message_creation';\n}\n\nexport namespace MessageCreationStepDetails {\n  export interface MessageCreation {\n    /**\n     * The ID of the message that was created by this run step.\n     */\n    message_id: string;\n  }\n}\n\nexport interface RetrievalToolCall {\n  /**\n   * The ID of the tool call object.\n   */\n  id: string;\n\n  /**\n   * For now, this is always going to be an empty object.\n   */\n  retrieval: unknown;\n\n  /**\n   * The type of tool call. This is always going to be `retrieval` for this type of\n   * tool call.\n   */\n  type: 'retrieval';\n}\n\n/**\n * Represents a step in execution of a run.\n */\nexport interface RunStep {\n  /**\n   * The identifier of the run step, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants)\n   * associated with the run step.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step was cancelled.\n   */\n  cancelled_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step expired. A step is\n   * considered expired if the parent run is expired.\n   */\n  expired_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run step failed.\n   */\n  failed_at: number | null;\n\n  /**\n   * The last error associated with this run step. Will be `null` if there are no\n   * errors.\n   */\n  last_error: RunStep.LastError | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread.run.step`.\n   */\n  object: 'thread.run.step';\n\n  /**\n   * The ID of the [run](https://platform.openai.com/docs/api-reference/runs) that\n   * this run step is a part of.\n   */\n  run_id: string;\n\n  /**\n   * The status of the run step, which can be either `in_progress`, `cancelled`,\n   * `failed`, `completed`, or `expired`.\n   */\n  status: 'in_progress' | 'cancelled' | 'failed' | 'completed' | 'expired';\n\n  /**\n   * The details of the run step.\n   */\n  step_details: MessageCreationStepDetails | ToolCallsStepDetails;\n\n  /**\n   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)\n   * that was run.\n   */\n  thread_id: string;\n\n  /**\n   * The type of run step, which can be either `message_creation` or `tool_calls`.\n   */\n  type: 'message_creation' | 'tool_calls';\n\n  /**\n   * Usage statistics related to the run step. This value will be `null` while the\n   * run step's status is `in_progress`.\n   */\n  usage: RunStep.Usage | null;\n}\n\nexport namespace RunStep {\n  /**\n   * The last error associated with this run step. Will be `null` if there are no\n   * errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'rate_limit_exceeded';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n\n  /**\n   * Usage statistics related to the run step. This value will be `null` while the\n   * run step's status is `in_progress`.\n   */\n  export interface Usage {\n    /**\n     * Number of completion tokens used over the course of the run step.\n     */\n    completion_tokens: number;\n\n    /**\n     * Number of prompt tokens used over the course of the run step.\n     */\n    prompt_tokens: number;\n\n    /**\n     * Total number of tokens used (prompt + completion).\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * Details of the tool call.\n */\nexport interface ToolCallsStepDetails {\n  /**\n   * An array of tool calls the run step was involved in. These can be associated\n   * with one of three types of tools: `code_interpreter`, `retrieval`, or\n   * `function`.\n   */\n  tool_calls: Array<CodeToolCall | RetrievalToolCall | FunctionToolCall>;\n\n  /**\n   * Always `tool_calls`.\n   */\n  type: 'tool_calls';\n}\n\nexport interface StepListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Steps {\n  export import CodeToolCall = StepsAPI.CodeToolCall;\n  export import FunctionToolCall = StepsAPI.FunctionToolCall;\n  export import MessageCreationStepDetails = StepsAPI.MessageCreationStepDetails;\n  export import RetrievalToolCall = StepsAPI.RetrievalToolCall;\n  export import RunStep = StepsAPI.RunStep;\n  export import ToolCallsStepDetails = StepsAPI.ToolCallsStepDetails;\n  export import RunStepsPage = StepsAPI.RunStepsPage;\n  export import StepListParams = StepsAPI.StepListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as RunsAPI from \"./runs\";\nimport * as Shared from \"../../../shared\";\nimport * as StepsAPI from \"./steps\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Runs extends APIResource {\n  steps: StepsAPI.Steps = new StepsAPI.Steps(this._client);\n\n  /**\n   * Create a run.\n   */\n  create(threadId: string, body: RunCreateParams, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a run.\n   */\n  retrieve(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a run.\n   */\n  update(\n    threadId: string,\n    runId: string,\n    body: RunUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of runs belonging to a thread.\n   */\n  list(\n    threadId: string,\n    query?: RunListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<RunsPage, Run>;\n  list(\n    threadId: string,\n    query: RunListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Cancels a run that is `in_progress`.\n   */\n  cancel(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * When a run has the `status: \"requires_action\"` and `required_action.type` is\n   * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n   * tool calls once they're all completed. All outputs must be submitted in a single\n   * request.\n   */\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class RunsPage extends CursorPage<Run> {}\n\n/**\n * Tool call objects\n */\nexport interface RequiredActionFunctionToolCall {\n  /**\n   * The ID of the tool call. This ID must be referenced when you submit the tool\n   * outputs in using the\n   * [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n   * endpoint.\n   */\n  id: string;\n\n  /**\n   * The function definition.\n   */\n  function: RequiredActionFunctionToolCall.Function;\n\n  /**\n   * The type of tool call the output is required for. For now, this is always\n   * `function`.\n   */\n  type: 'function';\n}\n\nexport namespace RequiredActionFunctionToolCall {\n  /**\n   * The function definition.\n   */\n  export interface Function {\n    /**\n     * The arguments that the model expects you to pass to the function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function.\n     */\n    name: string;\n  }\n}\n\n/**\n * Represents an execution run on a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface Run {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * execution of this run.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was cancelled.\n   */\n  cancelled_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run will expire.\n   */\n  expires_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run failed.\n   */\n  failed_at: number | null;\n\n  /**\n   * The list of [File](https://platform.openai.com/docs/api-reference/files) IDs the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * The instructions that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  instructions: string;\n\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  last_error: Run.LastError | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The model that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `thread.run`.\n   */\n  object: 'thread.run';\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  required_action: Run.RequiredAction | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was started.\n   */\n  started_at: number | null;\n\n  /**\n   * The status of the run, which can be either `queued`, `in_progress`,\n   * `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or\n   * `expired`.\n   */\n  status: RunStatus;\n\n  /**\n   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)\n   * that was executed on as a part of this run.\n   */\n  thread_id: string;\n\n  /**\n   * The list of tools that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  tools: Array<Run.AssistantToolsCode | Run.AssistantToolsRetrieval | Run.AssistantToolsFunction>;\n\n  /**\n   * Usage statistics related to the run. This value will be `null` if the run is not\n   * in a terminal state (i.e. `in_progress`, `queued`, etc.).\n   */\n  usage: Run.Usage | null;\n}\n\nexport namespace Run {\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'rate_limit_exceeded';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  export interface RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    submit_tool_outputs: RequiredAction.SubmitToolOutputs;\n\n    /**\n     * For now, this is always `submit_tool_outputs`.\n     */\n    type: 'submit_tool_outputs';\n  }\n\n  export namespace RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    export interface SubmitToolOutputs {\n      /**\n       * A list of the relevant tool calls.\n       */\n      tool_calls: Array<RunsAPI.RequiredActionFunctionToolCall>;\n    }\n  }\n\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n\n  /**\n   * Usage statistics related to the run. This value will be `null` if the run is not\n   * in a terminal state (i.e. `in_progress`, `queued`, etc.).\n   */\n  export interface Usage {\n    /**\n     * Number of completion tokens used over the course of the run.\n     */\n    completion_tokens: number;\n\n    /**\n     * Number of prompt tokens used over the course of the run.\n     */\n    prompt_tokens: number;\n\n    /**\n     * Total number of tokens used (prompt + completion).\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * The status of the run, which can be either `queued`, `in_progress`,\n * `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or\n * `expired`.\n */\nexport type RunStatus =\n  | 'queued'\n  | 'in_progress'\n  | 'requires_action'\n  | 'cancelling'\n  | 'cancelled'\n  | 'failed'\n  | 'completed'\n  | 'expired';\n\nexport interface RunCreateParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Appends additional instructions at the end of the instructions for the run. This\n   * is useful for modifying the behavior on a per-run basis without overriding other\n   * instructions.\n   */\n  additional_instructions?: string | null;\n\n  /**\n   * Overrides the\n   * [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant)\n   * of the assistant. This is useful for modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: string | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    | RunCreateParams.AssistantToolsCode\n    | RunCreateParams.AssistantToolsRetrieval\n    | RunCreateParams.AssistantToolsFunction\n  > | null;\n}\n\nexport namespace RunCreateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface RunUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface RunListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport interface RunSubmitToolOutputsParams {\n  /**\n   * A list of tools for which the outputs are being submitted.\n   */\n  tool_outputs: Array<RunSubmitToolOutputsParams.ToolOutput>;\n}\n\nexport namespace RunSubmitToolOutputsParams {\n  export interface ToolOutput {\n    /**\n     * The output of the tool call to be submitted to continue the run.\n     */\n    output?: string;\n\n    /**\n     * The ID of the tool call in the `required_action` object within the run object\n     * the output is being submitted for.\n     */\n    tool_call_id?: string;\n  }\n}\n\nexport namespace Runs {\n  export import RequiredActionFunctionToolCall = RunsAPI.RequiredActionFunctionToolCall;\n  export import Run = RunsAPI.Run;\n  export import RunStatus = RunsAPI.RunStatus;\n  export import RunsPage = RunsAPI.RunsPage;\n  export import RunCreateParams = RunsAPI.RunCreateParams;\n  export import RunUpdateParams = RunsAPI.RunUpdateParams;\n  export import RunListParams = RunsAPI.RunListParams;\n  export import RunSubmitToolOutputsParams = RunsAPI.RunSubmitToolOutputsParams;\n  export import Steps = StepsAPI.Steps;\n  export import CodeToolCall = StepsAPI.CodeToolCall;\n  export import FunctionToolCall = StepsAPI.FunctionToolCall;\n  export import MessageCreationStepDetails = StepsAPI.MessageCreationStepDetails;\n  export import RetrievalToolCall = StepsAPI.RetrievalToolCall;\n  export import RunStep = StepsAPI.RunStep;\n  export import ToolCallsStepDetails = StepsAPI.ToolCallsStepDetails;\n  export import RunStepsPage = StepsAPI.RunStepsPage;\n  export import StepListParams = StepsAPI.StepListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as ThreadsAPI from \"./threads\";\nimport * as Shared from \"../../shared\";\nimport * as MessagesAPI from \"./messages/messages\";\nimport * as RunsAPI from \"./runs/runs\";\n\nexport class Threads extends APIResource {\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this._client);\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this._client);\n\n  /**\n   * Create a thread.\n   */\n  create(body?: ThreadCreateParams, options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(\n    body: ThreadCreateParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Thread> {\n    if (isRequestOptions(body)) {\n      return this.create({}, body);\n    }\n    return this._client.post('/threads', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(threadId: string, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.get(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a thread.\n   */\n  update(threadId: string, body: ThreadUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a thread.\n   */\n  del(threadId: string, options?: Core.RequestOptions): Core.APIPromise<ThreadDeleted> {\n    return this._client.delete(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a thread and run it in one request.\n   */\n  createAndRun(body: ThreadCreateAndRunParams, options?: Core.RequestOptions): Core.APIPromise<RunsAPI.Run> {\n    return this._client.post('/threads/runs', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\n/**\n * Represents a thread that contains\n * [messages](https://platform.openai.com/docs/api-reference/messages).\n */\nexport interface Thread {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the thread was created.\n   */\n  created_at: number;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread`.\n   */\n  object: 'thread';\n}\n\nexport interface ThreadDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.deleted';\n}\n\nexport interface ThreadCreateParams {\n  /**\n   * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n   * start the thread with.\n   */\n  messages?: Array<ThreadCreateParams.Message>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport namespace ThreadCreateParams {\n  export interface Message {\n    /**\n     * The content of the message.\n     */\n    content: string;\n\n    /**\n     * The role of the entity that is creating the message. Currently only `user` is\n     * supported.\n     */\n    role: 'user';\n\n    /**\n     * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n     * the message should use. There can be a maximum of 10 files attached to a\n     * message. Useful for tools like `retrieval` and `code_interpreter` that can\n     * access and use files.\n     */\n    file_ids?: Array<string>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n}\n\nexport interface ThreadUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface ThreadCreateAndRunParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: string | null;\n\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunParams.Thread;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    | ThreadCreateAndRunParams.AssistantToolsCode\n    | ThreadCreateAndRunParams.AssistantToolsRetrieval\n    | ThreadCreateAndRunParams.AssistantToolsFunction\n  > | null;\n}\n\nexport namespace ThreadCreateAndRunParams {\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the entity that is creating the message. Currently only `user` is\n       * supported.\n       */\n      role: 'user';\n\n      /**\n       * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n       * the message should use. There can be a maximum of 10 files attached to a\n       * message. Useful for tools like `retrieval` and `code_interpreter` that can\n       * access and use files.\n       */\n      file_ids?: Array<string>;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format. Keys\n       * can be a maximum of 64 characters long and values can be a maxium of 512\n       * characters long.\n       */\n      metadata?: unknown | null;\n    }\n  }\n\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport namespace Threads {\n  export import Thread = ThreadsAPI.Thread;\n  export import ThreadDeleted = ThreadsAPI.ThreadDeleted;\n  export import ThreadCreateParams = ThreadsAPI.ThreadCreateParams;\n  export import ThreadUpdateParams = ThreadsAPI.ThreadUpdateParams;\n  export import ThreadCreateAndRunParams = ThreadsAPI.ThreadCreateAndRunParams;\n  export import Runs = RunsAPI.Runs;\n  export import RequiredActionFunctionToolCall = RunsAPI.RequiredActionFunctionToolCall;\n  export import Run = RunsAPI.Run;\n  export import RunStatus = RunsAPI.RunStatus;\n  export import RunsPage = RunsAPI.RunsPage;\n  export import RunCreateParams = RunsAPI.RunCreateParams;\n  export import RunUpdateParams = RunsAPI.RunUpdateParams;\n  export import RunListParams = RunsAPI.RunListParams;\n  export import RunSubmitToolOutputsParams = RunsAPI.RunSubmitToolOutputsParams;\n  export import Messages = MessagesAPI.Messages;\n  export import MessageContentImageFile = MessagesAPI.MessageContentImageFile;\n  export import MessageContentText = MessagesAPI.MessageContentText;\n  export import ThreadMessage = MessagesAPI.ThreadMessage;\n  export import ThreadMessageDeleted = MessagesAPI.ThreadMessageDeleted;\n  export import ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageUpdateParams = MessagesAPI.MessageUpdateParams;\n  export import MessageListParams = MessagesAPI.MessageListParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport * as AssistantsAPI from \"./assistants/assistants\";\nimport * as ChatAPI from \"./chat/chat\";\nimport * as ThreadsAPI from \"./threads/threads\";\n\nexport class Beta extends APIResource {\n  chat: ChatAPI.Chat = new ChatAPI.Chat(this._client);\n  assistants: AssistantsAPI.Assistants = new AssistantsAPI.Assistants(this._client);\n  threads: ThreadsAPI.Threads = new ThreadsAPI.Threads(this._client);\n}\n\nexport namespace Beta {\n  export import Chat = ChatAPI.Chat;\n  export import Assistants = AssistantsAPI.Assistants;\n  export import Assistant = AssistantsAPI.Assistant;\n  export import AssistantDeleted = AssistantsAPI.AssistantDeleted;\n  export import AssistantsPage = AssistantsAPI.AssistantsPage;\n  export import AssistantCreateParams = AssistantsAPI.AssistantCreateParams;\n  export import AssistantUpdateParams = AssistantsAPI.AssistantUpdateParams;\n  export import AssistantListParams = AssistantsAPI.AssistantListParams;\n  export import Threads = ThreadsAPI.Threads;\n  export import Thread = ThreadsAPI.Thread;\n  export import ThreadDeleted = ThreadsAPI.ThreadDeleted;\n  export import ThreadCreateParams = ThreadsAPI.ThreadCreateParams;\n  export import ThreadUpdateParams = ThreadsAPI.ThreadUpdateParams;\n  export import ThreadCreateAndRunParams = ThreadsAPI.ThreadCreateAndRunParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from './core';\nimport * as Errors from './error';\nimport { type Agent } from './_shims/index';\nimport * as Uploads from './uploads';\nimport * as Pagination from \"./pagination\";\nimport * as API from \"./resources/index\";\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['OPENAI_API_KEY'].\n   */\n  apiKey?: string | undefined;\n\n  /**\n   * Defaults to process.env['OPENAI_ORG_ID'].\n   */\n  organization?: string | null | undefined;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   *\n   * Defaults to process.env['OPENAI_BASE_URL'].\n   */\n  baseURL?: string | null | undefined;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery;\n\n  /**\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\n   */\n  dangerouslyAllowBrowser?: boolean;\n}\n\n/** API Client for interfacing with the OpenAI API. */\nexport class OpenAI extends Core.APIClient {\n  apiKey: string;\n  organization: string | null;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('OPENAI_BASE_URL'),\n    apiKey = Core.readEnv('OPENAI_API_KEY'),\n    organization = Core.readEnv('OPENAI_ORG_ID') ?? null,\n    ...opts\n  }: ClientOptions = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.OpenAIError(\n        \"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\",\n      );\n    }\n\n    const options: ClientOptions = {\n      apiKey,\n      organization,\n      ...opts,\n      baseURL: baseURL || `https://api.openai.com/v1`,\n    };\n\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.OpenAIError(\n        \"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\",\n      );\n    }\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 600000 /* 10 minutes */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n    this._options = options;\n\n    this.apiKey = apiKey;\n    this.organization = organization;\n  }\n\n  completions: API.Completions = new API.Completions(this);\n  chat: API.Chat = new API.Chat(this);\n  embeddings: API.Embeddings = new API.Embeddings(this);\n  files: API.Files = new API.Files(this);\n  images: API.Images = new API.Images(this);\n  audio: API.Audio = new API.Audio(this);\n  moderations: API.Moderations = new API.Moderations(this);\n  models: API.Models = new API.Models(this);\n  fineTuning: API.FineTuning = new API.FineTuning(this);\n  beta: API.Beta = new API.Beta(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      'OpenAI-Organization': this.organization,\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n\n  static OpenAI = this;\n\n  static OpenAIError = Errors.OpenAIError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n}\n\nexport const {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} = Errors;\n\nexport import toFile = Uploads.toFile;\nexport import fileFromPath = Uploads.fileFromPath;\n\nexport namespace OpenAI {\n  // Helper functions\n  export import toFile = Uploads.toFile;\n  export import fileFromPath = Uploads.fileFromPath;\n\n  export import RequestOptions = Core.RequestOptions;\n\n  export import Page = Pagination.Page;\n  export import PageResponse = Pagination.PageResponse;\n\n  export import CursorPage = Pagination.CursorPage;\n  export import CursorPageParams = Pagination.CursorPageParams;\n  export import CursorPageResponse = Pagination.CursorPageResponse;\n\n  export import Completions = API.Completions;\n  export import Completion = API.Completion;\n  export import CompletionChoice = API.CompletionChoice;\n  export import CompletionUsage = API.CompletionUsage;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n\n  export import Chat = API.Chat;\n  export import ChatCompletion = API.ChatCompletion;\n  export import ChatCompletionAssistantMessageParam = API.ChatCompletionAssistantMessageParam;\n  export import ChatCompletionChunk = API.ChatCompletionChunk;\n  export import ChatCompletionContentPart = API.ChatCompletionContentPart;\n  export import ChatCompletionContentPartImage = API.ChatCompletionContentPartImage;\n  export import ChatCompletionContentPartText = API.ChatCompletionContentPartText;\n  export import ChatCompletionFunctionCallOption = API.ChatCompletionFunctionCallOption;\n  export import ChatCompletionFunctionMessageParam = API.ChatCompletionFunctionMessageParam;\n  export import ChatCompletionMessage = API.ChatCompletionMessage;\n  export import ChatCompletionMessageParam = API.ChatCompletionMessageParam;\n  export import ChatCompletionMessageToolCall = API.ChatCompletionMessageToolCall;\n  export import ChatCompletionNamedToolChoice = API.ChatCompletionNamedToolChoice;\n  export import ChatCompletionRole = API.ChatCompletionRole;\n  export import ChatCompletionSystemMessageParam = API.ChatCompletionSystemMessageParam;\n  export import ChatCompletionTokenLogprob = API.ChatCompletionTokenLogprob;\n  export import ChatCompletionTool = API.ChatCompletionTool;\n  export import ChatCompletionToolChoiceOption = API.ChatCompletionToolChoiceOption;\n  export import ChatCompletionToolMessageParam = API.ChatCompletionToolMessageParam;\n  export import ChatCompletionUserMessageParam = API.ChatCompletionUserMessageParam;\n  export import ChatCompletionCreateParams = API.ChatCompletionCreateParams;\n  export import ChatCompletionCreateParamsNonStreaming = API.ChatCompletionCreateParamsNonStreaming;\n  export import ChatCompletionCreateParamsStreaming = API.ChatCompletionCreateParamsStreaming;\n\n  export import Embeddings = API.Embeddings;\n  export import CreateEmbeddingResponse = API.CreateEmbeddingResponse;\n  export import Embedding = API.Embedding;\n  export import EmbeddingCreateParams = API.EmbeddingCreateParams;\n\n  export import Files = API.Files;\n  export import FileContent = API.FileContent;\n  export import FileDeleted = API.FileDeleted;\n  export import FileObject = API.FileObject;\n  export import FileObjectsPage = API.FileObjectsPage;\n  export import FileCreateParams = API.FileCreateParams;\n  export import FileListParams = API.FileListParams;\n\n  export import Images = API.Images;\n  export import Image = API.Image;\n  export import ImagesResponse = API.ImagesResponse;\n  export import ImageCreateVariationParams = API.ImageCreateVariationParams;\n  export import ImageEditParams = API.ImageEditParams;\n  export import ImageGenerateParams = API.ImageGenerateParams;\n\n  export import Audio = API.Audio;\n\n  export import Moderations = API.Moderations;\n  export import Moderation = API.Moderation;\n  export import ModerationCreateResponse = API.ModerationCreateResponse;\n  export import ModerationCreateParams = API.ModerationCreateParams;\n\n  export import Models = API.Models;\n  export import Model = API.Model;\n  export import ModelDeleted = API.ModelDeleted;\n  export import ModelsPage = API.ModelsPage;\n\n  export import FineTuning = API.FineTuning;\n\n  export import Beta = API.Beta;\n\n  export import FunctionDefinition = API.FunctionDefinition;\n  export import FunctionParameters = API.FunctionParameters;\n}\n\nexport default OpenAI;\n"],"names":["VERSION","kind","fetch","FormData","File","ReadableStream","getMultipartRequestOptions","getDefaultAgent","fileFromPath","isFsReadStream","auto","Request","undefined","Response","Headers","Blob","MultipartBody","constructor","body","toStringTag","Symbol","shims","options","Error","manuallyImported","recommendation","_fetch","_Request","_Response","_Headers","error","message","async","form","opts","url","value","OpenAIError","APIError","status","headers","super","makeMessage","this","data","code","param","type","static","msg","JSON","stringify","errorResponse","APIConnectionError","cause","castToError","BadRequestError","AuthenticationError","PermissionDeniedError","NotFoundError","ConflictError","UnprocessableEntityError","RateLimitError","InternalServerError","APIUserAbortError","APIConnectionTimeoutError","Stream","iterator","controller","response","consumed","decoder","SSEDecoder","done","sse","abort","lineDecoder","LineDecoder","iter","readableStreamAsyncIterable","chunk","line","decode","flush","iterMessages","startsWith","event","parse","e","console","raw","name","readableStream","iterLines","asyncIterator","tee","left","right","teeIterator","queue","next","length","result","push","shift","toReadableStream","self","encoder","TextEncoder","ctrl","close","bytes","encode","enqueue","err","return","chunks","endsWith","substring","join","fieldname","_","str","delimiter","index","indexOf","partition","buffer","trailingCR","text","decodeText","slice","trailingNewline","NEWLINE_CHARS","has","lines","split","NEWLINE_REGEXP","pop","Buffer","toString","Uint8Array","from","TextDecoder","ArrayBuffer","textDecoder","stream","reader","getReader","read","releaseLock","cancelPromise","cancel","Set","isResponseLike","blob","isBlobLike","size","arrayBuffer","isUploadable","lastModified","isFileLike","toFile","URL","pathname","bits","parts","isView","isAsyncIterableIterator","props","Object","getOwnPropertyNames","map","p","propsForError","getBytes","getStringFromMaybeBuffer","filename","path","getName","x","String","isMultipartBody","multipartFormRequestOptions","createForm","Promise","all","entries","key","addFormValue","TypeError","append","file","Array","isArray","entry","prop","defaultParseResponse","debug","__streamClass","fromSSEResponse","__binaryResponse","contentType","get","includes","json","APIPromise","responsePromise","parseResponse","resolve","_thenUnwrap","transform","asResponse","then","parsedPromise","onfulfilled","onrejected","catch","finally","onfinally","APIClient","baseURL","maxRetries","timeout","httpAgent","overridenFetch","validatePositiveInteger","authHeaders","defaultHeaders","Accept","getUserAgent","getPlatformHeaders","validateHeaders","customHeaders","defaultIdempotencyKey","uuid4","methodRequest","post","patch","put","delete","method","request","getAPIList","Page","requestAPIList","calculateContentLength","byteLength","buildRequest","query","contentLength","buildURL","minAgentTimeout","idempotencyHeader","idempotencyKey","req","buildHeaders","agent","signal","reqHeaders","applyHeadersMut","shimsKind","parseHeaders","fromEntries","header","makeStatusError","generate","remainingRetries","makeRequest","optionsInput","retriesRemaining","prepareOptions","prepareRequest","aborted","AbortController","fetchWithTimeout","retryRequest","responseHeaders","createResponseHeaders","ok","shouldRetry","retryMessage","errText","errJSON","safeJSON","errMessage","PagePromise","isAbsoluteURL","defaultQuery","isEmptyObj","search","stringifyQuery","filter","encodeURIComponent","init","ms","addEventListener","setTimeout","getRequestClient","call","clearTimeout","shouldRetryHeader","timeoutMillis","retryAfterMillisHeader","timeoutMs","parseFloat","Number","isNaN","retryAfterHeader","timeoutSeconds","Date","now","calculateDefaultRetryTimeoutMillis","sleep","numRetries","Math","min","pow","random","AbstractPage","client","_AbstractPage_client","__classPrivateFieldSet","hasNextPage","getPaginatedItems","nextPageInfo","nextInfo","nextOptions","params","searchParams","set","__classPrivateFieldGet","page","getNextPage","iterPages","item","Proxy","target","toLowerCase","requestOptionsKeys","isRequestOptions","obj","keys","every","k","hasOwn","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","EdgeRuntime","process","prototype","platform","browserInfo","navigator","browserPatterns","pattern","match","exec","userAgent","major","minor","browser","getBrowserInfo","_platformHeaders","startsWithSchemeRegexp","RegExp","test","n","isInteger","readEnv","env","trim","_k","hasOwnProperty","targetHeaders","newHeaders","lowerKey","val","action","args","log","replace","c","r","object","nextPageParams","CursorPage","info","id","after","APIResource","_client","Completions","create","Chat","completions","CompletionsAPI","Embeddings","Files","retrieve","fileId","list","FileObjectsPage","del","content","retrieveContent","pollInterval","maxWait","TERMINAL_STATES","start","FilesAPI","Images","createVariation","edit","Speech","Transcriptions","Translations","Audio","transcriptions","TranscriptionsAPI","translations","TranslationsAPI","speech","SpeechAPI","Moderations","Models","model","ModelsPage","ModelsAPI","Jobs","fineTuningJobId","FineTuningJobsPage","listEvents","FineTuningJobEventsPage","JobsAPI","FineTuning","jobs","assistantId","AssistantFilesPage","Assistants","files","update","AssistantsPage","isRunnableFunctionWithParse","fn","AssistantsAPI","isAssistantMessage","role","isFunctionMessage","isToolMessage","DEFAULT_MAX_CHAT_COMPLETIONS","AbstractChatCompletionRunner","_AbstractChatCompletionRunner_connectedPromise","_AbstractChatCompletionRunner_resolveConnectedPromise","_AbstractChatCompletionRunner_rejectConnectedPromise","_AbstractChatCompletionRunner_endPromise","_AbstractChatCompletionRunner_resolveEndPromise","_AbstractChatCompletionRunner_rejectEndPromise","_AbstractChatCompletionRunner_listeners","_chatCompletions","messages","_AbstractChatCompletionRunner_ended","_AbstractChatCompletionRunner_errored","_AbstractChatCompletionRunner_aborted","_AbstractChatCompletionRunner_catchingPromiseCreated","_AbstractChatCompletionRunner_handleError","_emit","openAIError","reject","_run","executor","_emitFinal","_addChatCompletion","chatCompletion","choices","_addMessage","emit","function_call","tool_calls","tool_call","function","_connected","ended","errored","on","listener","off","listeners","findIndex","l","splice","once","emitted","completion","allChatCompletions","forEach","finalMessage","finalContent","finalFunctionCall","finalFunctionCallResult","some","usage","_createChatCompletion","restParams","singleFunctionToCall","maxChatCompletions","functionsByName","f","functions","parameters","description","i","arguments","parsed","rawContent","tool_choice","tools","t","tool_call_id","at","y","total","completion_tokens","prompt_tokens","total_tokens","ChatCompletionRunner","runner","_runFunctions","_runTools","ChatCompletionStream","_ChatCompletionStream_currentChatCompletionSnapshot","currentChatCompletionSnapshot","_fromReadableStream","_runChatCompletion","fromReadableStream","chatId","delta","snapshot","created","system_fingerprint","rest","finish_reason","logprobs","choiceRest","messageRest","toolRest","fnRest","finalizeChatCompletion","assign","other","choice","pushQueue","readQueue","bind","ChatCompletionStreamingRunner","runFunctions","chat","runTools","createChatCompletion","threadId","messageId","MessageFilesPage","Messages","ThreadMessagesPage","MessagesAPI","Steps","runId","stepId","RunStepsPage","StepsAPI","Runs","steps","RunsPage","submitToolOutputs","RunsAPI","Threads","runs","createAndRun","Beta","ChatAPI","assistants","threads","ThreadsAPI","OpenAI","Core","apiKey","organization","Errors","dangerouslyAllowBrowser","window","document","API","embeddings","images","audio","moderations","models","fineTuning","beta","_options","Authorization","_a","Uploads","Pagination"],"sourceRoot":""}