{"version":3,"file":"static/js/2725.4f6746a7.chunk.js","mappings":"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","sources":["../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.ts","../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts","../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","../node_modules/@deck.gl/mapbox/src/deck-utils.ts","../node_modules/@deck.gl/mapbox/src/mapbox-layer.ts","njslab/LabStarter/Starter-DeckGL/MapboxGLWrapper/index.ts","njslab/LabStarter/Starter-DeckGL/index.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","import {Deck, WebMercatorViewport, MapView, _flatten as flatten} from '@deck.gl/core';\nimport type {DeckProps, MapViewState, Layer} from '@deck.gl/core';\nimport type MapboxLayer from './mapbox-layer';\nimport type {Map} from 'mapbox-gl';\n\nimport {lngLatToWorld, unitsPerMeter} from '@math.gl/web-mercator';\nimport GL from '@luma.gl/constants';\n\ntype UserData = {\n  isExternal: boolean;\n  currentViewport?: WebMercatorViewport | null;\n  mapboxLayers: Set<MapboxLayer<any>>;\n  // mapboxVersion: {minor: number; major: number};\n};\n\n// Mercator constants\nconst TILE_SIZE = 512;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n// Create an interleaved deck instance.\nexport function getDeckInstance({\n  map,\n  gl,\n  deck\n}: {\n  map: Map & {__deck?: Deck | null};\n  gl: WebGLRenderingContext;\n  deck?: Deck;\n}): Deck {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  // Only initialize certain props once per context\n  const customRender = deck?.props._customRender;\n  const onLoad = deck?.props.onLoad;\n\n  const deckProps = getInterleavedProps({\n    ...deck?.props,\n    _customRender: () => {\n      map.triggerRepaint();\n      // customRender may be subscribed by DeckGL React component to update child props\n      // make sure it is still called\n      // Hack - do not pass a redraw reason here to prevent the React component from clearing the context\n      // Rerender will be triggered by MapboxLayer's render()\n      customRender?.('');\n    }\n  });\n\n  let deckInstance: Deck;\n\n  if (!deck || deck.props.gl === gl) {\n    // If deck isn't defined (Internal MapboxLayer use case),\n    // or if deck is defined and is using the WebGLContext created by mapbox (MapboxOverlay and External MapboxLayer use case),\n    // block deck from setting the canvas size, and use the map's viewState to drive deck.\n    // Otherwise, we use deck's viewState to drive the map.\n    Object.assign(deckProps, {\n      gl,\n      width: null,\n      height: null,\n      touchAction: 'unset',\n      viewState: getViewState(map)\n    });\n    if (deck?.isInitialized) {\n      watchMapMove(deck, map);\n    } else {\n      deckProps.onLoad = () => {\n        onLoad?.();\n        watchMapMove(deckInstance, map);\n      };\n    }\n  }\n\n  if (deck) {\n    deckInstance = deck;\n    deck.setProps(deckProps);\n    (deck.userData as UserData).isExternal = true;\n  } else {\n    deckInstance = new Deck(deckProps);\n    map.on('remove', () => {\n      removeDeckInstance(map);\n    });\n  }\n\n  (deckInstance.userData as UserData).mapboxLayers = new Set();\n  // (deckInstance.userData as UserData).mapboxVersion = getMapboxVersion(map);\n  map.__deck = deckInstance;\n  map.on('render', () => {\n    if (deckInstance.isInitialized) afterRender(deckInstance, map);\n  });\n\n  return deckInstance;\n}\n\nfunction watchMapMove(deck: Deck, map: Map & {__deck?: Deck | null}) {\n  const _handleMapMove = () => {\n    if (deck.isInitialized) {\n      // call view state methods\n      onMapMove(deck, map);\n    } else {\n      // deregister itself when deck is finalized\n      map.off('move', _handleMapMove);\n    }\n  };\n  map.on('move', _handleMapMove);\n}\n\nexport function removeDeckInstance(map: Map & {__deck?: Deck | null}) {\n  map.__deck?.finalize();\n  map.__deck = null;\n}\n\nexport function getInterleavedProps(currProps: DeckProps) {\n  const nextProps: DeckProps = {\n    ...currProps,\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthFunc: GL.LEQUAL,\n      blendEquation: GL.FUNC_ADD,\n      ...currProps.parameters\n    },\n    views: currProps.views || [new MapView({id: 'mapbox'})]\n  };\n\n  return nextProps;\n}\n\nexport function addLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck: Deck, map: Map, layer: MapboxLayer<any>): void {\n  let {currentViewport} = deck.userData as UserData;\n  let clearStack: boolean = false;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    (deck.userData as UserData).currentViewport = currentViewport;\n    clearStack = true;\n  }\n\n  if (!deck.isInitialized) {\n    return;\n  }\n\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    layerFilter: ({layer: deckLayer}) => layer.id === deckLayer.id,\n    clearStack,\n    clearCanvas: false\n  });\n}\n\nexport function getViewState(map: Map): MapViewState & {\n  repeat: boolean;\n  padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n} {\n  const {lng, lat} = map.getCenter();\n\n  const viewState: MapViewState & {\n    repeat: boolean;\n    padding: {\n      left: number;\n      right: number;\n      top: number;\n      bottom: number;\n    };\n  } = {\n    // Longitude returned by getCenter can be outside of [-180, 180] when zooming near the anti meridian\n    // https://github.com/visgl/deck.gl/issues/6894\n    longitude: ((lng + 540) % 360) - 180,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch(),\n    padding: map.getPadding(),\n    repeat: map.getRenderWorldCopies()\n  };\n\n  if (map.getTerrain?.()) {\n    // When the base map has terrain, we need to target the camera at the terrain surface\n    centerCameraOnTerrain(map, viewState);\n  }\n\n  return viewState;\n}\n\nfunction centerCameraOnTerrain(map: Map, viewState: MapViewState) {\n  if (map.getFreeCameraOptions) {\n    // mapbox-gl v2\n    const {position} = map.getFreeCameraOptions();\n    if (!position || position.z === undefined) {\n      return;\n    }\n\n    // @ts-ignore transform is not typed\n    const height = map.transform.height;\n    const {longitude, latitude, pitch} = viewState;\n\n    // Convert mapbox mercator coordinate to deck common space\n    const cameraX = position.x * TILE_SIZE;\n    const cameraY = (1 - position.y) * TILE_SIZE;\n    const cameraZ = position.z * TILE_SIZE;\n\n    // Mapbox manipulates zoom in terrain mode, see discussion here: https://github.com/mapbox/mapbox-gl-js/issues/12040\n    const center = lngLatToWorld([longitude, latitude]);\n    const dx = cameraX - center[0];\n    const dy = cameraY - center[1];\n    const cameraToCenterDistanceGround = Math.sqrt(dx * dx + dy * dy);\n\n    const pitchRadians = pitch! * DEGREES_TO_RADIANS;\n    const altitudePixels = 1.5 * height;\n    const scale =\n      pitchRadians < 0.001\n        ? // Pitch angle too small to deduce the look at point, assume elevation is 0\n          (altitudePixels * Math.cos(pitchRadians)) / cameraZ\n        : (altitudePixels * Math.sin(pitchRadians)) / cameraToCenterDistanceGround;\n    viewState.zoom = Math.log2(scale);\n\n    const cameraZFromSurface = (altitudePixels * Math.cos(pitchRadians)) / scale;\n    const surfaceElevation = cameraZ - cameraZFromSurface;\n    viewState.position = [0, 0, surfaceElevation / unitsPerMeter(latitude)];\n  }\n  // @ts-ignore transform is not typed\n  else if (typeof map.transform.elevation === 'number') {\n    // maplibre-gl\n    // @ts-ignore transform is not typed\n    viewState.position = [0, 0, map.transform.elevation];\n  }\n}\n\n// function getMapboxVersion(map: Map): {minor: number; major: number} {\n//   // parse mapbox version string\n//   let major = 0;\n//   let minor = 0;\n//   // @ts-ignore (2339) undefined property\n//   const version: string = map.version;\n//   if (version) {\n//     [major, minor] = version.split('.').slice(0, 2).map(Number);\n//   }\n//   return {major, minor};\n// }\n\nfunction getViewport(deck: Deck, map: Map, useMapboxProjection = true): WebMercatorViewport {\n  return new WebMercatorViewport({\n    id: 'mapbox',\n    x: 0,\n    y: 0,\n    width: deck.width,\n    height: deck.height,\n    ...getViewState(map),\n    nearZMultiplier: useMapboxProjection\n      ? // match mapbox-gl@>=1.3.0's projection matrix\n        0.02\n      : // use deck.gl's own default\n        0.1\n  });\n}\n\nfunction afterRender(deck: Deck, map: Map): void {\n  const {mapboxLayers, isExternal} = deck.userData as UserData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const deckLayers = flatten(deck.props.layers, Boolean) as Layer[];\n    const hasNonMapboxLayers = deckLayers.some(\n      layer => layer && !mapboxLayerIds.includes(layer.id)\n    );\n    let viewports = deck.getViewports();\n    const mapboxViewportIdx = viewports.findIndex(vp => vp.id === 'mapbox');\n    const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;\n\n    if (hasNonMapboxLayers || hasNonMapboxViews) {\n      if (mapboxViewportIdx >= 0) {\n        viewports = viewports.slice();\n        viewports[mapboxViewportIdx] = getViewport(deck, map, false);\n      }\n\n      deck._drawLayers('mapbox-repaint', {\n        viewports,\n        layerFilter: params =>\n          (!deck.props.layerFilter || deck.props.layerFilter(params)) &&\n          (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id)),\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  (deck.userData as UserData).currentViewport = null;\n}\n\nfunction onMapMove(deck: Deck, map: Map): void {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction updateLayers(deck: Deck): void {\n  if ((deck.userData as UserData).isExternal) {\n    return;\n  }\n\n  const layers: Layer[] = [];\n  (deck.userData as UserData).mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n","import {getDeckInstance, addLayer, removeLayer, updateLayer, drawLayer} from './deck-utils';\nimport type {Map, CustomLayerInterface} from 'mapbox-gl';\nimport type {Deck, Layer} from '@deck.gl/core';\n\nexport type MapboxLayerProps<LayerT extends Layer> = Partial<LayerT['props']> & {\n  id: string;\n  renderingMode?: '2d' | '3d';\n  deck?: Deck;\n};\n\nexport default class MapboxLayer<LayerT extends Layer> implements CustomLayerInterface {\n  id: string;\n  type: 'custom';\n  renderingMode: '2d' | '3d';\n  map: Map | null;\n  deck: Deck | null;\n  props: MapboxLayerProps<LayerT>;\n\n  /* eslint-disable no-this-before-super */\n  constructor(props: MapboxLayerProps<LayerT>) {\n    if (!props.id) {\n      throw new Error('Layer must have an unique id');\n    }\n\n    this.id = props.id;\n    this.type = 'custom';\n    this.renderingMode = props.renderingMode || '3d';\n    this.map = null;\n    this.deck = null;\n    this.props = props;\n  }\n\n  /* Mapbox custom layer methods */\n\n  onAdd(map: Map, gl: WebGLRenderingContext): void {\n    this.map = map;\n    this.deck = getDeckInstance({map, gl, deck: this.props.deck});\n    addLayer(this.deck, this);\n  }\n\n  onRemove(): void {\n    if (this.deck) {\n      removeLayer(this.deck, this);\n    }\n  }\n\n  setProps(props: MapboxLayerProps<LayerT>) {\n    // id cannot be changed\n    Object.assign(this.props, props, {id: this.id});\n    // safe guard in case setProps is called before onAdd\n    if (this.deck) {\n      updateLayer(this.deck, this);\n    }\n  }\n\n  render() {\n    drawLayer(this.deck!, this.map!, this);\n  }\n}\n","import mapboxgl from \"mapbox-gl\";\r\n\r\nimport { OrbitView, PolygonLayer, COORDINATE_SYSTEM } from 'deck.gl';\r\nimport { Deck } from '@deck.gl/core';\r\nimport DeckGL from 'deck.gl';\r\n\r\nimport {ScatterplotLayer} from '@deck.gl/layers';\r\n\r\nimport {MapboxLayer} from '@deck.gl/mapbox';\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  latitude: 37.8,\r\n  longitude: -122.45,\r\n  zoom: 15\r\n};\r\n\r\nexport class MapboxGLWrapper {\r\n    public map: mapboxgl.Map;\r\n    deckLayer: any;\r\n    \r\n    constructor(id: string) {\r\n\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n        const divCon = document.getElementById(id);\r\n\r\n        // this.map = new Deck({\r\n        //     parent: divCon,\r\n        //     initialViewState: INITIAL_VIEW_STATE,\r\n        //     controller: true,\r\n        //     layers: [\r\n        //       new ScatterplotLayer({\r\n        //         data: [\r\n        //           {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\r\n        //         ],\r\n        //         getFillColor: d => d.color,\r\n        //         getRadius: d => d.radius\r\n        //       })\r\n        //     ]\r\n        // });\r\n\r\n        this.deckLayer = new MapboxLayer({\r\n            id: 'my-scatterplot',\r\n            type: ScatterplotLayer,\r\n            data: [\r\n                {position: [-74.5, 40], size: 10000},\r\n                {position: [-74.5, 40.5], size: 5000},\r\n                {position: [-74.6, 40.5], size: 5800}\r\n            ],\r\n            // @ts-ignore\r\n            getPosition: d => d.position,\r\n            getRadius: d => d.size,\r\n            getColor: [255, 255, 0]\r\n          });\r\n        \r\n        \r\n        // this.map\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 15,\r\n            // minZoom: 10,\r\n            center: [-74.5, 40],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n\r\n        this.map.on('load', () => {\r\n            this.map.addLayer(this.deckLayer, 'waterway-label');\r\n          });\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n    }\r\n    public downloadImage = () => {\r\n        const fileName = \"Map.png\";\r\n\r\n        // const canvasMapbox = this.map.getCanvas();\r\n    \r\n        // const { mapGL, deck } = this.state;\r\n        const canvasMapbox = document.querySelector('.mapboxgl-canvas') as HTMLCanvasElement;\r\n\r\n        // const canvasMapbox =  this.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\r\n        // console.log(canvasMapbox)\r\n        // console.log(this.deckLayer.deck.canvas)\r\n\r\n        // setTimeout(() => {\r\n            let canvasOut = document.createElement(\"canvas\");\r\n            canvasOut.width = canvasMapbox.width;\r\n            canvasOut.height = canvasMapbox.height;\r\n            let context = canvasOut.getContext(\"2d\");\r\n        \r\n            // context.globalAlpha = 1.0;\r\n            // context.drawImage(canvasMapbox, 0, 0);\r\n            // context.globalAlpha = 1.0;\r\n            // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\r\n            context.drawImage(canvasMapbox, 0, 0);\r\n\r\n\r\n            var img = new Image();\r\n            img.width = canvasMapbox.width;\r\n            img.height = canvasMapbox.height;\r\n            img.src = canvasOut.toDataURL();\r\n            img.style.background = '#f00';\r\n            document.body.appendChild(img);\r\n            // document.body.appendChild(canvasMapbox);\r\n            document.body.appendChild(canvasOut);\r\n            // canvasOut.toBlob(blob => {\r\n            //     FileSaver.saveAs(blob, fileName);\r\n            // });\r\n            var link = document.createElement('a');\r\n            link.download = 'filename.png';\r\n            link.href = canvasOut.toDataURL()\r\n            link.click();\r\n        // }, 1000);\r\n        // );\r\n        // deck.redraw(true);\r\n        // const deckglCanvas = document.getElementById(\"deck-gl-canvas\");\r\n    \r\n \r\n    };\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        // this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        // const p = this.map.unproject({x, y} as any)\r\n        // return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        // const p = this.map.project([lon, lat])\r\n        // return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        this.downloadImage();\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n     \r\n    }\r\n}\r\n\r\n\r\n","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public renderer: Renderer;\r\n    constructor(div: HTMLDivElement) {\r\n        this.divHost = div;\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.mapboxWrapper = new MapboxGLWrapper(this.divHost.id);\r\n        // this.mapboxWrapper.mouseDown = this.mouseDown\r\n        // this.mapboxWrapper.mouseUp = this.mouseUp\r\n        // this.mapboxWrapper.mouseClick = this.mouseClick\r\n        // this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        // setTimeout(() => {\r\n        //     this.renderer = new Renderer(this.divHost, this);\r\n        // }, 100);\r\n\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        console.log(e);\r\n        console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\nexport class Renderer extends RendererCanvas {\r\n    public app: Solution\r\n    public time: number = 0.0;\r\n    public pts: number[][] = [];\r\n    constructor(div: any, app: Solution) {\r\n        super(div);\r\n        this.app = app;\r\n        this.canvas.id = 'mapboxCustom'\r\n        this.canvas.style.position = 'absolute';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.style.pointerEvents = 'none';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.pts.push([-71.093161, 42.358871]);\r\n\r\n        this.start();\r\n    }\r\n    public mouseDown = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseUp = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseDrag = (x: number, y: number): void => {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // this.time += 0.1;\r\n\r\n        // for(let i = 0 ; i < this.pts.length; ++i) {\r\n        //     const pt = this.pts[i];\r\n        //     const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\r\n        //     // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\r\n    \r\n        //     ctx.beginPath();\r\n        //     ctx.arc(p[0], p[1], Math.sin(this.time) * 3 + 15, 0, Math.PI * 2);\r\n        //     ctx.closePath();\r\n        //     ctx.fillStyle = '#0f0';\r\n        //     ctx.fill();\r\n        // }\r\n\r\n    }\r\n}"],"names":["DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","Layer","getShaders","super","vs","fs","modules","project32","picking","initializeState","this","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","UNIT","Model","id","geometry","Geometry","drawMode","vertexCount","attributes","positions","Float32Array","isInstanced","TILE_SIZE","DEGREES_TO_RADIANS","Math","PI","getDeckInstance","map","deck","__deck","customRender","_customRender","onLoad","deckProps","currProps","triggerRepaint","parameters","depthMask","depthTest","blend","blendFunc","polygonOffsetFill","depthFunc","blendEquation","views","MapView","deckInstance","Object","assign","width","height","touchAction","viewState","getViewState","isInitialized","watchMapMove","setProps","userData","isExternal","Deck","on","finalize","removeDeckInstance","mapboxLayers","Set","mapboxLayerIds","Array","from","layer","hasNonMapboxLayers","flatten","layers","Boolean","some","includes","viewports","getViewports","mapboxViewportIdx","findIndex","vp","hasNonMapboxViews","slice","getViewport","_drawLayers","layerFilter","viewport","clearCanvas","currentViewport","afterRender","_handleMapMove","needsRedraw","clearRedrawFlags","onMapMove","off","lng","lat","getCenter","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","padding","getPadding","repeat","getRenderWorldCopies","getTerrain","_map$getTerrain","getFreeCameraOptions","undefined","z","transform","cameraX","cameraY","y","cameraZ","center","lngLatToWorld","dx","dy","cameraToCenterDistanceGround","sqrt","pitchRadians","altitudePixels","scale","cos","sin","log2","surfaceElevation","unitsPerMeter","elevation","centerCameraOnTerrain","useMapboxProjection","WebMercatorViewport","nearZMultiplier","updateLayers","forEach","deckLayer","LayerType","push","MapboxLayer","constructor","_defineProperty","Error","renderingMode","onAdd","add","onRemove","render","clearStack","drawLayer","MapboxGLWrapper","downloadImage","canvasMapbox","document","querySelector","canvasOut","createElement","getContext","drawImage","img","Image","src","toDataURL","style","background","body","appendChild","link","download","href","click","toMap","toScreen","lon","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","getElementById","data","d","mapboxgl","process","preserveDrawingBuffer","container","dragRotate","disable","addLayer","div","getElementsByClassName","display","Solution","divHost","mapboxWrapper","renderer","mouseDrag","console","log","keyDown","k","destroy","lastElementChild","removeChild","Renderer","RendererCanvas","app","time","pts","canvas","pointerEvents","start","ctx"],"sourceRoot":""}