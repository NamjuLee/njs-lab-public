{"version":3,"file":"static/js/4867.af8099d5.chunk.js","mappings":"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","sources":["njslab/Tools/MapboxDeckGLPolygon/MapboxGLWrapper/index.ts","njslab/Tools/MapboxDeckGLPolygon/lib/index.ts","njslab/Tools/MapboxDeckGLPolygon/DeckGL/index.ts","njslab/Tools/MapboxDeckGLPolygon/CanvasCustom/index.ts","njslab/Tools/MapboxDeckGLPolygon/UI/index.ts","njslab/Tools/MapboxDeckGLPolygon/index.ts","../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.ts","../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts","../node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","../node_modules/@deck.gl/mapbox/src/deck-utils.ts","../node_modules/@deck.gl/mapbox/src/mapbox-layer.ts"],"sourcesContent":["import mapboxgl from \"mapbox-gl\";\r\n\r\nimport { OrbitView, PolygonLayer, COORDINATE_SYSTEM, ArcLayer, ScatterplotLayer } from 'deck.gl';\r\nimport { Deck } from '@deck.gl/core';\r\nimport DeckGL from 'deck.gl';\r\n\r\nimport { Solution } from '..';\r\n\r\nimport { downloadImage } from '../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public solution: Solution;\r\n    public map: mapboxgl.Map;\r\n\r\n    public canvasMapbox;\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.initMap(solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 6,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n            \r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n\r\n        // new ScatterplotLayer({\r\n        //     id: 'scatter-plot',\r\n        //     data: YOUR_DATA_ARRAY, // Your data goes here\r\n        //     getPosition: d => [d.longitude, d.latitude],\r\n        //     getRadius: d => d.radius,\r\n        //     getColor: d => d.color,\r\n        //   }),\r\n\r\n        // this.map.addLayer({layer})\r\n\r\n\r\n\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => {\r\n            // console.log(k)\r\n            // if (k.key === 'p'){\r\n\r\n            // }\r\n        });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost(){\r\n        this.solution.initPost();\r\n\r\n        // const canvas = document.createElement('canvas');\r\n        // this.solution.divHost.appendChild(canvas);\r\n        // canvas.id = 'canvasID';\r\n        // canvas.width = this.solution.divHost.clientWidth;\r\n        // canvas.height = this.solution.divHost.clientHeight;\r\n        \r\n        // this.initCustomCanvas();\r\n\r\n        // this.solution.renderer.canvas.style.width = '200%';\r\n        // this.solution.renderer.canvas.style.height = '200%';\r\n        this.canvasMapbox = this.map.getCanvas();\r\n\r\n        // this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        // this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n    }\r\n    public initCustomCanvas(){\r\n\r\n        this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n\r\n        // this.solution.renderer.canvas.style.width = '100%';\r\n        // this.solution.renderer.canvas.style.height = '100%';\r\n        this.solution.renderer.canvas.style.display = 'none';\r\n\r\n       const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n       this.map.addSource('canvas-source', {\r\n            type: 'canvas',\r\n            canvas: this.solution.renderer.canvas,\r\n            coordinates: [\r\n\r\n                // [ 180, 90],\r\n                // [ 180, -90],\r\n                // [ -180, -90], \r\n                // [ -180, 90]\r\n\r\n                \r\n                // [bound._sw[0], bound._sw[1]],\r\n                // [bound._sw[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._sw[1]],\r\n\r\n            //    [ -125.618336, 48.944262], \r\n            //    [ -125.618336, 24.786775], \r\n            //    [ -65.591812, 24.786775],\r\n            //    [ -65.591812, 48.944262]\r\n\r\n                // [91.4461, 21.5006],\r\n                // [100.3541, 21.5006],\r\n                // [100.3541, 13.9706],\r\n                // [91.4461, 13.9706]\r\n            ],\r\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n            animate: true\r\n            });\r\n             \r\n        this.map.addLayer({\r\n            id: 'canvas-layer',\r\n            type: 'raster',\r\n            source: 'canvas-source'\r\n            });\r\n\r\n    }\r\n    \r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // this.downloadImage();\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n     \r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        downloadImage(canvasMapbox, this.solution.renderer.canvas);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    // const canvasMapbox = this.map.getCanvas(); // this.solution.deckGL.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\n\n    let canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    let context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = canvasOut.toDataURL();\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = canvasOut.toDataURL();\n    link.click();    \n};\n","import { MapboxLayer } from '@deck.gl/mapbox';\nimport { ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\n\nimport { Solution } from '..';\n\nexport class DeckGL {\n    public solution: Solution;\n    deckLayer: any;\n    deckLayer2: any;\n    map: mapboxgl.Map;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    public initPost() {\n        this.map = this.solution.mapboxWrapper.map;\n\n        this.deckLayer = new MapboxLayer({\n            id: 'my-scatterplot',\n            type: ScatterplotLayer,\n            data: [\n                {position: [-74.5, 40], size: 10000},\n                {position: [-74.5, 40.5], size: 5000},\n                {position: [-74.6, 40.5], size: 5800},\n                {position: [-74.7, 40.5], size: 100},\n            ],\n            // @ts-ignore\n            getPosition: d => d.position,\n            getRadius: d => d.size,\n            getFillColor: d => [255, 140, 0],\n            getLineColor: d => [255, 255, 0]\n        });\n        this.map.addLayer(this.deckLayer, 'waterway-label');\n\n\n\n        const data = [\n            { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n        ];\n\n\n        this.deckLayer2 = new MapboxLayer({\n            id: 'my-scatterplot2',\n            type: ArcLayer,\n            data: data,\n            // @ts-ignore\n            getSourcePosition: d => d.pickup,\n            getTargetPosition: d => d.dropoff,\n            getSourceColor: d => [255, 128, 0],\n            getTargetColor: d => [0, 128, 255],\n            strokeWidth: 5\n          });\n\n        // this.deckLayer2 =  new ArcLayer({\n        //     data,\n        //     // @ts-ignore\n        //     getSourcePosition: d => d.pickup,\n        //     // @ts-ignore\n        //     getTargetPosition: d => d.dropoff,\n        //     getSourceColor: d => [255, 128, 0],\n        //     getTargetColor: d => [0, 128, 255],\n        //     strokeWidth: 5\n        // });\n   \n        this.map.addLayer(this.deckLayer2 ); // 'water-shadow'\n    }\n}","import { RendererCanvas } from '../../../../lib';\nimport { Solution } from '..';\n\nexport class Renderer extends RendererCanvas {\n    public app: Solution\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n    constructor(div: any, app: Solution) {\n        super(div);\n        this.app = app;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        this.canvas.style.mixBlendMode = 'color-dodge'\n\n        // console.log(dd.width, dd.height,)\n        // TODO\n        // You code goes here for one time operation\n        // this.pts.push([0, 0]); \n        // this.pts.push([this.canvas.width * 2, this.canvas.height * 2]); \n        // this.pts.push([-71.093161, 42.358871]);\n\n        this.start();\n    }\n    public initPost() {\n        this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // \n    }\n    public mouseDown = (x: number, y: number): void => {\n\n    }\n    public mouseUp = (x: number, y: number): void => {\n\n    }\n    public mouseDrag = (x: number, y: number): void => {\n\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        const z = this.app.mapboxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n        \n\n        for(let i = 0 ; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n    \n\n            const size = 0.25 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) * zoomFactor ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n\n    }\n}","import { Solution } from '..';\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.divHost = solution.divHost;\n        this.initUI();\n    }\n    public initUI() {\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        const div = document.createElement('div');\n        div.textContent = 'download';\n        div.style.position = 'relative';\n        div.style.margin = '10px';\n        div.onclick = () => {\n            this.solution.mapboxWrapper.downloadImage();\n        }\n        divMenu.appendChild(div);\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { DeckGL } from './DeckGL';\r\nimport { Renderer } from './CanvasCustom';\r\nimport { UIWrapper } from './UI';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public deckGL: DeckGL\r\n    public renderer: Renderer;\r\n    public uiWrapper: UIWrapper;\r\n    constructor(div: HTMLDivElement) {\r\n        this.divHost = div;\r\n        this.divHost.style.position = 'relative';\r\n        \r\n        this.deckGL = new DeckGL(this);\r\n        this.mapboxWrapper = new MapboxGLWrapper(this);\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n        \r\n        this.renderer = new Renderer(this.divHost, this);\r\n\r\n        this.uiWrapper = new UIWrapper(this);\r\n    }\r\n    public initPost() {\r\n        this.renderer.initPost();\r\n        this.deckGL.initPost();\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n        // this.renderer.pts.push([e.point.x, e.point.y])\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","import {Deck, WebMercatorViewport, MapView, _flatten as flatten} from '@deck.gl/core';\nimport type {DeckProps, MapViewState, Layer} from '@deck.gl/core';\nimport type MapboxLayer from './mapbox-layer';\nimport type {Map} from 'mapbox-gl';\n\nimport {lngLatToWorld, unitsPerMeter} from '@math.gl/web-mercator';\nimport GL from '@luma.gl/constants';\n\ntype UserData = {\n  isExternal: boolean;\n  currentViewport?: WebMercatorViewport | null;\n  mapboxLayers: Set<MapboxLayer<any>>;\n  // mapboxVersion: {minor: number; major: number};\n};\n\n// Mercator constants\nconst TILE_SIZE = 512;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n// Create an interleaved deck instance.\nexport function getDeckInstance({\n  map,\n  gl,\n  deck\n}: {\n  map: Map & {__deck?: Deck | null};\n  gl: WebGLRenderingContext;\n  deck?: Deck;\n}): Deck {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  // Only initialize certain props once per context\n  const customRender = deck?.props._customRender;\n  const onLoad = deck?.props.onLoad;\n\n  const deckProps = getInterleavedProps({\n    ...deck?.props,\n    _customRender: () => {\n      map.triggerRepaint();\n      // customRender may be subscribed by DeckGL React component to update child props\n      // make sure it is still called\n      // Hack - do not pass a redraw reason here to prevent the React component from clearing the context\n      // Rerender will be triggered by MapboxLayer's render()\n      customRender?.('');\n    }\n  });\n\n  let deckInstance: Deck;\n\n  if (!deck || deck.props.gl === gl) {\n    // If deck isn't defined (Internal MapboxLayer use case),\n    // or if deck is defined and is using the WebGLContext created by mapbox (MapboxOverlay and External MapboxLayer use case),\n    // block deck from setting the canvas size, and use the map's viewState to drive deck.\n    // Otherwise, we use deck's viewState to drive the map.\n    Object.assign(deckProps, {\n      gl,\n      width: null,\n      height: null,\n      touchAction: 'unset',\n      viewState: getViewState(map)\n    });\n    if (deck?.isInitialized) {\n      watchMapMove(deck, map);\n    } else {\n      deckProps.onLoad = () => {\n        onLoad?.();\n        watchMapMove(deckInstance, map);\n      };\n    }\n  }\n\n  if (deck) {\n    deckInstance = deck;\n    deck.setProps(deckProps);\n    (deck.userData as UserData).isExternal = true;\n  } else {\n    deckInstance = new Deck(deckProps);\n    map.on('remove', () => {\n      removeDeckInstance(map);\n    });\n  }\n\n  (deckInstance.userData as UserData).mapboxLayers = new Set();\n  // (deckInstance.userData as UserData).mapboxVersion = getMapboxVersion(map);\n  map.__deck = deckInstance;\n  map.on('render', () => {\n    if (deckInstance.isInitialized) afterRender(deckInstance, map);\n  });\n\n  return deckInstance;\n}\n\nfunction watchMapMove(deck: Deck, map: Map & {__deck?: Deck | null}) {\n  const _handleMapMove = () => {\n    if (deck.isInitialized) {\n      // call view state methods\n      onMapMove(deck, map);\n    } else {\n      // deregister itself when deck is finalized\n      map.off('move', _handleMapMove);\n    }\n  };\n  map.on('move', _handleMapMove);\n}\n\nexport function removeDeckInstance(map: Map & {__deck?: Deck | null}) {\n  map.__deck?.finalize();\n  map.__deck = null;\n}\n\nexport function getInterleavedProps(currProps: DeckProps) {\n  const nextProps: DeckProps = {\n    ...currProps,\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthFunc: GL.LEQUAL,\n      blendEquation: GL.FUNC_ADD,\n      ...currProps.parameters\n    },\n    views: currProps.views || [new MapView({id: 'mapbox'})]\n  };\n\n  return nextProps;\n}\n\nexport function addLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck: Deck, map: Map, layer: MapboxLayer<any>): void {\n  let {currentViewport} = deck.userData as UserData;\n  let clearStack: boolean = false;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    (deck.userData as UserData).currentViewport = currentViewport;\n    clearStack = true;\n  }\n\n  if (!deck.isInitialized) {\n    return;\n  }\n\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    layerFilter: ({layer: deckLayer}) => layer.id === deckLayer.id,\n    clearStack,\n    clearCanvas: false\n  });\n}\n\nexport function getViewState(map: Map): MapViewState & {\n  repeat: boolean;\n  padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n} {\n  const {lng, lat} = map.getCenter();\n\n  const viewState: MapViewState & {\n    repeat: boolean;\n    padding: {\n      left: number;\n      right: number;\n      top: number;\n      bottom: number;\n    };\n  } = {\n    // Longitude returned by getCenter can be outside of [-180, 180] when zooming near the anti meridian\n    // https://github.com/visgl/deck.gl/issues/6894\n    longitude: ((lng + 540) % 360) - 180,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch(),\n    padding: map.getPadding(),\n    repeat: map.getRenderWorldCopies()\n  };\n\n  if (map.getTerrain?.()) {\n    // When the base map has terrain, we need to target the camera at the terrain surface\n    centerCameraOnTerrain(map, viewState);\n  }\n\n  return viewState;\n}\n\nfunction centerCameraOnTerrain(map: Map, viewState: MapViewState) {\n  if (map.getFreeCameraOptions) {\n    // mapbox-gl v2\n    const {position} = map.getFreeCameraOptions();\n    if (!position || position.z === undefined) {\n      return;\n    }\n\n    // @ts-ignore transform is not typed\n    const height = map.transform.height;\n    const {longitude, latitude, pitch} = viewState;\n\n    // Convert mapbox mercator coordinate to deck common space\n    const cameraX = position.x * TILE_SIZE;\n    const cameraY = (1 - position.y) * TILE_SIZE;\n    const cameraZ = position.z * TILE_SIZE;\n\n    // Mapbox manipulates zoom in terrain mode, see discussion here: https://github.com/mapbox/mapbox-gl-js/issues/12040\n    const center = lngLatToWorld([longitude, latitude]);\n    const dx = cameraX - center[0];\n    const dy = cameraY - center[1];\n    const cameraToCenterDistanceGround = Math.sqrt(dx * dx + dy * dy);\n\n    const pitchRadians = pitch! * DEGREES_TO_RADIANS;\n    const altitudePixels = 1.5 * height;\n    const scale =\n      pitchRadians < 0.001\n        ? // Pitch angle too small to deduce the look at point, assume elevation is 0\n          (altitudePixels * Math.cos(pitchRadians)) / cameraZ\n        : (altitudePixels * Math.sin(pitchRadians)) / cameraToCenterDistanceGround;\n    viewState.zoom = Math.log2(scale);\n\n    const cameraZFromSurface = (altitudePixels * Math.cos(pitchRadians)) / scale;\n    const surfaceElevation = cameraZ - cameraZFromSurface;\n    viewState.position = [0, 0, surfaceElevation / unitsPerMeter(latitude)];\n  }\n  // @ts-ignore transform is not typed\n  else if (typeof map.transform.elevation === 'number') {\n    // maplibre-gl\n    // @ts-ignore transform is not typed\n    viewState.position = [0, 0, map.transform.elevation];\n  }\n}\n\n// function getMapboxVersion(map: Map): {minor: number; major: number} {\n//   // parse mapbox version string\n//   let major = 0;\n//   let minor = 0;\n//   // @ts-ignore (2339) undefined property\n//   const version: string = map.version;\n//   if (version) {\n//     [major, minor] = version.split('.').slice(0, 2).map(Number);\n//   }\n//   return {major, minor};\n// }\n\nfunction getViewport(deck: Deck, map: Map, useMapboxProjection = true): WebMercatorViewport {\n  return new WebMercatorViewport({\n    id: 'mapbox',\n    x: 0,\n    y: 0,\n    width: deck.width,\n    height: deck.height,\n    ...getViewState(map),\n    nearZMultiplier: useMapboxProjection\n      ? // match mapbox-gl@>=1.3.0's projection matrix\n        0.02\n      : // use deck.gl's own default\n        0.1\n  });\n}\n\nfunction afterRender(deck: Deck, map: Map): void {\n  const {mapboxLayers, isExternal} = deck.userData as UserData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const deckLayers = flatten(deck.props.layers, Boolean) as Layer[];\n    const hasNonMapboxLayers = deckLayers.some(\n      layer => layer && !mapboxLayerIds.includes(layer.id)\n    );\n    let viewports = deck.getViewports();\n    const mapboxViewportIdx = viewports.findIndex(vp => vp.id === 'mapbox');\n    const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;\n\n    if (hasNonMapboxLayers || hasNonMapboxViews) {\n      if (mapboxViewportIdx >= 0) {\n        viewports = viewports.slice();\n        viewports[mapboxViewportIdx] = getViewport(deck, map, false);\n      }\n\n      deck._drawLayers('mapbox-repaint', {\n        viewports,\n        layerFilter: params =>\n          (!deck.props.layerFilter || deck.props.layerFilter(params)) &&\n          (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id)),\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  (deck.userData as UserData).currentViewport = null;\n}\n\nfunction onMapMove(deck: Deck, map: Map): void {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction updateLayers(deck: Deck): void {\n  if ((deck.userData as UserData).isExternal) {\n    return;\n  }\n\n  const layers: Layer[] = [];\n  (deck.userData as UserData).mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n","import {getDeckInstance, addLayer, removeLayer, updateLayer, drawLayer} from './deck-utils';\nimport type {Map, CustomLayerInterface} from 'mapbox-gl';\nimport type {Deck, Layer} from '@deck.gl/core';\n\nexport type MapboxLayerProps<LayerT extends Layer> = Partial<LayerT['props']> & {\n  id: string;\n  renderingMode?: '2d' | '3d';\n  deck?: Deck;\n};\n\nexport default class MapboxLayer<LayerT extends Layer> implements CustomLayerInterface {\n  id: string;\n  type: 'custom';\n  renderingMode: '2d' | '3d';\n  map: Map | null;\n  deck: Deck | null;\n  props: MapboxLayerProps<LayerT>;\n\n  /* eslint-disable no-this-before-super */\n  constructor(props: MapboxLayerProps<LayerT>) {\n    if (!props.id) {\n      throw new Error('Layer must have an unique id');\n    }\n\n    this.id = props.id;\n    this.type = 'custom';\n    this.renderingMode = props.renderingMode || '3d';\n    this.map = null;\n    this.deck = null;\n    this.props = props;\n  }\n\n  /* Mapbox custom layer methods */\n\n  onAdd(map: Map, gl: WebGLRenderingContext): void {\n    this.map = map;\n    this.deck = getDeckInstance({map, gl, deck: this.props.deck});\n    addLayer(this.deck, this);\n  }\n\n  onRemove(): void {\n    if (this.deck) {\n      removeLayer(this.deck, this);\n    }\n  }\n\n  setProps(props: MapboxLayerProps<LayerT>) {\n    // id cannot be changed\n    Object.assign(this.props, props, {id: this.id});\n    // safe guard in case setProps is called before onAdd\n    if (this.deck) {\n      updateLayer(this.deck, this);\n    }\n  }\n\n  render() {\n    drawLayer(this.deck!, this.map!, this);\n  }\n}\n"],"names":["MapboxGLWrapper","constructor","solution","map","canvasMapbox","center","lng","lat","mapboxgl","setCenter","toMap","x","y","p","this","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","divHost","id","process","preserveDrawingBuffer","container","zoom","style","dragRotate","disable","on","window","addEventListener","k","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","renderer","canvas","width","height","getBounds","addSource","type","coordinates","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","img","Image","src","toDataURL","link","download","href","click","DeckGL","deckLayer","deckLayer2","mapboxWrapper","MapboxLayer","ScatterplotLayer","data","size","getPosition","d","getRadius","getFillColor","getLineColor","ArcLayer","pickup","dropoff","getSourcePosition","getTargetPosition","getSourceColor","getTargetColor","strokeWidth","Renderer","RendererCanvas","app","super","time","pts","isActive","mouseDrag","pointerEvents","mixBlendMode","start","ctx","globalCompositeOperation","render","z","getZoom","zoomFactor","Math","pow","i","length","pt","beginPath","arc","sin","PI","closePath","fillStyle","fill","UIWrapper","initUI","divMenu","appendChild","textContent","margin","onclick","Solution","deckGL","uiWrapper","keyDown","destroy","lastElementChild","removeChild","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getLineWidth","deprecatedFor","outline","getColor","Layer","getShaders","vs","fs","modules","project32","picking","initializeState","getAttributeManager","addInstanced","instancePositions","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","gl","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","UNIT","Model","geometry","Geometry","drawMode","vertexCount","attributes","positions","Float32Array","isInstanced","TILE_SIZE","DEGREES_TO_RADIANS","getDeckInstance","deck","__deck","customRender","_customRender","onLoad","deckProps","currProps","triggerRepaint","parameters","depthMask","depthTest","blend","blendFunc","polygonOffsetFill","depthFunc","blendEquation","views","MapView","deckInstance","Object","assign","touchAction","viewState","getViewState","isInitialized","watchMapMove","setProps","userData","isExternal","Deck","finalize","removeDeckInstance","mapboxLayers","Set","mapboxLayerIds","Array","from","layer","hasNonMapboxLayers","flatten","layers","Boolean","some","includes","viewports","getViewports","mapboxViewportIdx","findIndex","vp","hasNonMapboxViews","slice","getViewport","_drawLayers","layerFilter","viewport","clearCanvas","currentViewport","afterRender","_handleMapMove","needsRedraw","clearRedrawFlags","onMapMove","off","getCenter","longitude","latitude","bearing","getBearing","pitch","getPitch","padding","getPadding","repeat","getRenderWorldCopies","getTerrain","_map$getTerrain","getFreeCameraOptions","undefined","transform","cameraX","cameraY","cameraZ","lngLatToWorld","dx","dy","cameraToCenterDistanceGround","sqrt","pitchRadians","altitudePixels","scale","cos","log2","surfaceElevation","unitsPerMeter","elevation","centerCameraOnTerrain","useMapboxProjection","WebMercatorViewport","nearZMultiplier","updateLayers","forEach","LayerType","push","_defineProperty","Error","renderingMode","onAdd","add","onRemove","clearStack","drawLayer"],"sourceRoot":""}