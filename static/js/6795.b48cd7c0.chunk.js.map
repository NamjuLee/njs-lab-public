{"version":3,"file":"static/js/6795.b48cd7c0.chunk.js","mappings":"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","sources":["lib/NJSCore/App/NUI/AssetWrapper/index.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Core/IndePanelRender.ts","lib/NJSCore/App/NUI/Core/Base/UIWrapperBase.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/IndependentPanel.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Core/ActiveCommand.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/IndependentPanelWrapper.ts","lib/NJSCore/App/NUI/NUI.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Core/IndePanelPreset.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/BodyDiv.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/BtnClose.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/BtnHam.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/BtnMinimize.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/BtnResize.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/IndeSubMenu.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/IndeSubPanel.ts","lib/NJSCore/App/NUI/WrapperIndependentPanel/Panel/Common/base/base/IndePanelBase.ts","lib/NJSCore/Core/CoreGeometry/NGeometry/NVector3.ts","lib/NJSCore/Core/Geometry/NGeometry/NVector3.ts","lib/NJSCore/Core/NColor/Utility/ColorUtility.ts","lib/NJSCore/Core/NGL/GLSLShaderPreset/GL3DPreset.ts","lib/NJSCore/Core/NGL/Math/Vec3.ts","lib/NJSCore/Core/NGL/Math/Mat4.ts","lib/NJSCore/Core/NGL/Math/Matrix4.ts","lib/NJSCore/Core/NGL/Math/Quaternion.ts","lib/NJSCore/Core/NGL/Utility/GLBlending.ts","lib/NJSCore/Core/NGL/Utility/GLCommon.ts","lib/NJSCore/Core/NUtility/Math/MathUtility.ts","lib/NJSCore/Core/CoreGeometry/NGeometry/NLine.ts","lib/NJSCore/Core/Geometry/NGeometry/NLine.ts","lib/NJSCore/Core/Geometry/NGeometry/Base/AbstractGeometryBase.ts","lib/NJSCore/Core/Geometry/NGeometry/Utility/NVectorUtility.ts","lib/NJSCore/Core/NUtility/Animation/NumericalMotion.ts","lib/NJSCore/Core/NUtility/Animation/Deltatime.ts","lib/NJSCore/Core/AppCore/Common/Enumeration.ts","lib/NJSCore/IO/EventInteraction/MouseInteraction.ts","lib/NJSCore/IO/EventInteraction/TouchInteraction.ts","lib/NJSCore/IO/Device/Camera.ts","lib/NJSCore/IO/FilesURL/NJSLoader.ts","lib/NJSCore/Core/NUtility/Math/SortUtility.ts","lib/NJSCore/Core/NUtility/Web/BrowserUtility.ts","lib/NJSCore/Core/NUtility/Web/ESUtility.ts","lib/NJSCore/Core/NUtility/SVG/SVGUtility.ts","lib/NJSCore/Core/NData/Core/StatisticsUtility.ts","lib/NJSCore/Core/NData/NGeoJSON.ts","lib/NJSCore/Core/NData/NGeoJSONPolygon.ts","lib/NJSCore/Core/NData/DataUtilities.ts","lib/NJSCore/Core/NData/NGeoJSONFeatureService.ts","lib/NJSCore/Core/NData/DataStructure/Pixel.ts","lib/NJSCore/Core/NData/DataStructure/PixelMap.ts","lib/NJSCore/Core/NData/DataStructure/PixelMapGlobe.ts","lib/NJSCore/Core/NData/DataStructure/PixelMapTerrain.ts","lib/NJSCore/Core/NData/DataStructureImplmentation/ALineGraph.ts","lib/NJSCore/Core/NData/DataStructureImplmentation/DataPixelMap.ts","lib/NJSCore/Core/AppCore/Common/AppProperties.ts"],"sourcesContent":["\r\nconst themeRed = require('./theme/red.json');\r\nconst themePurple = require('./theme/purple.json');\r\nconst themeBlue = require('./theme/blue.json');\r\nconst themeGreen = require('./theme/green.json');\r\nconst themeOrange = require('./theme/orange.json');\r\nconst themeGray = require('./theme/gray.json');\r\nconst themeDarkgray = require('./theme/darkGray.json');\r\nconst themeBlack = require('./theme/black.json');\r\n\r\nexport class Asset {\r\n    // tslint:disable-next-line:no-any\r\n    themeRed: any; themePurple: any; themeBlue: any; themeGreen: any; themeOrange: any; themeGray: any; themeDarkgray: any; themeBlack: any;\r\n    constructor() {\r\n        this.ImportAssets();\r\n    }\r\n    async ImportAssets() {\r\n        this.themeRed = themeRed;\r\n        this.themePurple = themePurple;\r\n        this.themeBlue = themeBlue;\r\n        this.themeGreen = themeGreen;\r\n        this.themeOrange = themeOrange;\r\n        this.themeGray = themeGray;\r\n        this.themeDarkgray = themeDarkgray;\r\n        this.themeBlack = themeBlack;\r\n    }\r\n}","\r\nimport { MouseEventData } from '../../../../';\r\nimport { IndePanelBase } from '../Panel/Common/base/base/IndePanelBase';\r\nimport { IndependentPanelWrapper } from '../IndependentPanelWrapper';\r\nexport class IndePanelRender {\r\n    list: IndePanelBase[] = [];\r\n\r\n    isShow: boolean = false;\r\n    isStillCapturedFly: boolean = true;\r\n\r\n    independentPanelWrapper: IndependentPanelWrapper;\r\n    isHidden: boolean = false;\r\n    capture: IndePanelBase | undefined = undefined;\r\n\r\n    constructor(independentPanelWrapper: IndependentPanelWrapper) {\r\n        this.independentPanelWrapper = independentPanelWrapper;\r\n    }\r\n    get IsHidden() { return this.isHidden; }\r\n    set IsHidden(v: boolean) { this.isHidden = v; }\r\n    RemoveAllCapturedBlock() {\r\n        if (this.capture === undefined) { return; }\r\n        this.capture.Remove();\r\n    }\r\n    CheckOvered(e: MouseEventData) {\r\n        let i = this.list.length;\r\n        let mouseHoverUI = false;\r\n        while (i--) {\r\n            if (this.list[i].isHidden) { continue; }\r\n            if (this.list[i].IsMouseInside(e.x, e.y)) {\r\n                this.list[i].IsHover = true;\r\n                mouseHoverUI = true;\r\n            } else {\r\n                this.list[i].IsHover = false;\r\n            }\r\n        }\r\n        if (mouseHoverUI) {\r\n            // this.independentPanelWrapper.stoppropagation = true;\r\n        } else {\r\n            // this.independentPanelWrapper.stoppropagation = false;\r\n        }\r\n    }\r\n    FindAtPoint(e: MouseEventData) {\r\n        let i = this.list.length;\r\n        while (i--) {\r\n            if (this.list[i].isHidden) { continue; }\r\n            if (this.list[i].IsMouseInside(e.x, e.y)) {\r\n                return this.list[i];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    MouseDown(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        let ui = this.FindAtPoint(e);\r\n        if (ui !== undefined) {\r\n            this.independentPanelWrapper.enablePan = false;\r\n            ui.MouseDown();\r\n            this.capture = ui;\r\n        } else {\r\n            this.capture = undefined;\r\n        }\r\n    }\r\n    MouseRight(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        let ui = this.FindAtPoint(e);\r\n        if (ui !== undefined) {\r\n            this.independentPanelWrapper.enablePan = false;\r\n            ui.MouseRight(e);\r\n            this.capture = ui;\r\n        } else {\r\n            this.capture = undefined;\r\n        }\r\n    }\r\n    MouseDrag(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        if (this.capture !== undefined) {\r\n            // this.independentPanelWrapper.stoppropagation = true;\r\n            this.capture.MouseDrag(e);\r\n        }\r\n    }\r\n    MouseDouble(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        let ui = this.FindAtPoint(e);\r\n        if (ui !== undefined) {\r\n            this.independentPanelWrapper.enablePan = false;\r\n            ui.MouseDouble(e);\r\n            // this.capture = ui;\r\n        }\r\n        // if (this.capture !== undefined) { }\r\n    }\r\n    MouseMove(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        this.CheckOvered(e);\r\n        this.FindAtPoint(e);\r\n    }\r\n    MouseUp(e: MouseEventData) {\r\n        if (this.isHidden) { return; }\r\n        if (this.capture !== undefined) {\r\n            this.capture.MouseUp(e);\r\n            // this.capture = undefined;\r\n        }\r\n        // this.independentPanelWrapper.stoppropagation = false;\r\n        this.independentPanelWrapper.enablePan = true;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        if (this.isHidden) { return; }\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].Render(ctx);\r\n        }\r\n        // ToolbarRender.Render(ctx);\r\n        // MenuRenderer.Render(ctx);\r\n        // console.log(IndePanelRender.list.length);\r\n    }\r\n    // .........................................................\r\n    Add(g: IndePanelBase) {\r\n        this.list.push(g);\r\n    }\r\n    Remove(g: IndePanelBase) {\r\n        this.list.splice(this.list.indexOf(g), 1);\r\n    }\r\n    RemoveAll() {\r\n        this.list = [];\r\n    }\r\n\r\n    ShowMenu(v: boolean) {\r\n        this.isShow = v;\r\n    }\r\n    Reset() {\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].IsHover = false;\r\n        }\r\n    }\r\n    // MouseMove(e: MouseEventData) {\r\n    //     // console.log(this.list);\r\n    //     if (!this.isShow) { return; }\r\n    //     for (let i = 0; i < this.list.length; ++i) {\r\n    //         if (this.list[i].IsMouseInside(e.x, e.y)) {\r\n    //             this.list[i].IsHover = true;\r\n    //         } else {\r\n    //             this.list[i].IsHover = false;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // MouseDown(e: MouseEventData) {\r\n    //     if (!this.isShow) { return; }\r\n    //     this.MouseMove(e);\r\n\r\n    //     for (let i = 0; i < this.list.length; ++i) {\r\n    //         if (this.list[i].IsHover) {\r\n    //             this.list[i].MouseDown();\r\n    //         }\r\n    //     }\r\n    // }\r\n}","\r\nimport { NVector3 } from '../../../../';\r\nimport { MouseEventData } from '../../../../IO/EventInteraction/MouseInteraction';\r\nimport { NUI } from '../../NUI';\r\nexport abstract class UIWrapperBase {\r\n    vec: NVector3;\r\n    width: number = 0;\r\n    height: number = 0;\r\n    nUI: NUI;\r\n    // modifyPanel: ModifyPanel;\r\n    isHidden: boolean;\r\n    isActivated: boolean = false;\r\n    constructor() {\r\n\r\n        // this.modifyPanel = new ModifyPanel(10, 600);\r\n        this.isHidden = true;\r\n        // this.Init();\r\n    }\r\n    Resize(width: number, height: number) {\r\n        this.width = width;\r\n    }\r\n    IsHiddenToggle() {\r\n        this.isHidden = !this.isHidden;\r\n        // this.modifyPanel.IsHidden = this.isHidden;\r\n        // this.\r\n    }\r\n    MouseMove(e: MouseEventData) {\r\n        /* */\r\n    }\r\n    MouseDown(e: MouseEventData) {\r\n        /* */\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    Reset() {\r\n        /* */\r\n    }\r\n    ShowMenu(v: boolean) {\r\n        /* */\r\n    }\r\n    Destroy() {\r\n        /* */\r\n    }\r\n}","import { NVector3 } from '../../../../../';\r\nimport { MouseEventData } from '../../../../../IO/EventInteraction/MouseInteraction';\r\n\r\nimport { IndependentPanelWrapper } from '../../IndependentPanelWrapper';\r\nimport { ColorUtility } from '../../../../../Core/NColor/';\r\n\r\nimport { IndePanelPreset } from '../../Core/IndePanelPreset';\r\n\r\nimport { IndePanelBase } from './base/base/IndePanelBase';\r\n\r\nimport { BtnClose } from './base/BtnClose';\r\nimport { BtnMinimize } from './base/BtnMinimize';\r\nimport { BtnHam } from './base/BtnHam';\r\nimport { BtnResize } from './base/BtnResize';\r\n\r\nimport { BodyDiv } from './base/BodyDiv';\r\nimport { IndeSubPanel } from './base/IndeSubPanel';\r\n\r\nexport class IndependentPanel extends IndePanelBase {\r\n    independentPanelWrapper: IndependentPanelWrapper;\r\n    divInput: HTMLTextAreaElement;\r\n\r\n    btnClose: BtnClose;\r\n    btnMini: BtnMinimize;\r\n    btnHam: BtnHam;\r\n    btnResize: BtnResize;\r\n\r\n    bodyDiv: BodyDiv;\r\n    subMenu: IndeSubPanel;\r\n\r\n    subs: IndePanelBase[] = [];\r\n\r\n    _content: string;\r\n\r\n    constructor(independentPanelWrapper: IndependentPanelWrapper, x: number = 0, y: number = 0, width: number = 300, height: number = 170, divNeeded: boolean = false) {\r\n        super(independentPanelWrapper);\r\n        this.independentPanelWrapper = independentPanelWrapper;\r\n        this.title = 'njslabSandbox V3';\r\n        this.width = width;\r\n        this.height = height;\r\n        if (x === 0 && y === 0) {\r\n            this.vec.x = (independentPanelWrapper.width * 0.5) - (this.width * 0.5);\r\n            this.vec.y = (independentPanelWrapper.height * 0.5) - (this.height * 0.5);\r\n        } else {\r\n            this.vec.x = x;\r\n            this.vec.y = y;\r\n        }\r\n        this.filletR = 7;\r\n        this.InitTop();\r\n        if (divNeeded) {\r\n            this.bodyDiv = new BodyDiv(this, this.vec.x, this.vec.y + this.HeadHeight, this.width, this.height - this.HeadHeight);\r\n            // this.bodyDiv.divText.style.background = 'red';\r\n        }\r\n    }\r\n    get IsMinimized() {\r\n        return this.isMinimized;\r\n    }\r\n    set IsMinimized(v: boolean) {\r\n        this.isMinimized = v;\r\n        this.btnResize.isHidden = v;\r\n        if (this.bodyDiv) { this.bodyDiv.Hide(v); }\r\n    }\r\n    get Width() {\r\n        return this.width;\r\n    }\r\n    set Width(v: number) {\r\n        let off = v - this.width;\r\n        this.width = v;\r\n        this.btnHam.vec.x += off;\r\n        this.subMenu.vec.x += off;\r\n        if (this.bodyDiv) { this.bodyDiv.Width = v; }\r\n    }\r\n    get Height() {\r\n        return this.height;\r\n    }\r\n    set Height(v: number) {\r\n        this.height = v;\r\n        if (this.bodyDiv) { this.bodyDiv.Height = v; }\r\n        // this.subMenu\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    set content(v: string) {\r\n        this._content = v;\r\n        if (this.bodyDiv) { this.bodyDiv.content = v; }\r\n    }\r\n    get HasSubMenu() {\r\n        return this.hasSubMenu;\r\n    }\r\n    set HasSubMenu(v: boolean) {\r\n        this.hasSubMenu = v;\r\n        this.subMenu.IsHidden = !v;\r\n    }\r\n    InitTop() {\r\n        this.btnClose = new BtnClose(this, this.vec.x, this.vec.y);\r\n        this.btnMini = new BtnMinimize(this, this.vec.x + 25, this.vec.y);\r\n        this.btnHam = new BtnHam(this, this.vec.x - 25 + this.width, this.vec.y);\r\n        this.btnResize = new BtnResize(this, this.vec.x + this.width - 10, this.vec.y + this.height - 10, 10, 10);\r\n\r\n        this.subMenu = new IndeSubPanel(this);\r\n        this.subs.push(this.btnClose, this.btnMini, this.btnHam);\r\n    }\r\n    Translate(e: MouseEventData): void {\r\n        if (!this.isMoveable) { return; }\r\n        let xo = e.x - e.preX;\r\n        let yo = e.y - e.preY;\r\n        this.vec.x += xo;\r\n        this.vec.y += yo;\r\n        for (let i = 0; i < this.boundarVecs.length; ++i) { this.boundarVecs[i].x += xo; this.boundarVecs[i].y += yo; }\r\n        for (let i = 0; i < this.subs.length; ++i) { this.subs[i].Translate(e); }\r\n        this.btnResize.vec.x += xo;\r\n        this.btnResize.vec.y += yo;\r\n        this.subMenu.Translate(xo, yo);\r\n        if (this.bodyDiv) { this.bodyDiv.Translate(xo, yo); }\r\n\r\n    }\r\n    Remove() {\r\n        for (let i = 0; i < this.subs.length; ++i) { this.subs[i].Remove(); }\r\n        if (this.bodyDiv) { this.bodyDiv.Remove(); }\r\n        this.btnResize.Remove();\r\n        this.independentPanelWrapper.indePanelRender.Remove(this);\r\n        this.RemovePost();\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        // console.log(IndePanelRender.length);\r\n        // this.vec.x = this.mainPanel.vec.x + this.xOff;\r\n        // this.vec.y = this.mainPanel.vec.y + this.yOff;\r\n        this.ComputeBoundary();\r\n\r\n        let color;\r\n        // if (this.isOver) {\r\n        //     color = ColorUtility.HexToCanvasColor(IndePanelPreset.theme.mainMenuOver, this.transparent);\r\n        // } else {\r\n        color = ColorUtility.HexToCanvasColor(IndePanelPreset.theme.mainMenuNormal, this.transparent);\r\n        // }\r\n        if (this.isMinimized) {\r\n            IndePanelPreset.TopRoundedRectFill(ctx, this.title, NVector3.GetBoundaryByVecWidthHeight(this.vec, this.width, this.HeadHeight), this.filletR, 0, this.isOver, this.isSelected, this.theme.colSelectedBG, false);\r\n\r\n        } else {\r\n            IndePanelPreset.RoundedRectFillWithColorMainMenu(ctx, this.title, this.boundarVecs, this.filletR, 0, this.isOver, this.isSelected, color);\r\n            IndePanelPreset.TopRoundedRectFill(ctx, this.title, NVector3.GetBoundaryByVecWidthHeight(this.vec, this.width, this.HeadHeight), this.filletR, 0, this.isOver, this.isSelected, this.theme.colSelectedBG, false);\r\n        }\r\n        this.RenderHeadTitle(ctx);\r\n        if (!this.isMinimized) {\r\n            this.RenderBodyContent(ctx);\r\n        }\r\n        if (this.hasSubMenu) {\r\n            this.subMenu.RenderPost(ctx);\r\n        }\r\n        this.RenderBtnHorizontal(ctx);\r\n    }\r\n    RenderBtnHorizontal(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    RenderHeadTitle(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        // if (this.isOver) {\r\n        //     ctx.fillStyle = IndePanelPreset.theme.mainMenuNormal;\r\n        // } else {\r\n        ctx.fillStyle = '#ffffff';\r\n        // }\r\n        ctx.textBaseline = 'top';\r\n        ctx.textAlign = 'center';\r\n        ctx.font = '100 12px Arial';\r\n        ctx.shadowBlur = 0;\r\n        // ctx.shadowColor = 'rgba(0,0,0,0.3)';\r\n        ctx.shadowOffsetY = 0;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.fillText(this.title, this.vec.x + (this.width * 0.5), this.vec.y + (this.HeadHeight * 0.5) - 7);\r\n\r\n        ctx.restore();\r\n    }\r\n    RenderBodyContent(ctx: CanvasRenderingContext2D) {\r\n        // ctx.save();\r\n        // // if (this.isOver) {\r\n        // //     ctx.fillStyle = IndePanelPreset.theme.mainMenuNormal;\r\n        // // } else {\r\n        // ctx.fillStyle = '#000000';\r\n        // // }\r\n        // ctx.textBaseline = 'top';\r\n        // ctx.textAlign = 'center';\r\n        // ctx.font = '100 9px Sans-serif';\r\n        // ctx.fillText(this.content, this.vec.x + (this.width * 0.5), this.vec.y + (this.height * 0.5) - 5);\r\n\r\n        // ctx.shadowBlur = 0;\r\n        // // ctx.shadowColor = 'rgba(0,0,0,0.3)';\r\n        // ctx.shadowOffsetY = 0;\r\n        // ctx.shadowOffsetX = 0;\r\n\r\n        // ctx.restore();\r\n    }\r\n}\r\n\r\n// InitCanvas(hostDiv: HTMLElement) {\r\n//     this.canvas = document.createElement('canvas');\r\n//     this.canvas.style.position = 'absolute';\r\n//     this.canvas.style.zIndex = '0';\r\n//     hostDiv.appendChild(this.canvas);\r\n\r\n//     this.canvas.id = 'NCanvasRenderer';\r\n//     this.canvas.className = 'njslabSandboxStaticCanvasRenderer';\r\n//     this.canvas.style.pointerEvents = 'none';\r\n//     this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n//     this.canvas.width = hostDiv.clientWidth; // hostDivForSize.clientWidth;\r\n//     this.canvas.height = hostDiv.clientHeight; // hostDivForSize.clientHeight;\r\n\r\n//     this.btnResize.ResizePropagation = (width: number, height: number) => {\r\n//         this.canvas.width = width; // hostDivForSize.clientWidth;\r\n//         this.canvas.height = height; // hostDivForSize.clientHeight;\r\n//     };\r\n//     this.Loop(this.ctx);\r\n// }\r\n// Loop(ctx: CanvasRenderingContext2D) {\r\n//     ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n//     requestAnimationFrame(() => { this.Loop(ctx); });\r\n//     this.Render(ctx);\r\n// }\r\n// Render(ctx: CanvasRenderingContext2D) {\r\n//     console.log('implementation needed');\r\n// }","import { IndependentPanelWrapper } from '../IndependentPanelWrapper';\r\nimport { IndependentPanel } from '../Panel/Common/IndependentPanel';\r\nexport class ActiveCommand {\r\n    independentPanel: IndependentPanelWrapper;\r\n    constructor(independentPanel: IndependentPanelWrapper) {\r\n        this.independentPanel = independentPanel;\r\n    }\r\n    AboutWhatisTheProduct() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 450, 300, true);\r\n        d.title = 'What is this Product?';\r\n        d.content = `Before you read this document, we would like to point out something behind it,\r\n                     which is our motivation and mission. The mission is to think about how to bridge and\r\n                     encourage people, who have no idea about data and visualization, to use and create map with GIS data activly.`;\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutApps() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 450, 300, true);\r\n        d.title = 'About Apps';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutViewer() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Viewer App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    // ....................................................\r\n    AboutDrawingTool() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Drawing Tool App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutAnnotation() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Annotation Tool App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNSketch() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NSketch App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutMapfilter() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Mapfilter App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutWallPaperGL() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'WallPaperGL App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNLearning() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NLearning App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutSmartDrawing() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Smart Drawing Addon';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutVoiceController() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Voice Controller';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutMapticon() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Mapticon Addon';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutBlock() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Drawing Block App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNGlobe() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NGlobe';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNTerrain() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NTerrain';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    ABoutNDynamics() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NDynamics';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    ABoutNRhino3d() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NRhino3d';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    // ....................................................\r\n    AboutVisCanvas() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Visualization Canvas App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutVisGL() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Visualization GL App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutVisGL3D() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'Visualization GL3D App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutVRAR() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'GraphicApp VR & AR App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutGL3d() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'GraphicApp GL3d App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNImage() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'GraphicApp NImage App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNWallpaper() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'GraphicApp NWallpaper App';\r\n        d.content = 'The content will be updated soon.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n    AboutNMedia() {\r\n        let d = new IndependentPanel(this.independentPanel, 0, 0, 300, 170, true);\r\n        d.title = 'NMedia & NController';\r\n        d.content = 'These apps are addons in njslabSandbox. NMedia is enable to us to access multimedia dvices like camera or voice, and NController provides with abilities to take advantage of extra dvices: HTC Vive, Leap Motion, or Kinect.';\r\n        d.btnHam.isHidden = true;\r\n    }\r\n}","import { NVector3 } from '../../../Core/CoreGeometry/NGeometry/NVector3';\r\nimport { MouseEventData } from '../../../IO/EventInteraction/MouseInteraction';\r\nimport { NUI } from '../NUI';\r\nimport { IndePanelRender } from './Core/IndePanelRender';\r\nimport { UIWrapperBase } from '../Core/Base/UIWrapperBase';\r\nimport { ControllerTheme } from '../Core/ControllerTheme';\r\nimport { ActiveCommand } from './Core/ActiveCommand';\r\nexport class IndependentPanelWrapper extends UIWrapperBase {\r\n\r\n    menuOff: number = 10;\r\n    textOffX: number = 12;\r\n    textOffY: number = 10;\r\n\r\n    nUI: NUI;\r\n    theme: ControllerTheme;\r\n\r\n    m: NVector3;\r\n    indePanelRender: IndePanelRender;\r\n\r\n    isActivated: boolean = false;\r\n    activeCommand: ActiveCommand;\r\n\r\n    constructor(nUI: NUI, x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\r\n        super();\r\n        this.nUI = nUI;\r\n        this.theme = this.nUI.theme;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.vec = new NVector3(x, y);\r\n\r\n        // console.log(this.width, this.height);\r\n\r\n        this.textOffY = this.theme.textYOff;\r\n\r\n        this.m = new NVector3(0, 0);\r\n        this.indePanelRender = new IndePanelRender(this);\r\n\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.activeCommand = new ActiveCommand(this);\r\n    }\r\n    Resize(width: number, height: number) {\r\n        //\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    MouseMove(e: MouseEventData) {\r\n        // console.log(e);\r\n        this.m.x = e.x; this.m.y = e.y;\r\n        this.indePanelRender.MouseMove(e);\r\n    }\r\n    MouseDrag(e: MouseEventData) {\r\n        this.indePanelRender.MouseDrag(e);\r\n    }\r\n    MouseDown(e: MouseEventData) {\r\n        this.indePanelRender.MouseDown(e);\r\n\r\n    }\r\n    Reset() {\r\n        this.indePanelRender.Reset();\r\n    }\r\n    ShowMenu(v: boolean) {\r\n        this.indePanelRender.ShowMenu(v);\r\n    }\r\n    Destroy() {\r\n        this.indePanelRender.RemoveAll();\r\n    }\r\n    set stopPropagation(v: boolean) {\r\n        this.nUI.stopPropagation = v;  // this.nUI.viewController.viewAppCoreWrapper.viewIOWrapper.eventInteraction.stopPropagation = v;\r\n    }\r\n    set enablePan(v: boolean) {\r\n        this.nUI.enablePan = v;\r\n        // this.viewUIWrapper.viewController.viewAppCoreWrapper.viewIOWrapper.  = v;\r\n    }\r\n}","import { MouseEventData } from '../../IO/EventInteraction/MouseInteraction';\r\n\r\nimport { Asset } from './AssetWrapper';\r\n\r\nimport { ActiveCommand } from './Core/ActiveCommand';\r\nimport { ControllerTheme } from './Core/ControllerTheme';\r\nimport { PullDownMenuWrapper } from './WrapperPullDownMenu/PullDownMenuWrapper';\r\nimport { IndependentPanelWrapper } from './WrapperIndependentPanel/IndependentPanelWrapper';\r\nimport { UICanvas } from './Core/UICanvas';\r\n\r\nexport class NUI {\r\n    asset: Asset;\r\n    theme: ControllerTheme;\r\n    themeType: string = 'default';\r\n    activeCommand: ActiveCommand;\r\n\r\n    independentPanelWrapper: IndependentPanelWrapper;\r\n    pullDownMenuWrapper: PullDownMenuWrapper;\r\n\r\n    divHost: HTMLElement;\r\n    width: number;\r\n    height: number;\r\n\r\n    indepCanvas: UICanvas;\r\n    pullDownCanvas: UICanvas;\r\n\r\n    private _stopPropagation: boolean = false;\r\n\r\n    constructor(divHost: HTMLElement, needUI: boolean = true) {\r\n        this.divHost = divHost;\r\n        this.width = this.divHost.clientWidth;\r\n        this.height = this.divHost.clientHeight;\r\n        console.log(needUI);\r\n        this.init(needUI)\r\n    }\r\n    public init(needUI: boolean) {\r\n        this.asset = new Asset();\r\n        // this.theme = new ControllerTheme();\r\n\r\n        // this.activeCommand = new ActiveCommand(this);\r\n\r\n        this.independentPanelWrapper = new IndependentPanelWrapper(this, 0, 0, this.width, this.height);\r\n\r\n        // this.indepCanvas = new UICanvas(this);\r\n        // if (needUI) {\r\n        //     this.indepCanvas.Render = (ctx: CanvasRenderingContext2D) => this.independentPanelWrapper.indePanelRender.Render(ctx);\r\n        // }\r\n\r\n        // this.pullDownMenuWrapper = new PullDownMenuWrapper(this, 0, 0, this.width, 25);\r\n        // this.pullDownCanvas = new UICanvas(this);\r\n        // if (this.pullDownCanvas.uiCanvas.style.zIndex) {\r\n        //     const zIndex = `${((+this.pullDownCanvas.uiCanvas.style.zIndex) + 1)}`;\r\n        //     if (zIndex) { this.pullDownCanvas.uiCanvas.style.zIndex = zIndex; }\r\n        // }\r\n        // if (needUI) {\r\n        //     this.pullDownCanvas.Render = (ctx: CanvasRenderingContext2D) => this.pullDownMenuWrapper.menuRenderer.Render(ctx);\r\n        // }\r\n        // this.pullDownMenuWrapper.ShowMenu(true);\r\n\r\n    }\r\n    public ShiftTheme(v: string) {\r\n        if (v === 'red') { this.theme.ShiftTheme(this.asset.themeRed); this.themeType = 'red'; return; }\r\n        if (v === 'blue') { this.theme.ShiftTheme(this.asset.themeBlue); this.themeType = 'blue'; return; }\r\n        if (v === 'purple') { this.theme.ShiftTheme(this.asset.themePurple); this.themeType = 'purple'; return; }\r\n        if (v === 'green') { this.theme.ShiftTheme(this.asset.themeGreen); this.themeType = 'green'; return; }\r\n        if (v === 'orange') { this.theme.ShiftTheme(this.asset.themeOrange); this.themeType = 'orange'; return; }\r\n        if (v === 'gray') { this.theme.ShiftTheme(this.asset.themeGray); this.themeType = 'gray'; return; }\r\n        if (v === 'darkGray') { this.theme.ShiftTheme(this.asset.themeDarkgray); this.themeType = 'darkGray'; return; }\r\n        if (v === 'black') { this.theme.ShiftTheme(this.asset.themeBlack); this.themeType = 'black'; return; }\r\n    }\r\n    public MouseInteractionMenu(m: MouseEventData) {\r\n        this.activeCommand.MouseEventController(m);\r\n    }\r\n    public Resize(width: number, height: number) {\r\n        this.indepCanvas.ResizeCanvas(width, height);\r\n        this.independentPanelWrapper.Resize(width, height);\r\n        this.pullDownCanvas.ResizeCanvas(width, height);\r\n        this.pullDownMenuWrapper.Resize(width, height);\r\n    }\r\n    public set stopPropagation(v: boolean) {\r\n        this._stopPropagation = v;\r\n\r\n        if (v) {\r\n            // console.log(v);\r\n            this.BindingStoppropagation(v);\r\n            setTimeout(() => {\r\n                this._stopPropagation = false;\r\n                this.BindingStoppropagation(false);\r\n            }, 500);\r\n        }\r\n    }\r\n    public get stopPropagation() {\r\n        return this._stopPropagation;\r\n    }\r\n    public BindingStoppropagation(v: boolean) {\r\n        //\r\n    }\r\n    public set enablePan(v: boolean) {\r\n        this.BindingEnablePan(v);\r\n    }\r\n    public BindingEnablePan(v: boolean) {\r\n        //\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public BindingActiveCommandController(app: string, ac: any) {\r\n        this.pullDownMenuWrapper.BuildMenuContent(app, ac);\r\n    }\r\n    public Destroy() {\r\n        this.indepCanvas.isActive = false;\r\n        this.pullDownCanvas.isActive = false;\r\n    }\r\n}\r\n","import { NVector3 } from '../../../../';\r\n// import { ADrawingPreset } from '../../AppDrawing/Canvas/CAnnotation/ADrawingPreset';\r\n// import { ColorUtility } from '../../Core/Utility';\r\n\r\nexport class IndePanelPreset {\r\n\r\n    static theme = {\r\n        'mainMenuNormal': '#ffffff', // '#1267B0', // '#0FAAEA;',\r\n        'mainMenuOver': '#0FAAEA'\r\n    };\r\n    static RoundedRectFill(ctx: CanvasRenderingContext2D, vs: NVector3[], r: number, xOff: number = 0, fillCol: string = '#ffffff', strokeCol: string = '#000000') {\r\n        // let color = s.backgroundColor;\r\n        let radius = r; // parseFloat(s.borderRadius);\r\n        // console.log(color);\r\n        // ctx.save();\r\n        ctx.lineWidth = 1; // parseFloat(s.lineWidth);\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(vs[0].x + xOff + radius, vs[0].y);\r\n        ctx.lineTo(vs[1].x - xOff - radius, vs[1].y);\r\n\r\n        ctx.arcTo(vs[1].x - xOff, vs[1].y, vs[1].x - xOff, vs[1].y + radius, radius);\r\n        ctx.lineTo(vs[2].x - xOff, vs[2].y - radius);\r\n\r\n        ctx.arcTo(vs[2].x - xOff, vs[2].y, vs[2].x - xOff - radius, vs[2].y, radius);\r\n        ctx.lineTo(vs[3].x + xOff + radius, vs[3].y);\r\n\r\n        ctx.arcTo(vs[3].x + xOff, vs[3].y, vs[3].x + xOff, vs[3].y - radius, radius);\r\n        ctx.lineTo(vs[0].x + xOff, vs[0].y + radius);\r\n        ctx.arcTo(vs[0].x + xOff, vs[0].y, vs[0].x + xOff + radius, vs[0].y, radius);\r\n        ctx.closePath();\r\n        ctx.strokeStyle = strokeCol;\r\n        ctx.fillStyle = fillCol;\r\n\r\n        ctx.shadowBlur = 4;\r\n        ctx.shadowColor = 'rgb(0,0,0,0.3)';\r\n        ctx.shadowOffsetY = 2;\r\n        ctx.shadowOffsetX = 2;\r\n\r\n        ctx.fill();\r\n        // ctx.stroke();\r\n        // ctx.restore();\r\n    }\r\n    static RoundedRectFillRForEach(ctx: CanvasRenderingContext2D, vs: NVector3[], r0: number, r1: number, r2: number, r3: number, xOff: number = 0, fillCol: string = '#ffffff', strokeCol: string = '#000000', isShadow: boolean = false) {\r\n        // let color = s.backgroundColor;\r\n        let radius0 = r0; // parseFloat(s.borderRadius);\r\n        let radius1 = r1; // parseFloat(s.borderRadius);\r\n        let radius2 = r2; // parseFloat(s.borderRadius);\r\n        let radius3 = r3; // parseFloat(s.borderRadius);\r\n        // console.log(color);\r\n        // ctx.save();\r\n        ctx.lineWidth = 1; // parseFloat(s.lineWidth);\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(vs[0].x + xOff + radius0, vs[0].y);\r\n        ctx.lineTo(vs[1].x - xOff - radius1, vs[1].y);\r\n\r\n        ctx.arcTo(vs[1].x - xOff, vs[1].y, vs[1].x - xOff, vs[1].y + radius1, radius1);\r\n        ctx.lineTo(vs[2].x - xOff, vs[2].y - radius1);\r\n\r\n        ctx.arcTo(vs[2].x - xOff, vs[2].y, vs[2].x - xOff - radius2, vs[2].y, radius2);\r\n        ctx.lineTo(vs[3].x + xOff + radius2, vs[3].y);\r\n\r\n        ctx.arcTo(vs[3].x + xOff, vs[3].y, vs[3].x + xOff, vs[3].y - radius3, radius3);\r\n        ctx.lineTo(vs[0].x + xOff, vs[0].y + radius3);\r\n\r\n        ctx.arcTo(vs[0].x + xOff, vs[0].y, vs[0].x + xOff + radius0, vs[0].y, radius0);\r\n        ctx.closePath();\r\n        ctx.strokeStyle = strokeCol;\r\n        ctx.fillStyle = fillCol;\r\n\r\n        if (isShadow) {\r\n            ctx.shadowBlur = 4;\r\n            ctx.shadowColor = 'rgb(0,0,0,0.3)';\r\n            ctx.shadowOffsetY = 2;\r\n            ctx.shadowOffsetX = 2;\r\n        } else {\r\n            ctx.shadowBlur = 0;\r\n            ctx.shadowOffsetY = 0;\r\n            ctx.shadowOffsetX = 0;\r\n        }\r\n\r\n        ctx.fill();\r\n        // ctx.stroke();\r\n        // ctx.restore();\r\n    }\r\n    static Text(ctx: CanvasRenderingContext2D, x: number, y: number, text: string, color: string = 'white') {\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.textBaseline = 'bottom';\r\n        ctx.textAlign = 'left'; // 'start', 'end', 'left', 'center', 'right';\r\n        ctx.fillText(text, x, y - 14);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    static RoundedRectFillWithColorMainMenu(ctx: CanvasRenderingContext2D, title: string, vs: NVector3[], r: number, xOff: number = 0, isOver: boolean, isSel: boolean, col: string, isShadow: boolean = true) {\r\n        let radius = r; // parseFloat(s.borderRadius);\r\n        let color: string = col;\r\n\r\n        ctx.save();\r\n        ctx.lineWidth = 2; // parseFloat(s.lineWidth);\r\n        ctx.beginPath();\r\n        ctx.moveTo(vs[0].x + xOff + radius, vs[0].y);\r\n        ctx.lineTo(vs[1].x - xOff - radius, vs[1].y);\r\n        ctx.arcTo(vs[1].x - xOff, vs[1].y, vs[1].x - xOff, vs[1].y + radius, radius);\r\n        ctx.lineTo(vs[2].x - xOff, vs[2].y - radius);\r\n        ctx.arcTo(vs[2].x - xOff, vs[2].y, vs[2].x - xOff - radius, vs[2].y, radius);\r\n        ctx.lineTo(vs[3].x + xOff + radius, vs[3].y);\r\n        ctx.arcTo(vs[3].x + xOff, vs[3].y, vs[3].x + xOff, vs[3].y - radius, radius);\r\n        ctx.lineTo(vs[0].x + xOff, vs[0].y + radius);\r\n        ctx.arcTo(vs[0].x + xOff, vs[0].y, vs[0].x + xOff + radius, vs[0].y, radius);\r\n        ctx.closePath();\r\n        ctx.strokeStyle = color; // s.strokeStyle;\r\n        ctx.fillStyle = color;\r\n        if (isShadow) {\r\n            ctx.shadowBlur = 7;\r\n            ctx.shadowColor = 'rgb(0,0,0,0.5)';\r\n            ctx.shadowOffsetY = 1.5;\r\n            ctx.shadowOffsetX = 1.5;\r\n        } else {\r\n            ctx.shadowBlur = 0;\r\n            ctx.shadowOffsetY = 0;\r\n            ctx.shadowOffsetX = 0;\r\n        }\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n    }\r\n    static TopRoundedRectFill(ctx: CanvasRenderingContext2D, title: string, vs: NVector3[], r: number, xOff: number = 0, isOver: boolean, isSel: boolean, col: string, isShadow: boolean = true) {\r\n        let radius = r; // parseFloat(s.borderRadius);\r\n        let color: string = col;\r\n\r\n        ctx.save();\r\n        ctx.lineWidth = 2; // parseFloat(s.lineWidth);\r\n        ctx.beginPath();\r\n        ctx.moveTo(vs[0].x + xOff + radius, vs[0].y);\r\n        ctx.lineTo(vs[1].x - xOff - radius, vs[1].y);\r\n        ctx.arcTo(vs[1].x - xOff, vs[1].y, vs[1].x - xOff, vs[1].y + radius, radius);\r\n        ctx.lineTo(vs[2].x - xOff, vs[2].y);\r\n        ctx.lineTo(vs[3].x + xOff, vs[3].y);\r\n        ctx.lineTo(vs[0].x + xOff, vs[0].y + radius);\r\n        ctx.arcTo(vs[0].x + xOff, vs[0].y, vs[0].x + xOff + radius, vs[0].y, radius);\r\n        ctx.closePath();\r\n        ctx.strokeStyle = color; // s.strokeStyle;\r\n        ctx.fillStyle = color;\r\n        if (isShadow) {\r\n            ctx.shadowBlur = 4;\r\n            ctx.shadowColor = 'rgb(0,0,0,0.3)';\r\n            ctx.shadowOffsetY = 2;\r\n            ctx.shadowOffsetX = 2;\r\n        } else {\r\n            ctx.shadowBlur = 0;\r\n            ctx.shadowOffsetY = 0;\r\n            ctx.shadowOffsetX = 0;\r\n        }\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n    }\r\n    constructor() { /* */ }\r\n\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { IndependentPanel } from '../IndependentPanel';\r\nexport class BodyDiv {\r\n    static zIndex = 9999;\r\n    host: IndependentPanel;\r\n    vec: NVector3;\r\n\r\n    divAnchor: HTMLDivElement;\r\n    div: HTMLDivElement;\r\n    divHost: HTMLDivElement;\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    private xOff0: number = 5;\r\n    private yOff0: number = 5;\r\n    private xOff1: number = 25;\r\n    private yOff1: number = 25;\r\n\r\n    private _textAlign: string = 'left';\r\n    private _textCol: string;\r\n    private _content: string;\r\n\r\n    static GetZIndex() {\r\n        return (BodyDiv.zIndex--).toString();\r\n    }\r\n\r\n    constructor(host: IndependentPanel, x: number, y: number, width: number, height: number) {\r\n        this.host = host;\r\n        this.vec = new NVector3(x, y);\r\n        this.width = width;\r\n        this.height = height;\r\n        // console.log(this.host.independentPanelWrapper.viewUIWrapper);\r\n        this.divHost = this.host.independentPanelWrapper.nUI.divHost as HTMLDivElement;\r\n        this.GetDivBaseContainer();\r\n        this.textAlign = 'left';\r\n        // this.textCol = this.host.renderer.currentStyle.textCol;\r\n    }\r\n    set textCol(v: string) {\r\n        this._textCol = v;\r\n        this.div.style.color = this._textCol;\r\n    }\r\n    set textAlign(v: string) {\r\n        this._textAlign = v;\r\n        this.div.style.textAlign = this._textAlign;\r\n    }\r\n    get Width() {\r\n        return this.width;\r\n    }\r\n    set Width(v: number) {\r\n        this.width = v;\r\n        this.UpdateSize();\r\n    }\r\n    get Height() {\r\n        return this.height;\r\n    }\r\n    set Height(v: number) {\r\n        this.height = v;\r\n        this.UpdateSize();\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    set content(v: string) {\r\n        this._content = v;\r\n        this.div.textContent = v;\r\n    }\r\n    Hide(v: boolean) {\r\n        if (v) {\r\n            this.Remove();\r\n        } else {\r\n            this.GetDivBaseContainer();\r\n        }\r\n    }\r\n\r\n    Translate(xo: number, yo: number) {\r\n        this.vec.x += xo; this.vec.y += yo;\r\n        this.div.style.left = this.vec.x + this.xOff0 + 'px';\r\n        this.div.style.top = this.vec.y + this.yOff0 + 'px';\r\n    }\r\n    UpdateSize() {\r\n        this.div.style.width = this.width - this.xOff1 + 'px';\r\n        this.div.style.height = this.height - this.host.HeadHeight - this.yOff1 + 'px';\r\n    }\r\n    Remove() {\r\n        this.divHost.removeChild(this.div);\r\n    }\r\n    private GetDivBaseContainer() {\r\n        let div = document.createElement('div');\r\n        div.style.position = 'absolute';\r\n        div.style.pointerEvents = 'none';\r\n        div.id = `indePanel`;\r\n        div.style.height = this.height - this.yOff1 + 'px';\r\n        div.style.width = this.width - this.xOff1 + 'px';\r\n        div.style.left = this.vec.x + this.xOff0 + 'px';\r\n        div.style.top = this.vec.y + this.yOff0 + 'px';\r\n        // div.style.background = ColorUtility.HexToCanvasColor('#ffffff', '0.5');\r\n        div.style.zIndex = '10'; // BodyDiv.GetZIndex();\r\n        div.style.padding = '6px';\r\n        div.style.paddingLeft = '6px';\r\n        div.style.wordWrap = 'break-word'; // word-wrap: break-word\r\n        div.style.overflow = 'hidden'; // word-wrap: break-word\r\n        div.textContent = this._content;\r\n        div.style.font = '13px Arial';\r\n        div.style.fontWeight = 'lighter';\r\n        div.style.lineHeight = '23px';\r\n        // div.style.background = '#ff0000';\r\n        div.style.textAlign = this._textAlign;\r\n        div.style.color = this.textCol;\r\n\r\n        this.divHost.appendChild(div);\r\n        this.div = div;\r\n        return div;\r\n    }\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { IndePanelBase } from './base/IndePanelBase';\r\n\r\nexport class BtnClose extends IndePanelBase {\r\n\r\n    host: IndePanelBase;\r\n\r\n    constructor(indePanelBase: IndePanelBase, x: number, y: number) {\r\n        super(indePanelBase.independentPanelWrapper);\r\n        this.title = 'X';\r\n        this.vec = new NVector3(x, y);\r\n        this.host = indePanelBase;\r\n        this.width = indePanelBase.HeadHeight;\r\n        this.height = indePanelBase.HeadHeight;\r\n    }\r\n    MouseDown() {\r\n        this.independentPanelWrapper.stopPropagation = true;\r\n        this.host.Remove();\r\n\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        // this.ComputeBoundary();\r\n        // IndePanelPreset.RoundedRectFillWithColorMainMenu(ctx, this.title, this.boundarVecs, this.filletR, 0, this.isOver, this.isSelected, '#ff0000', false);\r\n        this.RenderTitle(ctx);\r\n\r\n    }\r\n    RenderTitle(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        if (this.isOver) {\r\n            ctx.fillStyle = 'black';\r\n        } else {\r\n            ctx.fillStyle = 'white';\r\n        }\r\n        ctx.textBaseline = 'top';\r\n        ctx.textAlign = 'center';\r\n        ctx.font = '300 17px Sans-serif';\r\n        ctx.fillText(this.title, this.vec.x + (this.width * 0.5) - 3, this.vec.y + (this.height * 0.5) - 8);\r\n\r\n        ctx.shadowBlur = 0;\r\n        ctx.shadowOffsetY = 0;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.restore();\r\n    }\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { MouseEventData } from '../../../../../../IO/EventInteraction/MouseInteraction';\r\nimport { IndePanelBase } from './base/IndePanelBase';\r\nexport class BtnHam extends IndePanelBase {\r\n\r\n    host: IndePanelBase;\r\n\r\n    constructor(indePanelBase: IndePanelBase, x: number, y: number) {\r\n        super(indePanelBase.independentPanelWrapper);\r\n        this.title = '-';\r\n        this.vec = new NVector3(x, y);\r\n        this.host = indePanelBase;\r\n        this.width = 20;\r\n        this.height = 20;\r\n    }\r\n    MouseDown() {\r\n        this.independentPanelWrapper.stopPropagation = true;\r\n        this.host.HasSubMenu = !this.host.HasSubMenu;\r\n    }\r\n    MouseDrag(e: MouseEventData) { /* */ }\r\n    Move(x: number, y: number) { /* */ }\r\n    // Translate(e: MouseEventData): void {\r\n    //     /* */\r\n    // }\r\n    RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        // this.ComputeBoundary();\r\n        // IndePanelPreset.RoundedRectFillWithColorMainMenu(ctx, this.title, this.boundarVecs, this.filletR, 0, this.isOver, this.isSelected, '#ff0000', false);\r\n\r\n        ctx.save();\r\n        if (this.isOver) {\r\n            ctx.strokeStyle = 'black';\r\n        } else {\r\n            ctx.strokeStyle = 'white';\r\n        }\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 2;\r\n        // if (this.host.isMinimized) {\r\n        //     ctx.rect(this.vec.x, this.vec.y + this.host.HeadHeight * 0.5 - 5, 10, 10);\r\n        // } else {\r\n\r\n        const theHeight = this.host.HeadHeight * 0.5;\r\n        const off = 5;\r\n        ctx.moveTo(this.vec.x, this.vec.y + theHeight - off);\r\n        ctx.lineTo(this.vec.x + 10, this.vec.y + theHeight - off);\r\n\r\n        ctx.moveTo(this.vec.x, this.vec.y + theHeight);\r\n        ctx.lineTo(this.vec.x + 10, this.vec.y + theHeight);\r\n\r\n        ctx.moveTo(this.vec.x, this.vec.y + theHeight + off);\r\n        ctx.lineTo(this.vec.x + 10, this.vec.y + theHeight + off);\r\n\r\n        // }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { MouseEventData } from '../../../../../../IO/EventInteraction/MouseInteraction';\r\nimport { IndePanelBase } from './base/IndePanelBase';\r\nexport class BtnMinimize extends IndePanelBase {\r\n\r\n    host: IndePanelBase;\r\n\r\n    constructor(indePanelBase: IndePanelBase, x: number, y: number) {\r\n        super(indePanelBase.independentPanelWrapper);\r\n        this.title = '-';\r\n        this.vec = new NVector3(x, y);\r\n        this.host = indePanelBase;\r\n        this.width = 20;\r\n        this.height = 20;\r\n    }\r\n    MouseDown() {\r\n        this.independentPanelWrapper.stopPropagation = true;\r\n        this.host.IsMinimized = !this.host.IsMinimized;\r\n    }\r\n    MouseDrag(e: MouseEventData) { /* */ }\r\n    Move(x: number, y: number) { /* */ }\r\n    // Translate(e: MouseEventData): void {\r\n    //     /* */\r\n    // }\r\n    RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        // this.ComputeBoundary();\r\n        // IndePanelPreset.RoundedRectFillWithColorMainMenu(ctx, this.title, this.boundarVecs, this.filletR, 0, this.isOver, this.isSelected, '#ff0000', false);\r\n\r\n        ctx.save();\r\n        if (this.isOver) {\r\n            ctx.strokeStyle = 'black';\r\n        } else {\r\n            ctx.strokeStyle = 'white';\r\n        }\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 2;\r\n        if (this.host.isMinimized) {\r\n            ctx.rect(this.vec.x, this.vec.y + this.host.HeadHeight * 0.5 - 5, 10, 10);\r\n        } else {\r\n            ctx.moveTo(this.vec.x, this.vec.y + this.host.HeadHeight * 0.5);\r\n            ctx.lineTo(this.vec.x + 10, this.vec.y + this.host.HeadHeight * 0.5);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { MouseEventData } from '../../../../../../IO/EventInteraction/MouseInteraction';\r\n\r\nimport { IndePanelBase } from './base/IndePanelBase';\r\n\r\nexport class BtnResize extends IndePanelBase {\r\n\r\n    host: IndePanelBase;\r\n\r\n    constructor(cUI: IndePanelBase, x: number, y: number, width: number, height: number) {\r\n        super(cUI.independentPanelWrapper);\r\n        this.title = '/';\r\n        this.vec = new NVector3(x, y);\r\n        this.host = cUI;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    MouseDown() {\r\n        this.independentPanelWrapper.stopPropagation = true;\r\n        //  this.host.isMinimized = !this.host.isMinimized;\r\n    }\r\n    Translate(e: MouseEventData): void {\r\n        if (!this.isMoveable) { return; }\r\n        let xo = e.x - e.preX;\r\n        let yo = e.y - e.preY;\r\n\r\n        let xx = this.host.width + xo;\r\n        let yy = this.host.height + yo;\r\n        if (xx < this.host.minWidth) { xo = 0; }\r\n        if (yy < this.host.minHeight) { yo = 0; }\r\n        this.host.Width += xo;\r\n        this.host.Height += yo;\r\n        this.ResizePropagation(this.host.Width, this.host.Height);\r\n        this.vec.x += xo;\r\n        this.vec.y += yo;\r\n        for (let i = 0; i < this.boundarVecs.length; ++i) { this.boundarVecs[i].x += xo; this.boundarVecs[i].y += yo; }\r\n    }\r\n    ResizePropagation(width: number, height: number) {\r\n        // console.log('ResizePropagation', width,  height);\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        if (this.isHidden) { return; }\r\n        // this.ComputeBoundary();\r\n        // IndePanelPreset.RoundedRectFillWithColorMainMenu(ctx, this.title, this.boundarVecs, this.filletR, 0, this.isOver, this.isSelected, '#ff0000', false);\r\n\r\n        ctx.save();\r\n        if (this.isOver) {\r\n            ctx.strokeStyle = 'black';\r\n        } else {\r\n            ctx.strokeStyle = 'gray';\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.vec.x + this.width - 5, this.vec.y);\r\n        ctx.lineTo(this.vec.x, this.vec.y + this.height - 5);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n\r\n    }\r\n\r\n}","import { NVector3 } from '../../../../../../';\r\nimport { MouseEventData } from '../../../../../../IO/EventInteraction/MouseInteraction';\r\n\r\nimport { IndeSubPanel } from './IndeSubPanel';\r\nimport { IndePanelBase } from './base/IndePanelBase';\r\n\r\nimport { IndePanelPreset } from '../../../Core/IndePanelPreset';\r\n\r\nexport class IndeSubMenu extends IndePanelBase {\r\n    list: string[] = [];\r\n    indeSubPanel: IndeSubPanel;\r\n    width: number;\r\n    height: number;\r\n    vec: NVector3;\r\n    strings: string[];\r\n    stringSlice: string;\r\n    index: number = 0;\r\n    constructor(indeSubPanel: IndeSubPanel, i: number, v: string) {\r\n        super(indeSubPanel.independentPanel.independentPanelWrapper);\r\n        this.indeSubPanel = indeSubPanel;\r\n        this.index = i;\r\n        this.width = this.indeSubPanel.width - 10;\r\n        this.height = this.indeSubPanel.textHeight;\r\n        this.title = v;\r\n        this.stringSlice = v;\r\n        this.vec = new NVector3(this.indeSubPanel.vec.x + 5, this.indeSubPanel.vec.y + 5 + this.index * this.height);\r\n        this.isMoveable = false;\r\n        this.isHidden = true;\r\n    }\r\n    Translate(e: MouseEventData): void {\r\n        if (!this.isMoveable) { return; }\r\n    }\r\n    TranslateByXY(xo: number, yo: number) {\r\n        this.vec.x += xo; this.vec.y += yo;\r\n    }\r\n    MouseDown() {\r\n        this.independentPanelWrapper.stopPropagation = true;\r\n        // console.log(this.title);\r\n\r\n        // console.log(this.indeSubPanel);\r\n        if (this.indeSubPanel.independentPanel.divInput) {\r\n            this.indeSubPanel.independentPanel.divInput.value = this.title;\r\n        }\r\n        this.BindingMouseDownPost(this.title);\r\n    }\r\n    BindingMouseDownPost(v: string) {\r\n        this.indeSubPanel.independentPanel.ExecuteCommand(v);\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D) {\r\n        this.vec.x = this.indeSubPanel.vec.x + 5;\r\n        this.vec.y = this.indeSubPanel.vec.y + 5 + this.index * this.height;\r\n\r\n        if (this.isHidden) { return; }\r\n        if (this.IsHover) {\r\n            let fillCol = this.theme.colBG;\r\n            IndePanelPreset.RoundedRectFill(ctx, NVector3.GetBoundaryByVecWidthHeight(this.vec, this.width, this.height), 3, 0, fillCol);\r\n        }\r\n\r\n        if (this.IsHover) {\r\n            ctx.fillStyle = this.theme.colSelectedBG;\r\n        } else {\r\n            ctx.fillStyle = '#ffffff';\r\n        }\r\n\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'left';\r\n        ctx.font = 'lighter 11px Arial';\r\n        ctx.shadowBlur = 0;\r\n        // console.log(ctx.canvas.style.letterSpacing);\r\n        ctx.shadowOffsetY = 0;\r\n        ctx.shadowOffsetX = 0;\r\n        this.strings = this.FragmentText(ctx, this.title.slice(0, 25), this.width - 5);\r\n        ctx.fillText(this.strings[0], this.vec.x + 2, this.vec.y + (this.HeadHeight * 0.5) - 2);\r\n\r\n    }\r\n    // reference : http://sourcoder.blogspot.com/2012/12/text-wrapping-in-html-canvas.html\r\n    private FragmentText(ctx: CanvasRenderingContext2D, text: string, maxWidth: number) {\r\n        let words = text.split(' ');\r\n        let lines: string[] = [];\r\n        let line = '';\r\n        if (ctx.measureText(text).width < maxWidth) { return [text]; }\r\n        while (words.length > 0) {\r\n            var split = false;\r\n            while (ctx.measureText(words[0]).width >= maxWidth) {\r\n                var tmp = words[0];\r\n                words[0] = tmp.slice(0, -1);\r\n                if (!split) {\r\n                    split = true;\r\n                    words.splice(1, 0, tmp.slice(-1));\r\n                } else {\r\n                    words[1] = tmp.slice(-1) + words[1];\r\n                }\r\n            }\r\n            if (ctx.measureText(line + words[0]).width < maxWidth) {\r\n                line += words.shift() + ' ';\r\n            } else {\r\n                lines.push(line);\r\n                line = '';\r\n            }\r\n            if (words.length === 0) {\r\n                lines.push(line);\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n}","import { NVector3 } from '../../../../../../';\r\n\r\nimport { IndependentPanel } from '../IndependentPanel';\r\n\r\nimport { IndePanelPreset } from '../../../Core/IndePanelPreset';\r\n\r\nimport { IndeSubMenu } from './IndeSubMenu';\r\n\r\nimport { ControllerTheme } from '../../../../Core/ControllerTheme';\r\n\r\nexport class IndeSubPanel {\r\n    list: IndeSubMenu[] = [];\r\n    independentPanel: IndependentPanel;\r\n    width: number;\r\n    height: number;\r\n    textHeight: number = 20;\r\n    vec: NVector3;\r\n\r\n    xOff: number = -5;\r\n    yOff: number = 10;\r\n    isHidden: boolean = true;\r\n    theme: ControllerTheme;\r\n    constructor(independentPanel: IndependentPanel) {\r\n        this.independentPanel = independentPanel;\r\n        this.theme = this.independentPanel.theme;\r\n        this.vec = new NVector3(this.independentPanel.vec.x + this.independentPanel.width + this.xOff, this.independentPanel.vec.y + this.yOff);\r\n        this.width = 150;\r\n        this.height = 100;\r\n    }\r\n    Add(v: string) {\r\n        this.list.push(new IndeSubMenu(this, this.list.length, v));\r\n    }\r\n    get IsHidden() {\r\n        return this.isHidden;\r\n    }\r\n    set IsHidden(v: boolean) {\r\n        this.isHidden = v;\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].IsHidden = v;\r\n        }\r\n    }\r\n    Remove() {\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].Remove();\r\n        }\r\n    }\r\n    Translate(xo: number, yo: number) {\r\n        // if (this.isHidden) { return; }\r\n        this.vec.x += xo; this.vec.y += yo;\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].TranslateByXY(xo, yo);\r\n        }\r\n    }\r\n    RenderPost(ctx: CanvasRenderingContext2D) {\r\n        if (this.isHidden) { return; }\r\n        this.height = this.list.length * this.textHeight + 10;\r\n        let fillCol =  this.independentPanel.theme.colSelectedBG;\r\n        IndePanelPreset.RoundedRectFill(ctx, NVector3.GetBoundaryByVecWidthHeight(this.vec, this.width, this.height), 3, 0, fillCol);\r\n\r\n        for (let i = 0; i < this.list.length; ++i) {\r\n            this.list[i].RenderPost(ctx);\r\n        }\r\n    }\r\n}","import { NVector3 } from '../../../../../../..';\r\nimport { MouseEventData } from '../../../../../../../IO/EventInteraction/MouseInteraction';\r\nimport { IndependentPanelWrapper } from '../../../../IndependentPanelWrapper';\r\nimport { ControllerTheme } from '../../../../../Core/ControllerTheme';\r\nexport abstract class IndePanelBase {\r\n    independentPanelWrapper: IndependentPanelWrapper;\r\n    value: number;\r\n    vec: NVector3;\r\n    boundarVecs: NVector3[];\r\n    isHidden: boolean;\r\n    div: HTMLElement;\r\n    height: number;\r\n    width: number;\r\n    minHeight: number = 100;\r\n    minWidth: number = 200;\r\n    HeadHeight: number = 25;\r\n    divID: string;\r\n    xOff: number;\r\n    yOff: number;\r\n    isMinimized: boolean = false;\r\n    hasSubMenu: boolean = false;\r\n    isSelected: boolean;\r\n    isOver: boolean;\r\n    isMoveable: boolean;\r\n    style: number;\r\n    filletR: number;\r\n    title: string;\r\n    colorBase: string;\r\n    colorOver: string;\r\n    colorText: string;\r\n    isRender: boolean;\r\n    transparent: number;\r\n    theme: ControllerTheme;\r\n    colorTop: string;\r\n    abstract RenderPost(ctx: CanvasRenderingContext2D): void;\r\n\r\n    constructor(independentPanelWrapper: IndependentPanelWrapper, width: number = 100, height: number = 20) {\r\n        this.independentPanelWrapper = independentPanelWrapper;\r\n        this.independentPanelWrapper.indePanelRender.Add(this);\r\n        this.theme = independentPanelWrapper.theme;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xOff = 10;\r\n        this.yOff = 50;\r\n        this.isHidden = false;\r\n        this.isSelected = false;\r\n        this.isOver = false;\r\n        this.isMoveable = true;\r\n        this.style = 0;\r\n        this.filletR = 3;\r\n        this.isRender = true;\r\n        this.vec = new NVector3(100, 100, 0);\r\n        this.title = 'Drawing Block';\r\n        this.boundarVecs = [];\r\n        // this.colorBase = '#907BD2';\r\n        this.transparent = 1.0;\r\n        // this.mapContainer = <HTMLElement>document.getElementById('mapContainer');\r\n\r\n    }\r\n    setTopColorTheme(v: string) {\r\n        if (v === 'red') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeRed.colSelectedBG; return; }\r\n        if (v === 'blue') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeBlue.colSelectedBG; return; }\r\n        if (v === 'purple') { this.colorTop = this.independentPanelWrapper.nUI.asset.themePurple.colSelectedBG; return; }\r\n        if (v === 'green') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeGreen.colSelectedBG; return; }\r\n        if (v === 'orange') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeOrange.colSelectedBG; return; }\r\n        if (v === 'gray') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeGray.colSelectedBG; return; }\r\n        if (v === 'darkGray') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeDarkgray.colSelectedBG; return; }\r\n        if (v === 'black') { this.colorTop = this.independentPanelWrapper.nUI.asset.themeBlack.colSelectedBG; return; }\r\n    }\r\n    Remove() {\r\n        this.RemovePost();\r\n        this.independentPanelWrapper.indePanelRender.Remove(this);\r\n    }\r\n    RemovePost() {\r\n        //\r\n    }\r\n    DeepCopy() {\r\n        /* */\r\n    }\r\n    Dummy() {\r\n        /* */\r\n    }\r\n    get IsHidden() {\r\n        return this.isHidden;\r\n    }\r\n    set IsHidden(v: boolean) {\r\n        this.isHidden = v;\r\n    }\r\n    get IsHover() {\r\n        return this.isOver;\r\n    }\r\n    set IsHover(v: boolean) {\r\n        this.isOver = v;\r\n    }\r\n    get IsMinimized() {\r\n        return this.isMinimized;\r\n    }\r\n    set IsMinimized(v: boolean) {\r\n        this.isMinimized = v;\r\n    }\r\n    get HasSubMenu() {\r\n        return this.hasSubMenu;\r\n    }\r\n    set HasSubMenu(v: boolean) {\r\n        this.hasSubMenu = v;\r\n    }\r\n    get IsSelected() { return this.isSelected; }\r\n    set IsSelected(v: boolean) { this.isSelected = v; }\r\n    get Width() { return this.width; }\r\n    set Width(v: number) { this.width = v; }\r\n    get Height() { return this.height; }\r\n    set Height(v: number) { this.height = v; }\r\n    GetBoundaryVecs() {\r\n        let theHeight = this.height * 0.5;\r\n        let theWidth = this.width * 0.5;\r\n        let v0 = new NVector3(this.vec.x - theWidth, this.vec.y - theHeight);\r\n        let v1 = new NVector3(this.vec.x + theWidth, this.vec.y + theHeight);\r\n        this.boundarVecs = NVector3.GetBoundingVecs(v0, v1);\r\n        return this.boundarVecs;\r\n    }\r\n    ComputeBoundary() {\r\n        this.boundarVecs = [];\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width, this.vec.y, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width, this.vec.y + this.height, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y + this.height, this.vec.z));\r\n        return this.boundarVecs;\r\n    }\r\n    ComputeBoundaryHead() {\r\n        this.boundarVecs = [];\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width, this.vec.y, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width, this.vec.y + this.HeadHeight, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y + this.HeadHeight, this.vec.z));\r\n        return this.boundarVecs;\r\n    }\r\n    ComputeBoundaryPanel() {\r\n        this.boundarVecs = [];\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y + this.HeadHeight, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width, this.vec.y + this.HeadHeight, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x + this.width - 15, this.vec.y + this.height - 15, this.vec.z));\r\n        this.boundarVecs.push(new NVector3(this.vec.x, this.vec.y + this.height, this.vec.z));\r\n        return this.boundarVecs;\r\n    }\r\n    IsMouseInside(x: number, y: number) {\r\n        let v = NVector3.IsInsideOfVecs(new NVector3(x, y), this.ComputeBoundaryHead());\r\n        this.isOver = v;\r\n        return v;\r\n    }\r\n    IsMouseInsidePanel(x: number, y: number) {\r\n        let v = NVector3.IsInsideOfVecs(new NVector3(x, y), this.ComputeBoundaryPanel());\r\n        return v;\r\n    }\r\n    Translate(e: MouseEventData): void {\r\n        if (!this.isMoveable) { return; }\r\n        let xo = e.x - e.preX;\r\n        let yo = e.y - e.preY;\r\n        this.vec.x += xo;\r\n        this.vec.y += yo;\r\n        for (let i = 0; i < this.boundarVecs.length; ++i) { this.boundarVecs[i].x += xo; this.boundarVecs[i].y += yo; }\r\n    }\r\n    Move(x: number, y: number) {\r\n        this.vec.x = x; this.vec.y = y;\r\n    }\r\n    HideToogle() {\r\n        this.IsHidden = !this.IsHidden;\r\n        this.Hide();\r\n    }\r\n    ExecuteCommand(v: string) {\r\n        console.log(v + 'binding needed');\r\n    }\r\n    Hide() {\r\n        /* */\r\n    }\r\n    MouseDown() {\r\n        /* */\r\n    }\r\n    MouseUp(e: MouseEventData) {\r\n        /* */\r\n    }\r\n    MouseDrag(e: MouseEventData) {\r\n        this.Translate(e);\r\n    }\r\n    MouseDouble(e: MouseEventData) {\r\n        /* */\r\n    }\r\n    MouseRight(e: MouseEventData) {\r\n        /* */\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        if (this.isHidden) { return; }\r\n        this.RenderPost(ctx);\r\n    }\r\n}","// import { ConcaveCore } from './ConcaveCore';\r\n// import { CPoint } from '../../AppDrawing/Canvas/CGeometry/CPoint';\r\n// import { UNIT, MathUtility } from '../Utilities/MathUtility';\r\n\r\n// import { NWebassemblyController } from '../../../Webassembly/Core/NWebassemblyController/NWebassemblyController';\r\nexport class NVector3 {\r\n  public static eps: number = 0.0000001;\r\n  public static origin: NVector3 = new NVector3(0, 0, 0);\r\n  x: number = 0.0;\r\n  y: number = 0.0;\r\n  z: number = 0.0;\r\n  w: number = 0.0;\r\n  long: number = 0.0;\r\n  lat: number = 0.0;\r\n  ele: number = 0.0;\r\n  proX: number = 0.0;\r\n  proY: number = 0.0;\r\n  proZ: number = 0.0;\r\n  alt: number = 0.0;\r\n  d: boolean = true;\r\n  isModified: boolean = false;\r\n  color: string = '#000000';\r\n  isVisited: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  parent: any;\r\n  public static GetVecforGraphicApp(long: number, lat: number, ele: number, proX: number, proY: number, proZ: number) {\r\n    let v = new NVector3(0, 0, 0);\r\n    v.long = long; v.lat = lat; v.ele = ele; v.proX = proX; v.proY = proY; v.proZ = proZ;\r\n    return v;\r\n  }\r\n  public static DeepCopy(v: NVector3): NVector3 {\r\n    const out = new NVector3(v.x, v.y, v.z);\r\n    out.long = v.long; out.lat = v.lat;\r\n    out.proX = v.proX; out.proY = v.proY; out.proZ = v.proZ;\r\n    return out;\r\n  }\r\n  public static Dot(a: NVector3, b: NVector3) {\r\n    return a.x * b.x + a.y * b.y + a.z * b.z;\r\n  }\r\n  // https://en.wikipedia.org/wiki/Shoelace_formula\r\n  // https://stackoverflow.com/questions/25122185/measuring-area-with-n-amount-of-gps-coordinates // no concave\r\n  public static GetAreayConvexGPS(vec: NVector3[]) {\r\n    let lats = [], longs = [];\r\n    for (let i = 0; i < vec.length; ++i) {\r\n      lats.push(vec[i].lat); longs.push(vec[i].long);\r\n    }\r\n    lats.push(vec[0].lat); longs.push(vec[0].long); // make sure to add the first term to the end of both arrays\r\n\r\n    let latsSum = 0, longSum = 0; // get the average center point of the polygon\r\n\r\n    for (let i = lats.length; i--;) {\r\n      latsSum += lats[i]; longSum += longs[i];\r\n    }\r\n\r\n    let latOrigin = latsSum / lats.length;\r\n    let lonOrigin = longSum / longs.length;\r\n\r\n    // translate origin to (0,0) by shifting lat long and calculate the standard angle of the point\r\n    let angles = new Array(lats.length);\r\n\r\n    for (let j = lats.length; j--;) {\r\n      lats[j] -= latOrigin;\r\n      longs[j] -= lonOrigin;\r\n\r\n      if (longs[j] >= 0 && lats[j] >= 0) {\r\n        angles[j] = Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] >= 0) {\r\n        angles[j] = 90 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] < 0) {\r\n        angles[j] = 180 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] >= 0 && lats[j] < 0) {\r\n        angles[j] = 270 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      }\r\n    }\r\n\r\n    // re-arrange the points from least to greatest angle\r\n    let curAng, curLat, curLon;\r\n\r\n    for (let l = 0; l < angles.length; l++) {\r\n      for (let k = 0; k < angles.length - 1; k++) {\r\n        curAng = angles[k];\r\n        curLat = lats[k];\r\n        curLon = longs[k];\r\n\r\n        if (curAng < angles[k + 1]) {\r\n          angles[k] = angles[k + 1];\r\n          lats[k] = lats[k + 1];\r\n          longs[k] = longs[k + 1];\r\n\r\n          angles[k + 1] = curAng;\r\n          lats[k + 1] = curLat;\r\n          longs[k + 1] = curLon;\r\n        }\r\n      }\r\n    }\r\n\r\n    // calculate area for irregular polygon\r\n    let sum1 = 0, sum2 = 0;\r\n\r\n    for (let t = 0; t < lats.length; t++) {\r\n      if (t !== lats.length - 1) {\r\n        sum1 += lats[t] * longs[t + 1];\r\n        sum2 += longs[t] * lats[t + 1];\r\n      } else {\r\n        sum1 += lats[t] * longs[0];\r\n        sum2 += longs[t] * lats[0];\r\n      }\r\n    }\r\n\r\n    let area = (sum1 - sum2) / 2.0;\r\n    // console.log('Area: ' + area * 6378137.0 * 6378137.0 / 2.0);\r\n    return area * 20; // * 6378137.0 * 6378137.0 / 2.0;\r\n  }\r\n  public static ScalarRev_V_S_OUT(v: NVector3, s: number, out: NVector3) {\r\n    out.x = s * v.x;\r\n    out.y = s * v.y;\r\n    out.z = s * v.z;\r\n    return out;\r\n  }\r\n  public static Add(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\r\n  }\r\n  public static Sub(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\r\n  }\r\n  public static Clone(v: NVector3): NVector3 {\r\n    return NVector3.DeepCopy(v);\r\n  }\r\n  public static ZAxis(): NVector3 {\r\n    return new NVector3(0, 0, 1);\r\n  }\r\n  public static YAxis(): NVector3 {\r\n    return new NVector3(0, 1, 0);\r\n  }\r\n  public static Zero(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  public static Origin(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  public static Plus(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\r\n  }\r\n  public static Scale(v: NVector3, s: number): NVector3 {\r\n    return new NVector3(v.x * s, v.y * s, v.z * s);\r\n  }\r\n  public static MidVec(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3((v1.x + v2.x) * 0.5, (v1.y + v2.y) * 0.5, (v1.z + v2.z) * 0.5);\r\n  }\r\n  public static CompareTwoVectors(v0: NVector3, v1: NVector3): boolean {\r\n    if (v0.x !== v1.x || v0.y !== v1.y || v0.z !== v1.z) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  public static CompareTwoVectorsByGeoPos(v0: NVector3, v1: NVector3, toFixed: number = 4): boolean {\r\n    if (v0.long.toFixed(toFixed) !== v1.long.toFixed(toFixed) || v0.lat.toFixed(toFixed) !== v1.lat.toFixed(toFixed)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n    // let tor = 0.00000000001;\r\n    // if ((v1.long - v0.long) >  tor  || (v1.lat - v0.lat) > tor ) {\r\n    //   return false;\r\n    // } else {\r\n    //   return true;\r\n    // }\r\n  }\r\n  public static Length(v: NVector3): number {\r\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n  }\r\n  public static Normalize(v: NVector3): NVector3 {\r\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n    return new NVector3(v.x / len, v.y / len, v.z / len);\r\n  }\r\n  // https://web.archive.org/web/20090214201206/http://valis.cs.uiuc.edu:80/~sariel/research/CG/compgeom/msg00827.html\r\n  public static GetArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    // // double center2dx = 0;\r\n    // // double center2dy = 0;\r\n    // for (let i = 0; i < vs.length - 1; i++) {\r\n    //   // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n    //   area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    //   // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n    //   // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    // }\r\n    // area *= 0.5;\r\n    // // center2dx *= 1 / (6 * area);\r\n    // // center2dy *= 1 / (6 * area);\r\n    // return area;\r\n\r\n    for (let i = 0, l = vs.length; i < l; i++) {\r\n      let addX = vs[i].x;\r\n      let addY = vs[i === vs.length - 1 ? 0 : i + 1].y;\r\n      let subX = vs[i === vs.length - 1 ? 0 : i + 1].x;\r\n      let subY = vs[i].y;\r\n\r\n      area += (addX * addY * 0.5);\r\n      area -= (subX * subY * 0.5);\r\n    }\r\n\r\n    return Math.abs(area);\r\n  }\r\n  public static GetAreaByLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    // double center2dx = 0;\r\n    // double center2dy = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n      // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n      // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    }\r\n    area *= 0.5;\r\n    // center2dx *= 1 / (6 * area);\r\n    // center2dy *= 1 / (6 * area);\r\n    return area;\r\n  }\r\n  public static GetGeoArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  public static GetGeoAreaBbyLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  public static GetIndexByShortDistance(v: NVector3, vs: NVector3[]): number[] {\r\n    let index = -1;\r\n    let dis = Number.MAX_SAFE_INTEGER;\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      let distance = NVector3.Distance(v, vs[i]);\r\n      if (distance < dis) {\r\n        dis = distance;\r\n        index = i;\r\n      }\r\n    }\r\n    return [index, dis];\r\n  }\r\n  public static Distance(v0: NVector3, v1: NVector3): number {\r\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n  }\r\n  public static DistanceByArray(v0: number[], v1: number[]): number {\r\n    return Math.sqrt((v0[0] - v1[0]) * (v0[0] - v1[0]) + (v0[1] - v1[1]) * (v0[1] - v1[1]) + (v0[2] - v1[2]) * (v0[2] - v1[2]));\r\n  }\r\n  public static Distance2(v1: NVector3, v2: NVector3): number {\r\n    let d: number =\r\n      (v1.x - v2.x) * (v1.x - v2.x) +\r\n      (v1.y - v2.y) * (v1.y - v2.y) +\r\n      (v1.z - v2.z) * (v1.z - v2.z);\r\n    return d;\r\n  }\r\n  public static DotProduct(v1: NVector3, v2: NVector3): number {\r\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n  }\r\n  public static CrossProduct(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(\r\n      v1.y * v2.z - v1.z * v2.y,\r\n      v1.z * v2.x - v1.x * v2.z,\r\n      v1.x * v2.y - v1.y * v2.x\r\n    );\r\n  }\r\n  public static DivideByNum(v0: NVector3, v1: NVector3, n: number = 5): NVector3[] {\r\n    let vs: NVector3[] = [];\r\n    let xOff = (v1.x - v0.x) / n;\r\n    let yOff = (v1.y - v0.y) / n;\r\n    let zOff = (v1.z - v0.z) / n;\r\n    for (let j = 0; j < n; ++j) {\r\n      let x = v0.x + xOff * j;\r\n      let y = v0.y + yOff * j;\r\n      let z = v0.z + zOff * j;\r\n      vs.push(new NVector3(x, y, z));\r\n    }\r\n    return vs;\r\n  }\r\n  // static DistancefromGeoV(v0: NVector3, v1: NVector3, unit: UNIT = CGeometry.appDrawing.activeCommands.unit): number {\r\n  //   let dis = NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  //   if (unit === UNIT.METER) { return dis * 1000; }\r\n  //   if (unit === UNIT.KM) { return dis; }\r\n  //   if (unit === UNIT.MILE) { return MathUtility.MilesFromKM(dis); }\r\n  //   return -1;\r\n  // }\r\n  public static KMeterFromGeoGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.lat * Math.PI / 180 - gV0.lat * Math.PI / 180;\r\n    let dLon = gV1.long * Math.PI / 180 - gV0.long * Math.PI / 180;\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(gV0.lat * Math.PI / 180) *\r\n      Math.cos(gV1.lat * Math.PI / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  public static KMeterByTwoGeoPos(long0: number, lat0: number, long1: number, lat1: number) {\r\n    let v0 = new NVector3(0, 0); v0.long = long0; v0.lat = lat0;\r\n    let v1 = new NVector3(0, 0); v1.long = long1; v1.lat = lat1;\r\n    return NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  }\r\n  public static KMeterFromGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.y * Math.PI / 180 - gV0.y * Math.PI / 180;\r\n    let dLon = gV1.x * Math.PI / 180 - gV0.x * Math.PI / 180;\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(gV0.y * Math.PI / 180) *\r\n      Math.cos(gV1.y * Math.PI / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  public static Get1KM_Long_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x + addition, v.y, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result long', i, dis);\r\n        return v.x + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  public static Get1KM_lat_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x, v.y + addition, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result lat', i, dis);\r\n        return v.y + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  public static Get1KM_Lat_Long_GeoUnit(long: number = 0, lat: number = 0): NVector3 {\r\n    let lng = NVector3.Get1KM_Long_ByGeoUnit(long, lat);\r\n    let la = NVector3.Get1KM_lat_ByGeoUnit(long, lat);\r\n    return new NVector3(lng, la, 0);\r\n  }\r\n  // ............................................................................ vec compute\r\n  // static CalculateFalloff(pts: NVector3[], pt: NVector3, s: number, f: number): number {\r\n  //   let newValue = 0.0;\r\n  //   for (let i = 0; i < pts.length; ++i) {\r\n  //     // let v = NJS.PointUtils.CalculateFalloff(pt, pts[i], s, f);\r\n  //     // newValue += v;\r\n  //   }\r\n  //   return newValue;\r\n  // }\r\n  public static CalculateFalloff(pt: NVector3, attractor: NVector3, strength: number, falloff: number): number {\r\n    let v: NVector3 = attractor.Sub(pt);\r\n    let dist: number = v.Length();\r\n    return dist * (strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  public static Attractor(pt: NVector3, attractor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v: NVector3 = attractor.Sub(pt);\r\n    v.Unitize();\r\n    let dist = v.Length();\r\n    return v.Mult(strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  public static Explosion(pt: NVector3, Explosion: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = Explosion.Sub(pt);\r\n    v.Unitize();\r\n    let dist = v.Length();\r\n    return v.Mult(-(strength * Math.exp(-falloff * dist * dist)));\r\n  }\r\n  public static Rotor(pt: NVector3, rotor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = rotor.Sub(pt);\r\n    v.Unitize();\r\n    // v.Rotate(3.141592 / 2, NVector3.zAxis);\r\n    // let dist: number = v.Length;\r\n    // return (v.Mult (strength * (Math.exp(-falloff * dist * dist))));\r\n    return NVector3.Origin();\r\n  }\r\n\r\n  // ............................................................................ vec angle\r\n  public static GetAngleBetween(v0: NVector3, v1: NVector3) {\r\n    return Math.atan2(v1.x - v0.x, v1.y - v0.y);\r\n  }\r\n  // .................................................\r\n  public static GetCosAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n  }\r\n  public static GetAngleByTwoVectorsRadian(v0: NVector3, v1: NVector3): number {\r\n    return Math.acos(NVector3.GetCosAngleByTwoVectors(v0, v1));\r\n  }\r\n  public static GetAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.GetAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\r\n  }\r\n  public static GetRotationByWorldCoodinate(v: NVector3): number {\r\n    let origin = new NVector3(1, 0, 0);\r\n    return NVector3.GetAngleByTwoVectors(origin, v);\r\n  }\r\n  public static GetRotationByWorldCoodinateByTwo(v0: NVector3, v1: NVector3): number {\r\n    let v = v1.Sub(v0);\r\n    let origin = new NVector3(1, 0, 0);\r\n    if (v.y > 0) {\r\n      return NVector3.GetAngleByTwoVectors(origin, v) * -1;\r\n    } else {\r\n      return NVector3.GetAngleByTwoVectors(origin, v);\r\n    }\r\n  }\r\n  // ............................................................................\r\n  // static ToJSon(v) {\r\n  // var p = {\r\n  //             'point': [],\r\n  //             'primitive': 'point',\r\n  //             'units': {\r\n  //             'point': 'meters'\r\n  //         }\r\n  // }\r\n  // p.point = [v.x , v.y, v.z];\r\n  // return p;\r\n  // }\r\n  public static ComputeDotProducts(vs: NVector3[]) {\r\n    let out = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      // let v0: NVector3 = NVector3.Origin();\r\n      // let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[i + 1].x, vs[i + 1].y, vs[i + 1].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        out.push(dot);\r\n      } else {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[0].x, vs[0].y, vs[0].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        out.push(dot);\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n  public static ComputeDotProductsWithCenter(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    let out = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      let v0: NVector3;\r\n      let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      } else {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      }\r\n      let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      out.push(dot);\r\n    }\r\n    return out;\r\n  }\r\n  public static GetXYDimForCircle(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    // let out = [];\r\n    let xx: number = 0;\r\n    let yy: number = 0;\r\n    let len = vs.length;\r\n    for (let i = 0; i < len; ++i) {\r\n\r\n      // if (i < vs.length - 1) {\r\n      xx += Math.abs(vs[i].x - cp.x);\r\n      yy += Math.abs(vs[i].y - cp.y);\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      // } else {\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      // }\r\n      // let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      // out.push(dot);\r\n    }\r\n    len += 2;\r\n    return [xx / len, yy / len];\r\n  }\r\n\r\n  public static DistanceMouseWithTwoVecs(m: NVector3, v0: NVector3, v1: NVector3): number {\r\n    v0.x += 0.00001;\r\n    v0.y += 0.00001;\r\n    let boundary = NVector3.GetBoundingVecs(v0, v1);\r\n    let vec = NVector3.GetCloseVec(v0, v1, m.x, m.y, boundary, true);\r\n    return NVector3.Distance(m, vec);\r\n  }\r\n  public static GetCloseVec(p0: NVector3, p1: NVector3, x: number, y: number, vecsBound: NVector3[], OnLine: boolean = true): NVector3 {\r\n    let pp1: NVector3 = new NVector3(p0.x, p0.y, p0.z);\r\n    let pp2: NVector3 = new NVector3(p1.x, p1.y, p1.z);\r\n    let v1: NVector3 = pp2.Sub(pp1);\r\n    let p: NVector3 = new NVector3(x, y, 0);\r\n    let v2: NVector3 = p.Sub(pp1);\r\n    v1.Unitize();\r\n    let cp = pp1.Add(v1.Mult(v2.DotProduct(v1)));\r\n    if (OnLine) {\r\n      if (NVector3.IsInsideOfVecs(cp, vecsBound)) {\r\n        return cp;\r\n      } else {\r\n        if (p0.Distance(cp) < p1.Distance(cp)) {\r\n          return new NVector3(p0.x, p0.y, p0.z);\r\n        } else {\r\n          return new NVector3(p1.x, p1.y, p1.z);\r\n        }\r\n      }\r\n    } else {\r\n      return cp;\r\n    }\r\n  }\r\n  public static GetBoundingVecs(v0: NVector3, v1: NVector3): NVector3[] {\r\n    let listOfVec: NVector3[] = [];\r\n    let x: number = 0;\r\n    let y: number = 0;\r\n    let z: number = 0;\r\n    if (v0.x < v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y < v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z < v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv0 = new NVector3(x, y, z);\r\n    if (v0.x > v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y > v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z > v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv1 = new NVector3(x, y, z);\r\n    listOfVec.push(new NVector3(nv0.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv1.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv0.x, nv1.y, nv0.z));\r\n    return listOfVec;\r\n  }\r\n  public static GetBoundaryByVecWidthHeight(v: NVector3, width: number, height: number): NVector3[] {\r\n    let boundarVecsSub = [];\r\n    boundarVecsSub.push(new NVector3(v.x, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y + height, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x, v.y + height, v.z));\r\n    return boundarVecsSub;\r\n  }\r\n  public static GetBoundingByVecs(vs: NVector3[]): NVector3[] {\r\n    let listOfVec: NVector3[] = [];\r\n    let xMin: number = Number.MAX_SAFE_INTEGER;\r\n    let yMin: number = Number.MAX_SAFE_INTEGER;\r\n    let zMin: number = Number.MAX_SAFE_INTEGER;\r\n\r\n    let xMax: number = Number.MIN_SAFE_INTEGER;\r\n    let yMax: number = Number.MIN_SAFE_INTEGER;\r\n    let zMax: number = Number.MIN_SAFE_INTEGER;\r\n    for (let i = 0; i < vs.length; ++i) {\r\n\r\n      if (xMin > vs[i].x) { xMin = vs[i].x; }\r\n      if (yMin > vs[i].y) { yMin = vs[i].y; }\r\n      if (zMin > vs[i].z) { zMin = vs[i].z; }\r\n\r\n      if (xMax < vs[i].x) { xMax = vs[i].x; }\r\n      if (yMax < vs[i].y) { yMax = vs[i].y; }\r\n      if (zMax < vs[i].z) { zMax = vs[i].z; }\r\n\r\n    }\r\n    listOfVec.push(new NVector3(xMin, yMin, zMin));\r\n    listOfVec.push(new NVector3(xMax, yMax, zMax));\r\n    return listOfVec;\r\n  }\r\n  public static GetMinMaxVecFromVecs(vec: NVector3[]): NVector3[] {\r\n    let minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, minZ = Number.MAX_VALUE;\r\n    let maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE, maxZ = Number.MIN_VALUE;\r\n    for (let v of vec) {\r\n      if (minX > v.x) { minX = v.x; } if (minY > v.y) { minY = v.y; } if (minZ > v.z) { minZ = v.z; }\r\n      if (maxX < v.x) { maxX = v.x; } if (maxY < v.y) { maxY = v.y; } if (maxZ < v.z) { maxZ = v.z; }\r\n    }\r\n    return [new NVector3(minX, minY, minZ), new NVector3(maxX, maxY, maxZ)];\r\n  }\r\n  public static RemoveVecsWithinDis(vs: NVector3[], tor: number = 10): NVector3[] {\r\n    let vecs: NVector3[] = [];\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      let v0 = vs[i];\r\n      if (v0.d === false) { continue; }\r\n      for (let j = i + 1; j < vs.length; ++j) {\r\n        if (NVector3.Distance(v0, vs[j]) < tor) { vs[j].d = false; }\r\n      }\r\n    }\r\n    for (let i = 0; i < vs.length; ++i) { if (vs[i].d === true) { vecs.push(vs[i]); } }\r\n    // vecs.push(vs[vs.length - 1]);\r\n    return vecs;\r\n  }\r\n  // ...............................................................................\r\n  public static IsInsideOfVecsWtihVecs(vs: NVector3[], vecs: NVector3[]): boolean {\r\n    let inside: boolean = true;\r\n    for (let i = 0; i < vs.length; i++) {\r\n      inside = NVector3.IsInsideOfVecs(vs[i], vecs);\r\n      if (!inside) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  public static IsInsideOfVecs(v: NVector3, vecs: NVector3[]): boolean {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v.x, y = v.y;\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i].x, yi = vecs[i].y;\r\n      let xj = vecs[j].x, yj = vecs[j].y;\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  public static IsInsideOfVecsByArray(v: number[], vecs: number[][]): boolean {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v[0], y = v[1];\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i][0], yi = vecs[i][1];\r\n      let xj = vecs[j][0], yj = vecs[j][1];\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  public static IsInsideOfVecsByCrossing(v: NVector3, w: number, h: number, vs: NVector3[]) {\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    return false;\r\n  }\r\n  public static IsInsideOfVecsByConcaveHull(v: NVector3, vs: NVector3[]) {\r\n    // let vsNum: number[][] = [];\r\n    // for (let i = 0; i < vs.length; ++i) {\r\n    //   vsNum.push([vs[i].x, vs[i].y]);\r\n    // }\r\n\r\n    // let result = ConcaveCore.hull(vsNum, 20)\r\n    // console.log(vs.length);\r\n    // console.log(result);\r\n\r\n    // for (let i = 0; i < result.length; ++i) {\r\n    //   new CPoint(result[i][0], result[i][1]);\r\n    // }\r\n  }\r\n  // Convex hull\r\n  // https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\r\n  public static IsInsideOfVecsByConvexHull(v: NVector3, vecs: NVector3[]): boolean {\r\n    vecs = NVector3.ConvexHull(vecs);\r\n    if (NVector3.IsInsideOfVecs(v, vecs)) { return true; } else { return false; }\r\n  }\r\n  public static ConvexHull(vs: NVector3[]): NVector3[] {\r\n    vs.sort(function (a: NVector3, b: NVector3) {\r\n      return a.x === b.x ? a.y - b.y : a.x - b.x;\r\n    });\r\n    let lower: NVector3[] = [];\r\n    for (let i = 0; i < vs.length; i++) {\r\n      while (lower.length >= 2 && NVector3.Cross(lower[lower.length - 2], lower[lower.length - 1], vs[i]) <= 0) { lower.pop(); }\r\n      lower.push(vs[i]);\r\n    }\r\n    let upper: NVector3[] = [];\r\n    for (let i = vs.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && NVector3.Cross(upper[upper.length - 2], upper[upper.length - 1], vs[i]) <= 0) { upper.pop(); }\r\n      upper.push(vs[i]);\r\n    }\r\n    upper.pop(); lower.pop();\r\n    for (let i = 0; i < upper.length; ++i) { lower.push(upper[i]); }\r\n    return lower;\r\n  }\r\n  public static Cross(O: NVector3, A: NVector3, B: NVector3): number {\r\n    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);\r\n  }\r\n  public static Cross_A_B_OUT(a: NVector3, b: NVector3, out: NVector3) {\r\n    const ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;\r\n    out.x = ay * bz - az * by;\r\n    out.y = az * bx - ax * bz;\r\n    out.z = ax * by - ay * bx;\r\n    return out;\r\n  }\r\n  public static CheckBoundIntersection(vs: NVector3[], p0: NVector3, p1: NVector3) {\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      if (this.CheckLineIntersection(vs[i], vs[i + 1], p0, p1)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  // http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\r\n  public static CheckLineIntersection(p0: NVector3, p1: NVector3, p2: NVector3, p3: NVector3) {\r\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n    let denominator: number = 0, a: number = 0, b: number = 0, numerator1: number = 0, numerator2: number = 0;\r\n    let onLine0: boolean = false, onLine1: boolean = false;\r\n    denominator = ((p3.y - p2.y) * (p1.x - p0.x)) - ((p3.x - p2.x) * (p1.y - p0.y));\r\n    let result: NVector3 = new NVector3(0, 0, 0);\r\n    if (denominator === 0) { return undefined; }\r\n    a = p0.y - p2.y;\r\n    b = p0.x - p2.x;\r\n    numerator1 = ((p3.x - p2.x) * a) - ((p3.y - p2.y) * b);\r\n    numerator2 = ((p1.x - p0.x) * a) - ((p1.y - p0.y) * b);\r\n    a = numerator1 / denominator;\r\n    b = numerator2 / denominator;\r\n\r\n    // if we cast these lines infinitely in both directions, they intersect here:\r\n    result.x = p0.x + (a * (p1.x - p0.x));\r\n    result.y = p0.y + (a * (p1.y - p0.y));\r\n    /*\r\n            // it is worth noting that this should be the same as:\r\n            x = p2.x + (b * (p3.x - p2.x));\r\n            y = p2.x + (b * (p3.y - p2.y));\r\n            */\r\n    // if line1 is a segment and line2 is infinite, they intersect if:\r\n    if (a > 0 && a < 1) {\r\n      onLine0 = true;\r\n    }\r\n    // if line2 is a segment and line1 is infinite, they intersect if:\r\n    if (b > 0 && b < 1) {\r\n      onLine1 = true;\r\n    }\r\n    // if line1 and line2 are segments, they intersect if both of the above are true\r\n    if (onLine0 && onLine1) {\r\n      return result;\r\n    } else { return undefined; }\r\n  }\r\n  // http://www.sunshine2k.de/coding/java/Polygon/Convex/polygon.htm\r\n  public static CheckConvexity(vs: NVector3[]) {\r\n    if (vs.length < 3) { return false; }\r\n\r\n    let p: NVector3;\r\n    let v: NVector3;\r\n    let u: NVector3;\r\n    let res = 0;\r\n\r\n    for (let i = 0; i < vs.length; i++) {\r\n      p = vs[i];\r\n      let tmp = vs[(i + 1) % vs.length];\r\n      v = new NVector3(tmp.x - p.x, tmp.y - p.y, 0);\r\n      u = vs[(i + 2) % vs.length];\r\n\r\n      if (i === 0) { // in first loop direction is unknown, so save it in res\r\n        res = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n      } else {\r\n        let newres = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n        if ((newres > 0 && res < 0) || (newres < 0 && res > 0)) { return false; }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  //////////////////////////////////////////////////////////////////////////////// translation Utility\r\n  public static MoveVecs(vecs: NVector3[], dir: NVector3): NVector3[] {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      //\r\n      temp.push(NVector3.MoveVec(vecs[i], dir));\r\n    }\r\n    return temp;\r\n  }\r\n  public static MoveVec(v: NVector3, dir: NVector3): NVector3 {\r\n    return new NVector3(v.x + dir.x, v.y + dir.y, v.z + dir.z);\r\n  }\r\n  public static RotateVecsLoal(vecs: NVector3[], angle: number): NVector3[] {\r\n    let cptToLocal = NVector3.GetCenterVecFromVecs(vecs);\r\n    let cptToWorld = new NVector3(-cptToLocal.x, -cptToLocal.y, -cptToLocal.z);\r\n    let temp: NVector3[] = NVector3.MoveVecs(vecs, cptToWorld);\r\n    temp = NVector3.RotateVecs(temp, angle);\r\n    temp = NVector3.MoveVecs(temp, cptToLocal);\r\n    return temp;\r\n  }\r\n  public static RotateVecs(vecs: NVector3[], angle: number) {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      temp.push(NVector3.RotateVec(vecs[i], angle));\r\n    }\r\n    return temp;\r\n  }\r\n  public static RotateVec(v: NVector3, angle: number): NVector3 {\r\n    let cos = Math.cos(angle * (3.14159265358979 / 180.0));\r\n    let sin = Math.sin(angle * (3.14159265358979 / 180.0));\r\n    let x = v.x * cos - v.y * sin;\r\n    let y = v.x * sin + v.y * cos;\r\n    return new NVector3(x, y, v.z);\r\n  }\r\n  public static GetCenterVecFromVecs(vecs: NVector3[]): NVector3 {\r\n    let nv = new NVector3(0, 0, 0);\r\n    for (let i = 0, c = vecs.length; i < c; ++i) {\r\n      nv.Add(vecs[i]);\r\n    }\r\n    nv.Mult(1.0 / vecs.length);\r\n    return nv;\r\n  }\r\n\r\n  // .............................................................................\r\n  public static MidVecGeo(p1: NVector3, p2: NVector3): NVector3 {\r\n    // return new NVector3(p1.screenX + p2.screenX * 0.5, p1.screenY + p2.screenY * 0.5, 0);\r\n    return new NVector3(p1.x + p2.x * 0.5, p1.y + p2.y * 0.5, 0);\r\n  }\r\n\r\n  // intersection // https://gist.github.com/gordonwoodhull/50eb65d2f048789f9558\r\n  // https://stackoverflow.com/questions/563198/whats-the-most-efficent-way-to-calculate-where-two-line-segments-intersect/1968345#1968345\r\n  public static GetVecFromIntersection(vs: NVector3[]): NVector3[] | undefined {\r\n    let newVes: NVector3[] = [];\r\n    for (let j = 0; j < vs.length - 1; ++j) {\r\n      for (let k = j + 1; k < vs.length - 1; ++k) {\r\n        let v = NVector3.CheckLineIntersection(vs[j], vs[j + 1], vs[k], vs[k + 1]);\r\n        if (v) { newVes.push(v); }\r\n      }\r\n    }\r\n    if (newVes.length === 0) { return undefined; } else { return newVes; }\r\n  }\r\n  public static between(a: number, b: number, c: number) {\r\n    return a - NVector3.eps <= b && b <= c + NVector3.eps;\r\n  }\r\n  public static segment_intersection(v0: NVector3, v1: NVector3, v2: NVector3, v3: NVector3) {\r\n    var x = ((v0.x * v1.y - v0.y * v1.x) * (v2.x - v3.x) - (v0.x - v1.x) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    var y = ((v0.x * v1.y - v0.y * v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    if (isNaN(x) || isNaN(y)) {\r\n      return false;\r\n    } else {\r\n      if (v0.x >= v1.x) {\r\n        if (!NVector3.between(v1.x, x, v0.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.x, x, v1.x)) { return false; }\r\n      }\r\n      if (v0.y >= v1.y) {\r\n        if (!NVector3.between(v1.y, y, v0.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.y, y, v1.y)) { return false; }\r\n      }\r\n      if (v2.x >= v3.x) {\r\n        if (!NVector3.between(v3.x, x, v2.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.x, x, v3.x)) { return false; }\r\n      }\r\n      if (v2.y >= v3.y) {\r\n        if (!NVector3.between(v3.y, y, v2.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.y, y, v3.y)) { return false; }\r\n      }\r\n    }\r\n    return new NVector3(x, y);\r\n  }\r\n  // ............................................................................. end static\r\n  constructor(x: number, y: number, z: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n  }\r\n  public Set(x: number, y: number, z: number): NVector3 {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Scale(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Mult(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public DivByVal(v: number): NVector3 {\r\n    this.x /= v;\r\n    this.y /= v;\r\n    this.z /= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public DivByVec(v: NVector3): NVector3 {\r\n    this.x /= v.x;\r\n    this.y /= v.y;\r\n    this.z /= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Add(v: NVector3): NVector3 {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n    this.z += v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Sub(v: NVector3): NVector3 {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n    this.z -= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Negate() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Equals(v: NVector3) {\r\n    return this.x === v.x && this.y === v.y && this.z === v.z;\r\n  }\r\n  public Clone(): NVector3 {\r\n    const other = new NVector3(this.x, this.y, this.z);\r\n    other.long = this.long; other.lat = this.lat; other.ele = this.ele;\r\n    other.proX = this.proX; other.proY = this.proY; other.proZ = this.proZ;\r\n    return other;\r\n  }\r\n  public Length(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n  }\r\n  public Unitize(): NVector3 {\r\n    return this.Normalize();\r\n  }\r\n  public IsOverlap(v: NVector3, tor: number = 0.1) {\r\n    if (this.Distance(v) < tor) { return true; } else { return false; }\r\n  }\r\n  public Normalize(): NVector3 {\r\n    let len: number = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    this.x = this.x / len;\r\n    this.y = this.y / len;\r\n    this.z = this.z / len;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Distance(v: NVector3): number {\r\n    return NVector3.Distance(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public DistanceByArray(vs: number[]) {\r\n    return NVector3.DistanceByArray([this.x, this.y, this.z], vs);\r\n  }\r\n  public Distance2(v: NVector3): number {\r\n    return NVector3.Distance2(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public DotProduct(v: NVector3): number {\r\n    return NVector3.DotProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public CrossProduct(v: NVector3): NVector3 {\r\n    return NVector3.CrossProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public SquareLength(): number {\r\n    let len: number = NVector3.Length(new NVector3(this.x, this.y, this.z));\r\n    return len * len;\r\n  }\r\n  public FadeExp(attr: NVector3, dVal: number) {\r\n    let v = new NVector3(this.x, this.y, this.z);\r\n    v.Sub(attr);\r\n    return Math.exp(-dVal * v.SquareLength());\r\n  }\r\n  public GetAngle(): number {\r\n    return Math.atan2(this.y, this.x);\r\n  }\r\n  public GetAngleDegree() {\r\n    return 180 * this.GetAngle() / Math.PI;\r\n  }\r\n  public ToJSON() {\r\n    /* */\r\n  }\r\n  public ToString(): string {\r\n    let t: string = 'x: ' + this.x.toFixed(3).toString() + ' , y: ' + this.y.toFixed(3).toString() + ', z: ' + this.z.toFixed(3).toString();\r\n    return t;\r\n  }\r\n  public ToFloat32Array() {\r\n    return new Float32Array([this.x, this.y, this.z]);\r\n  }\r\n}\r\n\r\n\r\nexport const CircularProjctionFromPoint = (p: NVector3, radius: number = 1) => {\r\n  let radian = Math.atan2(p.x, p.y);\r\n\r\n  radian -= Math.PI * 0.5;\r\n  radian *= -1;\r\n\r\n  const v = new NVector3(0, 0, 0);\r\n  v.x = Math.cos(radian);\r\n  v.y = Math.sin(radian);\r\n  v.z = Math.tan(0);\r\n  v.Unitize();\r\n  v.Mult(radius);\r\n\r\n  return v;\r\n};","// import { ConcaveCore } from './ConcaveCore';\r\n// import { CPoint } from '../../AppDrawing/Canvas/CGeometry/CPoint';\r\n// import { UNIT, MathUtility } from '../Utilities/MathUtility';\r\n\r\n// import { NWebassemblyController } from '../../../Webassembly/Core/NWebassemblyController/NWebassemblyController';\r\nexport class NVector3 {\r\n  public static eps: number = 0.0000001;\r\n  public static origin: NVector3 = new NVector3(0, 0, 0);\r\n  x: number = 0.0;\r\n  y: number = 0.0;\r\n  z: number = 0.0;\r\n  w: number = 0.0;\r\n  long: number = 0.0;\r\n  lat: number = 0.0;\r\n  ele: number = 0.0;\r\n  proX: number = 0.0;\r\n  proY: number = 0.0;\r\n  proZ: number = 0.0;\r\n  alt: number = 0.0;\r\n  d: boolean = true;\r\n  isModified: boolean = false;\r\n  color: string = '#000000';\r\n  isVisited: boolean = false;\r\n  // tslint:disable-next-line:no-any\r\n  parent: any;\r\n  public static GetVecforGraphicApp(long: number, lat: number, ele: number, proX: number, proY: number, proZ: number) {\r\n    let v = new NVector3(0, 0, 0);\r\n    v.long = long;\r\n    v.lat = lat;\r\n    v.ele = ele;\r\n    v.proX = proX;\r\n    v.proY = proY;\r\n    v.proZ = proZ;\r\n    return v;\r\n  }\r\n  public static DeepCopy(v: NVector3): NVector3 {\r\n    const out = new NVector3(v.x, v.y, v.z);\r\n    out.long = v.long; out.lat = v.lat;\r\n    out.proX = v.proX; out.proY = v.proY; out.proZ = v.proZ;\r\n    return out;\r\n  }\r\n  public static Dot(a: NVector3, b: NVector3) {\r\n    return a.x * b.x + a.y * b.y + a.z * b.z;\r\n  }\r\n  // https://en.wikipedia.org/wiki/Shoelace_formula\r\n  // https://stackoverflow.com/questions/25122185/measuring-area-with-n-amount-of-gps-coordinates // no concave\r\n  public static GetAreayConvexGPS(vec: NVector3[]) {\r\n    let lats = [], longs = [];\r\n    for (let i = 0; i < vec.length; ++i) {\r\n      lats.push(vec[i].lat); longs.push(vec[i].long);\r\n    }\r\n    lats.push(vec[0].lat); longs.push(vec[0].long); // make sure to add the first term to the end of both arrays\r\n\r\n    let latsSum = 0, longSum = 0; // get the average center point of the polygon\r\n\r\n    for (let i = lats.length; i--;) {\r\n      latsSum += lats[i]; longSum += longs[i];\r\n    }\r\n\r\n    let latOrigin = latsSum / lats.length;\r\n    let lonOrigin = longSum / longs.length;\r\n\r\n    // translate origin to (0,0) by shifting lat long and calculate the standard angle of the point\r\n    let angles = new Array(lats.length);\r\n\r\n    for (let j = lats.length; j--;) {\r\n      lats[j] -= latOrigin;\r\n      longs[j] -= lonOrigin;\r\n\r\n      if (longs[j] >= 0 && lats[j] >= 0) {\r\n        angles[j] = Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] >= 0) {\r\n        angles[j] = 90 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] < 0 && lats[j] < 0) {\r\n        angles[j] = 180 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      } else if (longs[j] >= 0 && lats[j] < 0) {\r\n        angles[j] = 270 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n      }\r\n    }\r\n\r\n    // re-arrange the points from least to greatest angle\r\n    let curAng, curLat, curLon;\r\n\r\n    for (let l = 0; l < angles.length; l++) {\r\n      for (let k = 0; k < angles.length - 1; k++) {\r\n        curAng = angles[k];\r\n        curLat = lats[k];\r\n        curLon = longs[k];\r\n\r\n        if (curAng < angles[k + 1]) {\r\n          angles[k] = angles[k + 1];\r\n          lats[k] = lats[k + 1];\r\n          longs[k] = longs[k + 1];\r\n\r\n          angles[k + 1] = curAng;\r\n          lats[k + 1] = curLat;\r\n          longs[k + 1] = curLon;\r\n        }\r\n      }\r\n    }\r\n\r\n    // calculate area for irregular polygon\r\n    let sum1 = 0, sum2 = 0;\r\n\r\n    for (let t = 0; t < lats.length; t++) {\r\n      if (t !== lats.length - 1) {\r\n        sum1 += lats[t] * longs[t + 1];\r\n        sum2 += longs[t] * lats[t + 1];\r\n      } else {\r\n        sum1 += lats[t] * longs[0];\r\n        sum2 += longs[t] * lats[0];\r\n      }\r\n    }\r\n\r\n    let area = (sum1 - sum2) / 2.0;\r\n    // console.log('Area: ' + area * 6378137.0 * 6378137.0 / 2.0);\r\n    return area * 20; // * 6378137.0 * 6378137.0 / 2.0;\r\n  }\r\n  public static ScalarRev_V_S_OUT(v: NVector3, s: number, out: NVector3) {\r\n    out.x = s * v.x;\r\n    out.y = s * v.y;\r\n    out.z = s * v.z;\r\n    return out;\r\n  }\r\n  public static Add(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\r\n  }\r\n  public static Sub(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\r\n  }\r\n  public static Clone(v: NVector3): NVector3 {\r\n    return NVector3.DeepCopy(v);\r\n  }\r\n  public static ZAxis(): NVector3 {\r\n    return new NVector3(0, 0, 1);\r\n  }\r\n  public static YAxis(): NVector3 {\r\n    return new NVector3(0, 1, 0);\r\n  }\r\n  public static Zero(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  public static Origin(): NVector3 {\r\n    return new NVector3(0, 0, 0);\r\n  }\r\n  public static Plus(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\r\n  }\r\n  public static Scale(v: NVector3, s: number): NVector3 {\r\n    return new NVector3(v.x * s, v.y * s, v.z * s);\r\n  }\r\n  public static MidVec(v0: NVector3, v1: NVector3): NVector3 {\r\n    return new NVector3(v0.x + ((v1.x - v0.x) * 0.5), v0.y + ((v1.y - v0.y) * 0.5), v0.z + ((v1.z - v0.z) * 0.5));\r\n  }\r\n  public static CompareTwoVectors(v0: NVector3, v1: NVector3): boolean {\r\n    if (v0.x !== v1.x || v0.y !== v1.y || v0.z !== v1.z) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  public static CompareTwoVectorsByGeoPos(v0: NVector3, v1: NVector3, toFixed: number = 4): boolean {\r\n    if (v0.long.toFixed(toFixed) !== v1.long.toFixed(toFixed) || v0.lat.toFixed(toFixed) !== v1.lat.toFixed(toFixed)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n    // let tor = 0.00000000001;\r\n    // if ((v1.long - v0.long) >  tor  || (v1.lat - v0.lat) > tor ) {\r\n    //   return false;\r\n    // } else {\r\n    //   return true;\r\n    // }\r\n  }\r\n  public static Length(v: NVector3): number {\r\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n  }\r\n  public static Normalize(v: NVector3): NVector3 {\r\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n    if (len < 0.0001) {\r\n      return new NVector3(v.x, v.y, v.z);\r\n    }\r\n    return new NVector3(v.x / len, v.y / len, v.z / len);\r\n  }\r\n  // https://web.archive.org/web/20090214201206/http://valis.cs.uiuc.edu:80/~sariel/research/CG/compgeom/msg00827.html\r\n  public static GetArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    // // double center2dx = 0;\r\n    // // double center2dy = 0;\r\n    // for (let i = 0; i < vs.length - 1; i++) {\r\n    //   // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n    //   area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    //   // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n    //   // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    // }\r\n    // area *= 0.5;\r\n    // // center2dx *= 1 / (6 * area);\r\n    // // center2dy *= 1 / (6 * area);\r\n    // return area;\r\n\r\n    for (let i = 0, l = vs.length; i < l; i++) {\r\n      let addX = vs[i].x;\r\n      let addY = vs[i === vs.length - 1 ? 0 : i + 1].y;\r\n      let subX = vs[i === vs.length - 1 ? 0 : i + 1].x;\r\n      let subY = vs[i].y;\r\n\r\n      area += (addX * addY * 0.5);\r\n      area -= (subX * subY * 0.5);\r\n    }\r\n\r\n    return Math.abs(area);\r\n  }\r\n  public static GetAreaByLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    // double center2dx = 0;\r\n    // double center2dy = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n      // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n      // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n    }\r\n    area *= 0.5;\r\n    // center2dx *= 1 / (6 * area);\r\n    // center2dy *= 1 / (6 * area);\r\n    return area;\r\n  }\r\n  public static GetGeoArea(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  public static GetGeoAreaBbyLongLat(vs: NVector3[]) {\r\n    let area = 0;\r\n    for (let i = 0; i < vs.length - 1; i++) {\r\n      area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n    }\r\n    area *= 0.5;\r\n    return Math.abs(area);\r\n  }\r\n  public static GetIndexByShortDistance(v: NVector3, vs: NVector3[]): number[] {\r\n    let index = -1;\r\n    let dis = Number.MAX_SAFE_INTEGER;\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      let distance = NVector3.Distance(v, vs[i]);\r\n      if (distance < dis) {\r\n        dis = distance;\r\n        index = i;\r\n      }\r\n    }\r\n    return [index, dis];\r\n  }\r\n  public static Distance(v0: NVector3, v1: NVector3): number {\r\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n  }\r\n  public static DistanceByArray(v0: number[], v1: number[]): number {\r\n    return Math.sqrt((v0[0] - v1[0]) * (v0[0] - v1[0]) + (v0[1] - v1[1]) * (v0[1] - v1[1]) + (v0[2] - v1[2]) * (v0[2] - v1[2]));\r\n  }\r\n  public static Distance2(v1: NVector3, v2: NVector3): number {\r\n    let d: number =\r\n      (v1.x - v2.x) * (v1.x - v2.x) +\r\n      (v1.y - v2.y) * (v1.y - v2.y) +\r\n      (v1.z - v2.z) * (v1.z - v2.z);\r\n    return d;\r\n  }\r\n  public static DotProduct(v1: NVector3, v2: NVector3): number {\r\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n  }\r\n  public static CrossProduct(v1: NVector3, v2: NVector3): NVector3 {\r\n    return new NVector3(\r\n      v1.y * v2.z - v1.z * v2.y,\r\n      v1.z * v2.x - v1.x * v2.z,\r\n      v1.x * v2.y - v1.y * v2.x\r\n    );\r\n  }\r\n  public static DivideByNum(v0: NVector3, v1: NVector3, n: number = 5): NVector3[] {\r\n    let vs: NVector3[] = [];\r\n    let xOff = (v1.x - v0.x) / n;\r\n    let yOff = (v1.y - v0.y) / n;\r\n    let zOff = (v1.z - v0.z) / n;\r\n    for (let j = 0; j < n; ++j) {\r\n      let x = v0.x + xOff * j;\r\n      let y = v0.y + yOff * j;\r\n      let z = v0.z + zOff * j;\r\n      vs.push(new NVector3(x, y, z));\r\n    }\r\n    return vs;\r\n  }\r\n  // static DistancefromGeoV(v0: NVector3, v1: NVector3, unit: UNIT = CGeometry.appDrawing.activeCommands.unit): number {\r\n  //   let dis = NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  //   if (unit === UNIT.METER) { return dis * 1000; }\r\n  //   if (unit === UNIT.KM) { return dis; }\r\n  //   if (unit === UNIT.MILE) { return MathUtility.MilesFromKM(dis); }\r\n  //   return -1;\r\n  // }\r\n  public static KMeterFromGeoGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.lat * Math.PI / 180 - gV0.lat * Math.PI / 180;\r\n    let dLon = gV1.long * Math.PI / 180 - gV0.long * Math.PI / 180;\r\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(gV0.lat * Math.PI / 180) * Math.cos(gV1.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  public static KMeterByTwoGeoPos(long0: number, lat0: number, long1: number, lat1: number) {\r\n    let v0 = new NVector3(0, 0); v0.long = long0; v0.lat = lat0;\r\n    let v1 = new NVector3(0, 0); v1.long = long1; v1.lat = lat1;\r\n    return NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n  }\r\n  public static KMeterFromGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.y * Math.PI / 180 - gV0.y * Math.PI / 180;\r\n    let dLon = gV1.x * Math.PI / 180 - gV0.x * Math.PI / 180;\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(gV0.y * Math.PI / 180) *\r\n      Math.cos(gV1.y * Math.PI / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d; // * 1000; // meters\r\n  }\r\n  public static Get1KM_Long_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x + addition, v.y, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result long', i, dis);\r\n        return v.x + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  public static Get1KM_lat_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n    let v = new NVector3(long, lat, 0);\r\n    let addition = 0.0;\r\n    for (let i = 0; i < 10000; ++i) {\r\n      let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x, v.y + addition, v.z));\r\n      if (1 < dis && dis < 1.001) {\r\n        // console.log('result lat', i, dis);\r\n        return v.y + addition;\r\n      }\r\n      addition += 0.00001;\r\n    }\r\n    return -1;\r\n  }\r\n  public static Get1KM_Lat_Long_GeoUnit(long: number = 0, lat: number = 0): NVector3 {\r\n    let lng = NVector3.Get1KM_Long_ByGeoUnit(long, lat);\r\n    let la = NVector3.Get1KM_lat_ByGeoUnit(long, lat);\r\n    return new NVector3(lng, la, 0);\r\n  }\r\n  // ............................................................................ vec compute\r\n  // static CalculateFalloff(pts: NVector3[], pt: NVector3, s: number, f: number): number {\r\n  //   let newValue = 0.0;\r\n  //   for (let i = 0; i < pts.length; ++i) {\r\n  //     // let v = NJS.PointUtils.CalculateFalloff(pt, pts[i], s, f);\r\n  //     // newValue += v;\r\n  //   }\r\n  //   return newValue;\r\n  // }\r\n  public static CalculateFalloff(pt: NVector3, attractor: NVector3, strength: number, falloff: number): number {\r\n    let v: NVector3 = NVector3.Sub(attractor, pt);\r\n    let dist: number = v.Length();\r\n    return dist * (strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  public static Attractor(pt: NVector3, attractor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v: NVector3 = NVector3.Sub(attractor, pt);\r\n    let dist = v.Length();\r\n    v.Unitize();\r\n    return v.Mult(strength * Math.exp(-falloff * dist * dist));\r\n  }\r\n  public static Explosion(pt: NVector3, Explosion: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = NVector3.Sub(Explosion, pt);\r\n    let dist = v.Length();\r\n    v.Unitize();\r\n    return v.Mult(-(strength * Math.exp(-falloff * dist * dist)));\r\n  }\r\n  public static Rotor(pt: NVector3, rotor: NVector3, strength: number, falloff: number): NVector3 {\r\n    let v = NVector3.Sub(rotor, pt);\r\n    v.Unitize();\r\n    // v.Rotate(3.141592 / 2, NVector3.zAxis);\r\n    // let dist: number = v.Length;\r\n    // return (v.Mult (strength * (Math.exp(-falloff * dist * dist))));\r\n    return NVector3.Origin();\r\n  }\r\n\r\n  // ............................................................................ vec angle\r\n  public static GetAngleBetween(v0: NVector3, v1: NVector3) {\r\n    return Math.atan2(v1.x - v0.x, v1.y - v0.y);\r\n  }\r\n  // .................................................\r\n  public static GetCosAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n  }\r\n  public static GetAngleByTwoVectorsRadian(v0: NVector3, v1: NVector3): number {\r\n    return Math.acos(NVector3.GetCosAngleByTwoVectors(v0, v1));\r\n  }\r\n  public static GetAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n    return NVector3.GetAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\r\n  }\r\n  public static GetRotationByWorldCoodinate(v: NVector3): number {\r\n    let origin = new NVector3(1, 0, 0);\r\n    return NVector3.GetAngleByTwoVectors(origin, v);\r\n  }\r\n  public static GetRotationByWorldCoodinateByTwo(v0: NVector3, v1: NVector3): number {\r\n    let v = v1.Sub(v0);\r\n    let origin = new NVector3(1, 0, 0);\r\n    if (v.y > 0) {\r\n      return NVector3.GetAngleByTwoVectors(origin, v) * -1;\r\n    } else {\r\n      return NVector3.GetAngleByTwoVectors(origin, v);\r\n    }\r\n  }\r\n  // ............................................................................\r\n  // static ToJSon(v) {\r\n  // var p = {\r\n  //             'point': [],\r\n  //             'primitive': 'point',\r\n  //             'units': {\r\n  //             'point': 'meters'\r\n  //         }\r\n  // }\r\n  // p.point = [v.x , v.y, v.z];\r\n  // return p;\r\n  // }\r\n  public static ComputeDotProducts(vs: NVector3[]) {\r\n    let out = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      // let v0: NVector3 = NVector3.Origin();\r\n      // let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[i + 1].x, vs[i + 1].y, vs[i + 1].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        out.push(dot);\r\n      } else {\r\n        let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n        let v1 = new NVector3(vs[0].x, vs[0].y, vs[0].z);\r\n\r\n        v1.x -= v0.x;\r\n        v1.y -= v0.y;\r\n        v1.z -= v0.z;\r\n\r\n        let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n        out.push(dot);\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n  public static ComputeDotProductsWithCenter(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    let out = [];\r\n    for (let i = 0; i < vs.length; ++i) {\r\n      let v0: NVector3;\r\n      let v1: NVector3;\r\n      if (i < vs.length - 1) {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      } else {\r\n        v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n        v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      }\r\n      let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      out.push(dot);\r\n    }\r\n    return out;\r\n  }\r\n  public static GetXYDimForCircle(vs: NVector3[]) {\r\n    let cp = NVector3.GetCenterVecFromVecs(vs);\r\n    // let out = [];\r\n    let xx: number = 0;\r\n    let yy: number = 0;\r\n    let len = vs.length;\r\n    for (let i = 0; i < len; ++i) {\r\n\r\n      // if (i < vs.length - 1) {\r\n      xx += Math.abs(vs[i].x - cp.x);\r\n      yy += Math.abs(vs[i].y - cp.y);\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n      // } else {\r\n      // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n      // v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n      // }\r\n      // let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n      // out.push(dot);\r\n    }\r\n    len += 2;\r\n    return [xx / len, yy / len];\r\n  }\r\n\r\n  public static DistanceMouseWithTwoVecs(m: NVector3, v0: NVector3, v1: NVector3): number {\r\n    v0.x += 0.00001;\r\n    v0.y += 0.00001;\r\n    let boundary = NVector3.GetBoundingVecs(v0, v1);\r\n    let vec = NVector3.GetCloseVec(v0, v1, m.x, m.y, boundary, true);\r\n    return NVector3.Distance(m, vec);\r\n  }\r\n  public static GetCloseVec(p0: NVector3, p1: NVector3, x: number, y: number, vecsBound: NVector3[], OnLine: boolean = true): NVector3 {\r\n    let pp1: NVector3 = new NVector3(p0.x, p0.y, p0.z);\r\n    let pp2: NVector3 = new NVector3(p1.x, p1.y, p1.z);\r\n    let v1: NVector3 = pp2.Sub(pp1);\r\n    let p: NVector3 = new NVector3(x, y, 0);\r\n    let v2: NVector3 = p.Sub(pp1);\r\n    v1.Unitize();\r\n    let cp = pp1.Add(v1.Mult(v2.DotProduct(v1)));\r\n    if (OnLine) {\r\n      if (NVector3.IsInsideOfVecs(cp, vecsBound)) {\r\n        return cp;\r\n      } else {\r\n        if (p0.Distance(cp) < p1.Distance(cp)) {\r\n          return new NVector3(p0.x, p0.y, p0.z);\r\n        } else {\r\n          return new NVector3(p1.x, p1.y, p1.z);\r\n        }\r\n      }\r\n    } else {\r\n      return cp;\r\n    }\r\n  }\r\n  public static GetBoundingVecs(v0: NVector3, v1: NVector3): NVector3[] {\r\n    let listOfVec: NVector3[] = [];\r\n    let x: number = 0;\r\n    let y: number = 0;\r\n    let z: number = 0;\r\n    if (v0.x < v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y < v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z < v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv0 = new NVector3(x, y, z);\r\n    if (v0.x > v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y > v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z > v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv1 = new NVector3(x, y, z);\r\n    listOfVec.push(new NVector3(nv0.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv1.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv0.x, nv1.y, nv0.z));\r\n    return listOfVec;\r\n  }\r\n  public static GetBoundaryByVecWidthHeight(v: NVector3, width: number, height: number): NVector3[] {\r\n    let boundarVecsSub = [];\r\n    boundarVecsSub.push(new NVector3(v.x, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x + width, v.y + height, v.z));\r\n    boundarVecsSub.push(new NVector3(v.x, v.y + height, v.z));\r\n    return boundarVecsSub;\r\n  }\r\n  public static GetBoundingByVecs(vs: NVector3[]): NVector3[] {\r\n    let listOfVec: NVector3[] = [];\r\n    let xMin: number = Number.MAX_SAFE_INTEGER;\r\n    let yMin: number = Number.MAX_SAFE_INTEGER;\r\n    let zMin: number = Number.MAX_SAFE_INTEGER;\r\n\r\n    let xMax: number = Number.MIN_SAFE_INTEGER;\r\n    let yMax: number = Number.MIN_SAFE_INTEGER;\r\n    let zMax: number = Number.MIN_SAFE_INTEGER;\r\n    for (let i = 0; i < vs.length; ++i) {\r\n\r\n      if (xMin > vs[i].x) { xMin = vs[i].x; }\r\n      if (yMin > vs[i].y) { yMin = vs[i].y; }\r\n      if (zMin > vs[i].z) { zMin = vs[i].z; }\r\n\r\n      if (xMax < vs[i].x) { xMax = vs[i].x; }\r\n      if (yMax < vs[i].y) { yMax = vs[i].y; }\r\n      if (zMax < vs[i].z) { zMax = vs[i].z; }\r\n\r\n    }\r\n    listOfVec.push(new NVector3(xMin, yMin, zMin));\r\n    listOfVec.push(new NVector3(xMax, yMax, zMax));\r\n    return listOfVec;\r\n  }\r\n  public static GetMinMaxVecFromVecs(vec: NVector3[]): NVector3[] {\r\n    let minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, minZ = Number.MAX_VALUE;\r\n    let maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE, maxZ = Number.MIN_VALUE;\r\n    for (let v of vec) {\r\n      if (minX > v.x) { minX = v.x; } if (minY > v.y) { minY = v.y; } if (minZ > v.z) { minZ = v.z; }\r\n      if (maxX < v.x) { maxX = v.x; } if (maxY < v.y) { maxY = v.y; } if (maxZ < v.z) { maxZ = v.z; }\r\n    }\r\n    return [new NVector3(minX, minY, minZ), new NVector3(maxX, maxY, maxZ)];\r\n  }\r\n  public static RemoveVecsWithinDis(vs: NVector3[], tor: number = 10): NVector3[] {\r\n    let vecs: NVector3[] = [];\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      let v0 = vs[i];\r\n      if (v0.d === false) { continue; }\r\n      for (let j = i + 1; j < vs.length; ++j) {\r\n        if (NVector3.Distance(v0, vs[j]) < tor) { vs[j].d = false; }\r\n      }\r\n    }\r\n    for (let i = 0; i < vs.length; ++i) { if (vs[i].d === true) { vecs.push(vs[i]); } }\r\n    // vecs.push(vs[vs.length - 1]);\r\n    return vecs;\r\n  }\r\n  // ...............................................................................\r\n  public static IsInsideOfVecsWtihVecs(vs: NVector3[], vecs: NVector3[]): boolean {\r\n    let inside: boolean = true;\r\n    for (let i = 0; i < vs.length; i++) {\r\n      inside = NVector3.IsInsideOfVecs(vs[i], vecs);\r\n      if (!inside) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  public static IsInsideOfVecWithHeight(mv: NVector3, tv: NVector3, width: number, height: number) {\r\n    if (tv.x < mv.x && mv.x < tv.x + width && tv.y < mv.y && mv.y < tv.y + height) { return true; }\r\n    return false;\r\n  }\r\n  // intersect\r\n\r\n  public static orientation(p: NVector3, q: NVector3, r: NVector3): number {\r\n    // See https://www.geeksforgeeks.org/orientation-3-ordered-points/\r\n    // for details of below formula.\r\n    const val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n\r\n    if (val === 0) { return 0; } // colinear\r\n\r\n    return (val > 0) ? 1 : 2; // clock or counterclock wise\r\n  }\r\n  public static onSegment(p: NVector3, q: NVector3, r: NVector3): boolean {\r\n    if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y)) { return true; }\r\n    return false;\r\n  }\r\n  public static isIntersect(p1: NVector3, q1: NVector3, p2: NVector3, q2: NVector3): boolean {\r\n    // Find the four orientations needed for general and\r\n    // special cases\r\n    const o1 = this.orientation(p1, q1, p2);\r\n    const o2 = this.orientation(p1, q1, q2);\r\n    const o3 = this.orientation(p2, q2, p1);\r\n    const o4 = this.orientation(p2, q2, q1);\r\n\r\n    // General case\r\n    if (o1 !== o2 && o3 !== o4) { return true; }\r\n\r\n    // Special Cases\r\n    // p1, q1 and p2 are colinear and p2 lies on segment p1q1\r\n    if (o1 === 0 && this.onSegment(p1, p2, q1)) { return true; }\r\n\r\n    // p1, q1 and q2 are colinear and q2 lies on segment p1q1\r\n    if (o2 === 0 && this.onSegment(p1, q2, q1)) { return true; }\r\n\r\n    // p2, q2 and p1 are colinear and p1 lies on segment p2q2\r\n    if (o3 === 0 && this.onSegment(p2, p1, q2)) { return true; }\r\n\r\n    // p2, q2 and q1 are colinear and q1 lies on segment p2q2\r\n    if (o4 === 0 && this.onSegment(p2, q1, q2)) { return true; }\r\n\r\n    return false; // Doesn't fall in any of the above cases\r\n  }\r\n\r\n\r\n  // end intersect\r\n  public static IsInsideOfVecs(v: NVector3, vecs: NVector3[]): boolean {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v.x, y = v.y;\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i].x, yi = vecs[i].y;\r\n      let xj = vecs[j].x, yj = vecs[j].y;\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  public static IsInsideOfVecsByArray(v: number[], vecs: number[][]): boolean {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v[0], y = v[1];\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i][0], yi = vecs[i][1];\r\n      let xj = vecs[j][0], yj = vecs[j][1];\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  public static IsInsideOfVecsByCrossing(v: NVector3, w: number, h: number, vs: NVector3[]) {\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x + w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    if (this.IsInsideOfVecs(new NVector3(v.x - w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    return false;\r\n  }\r\n  public static IsInsideOfVecsByConcaveHull(v: NVector3, vs: NVector3[]) {\r\n    // let vsNum: number[][] = [];\r\n    // for (let i = 0; i < vs.length; ++i) {\r\n    //   vsNum.push([vs[i].x, vs[i].y]);\r\n    // }\r\n\r\n    // let result = ConcaveCore.hull(vsNum, 20)\r\n    // console.log(vs.length);\r\n    // console.log(result);\r\n\r\n    // for (let i = 0; i < result.length; ++i) {\r\n    //   new CPoint(result[i][0], result[i][1]);\r\n    // }\r\n  }\r\n  // Convex hull\r\n  // https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\r\n  public static IsInsideOfVecsByConvexHull(v: NVector3, vecs: NVector3[]): boolean {\r\n    vecs = NVector3.ConvexHull(vecs);\r\n    if (NVector3.IsInsideOfVecs(v, vecs)) { return true; } else { return false; }\r\n  }\r\n  public static ConvexHull(vs: NVector3[]): NVector3[] {\r\n    vs.sort(function (a: NVector3, b: NVector3) {\r\n      return a.x === b.x ? a.y - b.y : a.x - b.x;\r\n    });\r\n    let lower: NVector3[] = [];\r\n    for (let i = 0; i < vs.length; i++) {\r\n      while (lower.length >= 2 && NVector3.Cross(lower[lower.length - 2], lower[lower.length - 1], vs[i]) <= 0) { lower.pop(); }\r\n      lower.push(vs[i]);\r\n    }\r\n    let upper: NVector3[] = [];\r\n    for (let i = vs.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && NVector3.Cross(upper[upper.length - 2], upper[upper.length - 1], vs[i]) <= 0) { upper.pop(); }\r\n      upper.push(vs[i]);\r\n    }\r\n    upper.pop(); lower.pop();\r\n    for (let i = 0; i < upper.length; ++i) { lower.push(upper[i]); }\r\n    return lower;\r\n  }\r\n  public static Cross(O: NVector3, A: NVector3, B: NVector3): number {\r\n    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);\r\n  }\r\n  public static Cross_A_B_OUT(a: NVector3, b: NVector3, out: NVector3) {\r\n    const ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;\r\n    out.x = ay * bz - az * by;\r\n    out.y = az * bx - ax * bz;\r\n    out.z = ax * by - ay * bx;\r\n    return out;\r\n  }\r\n  public static CheckBoundIntersection(vs: NVector3[], p0: NVector3, p1: NVector3) {\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      if (this.CheckLineIntersection(vs[i], vs[i + 1], p0, p1)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  // http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\r\n  public static CheckLineIntersection(p0: NVector3, p1: NVector3, p2: NVector3, p3: NVector3) {\r\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n    let denominator: number = 0, a: number = 0, b: number = 0, numerator1: number = 0, numerator2: number = 0;\r\n    let onLine0: boolean = false, onLine1: boolean = false;\r\n    denominator = ((p3.y - p2.y) * (p1.x - p0.x)) - ((p3.x - p2.x) * (p1.y - p0.y));\r\n    let result: NVector3 = new NVector3(0, 0, 0);\r\n    if (denominator === 0) { return undefined; }\r\n    a = p0.y - p2.y;\r\n    b = p0.x - p2.x;\r\n    numerator1 = ((p3.x - p2.x) * a) - ((p3.y - p2.y) * b);\r\n    numerator2 = ((p1.x - p0.x) * a) - ((p1.y - p0.y) * b);\r\n    a = numerator1 / denominator;\r\n    b = numerator2 / denominator;\r\n\r\n    // if we cast these lines infinitely in both directions, they intersect here:\r\n    result.x = p0.x + (a * (p1.x - p0.x));\r\n    result.y = p0.y + (a * (p1.y - p0.y));\r\n    /*\r\n            // it is worth noting that this should be the same as:\r\n            x = p2.x + (b * (p3.x - p2.x));\r\n            y = p2.x + (b * (p3.y - p2.y));\r\n            */\r\n    // if line1 is a segment and line2 is infinite, they intersect if:\r\n    if (a > 0 && a < 1) {\r\n      onLine0 = true;\r\n    }\r\n    // if line2 is a segment and line1 is infinite, they intersect if:\r\n    if (b > 0 && b < 1) {\r\n      onLine1 = true;\r\n    }\r\n    // if line1 and line2 are segments, they intersect if both of the above are true\r\n    if (onLine0 && onLine1) {\r\n      return result;\r\n    } else { return undefined; }\r\n  }\r\n  // http://www.sunshine2k.de/coding/java/Polygon/Convex/polygon.htm\r\n  public static CheckConvexity(vs: NVector3[]) {\r\n    if (vs.length < 3) { return false; }\r\n\r\n    let p: NVector3;\r\n    let v: NVector3;\r\n    let u: NVector3;\r\n    let res = 0;\r\n\r\n    for (let i = 0; i < vs.length; i++) {\r\n      p = vs[i];\r\n      let tmp = vs[(i + 1) % vs.length];\r\n      v = new NVector3(tmp.x - p.x, tmp.y - p.y, 0);\r\n      u = vs[(i + 2) % vs.length];\r\n\r\n      if (i === 0) { // in first loop direction is unknown, so save it in res\r\n        res = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n      } else {\r\n        let newres = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n        if ((newres > 0 && res < 0) || (newres < 0 && res > 0)) { return false; }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  //////////////////////////////////////////////////////////////////////////////// translation Utility\r\n  public static MoveVecs(vecs: NVector3[], dir: NVector3): NVector3[] {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      //\r\n      temp.push(NVector3.MoveVec(vecs[i], dir));\r\n    }\r\n    return temp;\r\n  }\r\n  public static MoveVec(v: NVector3, dir: NVector3): NVector3 {\r\n    return new NVector3(v.x + dir.x, v.y + dir.y, v.z + dir.z);\r\n  }\r\n  public static RotateVecsLoal(vecs: NVector3[], angle: number): NVector3[] {\r\n    let cptToLocal = NVector3.GetCenterVecFromVecs(vecs);\r\n    let cptToWorld = new NVector3(-cptToLocal.x, -cptToLocal.y, -cptToLocal.z);\r\n    let temp: NVector3[] = NVector3.MoveVecs(vecs, cptToWorld);\r\n    temp = NVector3.RotateVecs(temp, angle);\r\n    temp = NVector3.MoveVecs(temp, cptToLocal);\r\n    return temp;\r\n  }\r\n  public static RotateVecs(vecs: NVector3[], angle: number) {\r\n    let temp: NVector3[] = [];\r\n    for (let i = 0; i < vecs.length; ++i) {\r\n      temp.push(NVector3.RotateVec(vecs[i], angle));\r\n    }\r\n    return temp;\r\n  }\r\n  public static Reflect(v: NVector3, n: NVector3, strength: number = 1): NVector3 {\r\n    // http://www.3dkingdoms.com/weekly/weekly.php?a=2\r\n    // (2 * (v * n) * n - v ) * strength;\r\n\r\n    v.x *= -1;\r\n    v.y *= -1;\r\n    v.z *= -1;\r\n\r\n    const dot = this.DotProduct(v, n);\r\n    return new NVector3(\r\n      (2 * dot * n.x - v.x) *  strength,\r\n      (2 * dot * n.y - v.y) *  strength,\r\n      (2 * dot * n.z - v.z) *  strength,\r\n    );\r\n  }\r\n  public static RotateVec(v: NVector3, angle: number): NVector3 {\r\n    let cos = Math.cos(angle * (3.14159265358979 / 180.0));\r\n    let sin = Math.sin(angle * (3.14159265358979 / 180.0));\r\n    let x = v.x * cos - v.y * sin;\r\n    let y = v.x * sin + v.y * cos;\r\n    return new NVector3(x, y, v.z);\r\n  }\r\n  public static GetCenterVecFromVecs(vecs: NVector3[]): NVector3 {\r\n    let nv = new NVector3(0, 0, 0);\r\n    for (let i = 0, c = vecs.length; i < c; ++i) {\r\n      nv.Add(vecs[i]);\r\n    }\r\n    nv.Mult(1.0 / vecs.length);\r\n    return nv;\r\n  }\r\n  // .............................................................................\r\n  public static MidVecGeo(p1: NVector3, p2: NVector3): NVector3 {\r\n    // return new NVector3(p1.screenX + p2.screenX * 0.5, p1.screenY + p2.screenY * 0.5, 0);\r\n    // return new NVector3(p1.x + p2.x * 0.5, p1.y + p2.y * 0.5, 0);\r\n    return new NVector3(p1.x + ((p2.x + p1.x) * 0.5), p1.y + ((p2.y + p1.y) * 0.5), p1.z + ((p2.z + p1.z) * 0.5));\r\n  }\r\n  // intersection // https://gist.github.com/gordonwoodhull/50eb65d2f048789f9558\r\n  // https://stackoverflow.com/questions/563198/whats-the-most-efficent-way-to-calculate-where-two-line-segments-intersect/1968345#1968345\r\n  public static GetVecFromIntersection(vs: NVector3[]): NVector3[] | undefined {\r\n    let newVes: NVector3[] = [];\r\n    for (let j = 0; j < vs.length - 1; ++j) {\r\n      for (let k = j + 1; k < vs.length - 1; ++k) {\r\n        let v = NVector3.CheckLineIntersection(vs[j], vs[j + 1], vs[k], vs[k + 1]);\r\n        if (v) { newVes.push(v); }\r\n      }\r\n    }\r\n    if (newVes.length === 0) { return undefined; } else { return newVes; }\r\n  }\r\n  public static between(a: number, b: number, c: number) {\r\n    return a - NVector3.eps <= b && b <= c + NVector3.eps;\r\n  }\r\n  public static segment_intersection(v0: NVector3, v1: NVector3, v2: NVector3, v3: NVector3) {\r\n    var x = ((v0.x * v1.y - v0.y * v1.x) * (v2.x - v3.x) - (v0.x - v1.x) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    var y = ((v0.x * v1.y - v0.y * v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x * v3.y - v2.y * v3.x)) /\r\n      ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n    if (isNaN(x) || isNaN(y)) {\r\n      return false;\r\n    } else {\r\n      if (v0.x >= v1.x) {\r\n        if (!NVector3.between(v1.x, x, v0.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.x, x, v1.x)) { return false; }\r\n      }\r\n      if (v0.y >= v1.y) {\r\n        if (!NVector3.between(v1.y, y, v0.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v0.y, y, v1.y)) { return false; }\r\n      }\r\n      if (v2.x >= v3.x) {\r\n        if (!NVector3.between(v3.x, x, v2.x)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.x, x, v3.x)) { return false; }\r\n      }\r\n      if (v2.y >= v3.y) {\r\n        if (!NVector3.between(v3.y, y, v2.y)) { return false; }\r\n      } else {\r\n        if (!NVector3.between(v2.y, y, v3.y)) { return false; }\r\n      }\r\n    }\r\n    return new NVector3(x, y);\r\n  }\r\n  // ............................................................................. end static\r\n  constructor(x: number, y: number, z: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n  }\r\n  public Set(x: number, y: number, z: number): NVector3 {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Scale(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Mult(v: number): NVector3 {\r\n    this.x *= v;\r\n    this.y *= v;\r\n    this.z *= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public DivByVal(v: number): NVector3 {\r\n    this.x /= v;\r\n    this.y /= v;\r\n    this.z /= v;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public DivByVec(v: NVector3): NVector3 {\r\n    this.x /= v.x;\r\n    this.y /= v.y;\r\n    this.z /= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Add(v: NVector3): NVector3 {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n    this.z += v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Sub(v: NVector3): NVector3 {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n    this.z -= v.z;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Negate() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n    return new NVector3(this.x, this.y, this.z);\r\n  }\r\n  public Equals(v: NVector3) {\r\n    return this.x === v.x && this.y === v.y && this.z === v.z;\r\n  }\r\n  public Clone(): NVector3 {\r\n    const other = new NVector3(this.x, this.y, this.z);\r\n    other.long = this.long; other.lat = this.lat; other.ele = this.ele;\r\n    other.proX = this.proX; other.proY = this.proY; other.proZ = this.proZ;\r\n    return other;\r\n  }\r\n  public Length(): number {\r\n    const len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    if (len < 0.00001) {\r\n      return 0.00001;\r\n    }\r\n    return len;\r\n  }\r\n  public Unitize(): NVector3 {\r\n    return this.Normalize();\r\n  }\r\n  public IsOverlap(v: NVector3, tor: number = 0.1) {\r\n    if (this.Distance(v) < tor) { return true; } else { return false; }\r\n  }\r\n  public Normalize(): NVector3 {\r\n    let len: number = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    if (len < 0.0001) {\r\n      return this;\r\n    }\r\n    this.x = this.x / len;\r\n    this.y = this.y / len;\r\n    this.z = this.z / len;\r\n    return this;\r\n  }\r\n  public Distance(v: NVector3): number {\r\n    return NVector3.Distance(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public DistanceByArray(vs: number[]) {\r\n    return NVector3.DistanceByArray([this.x, this.y, this.z], vs);\r\n  }\r\n  public Distance2(v: NVector3): number {\r\n    return NVector3.Distance2(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public DotProduct(v: NVector3): number {\r\n    return NVector3.DotProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public CrossProduct(v: NVector3): NVector3 {\r\n    return NVector3.CrossProduct(new NVector3(this.x, this.y, this.z), v);\r\n  }\r\n  public SquareLength(): number {\r\n    let len: number = NVector3.Length(new NVector3(this.x, this.y, this.z));\r\n    return len * len;\r\n  }\r\n  public FadeExp(attr: NVector3, dVal: number) {\r\n    let v = new NVector3(this.x, this.y, this.z);\r\n    v.Sub(attr);\r\n    return Math.exp(-dVal * v.SquareLength());\r\n  }\r\n  public GetAngle(): number {\r\n    return Math.atan2(this.y, this.x);\r\n  }\r\n  public GetAngleDegree() {\r\n    return 180 * this.GetAngle() / Math.PI;\r\n  }\r\n  public ToJSON() {\r\n    /* */\r\n  }\r\n  public ToString(): string {\r\n    let t: string = 'x: ' + this.x.toFixed(3).toString() + ' , y: ' + this.y.toFixed(3).toString() + ', z: ' + this.z.toFixed(3).toString();\r\n    return t;\r\n  }\r\n  public ToFloat32Array() {\r\n    return new Float32Array([this.x, this.y, this.z]);\r\n  }\r\n}\r\n\r\nexport const isInsideEllipse = (cv: NVector3, m: NVector3, r0: number, r1: number, threshold = 5) => {\r\n  const x = Math.pow((m.x - cv.x),2) / Math.pow(threshold + r0, 2);\r\n  const y = Math.pow((m.y - cv.y),2) / Math.pow(threshold + r1, 2);\r\n  if(x + y <= 1) {\r\n      return true;\r\n  }\r\n  return false;\r\n}","\r\nexport const Sepia = (r: number, g: number, b: number) => {\r\n    var avg = 0.3  * r + 0.59 * g + 0.11 * b;\r\n    return [avg + 100, avg + 50, avg, 255];\r\n};\r\nexport const getFalseColor = (value: number): number[] => {\r\n    const col: number[] = [];\r\n    col.push(Math.round(getR(value) * 255));\r\n    col.push(Math.round(getG(value) * 255));\r\n    col.push(Math.round(getB(value) * 255));\r\n    return col;\r\n};\r\nexport const getR = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return 0;\r\n    else if (value <= 0.5)\r\n        return (1020. * value - 255.) / 255.;\r\n    else return 1;\r\n};\r\nexport const getG = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return (1020 * value) / 255;\r\n    else if (value <= 0.5)\r\n        return 1;\r\n    else\r\n        return (-510 * value + 510) / 255;\r\n};\r\nexport const getB = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return (-512 * value + 128) / 255;\r\n    else return 0;\r\n};\r\nexport enum COLORBLENDING {\r\n    SOURCE_OVER = 'source-over',\r\n    SOURCE_IN = 'source-in',\r\n    SOURCE_OUT = 'source-out',\r\n    SOURCE_ATOP = 'source-atop',\r\n    COPY = 'copy',\r\n\r\n    DESTAINATION_OVER = 'destination-over',\r\n    DESTAINATION_IN = 'destination-in',\r\n    DESTAINATION_OUT = 'destination-out',\r\n    DESTAINATION_ATOP = 'destination-atop',\r\n\r\n    LIGHTER = 'lighter',\r\n    MULTIPLY = 'multiply',\r\n    SCREEN = 'screen',\r\n    OVERLAY = 'overlay',\r\n    DARKEN = 'darken',\r\n    LIGHTEN = 'lighten',\r\n    COLOR_DODGE = 'color-dodge',\r\n    COLOR_BURN = 'color-burn',\r\n    HARD_LIGHT = 'hard-light',\r\n    SOFT_LIGHT = 'soft-light',\r\n    DIFFERENCE = 'difference',\r\n    EXCLUSION = 'exclusion',\r\n    HUE = 'hue',\r\n    SATURATION = 'saturation',\r\n    COLOR = 'color',\r\n    LUMINOSITY = 'luminosity'\r\n}\r\nexport enum COLOR_HEX {\r\n    aqua = '#00ffff',\r\n    azure = '#f0ffff',\r\n    beige = '#f5f5dc',\r\n    black = '#000000',\r\n    blue = '#0000ff',\r\n    brown = '#a52a2a',\r\n    cyan = '#00ffff',\r\n    darkblue = '#00008b',\r\n    darkcyan = '#008b8b',\r\n    darkgrey = '#a9a9a9',\r\n    darkgreen = '#006400',\r\n    darkkhaki = '#bdb76b',\r\n    darkmagenta = '#8b008b',\r\n    darkolivegreen = '#556b2f',\r\n    darkorange = '#ff8c00',\r\n    darkorchid = '#9932cc',\r\n    darkred = '#8b0000',\r\n    darksalmon = '#e9967a',\r\n    darkviolet = '#9400d3',\r\n    fuchsia = '#ff00ff',\r\n    gold = '#ffd700',\r\n    green = '#008000',\r\n    indigo = '#4b0082',\r\n    khaki = '#f0e68c',\r\n    lightblue = '#add8e6',\r\n    lightcyan = '#e0ffff',\r\n    lightgreen = '#90ee90',\r\n    lightgrey = '#d3d3d3',\r\n    lightpink = '#ffb6c1',\r\n    lightyellow = '#ffffe0',\r\n    lime = '#00ff00',\r\n    magenta = '#ff00ff',\r\n    maroon = '#800000',\r\n    navy = '#000080',\r\n    olive = '#808000',\r\n    orange = '#ffa500',\r\n    pink = '#ffc0cb',\r\n    purple = '#800080',\r\n    violet = '#800080',\r\n    red = '#ff0000',\r\n    silver = '#c0c0c0',\r\n    white = '#ffffff',\r\n    yellow = '#ffff00'\r\n}\r\nexport class ColorUtility {\r\n    public static modeList = [\r\n        'source-over', 'source-in', 'source-out', 'source-atop', 'copy',\r\n        'destination-over', 'destination-in', 'destination-out', 'destination-atop',\r\n        'lighter', 'multiply', 'screen',\r\n        'overlay', 'darken', 'lighten', 'color-dodge',\r\n        'color-burn', 'hard-light', 'soft-light',\r\n        'difference', 'exclusion', 'hue',\r\n        'saturation', 'color', 'luminosity'\r\n    ];\r\n    public static modeListGL = [\r\n        'source-over',\r\n        'lighter', 'multiply', 'screen',\r\n        'overlay', 'darken', 'lighten', 'color-dodge',\r\n        'color-burn', 'hard-light', 'soft-light',\r\n        'difference', 'exclusion', 'hue',\r\n        'saturation', 'color', 'luminosity'\r\n    ];\r\n    public static ColorPreset = {\r\n        shadow: 'rgba(10,10,10,0.5)'\r\n    };\r\n    public static ShiftBlendingMode(v: number) { // 0 to 1\r\n        let num = v % ColorUtility.modeListGL.length;\r\n        console.log(ColorUtility.modeListGL[num] + ' mode for WebGL');\r\n        return ColorUtility.modeListGL[num] as COLORBLENDING;\r\n    }\r\n    public static RGBtoGray(r: number, g: number, b: number) {\r\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n    }\r\n    public static RGB_String_by_A(v: string, vis: number) {\r\n        const d = v.split(',');\r\n        return `${d[0]},${d[1]},${d[2]},${vis})`; // out rgba ( )\r\n    }\r\n    // reference http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n    public static HSVtoRGB(h: number, s: number, v: number, visibility: number) {\r\n        // inputs h=hue=0-360, s=saturation=0-1, v=value=0-1;\r\n        // algorithm from Wikipedia on HSV conversion;\r\n        const toHex = function (decimalValue: number, places: number = 2) {\r\n            if (places === undefined || isNaN(places)) { places = 2; }\r\n            let hex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\r\n            let next = 0;\r\n            let hexidecimal = '';\r\n            decimalValue = Math.floor(decimalValue);\r\n            while (decimalValue > 0) {\r\n                next = decimalValue % 16;\r\n                decimalValue = Math.floor((decimalValue - next) / 16);\r\n                hexidecimal = hex[next] + hexidecimal;\r\n            }\r\n            while (hexidecimal.length < places) { hexidecimal = '0' + hexidecimal; }\r\n            return hexidecimal;\r\n        };\r\n        let hi = Math.floor(h / 60) % 6;\r\n        let f = h / 60 - Math.floor(h / 60);\r\n        let p = v * (1 - s);\r\n        let q = v * (1 - f * s);\r\n        let t = v * (1 - (1 - f) * s);\r\n        let r = v; // case hi===0 below\r\n        let g = t;\r\n        let b = p;\r\n        switch (hi) {\r\n            case 1: r = q; g = v; b = p; break;\r\n            case 2: r = p; g = v; b = t; break;\r\n            case 3: r = p; g = q; b = v; break;\r\n            case 4: r = t; g = p; b = v; break;\r\n            case 5: r = v; g = p; b = q; break;\r\n            default:\r\n                break;\r\n        }\r\n        //  At this point r,g,b are in 0...1 range.  Now convert into rgba or #FFFFFF notation\r\n        if (visibility) {\r\n            return `rgba( ${Math.round(255 * r)},${Math.round(255 * g)},${Math.round(255 * b)},${visibility})`;\r\n        } else {\r\n            return '#' + toHex(r * 255) + toHex(g * 255) + toHex(b * 255);\r\n        }\r\n    }\r\n    public static GetRandomHex() {\r\n        return ColorUtility.RGBToHex(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));\r\n    }\r\n    public static GetRandomRGB() {\r\n        return `rgb(${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)})`;\r\n    }\r\n    public static GetRandomRGBA() {\r\n        return `rgb(${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},1)`;\r\n    }\r\n    public static GetRandomRGBArray() {\r\n        return [(Math.round(Math.random() * 255)), (Math.round(Math.random() * 255)), (Math.round(Math.random() * 255))];\r\n    }\r\n    public static GetRandomColor() {\r\n        let letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n    // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n    public static RGBToHex(r: number, g: number, b: number) {\r\n        return '#' + [Math.round(r), Math.round(g), Math.round(b)].map(x => {\r\n            const hex = x.toString(16);\r\n            return hex.length === 1 ? '0' + hex : hex;\r\n        }).join('');\r\n\r\n        // let rr = Math.round(r).toString(16);\r\n        // rr = rr.length === 1 ? '0' + rr : rr;\r\n\r\n        // let gg = Math.round(r).toString(16);\r\n        // gg = gg.length === 1 ? '0' + gg : gg;\r\n\r\n        // let bb = Math.round(r).toString(16);\r\n        // bb = bb.length === 1 ? '0' + bb : bb;\r\n\r\n        // return `#${r}${g}${b}`;\r\n    }\r\n    public static HexToCanvasColor(hex: string, visibility: number | string = 0, isGray: boolean = false) {\r\n        // if (hex[0] !== '#') {\r\n        //     let col = hex.split('(')[1].split(')')[0].split(',');\r\n        //     hex = this.RGBToHex(parseInt(col[0]), parseInt(col[1]), parseInt(col[2]));\r\n        // }\r\n        // Convert #AA77CC to rbga() format for Firefox\r\n        let thecol;\r\n        visibility = visibility || '1.0';\r\n        hex = hex.replace('#', '');\r\n        let r = parseInt(hex.substring(0, 2), 16);\r\n        let g = parseInt(hex.substring(2, 4), 16);\r\n        let b = parseInt(hex.substring(4, 6), 16);\r\n        if (isGray) {\r\n            // let v = (0.58 * (r / 255)) + (0.17 * (g / 255)) + (0.8 * (b / 255));\r\n            let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\r\n            thecol = 'rgba(' + v + ',' + v + ',' + v + ',' + visibility + ')';\r\n        } else {\r\n            thecol = 'rgba(' + r + ',' + g + ',' + b + ',' + visibility + ')';\r\n        }\r\n        return thecol;\r\n    }\r\n    public static Dec2hex(i: number) {\r\n        return (i + 0x10000).toString(16).substr(-4).toUpperCase();\r\n    }\r\n    public static Hex2Dec(hex: string) {\r\n        return parseInt(hex, 16);\r\n    }\r\n    public static GetRandomColorByLightness(hex: string, lightness: number) {\r\n        const rgb = ColorUtility.HexToRGBANormalized(hex);\r\n        const hsl = ColorUtility.RGB2HSL(rgb[0], rgb[1], rgb[2]);\r\n        return ColorUtility.HSL2RGB(hsl[0], hsl[1], hsl[2] + lightness);\r\n    }\r\n    public static RGB_by_A(c: string, visiblity: number) {\r\n        let col = c.split(',');\r\n        return col[0] + ',' + col[1] + ',' + col[2] + ',' + visiblity + ')';\r\n    }\r\n    public static HexToRGBA(hex: string, visibility: number = 1, isGray: boolean = false) {\r\n        hex = hex.replace('#', '');\r\n        let r = parseInt(hex.substring(0, 2), 16);\r\n        let g = parseInt(hex.substring(2, 4), 16);\r\n        let b = parseInt(hex.substring(4, 6), 16);\r\n        if (isGray) {\r\n            // let v = (0.58 * (r / 255)) + (0.17 * (g / 255)) + (0.8 * (b / 255));\r\n            let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\r\n            return [v, v, v, visibility];\r\n        } else {\r\n            return [r, g, b, visibility];\r\n        }\r\n    }\r\n    public static LABComputation() {\r\n        // console.log('lab');\r\n        // console.log(this.rgb2lab(255, 100, 50));\r\n        // console.log(this.lab2rgb(100, -50, 100));\r\n        // console.log(this.deltaE([100, 40, -50], [50, 50, -40 ]));\r\n    }\r\n    // refer https://github.com/antimatter15/rgb-lab/blob/master/color.js  // L = 0 to 100  / A -100 green + 100 red / B - 100 blue + 100 yellow\r\n    public static lab2rgb(L: number, A: number, B: number) {\r\n        let y = (L + 16) / 116,\r\n            x = A / 500 + y,\r\n            z = y - B / 200;\r\n        let r, g, b = 0;\r\n\r\n        x = 0.95047 * ((x * x * x > 0.008856) ? x * x * x : (x - 16 / 116) / 7.787);\r\n        y = 1.00000 * ((y * y * y > 0.008856) ? y * y * y : (y - 16 / 116) / 7.787);\r\n        z = 1.08883 * ((z * z * z > 0.008856) ? z * z * z : (z - 16 / 116) / 7.787);\r\n\r\n        r = x * 3.2406 + y * -1.5372 + z * -0.4986;\r\n        g = x * -0.9689 + y * 1.8758 + z * 0.0415;\r\n        b = x * 0.0557 + y * -0.2040 + z * 1.0570;\r\n\r\n        r = (r > 0.0031308) ? (1.055 * Math.pow(r, 1 / 2.4) - 0.055) : 12.92 * r;\r\n        g = (g > 0.0031308) ? (1.055 * Math.pow(g, 1 / 2.4) - 0.055) : 12.92 * g;\r\n        b = (b > 0.0031308) ? (1.055 * Math.pow(b, 1 / 2.4) - 0.055) : 12.92 * b;\r\n\r\n        return [Math.max(0, Math.min(1, r)) * 255,\r\n        Math.max(0, Math.min(1, g)) * 255,\r\n        Math.max(0, Math.min(1, b)) * 255];\r\n    }\r\n    public static rgb2lab(R: number, G: number, B: number) { // 0 to 255\r\n        let r = R / 255,\r\n            g = G / 255,\r\n            b = B / 255,\r\n            x, y, z;\r\n\r\n        r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\r\n        g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\r\n        b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\r\n\r\n        x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\r\n        y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;\r\n        z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\r\n\r\n        x = (x > 0.008856) ? Math.pow(x, 1 / 3) : (7.787 * x) + 16 / 116;\r\n        y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y) + 16 / 116;\r\n        z = (z > 0.008856) ? Math.pow(z, 1 / 3) : (7.787 * z) + 16 / 116;\r\n\r\n        return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)];\r\n    }\r\n\r\n    // calculate the perceptual distance between colors in CIELAB\r\n    // https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs\r\n\r\n    public static deltaE(labA: number[], labB: number[]) {\r\n        let deltaL = labA[0] - labB[0];\r\n        let deltaA = labA[1] - labB[1];\r\n        let deltaB = labA[2] - labB[2];\r\n        let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\r\n        let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\r\n        let deltaC = c1 - c2;\r\n        let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\r\n        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\r\n        let sc = 1.0 + 0.045 * c1;\r\n        let sh = 1.0 + 0.015 * c1;\r\n        let deltaLKlsl = deltaL / (1.0);\r\n        let deltaCkcsc = deltaC / (sc);\r\n        let deltaHkhsh = deltaH / (sh);\r\n        let i = deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\r\n        return i < 0 ? 0 : Math.sqrt(i);\r\n    }\r\n    public static Threshold(r: number, g: number, b: number, threshold: number, high: number, low: number): number {\r\n        return (0.3 * r + 0.59 * g + 0.11 * b >= threshold) ? high : low;\r\n    }\r\n    public static HexToRGBANormalized(hex: string, visibility: number = 1, isGray: boolean = false) {\r\n        hex = hex.replace('#', '');\r\n        let r = parseInt(hex.substring(0, 2), 16);\r\n        let g = parseInt(hex.substring(2, 4), 16);\r\n        let b = parseInt(hex.substring(4, 6), 16);\r\n        if (isGray) {\r\n            // let v = (0.58 * (r / 255)) + (0.17 * (g / 255)) + (0.8 * (b / 255));\r\n            let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\r\n            return [v, v, v, visibility];\r\n        } else {\r\n            return [r / 255, g / 255, b / 255, visibility / 255];\r\n        }\r\n    }\r\n    // https://gist.github.com/mjackson/5311256\r\n    public static RGB2HSL(r: number, g: number, b: number) { // 0 to 255\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n\r\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = (max + min) / 2, s = (max + min) / 2, l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0; // achromatic\r\n        } else {\r\n            let d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n                default: break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return [h, s, l]; // 0 to 1\r\n    }\r\n    public static HSL2RGB(h: number, s: number, l: number) { // 0 to 1\r\n        let r, g, b;\r\n\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            const hue2rgb = (pp: number, qq: number, t: number) => {\r\n                if (t < 0) { t += 1; }\r\n                if (t > 1) { t -= 1; }\r\n                if (t < 1 / 6) { return pp + (qq - pp) * 6 * t; }\r\n                if (t < 1 / 2) { return qq; }\r\n                if (t < 2 / 3) { return pp + (qq - pp) * (2 / 3 - t) * 6; }\r\n                return pp;\r\n            };\r\n\r\n            let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            let p = 2 * l - q;\r\n\r\n            r = hue2rgb(p, q, h + 1 / 3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return [\r\n            Math.max(0, Math.min(Math.round(r * 255), 255))\r\n            , Math.max(0, Math.min(Math.round(g * 255), 255))\r\n            , Math.max(0, Math.min(Math.round(b * 255), 255))\r\n        ];\r\n    }\r\n    public static RGB2HSV(r: number, g: number, b: number) { // 0 to 255\r\n        r /= 255; \r\n        g /= 255; \r\n        b /= 255;\r\n\r\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = max; \r\n        let s = max; \r\n        let v = max;\r\n\r\n        let d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if (max === min) {\r\n            h = 0; // achromatic\r\n        } else {\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n                default: break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n        return [h, s, v]; // 0 to 1\r\n    }\r\n    public static HSV2RGB(h: number, s: number, v: number) { // 0 to 1\r\n        let r = 0, g = 0, b = 0;\r\n\r\n        let i = Math.floor(h * 6);\r\n        let f = h * 6 - i;\r\n        let p = v * (1 - s);\r\n        let q = v * (1 - f * s);\r\n        let t = v * (1 - (1 - f) * s);\r\n\r\n        switch (i % 6) {\r\n            case 0: r = v; g = t; b = p; break;\r\n            case 1: r = q; g = v; b = p; break;\r\n            case 2: r = p; g = v; b = t; break;\r\n            case 3: r = p; g = q; b = v; break;\r\n            case 4: r = t; g = p; b = v; break;\r\n            case 5: r = v; g = p; b = q; break;\r\n            default: break;\r\n        }\r\n\r\n        return [r * 255, g * 255, b * 255];\r\n    }\r\n    // ... interpolation\r\n    // https://graphicdesign.stackexchange.com/questions/83866/generating-a-series-of-colors-between-two-colors\r\n    public static InterpolateColor(colA: number[], colB: number[], factor: number = 0.5): number[] {\r\n        let result = [colA[0], colA[1], colA[2]]; // ;colA.slice();\r\n        for (let i = 0; i < 3; i++) {\r\n            // result[i] = Math.round(result[i] + factor * (colB[i] - colA[i]));\r\n            result[i] = (result[i] * 255 + factor * (colB[i] * 255 - colA[i] * 255));\r\n        }\r\n        // console.log(result);\r\n        return result;\r\n    }\r\n    public static InterpolateColorsByArray(cA: number[], cB: number[], steps: number): number[][] {\r\n        const step = 1. / (steps - 1.), interpolatedColors: number[][] = [];\r\n        for (let i = 0; i < steps; i++) {\r\n            interpolatedColors.push(ColorUtility.InterpolateColor(cA, cB, step * i));\r\n        }\r\n        // console.log(interpolatedColors);\r\n        return interpolatedColors;\r\n    }\r\n    public static InterpolateColors(rgb0: string, rgb1: string, steps: number): number[][] {\r\n        const step = 1 / (steps - 1), interpolatedColors: number[][] = [];\r\n\r\n        let cA = ColorUtility.RBGToArray(rgb0);\r\n        let cB = ColorUtility.RBGToArray(rgb1);\r\n\r\n        if (cA && cB) {\r\n            for (let i = 0; i < steps; i++) {\r\n                interpolatedColors.push(ColorUtility.InterpolateColor(cA, cB, step * i));\r\n            }\r\n        }\r\n        return interpolatedColors;\r\n    }\r\n    public static RBGToArray(rgb: string): number[] | undefined {\r\n        const c = rgb.match(/\\d+/g);\r\n        if (c) { return c.map(Number); }\r\n        return undefined;\r\n    }\r\n    // ............................................................................ blender\r\n    //      blendFunc blender = funcs[mode % 7];\r\n    // public delegate  blendFunc( a,  b,  c);\r\n    //     public blendFunc[] funcs = new blendFunc[]{\r\n    //     Blend, Addition, Subtraction, Multiply, Screen, Overlay, SoftLight\r\n    // };\r\n    public static Blend(vA: number, vB: number, blend: number) {\r\n        return vA * (1.0 - blend) + vB * blend;\r\n    }\r\n    public static Addition(vA: number, vB: number, blend: number) {\r\n        return vA * (1.0 - blend) + blend * (vA + vB) * 0.5;\r\n    }\r\n    public static Subtraction(vA: number, vB: number, blend: number) {\r\n        return vA * (1.0 - blend) + blend * (vA - vB) * 2;\r\n    }\r\n    public static Multiply(vA: number, vB: number, blend: number) {\r\n        return vA * (1.0 - blend) + blend * (vA * vB) * 0.5;\r\n    }\r\n    public static Screen(vA: number, vB: number, blend: number) {\r\n        return vA * (1.0 - blend) + blend * (1 - (1 - vA) * (1 - vB));\r\n    }\r\n    public static Overlay(vA: number, vB: number, blend: number) {\r\n        let val = 0;\r\n        if (vA < 0.5) { val = 2 * vA * vB; } else { val = 1 - 2 * (1 - vA) * (1 - vB); }\r\n        val = vA * (1.0 - blend) + blend * val;\r\n        return val;\r\n    }\r\n    public static SoftLight(vA: number, vB: number, blend: number) {\r\n        let val = 0;\r\n        if (vB < 0.5) { val = 2 * vA * vB + vA * vA * (1 - 2 * vB); } else { val = 2 * vA * (1 - vB) + Math.sqrt(vA) * (2 * vB - 1); }\r\n        val = vA * (1.0 - blend) + blend * val;\r\n        return val;\r\n    }\r\n    // ........................................................\r\n\r\n    public static Hex2HSVByHue(hex: string, s: number) { // s 0 to 1\r\n        let col = ColorUtility.HexToRGBA(hex);\r\n        let hsv = ColorUtility.RGB2HSV(col[0], col[1], col[2]);\r\n        hsv[1] = s;\r\n        return ColorUtility.HSVtoRGB(hsv[0], hsv[1], hsv[2], 1);\r\n\r\n    }\r\n    public static Hex2HSVByCol(hex: string, s: number) { // s 0 to 1\r\n        let col = ColorUtility.HexToRGBA(hex);\r\n        let hsv = ColorUtility.RGB2HSV(col[0], col[1], col[2]);\r\n        hsv[0] += s;\r\n        return ColorUtility.HSVtoRGB(hsv[0], hsv[1], hsv[2], 1);\r\n\r\n    }\r\n\r\n    // .....................................................................\r\n    // from -1 to 1 for brightness and contrast\r\n    public static BrightnessContrastLUT(brightness: number, contrast: number): number[] {\r\n        let lut = [];\r\n        let contrastAdjust = -128 * contrast + 128;\r\n        let brightnessAdjust = 255 * brightness;\r\n        let adjust = contrastAdjust + brightnessAdjust;\r\n        for (let i = 0; i < 256; i++) {\r\n            let c = i * contrast + adjust;\r\n            let result = Math.floor(c < 0 ? 0 : (c > 255 ? 255 : c));\r\n            lut.push(result);\r\n        }\r\n        return lut;\r\n    }\r\n    public static ImgBrightnessContrast(img: ImageData, brightness: number, contrast: number): ImageData {\r\n        let imgOut = new ImageData(img.width, img.height);\r\n        const lut = this.BrightnessContrastLUT(brightness, contrast + 1.0);\r\n        for (let i = 0; i < img.data.length; i += 4) {\r\n            let r = lut[img.data[i + 0]];\r\n            let g = lut[img.data[i + 1]];\r\n            let b = lut[img.data[i + 2]];\r\n            let a = img.data[i + 3];\r\n\r\n            imgOut.data[i + 0] = r; imgOut.data[i + 1] = g; imgOut.data[i + 2] = b; imgOut.data[i + 3] = a;\r\n        }\r\n        return imgOut;\r\n    }\r\n\r\n    public static HueSaturationLightness(img: ImageData, Hue: number, Saturation: number, Lightness: number) {\r\n        let imgOut = new ImageData(img.width, img.height);\r\n        for (let i = 0; i < img.data.length; i += 4) {\r\n            let r = img.data[i + 0];\r\n            let g = img.data[i + 1];\r\n            let b = img.data[i + 2];\r\n            let a = img.data[i + 3];\r\n\r\n            let hls = this.RGB2HSL(r, g, b);\r\n            // console.log(hls);\r\n            hls[0] += Hue;\r\n\r\n            hls[1] += Saturation;\r\n            if (hls[1] < 0) { hls[1] = 0; }\r\n\r\n            hls[2] += Lightness;\r\n\r\n            let col = this.HSL2RGB(hls[0], hls[1], hls[2]);\r\n            // imgOut.SetPixel(x, y, Color.FromArgb(255, (int)(col[0] * 255), (int)(col[1] * 255), (int)(col[2] * 255)));\r\n\r\n            imgOut.data[i + 0] = col[0];\r\n            imgOut.data[i + 1] = col[1];\r\n            imgOut.data[i + 2] = col[2];\r\n            imgOut.data[i + 3] = a;\r\n        }\r\n        return imgOut;\r\n    }\r\n    public static ImgInvert(img: ImageData) {\r\n        let imgOut = new ImageData(img.width, img.height);\r\n        for (let i = 0; i < img.data.length; i += 4) {\r\n            let r = img.data[i + 0];\r\n            let g = img.data[i + 1];\r\n            let b = img.data[i + 2];\r\n\r\n            imgOut.data[i + 0] = 255 - r;\r\n            imgOut.data[i + 1] = 255 - g;\r\n            imgOut.data[i + 2] = 255 - b;\r\n            imgOut.data[i + 3] = 255;\r\n        }\r\n        return imgOut;\r\n    }\r\n    public static ImgThreshold(img: ImageData, threshold: number, high: number, low: number) {\r\n        let imgOut = new ImageData(img.width, img.height);\r\n        for (let i = 0; i < img.data.length; i += 4) {\r\n            let r = img.data[i + 0];\r\n            let g = img.data[i + 1];\r\n            let b = img.data[i + 2];\r\n\r\n            let v = ColorUtility.Threshold(r / 255.0, g / 255.0, b / 255.0, threshold, high, low);\r\n            let gray = Math.floor(v * 255);\r\n            gray = (gray < 255) ? gray : 255;\r\n            gray = (gray < 0) ? 0 : gray;\r\n\r\n            // imgOut.SetPixel(x, y, Color.FromArgb(255, gray, gray, gray));\r\n            imgOut.data[i + 0] = gray;\r\n            imgOut.data[i + 1] = gray;\r\n            imgOut.data[i + 2] = gray;\r\n            imgOut.data[i + 3] = 255;\r\n        }\r\n        return imgOut;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// https://github.com/bahamas10/node-ryb2rgb/blob/master/ryb2rgb.js\r\n\r\n\r\nconst cubic = (t: number, a: number, b: number) => {\r\n    const weight = t * t * (3 - 2 * t);\r\n    return a + weight * (b - a);\r\n};\r\n\r\nexport const ryb_to_rgb = (r: number, y: number, b: number) => { // # Assumption: r, y, b in [0, 1]\r\n    // red\r\n    let x0  = cubic(b, 1.0, 0.163);\r\n    let x1  = cubic(b, 1.0, 0.0);\r\n    let x2 = cubic(b, 1.0, 0.5);\r\n    let x3 = cubic(b, 1.0, 0.2);\r\n    let y0 = cubic(y, x0, x1);\r\n    let y1 = cubic(y, x2, x3);\r\n    const red = cubic(r, y0, y1);\r\n\r\n    // green\r\n    x0 = cubic(b, 1.0, 0.373);\r\n    x1 = cubic(b, 1.0, 0.66);\r\n    x2 = cubic(b, 0., 0.);\r\n    x3 = cubic(b, 0.5, 0.094);\r\n    y0 = cubic(y, x0, x1);\r\n    y1 = cubic(y, x2, x3);\r\n    const green = cubic(r, y0, y1);\r\n\r\n    // blue\r\n    x0 = cubic(b, 1.0, 0.6);\r\n    x1 = cubic(b, 0.0, 0.2);\r\n    x2 = cubic(b, 0.0, 0.5);\r\n    x3 = cubic(b, 0.0, 0.0);\r\n    y0 = cubic(y, x0, x1);\r\n    y1 = cubic(y, x2, x3);\r\n    const blue = cubic(r, y0, y1);\r\n\r\n    return [red, green, blue];\r\n};\r\n\r\n\r\n\r\n\r\n// https://github.com/bahamas10/node-rgb2ryb/blob/master/rgb2ryb.js\r\n\r\n// if (typeof exports !== 'undefined') {\r\n//     module.exports = rgb2ryb;\r\n//     module.exports.rgb2ryb = rgb2ryb;\r\n//     module.exports.ryb2rgb = ryb2rgb;\r\n//     module.exports.complimentary = complimentary;\r\n//   }\r\n//   /*\r\n//    * Convert a red-green-blue system to a red-yellow-blue system.\r\n//    */\r\nexport const rgb2ryb = (r: number, g: number, b: number) => {\r\n      // Remove the whiteness from the color.\r\n      const w = Math.min(r, g, b);\r\n      r -= w;\r\n      g -= w;\r\n      b -= w;\r\n      const mg = Math.max(r, g, b);\r\n\r\n      // Get the yellow out of the red+green.\r\n      let y = Math.min(r, g);\r\n      r -= y;\r\n      g -= y;\r\n\r\n      // If this unfortunate conversion combines blue and green, then cut each in\r\n      // half to preserve the value's maximum range.\r\n      if (b && g) {\r\n          b /= 2.0;\r\n          g /= 2.0;\r\n      }\r\n\r\n      // Redistribute the remaining green.\r\n      y += g;\r\n      b += g;\r\n\r\n      // Normalize to values.\r\n      const my = Math.max(r, y, b);\r\n      if (my) {\r\n          const n = mg / my;\r\n          r *= n;\r\n          y *= n;\r\n          b *= n;\r\n      }\r\n\r\n      // Add the white back in.\r\n      r += w;\r\n      y += w;\r\n      b += w;\r\n\r\n      // And return back the ryb typed accordingly.\r\n      return [r, y, b];\r\n  };\r\n\r\n//   /**\r\n//    * Convert a red-yellow-blue system to a red-green-blue system.\r\n//    */\r\n//   function ryb2rgb(color) {\r\n//       var r = color[0], y = color[1], b = color[2];\r\n//       // Remove the whiteness from the color.\r\n//       var w = Math.min(r, y, b);\r\n//       r -= w;\r\n//       y -= w;\r\n//       b -= w;\r\n\r\n//       var my = Math.max(r, y, b);\r\n\r\n//       // Get the green out of the yellow and blue\r\n//       var g = Math.min(y, b);\r\n//       y -= g;\r\n//       b -= g;\r\n\r\n//       if (b && g) {\r\n//           b *= 2.0;\r\n//           g *= 2.0;\r\n//       }\r\n\r\n//       // Redistribute the remaining yellow.\r\n//       r += y;\r\n//       g += y;\r\n\r\n//       // Normalize to values.\r\n//       var mg = Math.max(r, g, b);\r\n//       if (mg) {\r\n//           var n = my / mg;\r\n//           r *= n;\r\n//           g *= n;\r\n//           b *= n;\r\n//       }\r\n\r\n//       // Add the white back in.\r\n//       r += w;\r\n//       g += w;\r\n//       b += w;\r\n\r\n//       // And return back the ryb typed accordingly.\r\n//       return [r, g, b];\r\n//   }\r\n\r\n//   /**\r\n//    * Return the complementary color values for a given color.\r\n//    * You must also give it the upper limit of the color values, typically 255 for\r\n//    * GUIs, 1.0 for OpenGL.\r\n//    */\r\n//   function complimentary(color, limit) {\r\n//       var r = color[0], g = color[1], b = color[2];\r\n//       limit = limit || 255;\r\n//       return [limit - r, limit - g, limit - b];\r\n//   }","\nexport class GL3DPreset {\n    static vTerrain = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    out vec3 vLighting;\n    out vec4 v_color;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n       \n        highp vec3 directionalVector = vec3(0.85, 1.8, 0.75);\n\n        // highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        // highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        // vLighting = ambientLight + (directionalLightColor * directional);\n\n        highp float directional = max(dot(a_normal.xyz, directionalVector), 0.0);\n        vLighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n    }\n    `;\n\n    static fTerrain = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n\n    in vec4 v_color;\n    in vec3 vLighting;\n\n    out vec4 outColor;\n    void main()\n    {\n        outColor = vec4(vLighting,1);\n\n        // outColor = vec4(v_color.xyz * vLighting,1);\n        // outColor = v_color;\n    }\n\n    `;\n    static vGlobe = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    out vec3 vLighting;\n    out vec4 v_color;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n       \n        highp vec3 directionalVector = vec3(0.85, 1.8, 0.75);\n\n        // highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        // highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        // vLighting = ambientLight + (directionalLightColor * directional);\n\n        highp float directional = max(dot(a_normal.xyz, directionalVector), 0.0);\n        vLighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n    }\n    `;\n\n    static fGlobe = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n\n    in vec4 v_color;\n    in vec3 vLighting;\n\n    out vec4 outColor;\n    void main()\n    {\n        outColor = vec4(vLighting,1);\n\n        // outColor = vec4(v_color.xyz * vLighting,1);\n        // outColor = v_color;\n    }\n\n    `;\n    static vGlobeTexture = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n    in vec2 a_texcoord;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    out vec3 v_Lighting;\n    out vec4 v_color;\n    out vec2 v_texcoord;\n    out vec3 v_normal;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n       \n        highp vec3 directionalVector = vec3(0.85, 1.8, 0.75);\n\n        // highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        // highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        // v_Lighting = ambientLight + (directionalLightColor * directional);\n\n        highp float directional = max(dot(a_normal.xyz, directionalVector), 0.0);\n        v_Lighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n        v_texcoord = a_texcoord;\n        v_normal = a_normal;\n    }\n    `;\n\n    static fGlobeTexture = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    uniform sampler2D u_texture;\n\n    in vec3 v_normal;\n    in vec4 v_color;\n    in vec3 v_Lighting;\n    in vec2 v_texcoord;\n\n    out vec4 outColor;\n    void main()\n    {\n        // outColor = vec4(v_Lighting,1);\n        vec4 texCol = texture(u_texture, v_texcoord);\n        outColor = vec4(texCol.xyz * v_Lighting,1);\n        // outColor = v_color;\n    }\n\n    `;\n\n    static vObjBunny01 = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n    in vec4 a_color;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    out vec3 vLighting;\n    out vec4 v_color;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.6, 0.6, 0.6);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n       \n        highp vec3 directionalVector = vec3(0.85, 0.8, 0.75);\n\n        // highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        // highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        // vLighting = ambientLight + (directionalLightColor * directional);\n\n        highp float directional = max(dot(a_normal.xyz, directionalVector), 0.0);\n        vLighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n    }\n    `;\n\n    static fObjBunny01 = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n\n    in vec4 v_color;\n    in vec3 vLighting;\n\n    out vec4 outColor;\n    void main()\n    {\n        outColor = vec4(vLighting,1);\n\n        // outColor = vec4(v_color.xyz * vLighting,1);\n        // outColor = v_color;\n    }\n\n    `;\n\n    static vObjBunny02 = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n    in vec4 a_color;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n\n    out vec3 vLighting;\n    out vec4 v_color;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.6, 0.6, 0.6);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n    \n        highp vec3 directionalVector = vec3(0.85, 0.8, 0.75);\n\n        // highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        // highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        // vLighting = ambientLight + (directionalLightColor * directional);\n\n        highp float directional = max(dot(a_normal.xyz, directionalVector), 0.0);\n        vLighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n    }\n    `;\n\n    static fObjBunny02 = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    in vec4 v_color;\n    in vec3 vLighting;\n\n    out vec4 outColor;\n    void main()\n    {\n        // outColor = vec4(vLighting,1);\n\n        // outColor = vec4(v_color.xyz * vLighting,1);\n        outColor = v_color;\n    }\n    `;\n\n    static vObjBunny03 = `#version 300 es\n    precision mediump float;\n\n    in vec4 a_position;\n    in vec3 a_normal;\n    in vec4 a_color;\n\n    uniform mat4 u_matrix;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n\n    out vec3 vLighting;\n    out vec4 v_color;\n\n    void main() { \n        gl_Position = u_matrix * a_position;\n\n        highp vec3 ambientLight = vec3(0.6, 0.6, 0.6);\n        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);\n        highp vec3 directionalVector = vec3(0.85, 0.8, 0.75);\n\n        directionalVector = (vec4(directionalVector,1) * u_matrix).xyz;\n\n        highp vec4 transformedNormal = u_matrix * vec4(a_normal, 1.0);\n        highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n        vLighting = ambientLight + (directionalLightColor * directional);\n\n        v_color = vec4(a_normal,1);\n    }\n    `;\n\n    static fObjBunny03 = `#version 300 es\n    precision mediump float;\n    // uniform vec4 u_color;\n    // uniform vec2 u_mouse;\n    // uniform vec2 u_cVec;\n    \n    in vec4 v_color;\n    in vec3 vLighting;\n\n    out vec4 outColor;\n    void main(){\n        outColor = vec4(v_color.xyz * vLighting,1);\n    }\n    `;\n    constructor() {\n        /* */\n    }\n}","\nexport class Vec3 extends Float32Array {\n\n    isModified: boolean = true;\n\n    static FromValues(x: number = 0, y: number = 0, z: number = 0) {\n        return new Vec3(x, y, z);\n    }\n    static scalar(v: Vec3, s: number, out: Vec3) {\n        out[0] = v[0] * s;\n        out[1] = v[1] * s;\n        out[2] = v[2] * s;\n        return out;\n    }\n    static Normalize(v: Vec3) {\n        let mag = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n\n        v[0] = v[0] / mag;\n        v[1] = v[1] / mag;\n        v[2] = v[2] / mag;\n        v.isModified = true;\n        return v;\n    }\n    static ScalarRev(v: Vec3, s: number, out: Vec3) {\n        out[0] = s * v[0];\n        out[1] = s * v[1];\n        out[2] = s * v[2];\n        return out;\n    }\n    static Dot(a: Vec3, b: Vec3) { return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]; }\n\n    static Cross(a: Vec3, b: Vec3, out: Vec3) {\n        let ax = a[0], ay = a[1], az = a[2],\n            bx = b[0], by = b[1], bz = b[2];\n        out[0] = ay * bz - az * by;\n        out[1] = az * bx - ax * bz;\n        out[2] = ax * by - ay * bx;\n        return out;\n    }\n    static Lerp(out: Vec3, a: Vec3, b: Vec3, t: number) {\n        let ax = a[0];\n        let ay = a[1];\n        let az = a[2];\n        out[0] = ax + t * (b[0] - ax);\n        out[1] = ay + t * (b[1] - ay);\n        out[2] = az + t * (b[2] - az);\n        return out;\n    }\n    // From a point in space, closest spot to a 3D line\n    static ClosestPointToLine3D(a: Vec3, b: Vec3, p: Vec3, out: Vec3) {\n        if (out === undefined) { out = new Vec3(); }\n        var dx = b.x - a.x,\n            dy = b.y - a.y,\n            dz = a.z - a.z,\n            t = ((p.x - a.x) * dx + (p.y - a.y) * dy + (p.z - a.z) * dz) / (dx * dx + dy * dy + dz * dz),\n            x = a.x + (dx * t),\n            y = a.y + (dy * t),\n            z = a.z + (dz * t);\n        return out.Set(x, y, z);\n    }\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        super(3);\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        /* */\n    }\n\n    set x(v: number) { this[0] = v; } get x() { return this[0]; }\n    set y(v: number) { this[1] = v; } get y() { return this[1]; }\n    set z(v: number) { this[2] = v; } get z() { return this[2]; }\n\n    Set(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    Length(v: Vec3) {\n        // Only get the magnitude of this vector\n        if (v === undefined) {\n            return Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n        } else {\n            // Get magnitude based on another vector\n            let x = this[0] - v[0],\n                y = this[1] - v[1],\n                z = this[2] - v[2];\n            return Math.sqrt(x * x + y * y + z * z);\n        }\n    }\n    LengthSqr(v: Vec3) {\n        if (v === undefined) {\n            return this[0] * this[0] + this[1] * this[1] + this[2] * this[2];\n        } else {\n            // Get squared magnitude based on another vector\n            let x = this[0] - v[0],\n                y = this[1] - v[1],\n                z = this[2] - v[2];\n            return x * x + y * y + z * z;\n        }\n    }\n    Normalize() {\n        return Vec3.Normalize(this);\n    }\n    Scale(v: number, out: Vec3) {\n        out = out || this;\n        out[0] = this[0] * v;\n        out[1] = this[1] * v;\n        out[2] = this[2] * v;\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    Mul(v: Vec3, out: Vec3) {\n        out = out || this;\n        out[0] = this[0] * v[0];\n        out[1] = this[1] * v[1];\n        out[2] = this[2] * v[2];\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    Add(v: Vec3, out: Vec3) {\n        out = out || this;\n        out[0] = this[0] + v[0];\n        out[1] = this[1] + v[1];\n        out[2] = this[2] + v[2];\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    Sub(v: Vec3, out: Vec3) {\n        out = out || this;\n        out[0] = this[0] - v[0];\n        out[1] = this[1] - v[1];\n        out[2] = this[2] - v[2];\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    Div(v: Vec3, out: Vec3) {\n        out = out || this;\n        out[0] = (v[0] !== 0) ? this[0] / v[0] : 0;\n        out[1] = (v[1] !== 0) ? this[1] / v[1] : 0;\n        out[2] = (v[2] !== 0) ? this[2] / v[2] : 0;\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    DivInvScale(v: number, out: Vec3) {\n        out = out || this;\n        out[0] = (this[0] !== 0) ? v / this[0] : 0;\n        out[1] = (this[1] !== 0) ? v / this[1] : 0;\n        out[2] = (this[2] !== 0) ? v / this[2] : 0;\n        if (out === this) { this.isModified = true; }\n        return this;\n    }\n    Clone() { return new Vec3(this.x, this.y, this.z); }\n    Copy(v: Vec3) {\n        this[0] = v[0]; this[1] = v[1]; this[2] = v[2];\n        this.isModified = true;\n        return this;\n    }\n    nearZero(out: Vec3) {\n        out = out || this;\n\n        if (Math.abs(out[0]) <= 1e-6) { out[0] = 0; }\n        if (Math.abs(out[1]) <= 1e-6) { out[1] = 0; }\n        if (Math.abs(out[2]) <= 1e-6) { out[2] = 0; }\n\n        return this;\n    }\n    TransformMat3(m: Float32Array, out: Vec3, ) {\n        let x = this[0], y = this[1], z = this[2];\n        out = out || this;\n        out[0] = x * m[0] + y * m[3] + z * m[6];\n        out[1] = x * m[1] + y * m[4] + z * m[7];\n        out[2] = x * m[2] + y * m[5] + z * m[8];\n        return out;\n    }\n    TransformMat4(m: Float32Array, out: Vec3, ) {\n        let x = this[0], y = this[1], z = this[2], w = m[3] * x + m[7] * y + m[11] * z + m[15];\n        w = w || 1.0;\n\n        out = out || this;\n        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return out;\n    }\n}","// import { NVector3 } from \"../Geometry/NVector3\";\n\n// https://webglfundamentals.org/webgl/resources/m4.js\n// http://glmatrix.net/\n\nexport class Mat4 {\n    static EPSILON: number = 0.000001;\n    // static RANDOM: number = Math.random;\n    static create(): Float32Array {\n        let out = new Float32Array(16);\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = 1;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = 1;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n    static GetIdentity() {\n        let mat = new Float32Array(16);\n        mat[0] = 1; mat[1] = 0; mat[2] = 0; mat[3] = 0;\n        mat[4] = 0; mat[5] = 1; mat[6] = 0; mat[7] = 0;\n        mat[8] = 0; mat[9] = 0; mat[10] = 1; mat[11] = 0;\n        mat[12] = 0; mat[13] = 0; mat[14] = 0; mat[15] = 1;\n        return mat;\n    }\n    static identity(out: Float32Array) {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = 1;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = 1;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n    static clone(a: Float32Array): Float32Array {\n        let out = new Float32Array(16);\n        out[0] = a[0];\n        out[1] = a[1];\n        out[2] = a[2];\n        out[3] = a[3];\n        out[4] = a[4];\n        out[5] = a[5];\n        out[6] = a[6];\n        out[7] = a[7];\n        out[8] = a[8];\n        out[9] = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n        return out;\n    }\n    static copy(out: Float32Array, a: Float32Array): Float32Array {\n        out[0] = a[0];\n        out[1] = a[1];\n        out[2] = a[2];\n        out[3] = a[3];\n        out[4] = a[4];\n        out[5] = a[5];\n        out[6] = a[6];\n        out[7] = a[7];\n        out[8] = a[8];\n        out[9] = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n        return out;\n    }\n    static Clone(m: Float32Array) {\n        let mat = new Float32Array(16);\n        mat[0] = m[0]; mat[1] = m[1]; mat[2] = m[2]; mat[3] = m[3];\n        mat[4] = m[4]; mat[5] = m[5]; mat[6] = m[6]; mat[7] = m[7];\n        mat[8] = m[8]; mat[9] = m[9]; mat[10] = m[10]; mat[11] = m[11];\n        mat[12] = m[12]; mat[13] = m[13]; mat[14] = m[14]; mat[15] = m[15];\n        return mat;\n    }\n    static FromValues(m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number) {\n        let mat = new Float32Array(16);\n        mat[0] = m00; mat[1] = m01; mat[2] = m02; mat[3] = m03;\n        mat[4] = m10; mat[5] = m11; mat[6] = m12; mat[7] = m13;\n        mat[8] = m20; mat[9] = m21; mat[10] = m22; mat[11] = m23;\n        mat[12] = m30; mat[13] = m31; mat[14] = m32; mat[15] = m33;\n        return mat;\n    }\n    static set(out: Float32Array, m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number) {\n        out[0] = m00;\n        out[1] = m01;\n        out[2] = m02;\n        out[3] = m03;\n        out[4] = m10;\n        out[5] = m11;\n        out[6] = m12;\n        out[7] = m13;\n        out[8] = m20;\n        out[9] = m21;\n        out[10] = m22;\n        out[11] = m23;\n        out[12] = m30;\n        out[13] = m31;\n        out[14] = m32;\n        out[15] = m33;\n        return out;\n    }\n    static transpose(out: Float32Array, a: Float32Array) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        if (out === a) {\n            let a01 = a[1], a02 = a[2], a03 = a[3];\n            let a12 = a[6], a13 = a[7];\n            let a23 = a[11];\n\n            out[1] = a[4];\n            out[2] = a[8];\n            out[3] = a[12];\n            out[4] = a01;\n            out[6] = a[9];\n            out[7] = a[13];\n            out[8] = a02;\n            out[9] = a12;\n            out[11] = a[14];\n            out[12] = a03;\n            out[13] = a13;\n            out[14] = a23;\n        } else {\n            out[0] = a[0];\n            out[1] = a[4];\n            out[2] = a[8];\n            out[3] = a[12];\n            out[4] = a[1];\n            out[5] = a[5];\n            out[6] = a[9];\n            out[7] = a[13];\n            out[8] = a[2];\n            out[9] = a[6];\n            out[10] = a[10];\n            out[11] = a[14];\n            out[12] = a[3];\n            out[13] = a[7];\n            out[14] = a[11];\n            out[15] = a[15];\n        }\n\n        return out;\n    }\n\n    // ........................ gl\n    static lookAt(out: Float32Array, eye: Float32Array, center: Float32Array, up: Float32Array) {\n        let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n        let eyex = eye[0];\n        let eyey = eye[1];\n        let eyez = eye[2];\n        let upx = up[0];\n        let upy = up[1];\n        let upz = up[2];\n        let centerx = center[0];\n        let centery = center[1];\n        let centerz = center[2];\n\n        if (Math.abs(eyex - centerx) < Mat4.EPSILON &&\n            Math.abs(eyey - centery) < Mat4.EPSILON &&\n            Math.abs(eyez - centerz) < Mat4.EPSILON) {\n            return Mat4.GetIdentity();\n        }\n\n        z0 = eyex - centerx;\n        z1 = eyey - centery;\n        z2 = eyez - centerz;\n\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        out[0] = x0;\n        out[1] = y0;\n        out[2] = z0;\n        out[3] = 0;\n        out[4] = x1;\n        out[5] = y1;\n        out[6] = z1;\n        out[7] = 0;\n        out[8] = x2;\n        out[9] = y2;\n        out[10] = z2;\n        out[11] = 0;\n        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n        out[15] = 1;\n\n        return out;\n    }\n    static Ortho(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n        const mat4 = new Float32Array(16);\n        let lr = 1 / (left - right);\n        let bt = 1 / (bottom - top);\n        let nf = 1 / (near - far);\n        mat4[0] = -2 * lr;\n        mat4[1] = 0;\n        mat4[2] = 0;\n        mat4[3] = 0;\n        mat4[4] = 0;\n        mat4[5] = -2 * bt;\n        mat4[6] = 0;\n        mat4[7] = 0;\n        mat4[8] = 0;\n        mat4[9] = 0;\n        mat4[10] = 2 * nf;\n        mat4[11] = 0;\n        mat4[12] = (left + right) * lr;\n        mat4[13] = (top + bottom) * bt;\n        mat4[14] = (far + near) * nf;\n        mat4[15] = 1;\n        return mat4;\n    }\n    static ortho(out: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number): Float32Array {\n        let lr = 1 / (left - right);\n        let bt = 1 / (bottom - top);\n        let nf = 1 / (near - far);\n        out[0] = -2 * lr;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = -2 * bt;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = 2 * nf;\n        out[11] = 0;\n        out[12] = (left + right) * lr;\n        out[13] = (top + bottom) * bt;\n        out[14] = (far + near) * nf;\n        out[15] = 1;\n        return out;\n    }\n    static adjoint(out: Float32Array, a: Float32Array): Float32Array {\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n        let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n        let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n        let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n        out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n        out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n        out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n        out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n        out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n        out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n        out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n        out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n        out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n        out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n        out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n        out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n        out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n        out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n        out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n        out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n        return out;\n    }\n    static determinant(a: Float32Array) {\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n        let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n        let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n        let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n        let b00 = a00 * a11 - a01 * a10;\n        let b01 = a00 * a12 - a02 * a10;\n        let b02 = a00 * a13 - a03 * a10;\n        let b03 = a01 * a12 - a02 * a11;\n        let b04 = a01 * a13 - a03 * a11;\n        let b05 = a02 * a13 - a03 * a12;\n        let b06 = a20 * a31 - a21 * a30;\n        let b07 = a20 * a32 - a22 * a30;\n        let b08 = a20 * a33 - a23 * a30;\n        let b09 = a21 * a32 - a22 * a31;\n        let b10 = a21 * a33 - a23 * a31;\n        let b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant\n        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    }\n    static Perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\n        let f = 1.0 / Math.tan(fovy / 2);\n        let nf = 1 / (near - far);\n        out[0] = f / aspect;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = f;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = (far + near) * nf;\n        out[11] = -1;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = (2 * far * near) * nf;\n        out[15] = 0;\n        return out;\n    }\n    static LookAt(cameraPosition: Float32Array, target: Float32Array, up: Float32Array) {\n        const zAxis = Mat4.normalize(Mat4.subtractVectors(cameraPosition, target));\n\n        const xAxis = Mat4.cross(up, zAxis);\n        const yAxis = Mat4.cross(zAxis, xAxis);\n\n        return new Float32Array([\n            xAxis[0], xAxis[1], xAxis[2], 0,\n            yAxis[0], yAxis[1], yAxis[2], 0,\n            zAxis[0], zAxis[1], zAxis[2], 0,\n            cameraPosition[0],\n            cameraPosition[1],\n            cameraPosition[2],\n            1,\n        ]);\n    }\n    // .....................................\n    static scale(out: Float32Array, a: Float32Array, v: Float32Array): Float32Array {\n        let x = v[0], y = v[1], z = v[2];\n\n        out[0] = a[0] * x;\n        out[1] = a[1] * x;\n        out[2] = a[2] * x;\n        out[3] = a[3] * x;\n        out[4] = a[4] * y;\n        out[5] = a[5] * y;\n        out[6] = a[6] * y;\n        out[7] = a[7] * y;\n        out[8] = a[8] * z;\n        out[9] = a[9] * z;\n        out[10] = a[10] * z;\n        out[11] = a[11] * z;\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n        return out;\n    }\n    static rotate(out: Float32Array, a: Float32Array, rad: number, axis: Float32Array) {\n        let x = axis[0], y = axis[1], z = axis[2];\n        let len = Math.sqrt(x * x + y * y + z * z);\n        let s, c, t;\n        let a00, a01, a02, a03;\n        let a10, a11, a12, a13;\n        let a20, a21, a22, a23;\n        let b00, b01, b02;\n        let b10, b11, b12;\n        let b20, b21, b22;\n\n        if (Math.abs(len) < Mat4.EPSILON) { return null; }\n\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n\n        s = Math.sin(rad);\n        c = Math.cos(rad);\n        t = 1 - c;\n\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        // Construct the elements of the rotation matrix\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n        // Perform rotation-specific matrix multiplication\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n        if (a !== out) { // If the source and destination differ, copy the unchanged last row\n            out[12] = a[12];\n            out[13] = a[13];\n            out[14] = a[14];\n            out[15] = a[15];\n        }\n        return out;\n    }\n    static rotateX(out: Float32Array, a: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n        let a10 = a[4];\n        let a11 = a[5];\n        let a12 = a[6];\n        let a13 = a[7];\n        let a20 = a[8];\n        let a21 = a[9];\n        let a22 = a[10];\n        let a23 = a[11];\n\n        if (a !== out) { // If the source and destination differ, copy the unchanged rows\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[12] = a[12];\n            out[13] = a[13];\n            out[14] = a[14];\n            out[15] = a[15];\n        }\n\n        // Perform axis-specific matrix multiplication\n        out[4] = a10 * c + a20 * s;\n        out[5] = a11 * c + a21 * s;\n        out[6] = a12 * c + a22 * s;\n        out[7] = a13 * c + a23 * s;\n        out[8] = a20 * c - a10 * s;\n        out[9] = a21 * c - a11 * s;\n        out[10] = a22 * c - a12 * s;\n        out[11] = a23 * c - a13 * s;\n        return out;\n    }\n\n    static rotateY(out: Float32Array, a: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n        let a00 = a[0];\n        let a01 = a[1];\n        let a02 = a[2];\n        let a03 = a[3];\n        let a20 = a[8];\n        let a21 = a[9];\n        let a22 = a[10];\n        let a23 = a[11];\n\n        if (a !== out) { // If the source and destination differ, copy the unchanged rows\n            out[4] = a[4];\n            out[5] = a[5];\n            out[6] = a[6];\n            out[7] = a[7];\n            out[12] = a[12];\n            out[13] = a[13];\n            out[14] = a[14];\n            out[15] = a[15];\n        }\n\n        // Perform axis-specific matrix multiplication\n        out[0] = a00 * c - a20 * s;\n        out[1] = a01 * c - a21 * s;\n        out[2] = a02 * c - a22 * s;\n        out[3] = a03 * c - a23 * s;\n        out[8] = a00 * s + a20 * c;\n        out[9] = a01 * s + a21 * c;\n        out[10] = a02 * s + a22 * c;\n        out[11] = a03 * s + a23 * c;\n        return out;\n    }\n\n    static rotateZ(out: Float32Array, a: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n        let a00 = a[0];\n        let a01 = a[1];\n        let a02 = a[2];\n        let a03 = a[3];\n        let a10 = a[4];\n        let a11 = a[5];\n        let a12 = a[6];\n        let a13 = a[7];\n\n        if (a !== out) { // If the source and destination differ, copy the unchanged last row\n            out[8] = a[8];\n            out[9] = a[9];\n            out[10] = a[10];\n            out[11] = a[11];\n            out[12] = a[12];\n            out[13] = a[13];\n            out[14] = a[14];\n            out[15] = a[15];\n        }\n        // Perform axis-specific matrix multiplication\n        out[0] = a00 * c + a10 * s;\n        out[1] = a01 * c + a11 * s;\n        out[2] = a02 * c + a12 * s;\n        out[3] = a03 * c + a13 * s;\n        out[4] = a10 * c - a00 * s;\n        out[5] = a11 * c - a01 * s;\n        out[6] = a12 * c - a02 * s;\n        out[7] = a13 * c - a03 * s;\n        return out;\n    }\n    static fromScaling(out: Float32Array, v: Float32Array) {\n        out[0] = v[0];\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = v[1];\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = v[2];\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n\n    /**\n     * Creates a matrix from a given angle around a given axis\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.rotate(dest, dest, rad, axis);\n     */\n    static fromRotation(out: Float32Array, rad: number, axis: Float32Array) {\n        let x = axis[0], y = axis[1], z = axis[2];\n        let len = Math.sqrt(x * x + y * y + z * z);\n        let s, c, t;\n\n        if (Math.abs(len) < Mat4.EPSILON) { return null; }\n\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n\n        s = Math.sin(rad);\n        c = Math.cos(rad);\n        t = 1 - c;\n\n        // Perform rotation-specific matrix multiplication\n        out[0] = x * x * t + c;\n        out[1] = y * x * t + z * s;\n        out[2] = z * x * t - y * s;\n        out[3] = 0;\n        out[4] = x * y * t - z * s;\n        out[5] = y * y * t + c;\n        out[6] = z * y * t + x * s;\n        out[7] = 0;\n        out[8] = x * z * t + y * s;\n        out[9] = y * z * t - x * s;\n        out[10] = z * z * t + c;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n\n    /**\n     * Creates a matrix from the given angle around the X axis\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.rotateX(dest, dest, rad);\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {Number} rad the angle to rotate the matrix by\n     * @returns {mat4} out\n     */\n    static fromXRotation(out: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n\n        // Perform axis-specific matrix multiplication\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = c;\n        out[6] = s;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = -s;\n        out[10] = c;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n\n    /**\n     * Creates a matrix from the given angle around the Y axis\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.rotateY(dest, dest, rad);\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {Number} rad the angle to rotate the matrix by\n     * @returns {mat4} out\n     */\n    static fromYRotation(out: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n\n        // Perform axis-specific matrix multiplication\n        out[0] = c;\n        out[1] = 0;\n        out[2] = -s;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = 1;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = s;\n        out[9] = 0;\n        out[10] = c;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n\n    /**\n     * Creates a matrix from the given angle around the Z axis\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.rotateZ(dest, dest, rad);\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {Number} rad the angle to rotate the matrix by\n     * @returns {mat4} out\n     */\n    static fromZRotation(out: Float32Array, rad: number) {\n        let s = Math.sin(rad);\n        let c = Math.cos(rad);\n\n        // Perform axis-specific matrix multiplication\n        out[0] = c;\n        out[1] = s;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = -s;\n        out[5] = c;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = 1;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n        return out;\n    }\n    static fromRotationTranslation(out: Float32Array, q: Float32Array, v: Float32Array) {\n        // Quaternion math\n        let x = q[0], y = q[1], z = q[2], w = q[3];\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n\n        let xx = x * x2;\n        let xy = x * y2;\n        let xz = x * z2;\n        let yy = y * y2;\n        let yz = y * z2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n\n        out[0] = 1 - (yy + zz);\n        out[1] = xy + wz;\n        out[2] = xz - wy;\n        out[3] = 0;\n        out[4] = xy - wz;\n        out[5] = 1 - (xx + zz);\n        out[6] = yz + wx;\n        out[7] = 0;\n        out[8] = xz + wy;\n        out[9] = yz - wx;\n        out[10] = 1 - (xx + yy);\n        out[11] = 0;\n        out[12] = v[0];\n        out[13] = v[1];\n        out[14] = v[2];\n        out[15] = 1;\n\n        return out;\n    }\n\n    /**\n     * Returns the translation vector component of a transformation\n     *  matrix. If a matrix is built with fromRotationTranslation,\n     *  the returned vector will be the same as the translation vector\n     *  originally supplied.\n     * @param  {vec3} out Vector to receive translation component\n     * @param  {mat4} mat Matrix to be decomposed (input)\n     * @return {vec3} out\n     */\n    static getTranslation(out: Float32Array, mat: Float32Array) {\n        out[0] = mat[12];\n        out[1] = mat[13];\n        out[2] = mat[14];\n\n        return out;\n    }\n\n    /**\n     * Returns the scaling factor component of a transformation\n     *  matrix. If a matrix is built with fromRotationTranslationScale\n     *  with a normalized Quaternion paramter, the returned vector will be\n     *  the same as the scaling vector\n     *  originally supplied.\n     * @param  {vec3} out Vector to receive scaling factor component\n     * @param  {mat4} mat Matrix to be decomposed (input)\n     * @return {vec3} out\n     */\n    static getScaling(out: Float32Array, mat: Float32Array) {\n        let m11 = mat[0];\n        let m12 = mat[1];\n        let m13 = mat[2];\n        let m21 = mat[4];\n        let m22 = mat[5];\n        let m23 = mat[6];\n        let m31 = mat[8];\n        let m32 = mat[9];\n        let m33 = mat[10];\n\n        out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n        out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n        out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n        return out;\n    }\n\n    /**\n     * Returns a quaternion representing the rotational component\n     *  of a transformation matrix. If a matrix is built with\n     *  fromRotationTranslation, the returned quaternion will be the\n     *  same as the quaternion originally supplied.\n     * @param {quat} out Quaternion to receive the rotation component\n     * @param {mat4} mat Matrix to be decomposed (input)\n     * @return {quat} out\n     */\n    static getRotation(out: Float32Array, mat: Float32Array) {\n        // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        let trace = mat[0] + mat[5] + mat[10];\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (mat[6] - mat[9]) / S;\n            out[1] = (mat[8] - mat[2]) / S;\n            out[2] = (mat[1] - mat[4]) / S;\n        } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n            S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n            out[3] = (mat[6] - mat[9]) / S;\n            out[0] = 0.25 * S;\n            out[1] = (mat[1] + mat[4]) / S;\n            out[2] = (mat[8] + mat[2]) / S;\n        } else if (mat[5] > mat[10]) {\n            S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n            out[3] = (mat[8] - mat[2]) / S;\n            out[0] = (mat[1] + mat[4]) / S;\n            out[1] = 0.25 * S;\n            out[2] = (mat[6] + mat[9]) / S;\n        } else {\n            S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n            out[3] = (mat[1] - mat[4]) / S;\n            out[0] = (mat[8] + mat[2]) / S;\n            out[1] = (mat[6] + mat[9]) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    }\n\n    /**\n     * Creates a matrix from a quaternion rotation, vector translation and vector scale\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.translate(dest, vec);\n     *     let quatMat = mat4.create();\n     *     quat4.toMat4(quat, quatMat);\n     *     mat4.multiply(dest, quatMat);\n     *     mat4.scale(dest, scale)\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {quat4} q Rotation quaternion\n     * @param {vec3} v Translation vector\n     * @param {vec3} s Scaling vector\n     * @returns {mat4} out\n     */\n    static fromRotationTranslationScale(out: Float32Array, q: Float32Array, v: Float32Array, s: Float32Array) {\n        // Quaternion math\n        let x = q[0], y = q[1], z = q[2], w = q[3];\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n\n        let xx = x * x2;\n        let xy = x * y2;\n        let xz = x * z2;\n        let yy = y * y2;\n        let yz = y * z2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n        let sx = s[0];\n        let sy = s[1];\n        let sz = s[2];\n\n        out[0] = (1 - (yy + zz)) * sx;\n        out[1] = (xy + wz) * sx;\n        out[2] = (xz - wy) * sx;\n        out[3] = 0;\n        out[4] = (xy - wz) * sy;\n        out[5] = (1 - (xx + zz)) * sy;\n        out[6] = (yz + wx) * sy;\n        out[7] = 0;\n        out[8] = (xz + wy) * sz;\n        out[9] = (yz - wx) * sz;\n        out[10] = (1 - (xx + yy)) * sz;\n        out[11] = 0;\n        out[12] = v[0];\n        out[13] = v[1];\n        out[14] = v[2];\n        out[15] = 1;\n\n        return out;\n    }\n\n    /**\n     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.translate(dest, vec);\n     *     mat4.translate(dest, origin);\n     *     let quatMat = mat4.create();\n     *     quat4.toMat4(quat, quatMat);\n     *     mat4.multiply(dest, quatMat);\n     *     mat4.scale(dest, scale)\n     *     mat4.translate(dest, negativeOrigin);\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {quat4} q Rotation quaternion\n     * @param {vec3} v Translation vector\n     * @param {vec3} s Scaling vector\n     * @param {vec3} o The origin vector around which to scale and rotate\n     * @returns {mat4} out\n     */\n    static fromRotationTranslationScaleOrigin(out: Float32Array, q: Float32Array, v: Float32Array, s: Float32Array, o: Float32Array) {\n        // Quaternion math\n        let x = q[0], y = q[1], z = q[2], w = q[3];\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n\n        let xx = x * x2;\n        let xy = x * y2;\n        let xz = x * z2;\n        let yy = y * y2;\n        let yz = y * z2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n\n        let sx = s[0];\n        let sy = s[1];\n        let sz = s[2];\n\n        let ox = o[0];\n        let oy = o[1];\n        let oz = o[2];\n\n        out[0] = (1 - (yy + zz)) * sx;\n        out[1] = (xy + wz) * sx;\n        out[2] = (xz - wy) * sx;\n        out[3] = 0;\n        out[4] = (xy - wz) * sy;\n        out[5] = (1 - (xx + zz)) * sy;\n        out[6] = (yz + wx) * sy;\n        out[7] = 0;\n        out[8] = (xz + wy) * sz;\n        out[9] = (yz - wx) * sz;\n        out[10] = (1 - (xx + yy)) * sz;\n        out[11] = 0;\n        out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n        out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n        out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n        out[15] = 1;\n\n        return out;\n    }\n\n    /**\n     * Calculates a 4x4 matrix from the given quaternion\n     *\n     * @param {mat4} out mat4 receiving operation result\n     * @param {quat} q Quaternion to create matrix from\n     *\n     * @returns {mat4} out\n     */\n    static fromQuat(out: Float32Array, q: Float32Array) {\n        let x = q[0], y = q[1], z = q[2], w = q[3];\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n\n        let xx = x * x2;\n        let yx = y * x2;\n        let yy = y * y2;\n        let zx = z * x2;\n        let zy = z * y2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n\n        out[0] = 1 - yy - zz;\n        out[1] = yx + wz;\n        out[2] = zx - wy;\n        out[3] = 0;\n\n        out[4] = yx - wz;\n        out[5] = 1 - xx - zz;\n        out[6] = zy + wx;\n        out[7] = 0;\n\n        out[8] = zx + wy;\n        out[9] = zy - wx;\n        out[10] = 1 - xx - yy;\n        out[11] = 0;\n\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 1;\n\n        return out;\n    }\n\n    /**\n     * Generates a frustum matrix with the given bounds\n     *\n     * @param {mat4} out mat4 frustum matrix will be written into\n     * @param {Number} left Left bound of the frustum\n     * @param {Number} right Right bound of the frustum\n     * @param {Number} bottom Bottom bound of the frustum\n     * @param {Number} top Top bound of the frustum\n     * @param {Number} near Near bound of the frustum\n     * @param {Number} far Far bound of the frustum\n     * @returns {mat4} out\n     */\n    static frustum(out: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number) {\n        let rl = 1 / (right - left);\n        let tb = 1 / (top - bottom);\n        let nf = 1 / (near - far);\n        out[0] = (near * 2) * rl;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = (near * 2) * tb;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = (right + left) * rl;\n        out[9] = (top + bottom) * tb;\n        out[10] = (far + near) * nf;\n        out[11] = -1;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = (far * near * 2) * nf;\n        out[15] = 0;\n        return out;\n    }\n\n    /**\n     * Generates a perspective projection matrix with the given bounds\n     *\n     * @param {mat4} out mat4 frustum matrix will be written into\n     * @param {number} fovy Vertical field of view in radians\n     * @param {number} aspect Aspect ratio. typically viewport width/height\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum\n     * @returns {mat4} out\n     */\n    static perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\n        let f = 1.0 / Math.tan(fovy / 2);\n        let nf = 1 / (near - far);\n        out[0] = f / aspect;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = f;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = (far + near) * nf;\n        out[11] = -1;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = (2 * far * near) * nf;\n        out[15] = 0;\n        return out;\n    }\n\n    /**\n     * Generates a perspective projection matrix with the given field of view.\n     * This is primarily useful for generating projection matrices to be used\n     * with the still experiemental WebVR API.\n     *\n     * @param {mat4} out mat4 frustum matrix will be written into\n     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum\n     * @returns {mat4} out\n     */\n    // static perspectiveFromFieldOfView(out: Float32Array, fov: number, near: number, far: number) {\n    //     let upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    //     let downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    //     let leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    //     let rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    //     let xScale = 2.0 / (leftTan + rightTan);\n    //     let yScale = 2.0 / (upTan + downTan);\n\n    //     out[0] = xScale;\n    //     out[1] = 0.0;\n    //     out[2] = 0.0;\n    //     out[3] = 0.0;\n    //     out[4] = 0.0;\n    //     out[5] = yScale;\n    //     out[6] = 0.0;\n    //     out[7] = 0.0;\n    //     out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    //     out[9] = ((upTan - downTan) * yScale * 0.5);\n    //     out[10] = far / (near - far);\n    //     out[11] = -1.0;\n    //     out[12] = 0.0;\n    //     out[13] = 0.0;\n    //     out[14] = (far * near) / (near - far);\n    //     out[15] = 0.0;\n    //     return out;\n    // }\n\n    /**\n     * Generates a matrix that makes something look at something else.\n     *\n     * @param {mat4} out mat4 frustum matrix will be written into\n     * @param {vec3} eye Position of the viewer\n     * @param {vec3} center Point the viewer is looking at\n     * @param {vec3} up vec3 pointing up\n     * @returns {mat4} out\n     */\n    static targetTo(out: Float32Array, eye: Float32Array, target: Float32Array, up: Float32Array) {\n        let eyex = eye[0],\n            eyey = eye[1],\n            eyez = eye[2],\n            upx = up[0],\n            upy = up[1],\n            upz = up[2];\n\n        let z0 = eyex - target[0],\n            z1 = eyey - target[1],\n            z2 = eyez - target[2];\n\n        let len = z0 * z0 + z1 * z1 + z2 * z2;\n        if (len > 0) {\n            len = 1 / Math.sqrt(len);\n            z0 *= len;\n            z1 *= len;\n            z2 *= len;\n        }\n\n        let x0 = upy * z2 - upz * z1,\n            x1 = upz * z0 - upx * z2,\n            x2 = upx * z1 - upy * z0;\n\n        out[0] = x0;\n        out[1] = x1;\n        out[2] = x2;\n        out[3] = 0;\n        out[4] = z1 * x2 - z2 * x1;\n        out[5] = z2 * x0 - z0 * x2;\n        out[6] = z0 * x1 - z1 * x0;\n        out[7] = 0;\n        out[8] = z0;\n        out[9] = z1;\n        out[10] = z2;\n        out[11] = 0;\n        out[12] = eyex;\n        out[13] = eyey;\n        out[14] = eyez;\n        out[15] = 1;\n        return out;\n    }\n\n    /**\n     * Returns a string representation of a mat4\n     *\n     * @param {mat4} a matrix to represent as a string\n     * @returns {String} string representation of the matrix\n     */\n    static str(a: Float32Array) {\n        return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n            a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n            a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n            a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n    }\n\n    /**\n     * Returns Frobenius norm of a mat4\n     *\n     * @param {mat4} a the matrix to calculate Frobenius norm of\n     * @returns {Number} Frobenius norm\n     */\n    static frob(a: Float32Array) {\n        return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));\n    }\n\n    /**\n     * Adds two mat4's\n     *\n     * @param {mat4} out the receiving matrix\n     * @param {mat4} a the first operand\n     * @param {mat4} b the second operand\n     * @returns {mat4} out\n     */\n    static add(out: Float32Array, a: Float32Array, b: Float32Array) {\n        out[0] = a[0] + b[0];\n        out[1] = a[1] + b[1];\n        out[2] = a[2] + b[2];\n        out[3] = a[3] + b[3];\n        out[4] = a[4] + b[4];\n        out[5] = a[5] + b[5];\n        out[6] = a[6] + b[6];\n        out[7] = a[7] + b[7];\n        out[8] = a[8] + b[8];\n        out[9] = a[9] + b[9];\n        out[10] = a[10] + b[10];\n        out[11] = a[11] + b[11];\n        out[12] = a[12] + b[12];\n        out[13] = a[13] + b[13];\n        out[14] = a[14] + b[14];\n        out[15] = a[15] + b[15];\n        return out;\n    }\n\n    /**\n     * Subtracts matrix b from matrix a\n     *\n     * @param {mat4} out the receiving matrix\n     * @param {mat4} a the first operand\n     * @param {mat4} b the second operand\n     * @returns {mat4} out\n     */\n    static subtract(out: Float32Array, a: Float32Array, b: Float32Array) {\n        out[0] = a[0] - b[0];\n        out[1] = a[1] - b[1];\n        out[2] = a[2] - b[2];\n        out[3] = a[3] - b[3];\n        out[4] = a[4] - b[4];\n        out[5] = a[5] - b[5];\n        out[6] = a[6] - b[6];\n        out[7] = a[7] - b[7];\n        out[8] = a[8] - b[8];\n        out[9] = a[9] - b[9];\n        out[10] = a[10] - b[10];\n        out[11] = a[11] - b[11];\n        out[12] = a[12] - b[12];\n        out[13] = a[13] - b[13];\n        out[14] = a[14] - b[14];\n        out[15] = a[15] - b[15];\n        return out;\n    }\n\n    /**\n     * Multiply each element of the matrix by a scalar.\n     *\n     * @param {mat4} out the receiving matrix\n     * @param {mat4} a the matrix to scale\n     * @param {Number} b amount to scale the matrix's elements by\n     * @returns {mat4} out\n     */\n    static multiplyScalar(out: Float32Array, a: Float32Array, b: number) {\n        out[0] = a[0] * b;\n        out[1] = a[1] * b;\n        out[2] = a[2] * b;\n        out[3] = a[3] * b;\n        out[4] = a[4] * b;\n        out[5] = a[5] * b;\n        out[6] = a[6] * b;\n        out[7] = a[7] * b;\n        out[8] = a[8] * b;\n        out[9] = a[9] * b;\n        out[10] = a[10] * b;\n        out[11] = a[11] * b;\n        out[12] = a[12] * b;\n        out[13] = a[13] * b;\n        out[14] = a[14] * b;\n        out[15] = a[15] * b;\n        return out;\n    }\n\n    /**\n     * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n     *\n     * @param {mat4} out the receiving vector\n     * @param {mat4} a the first operand\n     * @param {mat4} b the second operand\n     * @param {Number} scale the amount to scale b's elements by before adding\n     * @returns {mat4} out\n     */\n    static multiplyScalarAndAdd(out: Float32Array, a: Float32Array, b: Float32Array, scale: number) {\n        out[0] = a[0] + (b[0] * scale);\n        out[1] = a[1] + (b[1] * scale);\n        out[2] = a[2] + (b[2] * scale);\n        out[3] = a[3] + (b[3] * scale);\n        out[4] = a[4] + (b[4] * scale);\n        out[5] = a[5] + (b[5] * scale);\n        out[6] = a[6] + (b[6] * scale);\n        out[7] = a[7] + (b[7] * scale);\n        out[8] = a[8] + (b[8] * scale);\n        out[9] = a[9] + (b[9] * scale);\n        out[10] = a[10] + (b[10] * scale);\n        out[11] = a[11] + (b[11] * scale);\n        out[12] = a[12] + (b[12] * scale);\n        out[13] = a[13] + (b[13] * scale);\n        out[14] = a[14] + (b[14] * scale);\n        out[15] = a[15] + (b[15] * scale);\n        return out;\n    }\n\n    /**\n     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n     *\n     * @param {mat4} a The first matrix.\n     * @param {mat4} b The second matrix.\n     * @returns {Boolean} True if the matrices are equal, false otherwise.\n     */\n    static exactEquals(a: Float32Array, b: Float32Array) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n            a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n            a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n            a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n    }\n\n    /**\n     * Returns whether or not the matrices have approximately the same elements in the same position.\n     *\n     * @param {mat4} a The first matrix.\n     * @param {mat4} b The second matrix.\n     * @returns {Boolean} True if the matrices are equal, false otherwise.\n     */\n    static equals(a: Float32Array, b: Float32Array) {\n        let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n        let a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];\n        let a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];\n        let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n        let b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];\n        let b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];\n        let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n        return (Math.abs(a0 - b0) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= Mat4.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n    }\n\n    static XRotation(angleInRadians: number) {\n        let c = Math.cos(angleInRadians);\n        let s = Math.sin(angleInRadians);\n        return new Float32Array([\n            1, 0, 0, 0,\n            0, c, s, 0,\n            0, -s, c, 0,\n            0, 0, 0, 1,\n        ]);\n    }\n    static YRotation(angleInRadians: number) {\n        let c = Math.cos(angleInRadians);\n        let s = Math.sin(angleInRadians);\n\n        return new Float32Array([\n            c, 0, -s, 0,\n            0, 1, 0, 0,\n            s, 0, c, 0,\n            0, 0, 0, 1,\n        ]);\n    }\n    static translate(out: Float32Array, a: Float32Array, v: Float32Array): Float32Array {\n        let x = v[0], y = v[1], z = v[2];\n        let a00, a01, a02, a03;\n        let a10, a11, a12, a13;\n        let a20, a21, a22, a23;\n\n        if (a === out) {\n            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n        } else {\n            a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n            a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n            a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n            out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n            out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n            out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n            out[12] = a00 * x + a10 * y + a20 * z + a[12];\n            out[13] = a01 * x + a11 * y + a21 * z + a[13];\n            out[14] = a02 * x + a12 * y + a22 * z + a[14];\n            out[15] = a03 * x + a13 * y + a23 * z + a[15];\n        }\n\n        return out;\n    }\n    static Translate(m: Float32Array, tx: number, ty: number, tz: number) {\n        return Mat4.Multiply(m, Mat4.Translation(tx, ty, tz));\n    }\n    static Translation(tx: number, ty: number, tz: number) {\n        return new Float32Array([\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ]);\n    }\n    static multiply(out: Float32Array, a: Float32Array, b: Float32Array): Float32Array {\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n        let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n        let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n        let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n        // Cache only the current line of the second matrix\n        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return out;\n    }\n    static Multiply(a: Float32Array, b: Float32Array) {\n        const a00 = a[0 * 4 + 0];\n        const a01 = a[0 * 4 + 1];\n        const a02 = a[0 * 4 + 2];\n        const a03 = a[0 * 4 + 3];\n        const a10 = a[1 * 4 + 0];\n        const a11 = a[1 * 4 + 1];\n        const a12 = a[1 * 4 + 2];\n        const a13 = a[1 * 4 + 3];\n        const a20 = a[2 * 4 + 0];\n        const a21 = a[2 * 4 + 1];\n        const a22 = a[2 * 4 + 2];\n        const a23 = a[2 * 4 + 3];\n        const a30 = a[3 * 4 + 0];\n        const a31 = a[3 * 4 + 1];\n        const a32 = a[3 * 4 + 2];\n        const a33 = a[3 * 4 + 3];\n        const b00 = b[0 * 4 + 0];\n        const b01 = b[0 * 4 + 1];\n        const b02 = b[0 * 4 + 2];\n        const b03 = b[0 * 4 + 3];\n        const b10 = b[1 * 4 + 0];\n        const b11 = b[1 * 4 + 1];\n        const b12 = b[1 * 4 + 2];\n        const b13 = b[1 * 4 + 3];\n        const b20 = b[2 * 4 + 0];\n        const b21 = b[2 * 4 + 1];\n        const b22 = b[2 * 4 + 2];\n        const b23 = b[2 * 4 + 3];\n        const b30 = b[3 * 4 + 0];\n        const b31 = b[3 * 4 + 1];\n        const b32 = b[3 * 4 + 2];\n        const b33 = b[3 * 4 + 3];\n        return new Float32Array([\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n        ]);\n    }\n    static Inverse(m: Float32Array) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n        const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n        return new Float32Array([\n            d * t0,\n            d * t1,\n            d * t2,\n            d * t3,\n            d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n                (tmp0 * m10 + tmp3 * m20 + tmp4 * m30)),\n            d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n                (tmp1 * m00 + tmp6 * m20 + tmp9 * m30)),\n            d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n                (tmp2 * m00 + tmp7 * m10 + tmp10 * m30)),\n            d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n                (tmp5 * m00 + tmp8 * m10 + tmp11 * m20)),\n            d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n                (tmp13 * m13 + tmp14 * m23 + tmp17 * m33)),\n            d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n                (tmp12 * m03 + tmp19 * m23 + tmp20 * m33)),\n            d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n                (tmp15 * m03 + tmp18 * m13 + tmp23 * m33)),\n            d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n                (tmp16 * m03 + tmp21 * m13 + tmp22 * m23)),\n            d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n                (tmp16 * m32 + tmp12 * m12 + tmp15 * m22)),\n            d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n                (tmp18 * m22 + tmp21 * m32 + tmp13 * m02)),\n            d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n                (tmp22 * m32 + tmp14 * m02 + tmp19 * m12)),\n            d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n                (tmp20 * m12 + tmp23 * m22 + tmp17 * m02))\n        ]);\n    }\n    static invert(out: Float32Array, a: Float32Array): Float32Array | undefined {\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n        let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n        let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n        let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n        let b00 = a00 * a11 - a01 * a10;\n        let b01 = a00 * a12 - a02 * a10;\n        let b02 = a00 * a13 - a03 * a10;\n        let b03 = a01 * a12 - a02 * a11;\n        let b04 = a01 * a13 - a03 * a11;\n        let b05 = a02 * a13 - a03 * a12;\n        let b06 = a20 * a31 - a21 * a30;\n        let b07 = a20 * a32 - a22 * a30;\n        let b08 = a20 * a33 - a23 * a30;\n        let b09 = a21 * a32 - a22 * a31;\n        let b10 = a21 * a33 - a23 * a31;\n        let b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n        if (!det) {\n            return undefined;\n        }\n        det = 1.0 / det;\n\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n        return out;\n    }\n    static VectorMultiply(v: Float32Array, m: Float32Array) {\n        var dst = [];\n        for (var i = 0; i < 4; ++i) {\n            dst[i] = 0.0;\n            for (var j = 0; j < 4; ++j) { dst[i] += v[j] * m[j * 4 + i]; }\n        }\n        return dst;\n    }\n    private static subtractVectors(a: Float32Array, b: Float32Array) {\n        return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\n    }\n\n    private static normalize(v: Float32Array) {\n        const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n        // make sure we don't divide by 0.\n        if (length > 0.00001) {\n            return new Float32Array([v[0] / length, v[1] / length, v[2] / length]);\n        } else {\n            return new Float32Array([0, 0, 0]);\n        }\n    }\n    private static cross(a: Float32Array, b: Float32Array) {\n        return new Float32Array([a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]]);\n    }\n\n    constructor() {\n        /* */\n    }\n}\n\n// /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE. */\n\n// import * as glMatrix from \"./common\";\n\n// /**\n//  * 4x4 Matrix\n//  * @module mat4\n//  */\n\n// /**\n//  * Creates a new identity mat4\n//  *\n//  * @returns {mat4} a new 4x4 matrix\n//  */\n// static create() {\n//   let out = new glMatrix.ARRAYTYPE(16);\n//   out[0] = 1;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = 1;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = 1;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a new mat4 initialized with values from an existing matrix\n//  *\n//  * @param {mat4} a matrix to clone\n//  * @returns {mat4} a new 4x4 matrix\n//  */\n// static clone(a) {\n//   let out = new glMatrix.ARRAYTYPE(16);\n//   out[0] = a[0];\n//   out[1] = a[1];\n//   out[2] = a[2];\n//   out[3] = a[3];\n//   out[4] = a[4];\n//   out[5] = a[5];\n//   out[6] = a[6];\n//   out[7] = a[7];\n//   out[8] = a[8];\n//   out[9] = a[9];\n//   out[10] = a[10];\n//   out[11] = a[11];\n//   out[12] = a[12];\n//   out[13] = a[13];\n//   out[14] = a[14];\n//   out[15] = a[15];\n//   return out;\n// }\n\n// /**\n//  * Copy the values from one mat4 to another\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the source matrix\n//  * @returns {mat4} out\n//  */\n// export function copy(out, a) {\n//   out[0] = a[0];\n//   out[1] = a[1];\n//   out[2] = a[2];\n//   out[3] = a[3];\n//   out[4] = a[4];\n//   out[5] = a[5];\n//   out[6] = a[6];\n//   out[7] = a[7];\n//   out[8] = a[8];\n//   out[9] = a[9];\n//   out[10] = a[10];\n//   out[11] = a[11];\n//   out[12] = a[12];\n//   out[13] = a[13];\n//   out[14] = a[14];\n//   out[15] = a[15];\n//   return out;\n// }\n\n// /**\n//  * Create a new mat4 with the given values\n//  *\n//  * @param {Number} m00 Component in column 0, row 0 position (index 0)\n//  * @param {Number} m01 Component in column 0, row 1 position (index 1)\n//  * @param {Number} m02 Component in column 0, row 2 position (index 2)\n//  * @param {Number} m03 Component in column 0, row 3 position (index 3)\n//  * @param {Number} m10 Component in column 1, row 0 position (index 4)\n//  * @param {Number} m11 Component in column 1, row 1 position (index 5)\n//  * @param {Number} m12 Component in column 1, row 2 position (index 6)\n//  * @param {Number} m13 Component in column 1, row 3 position (index 7)\n//  * @param {Number} m20 Component in column 2, row 0 position (index 8)\n//  * @param {Number} m21 Component in column 2, row 1 position (index 9)\n//  * @param {Number} m22 Component in column 2, row 2 position (index 10)\n//  * @param {Number} m23 Component in column 2, row 3 position (index 11)\n//  * @param {Number} m30 Component in column 3, row 0 position (index 12)\n//  * @param {Number} m31 Component in column 3, row 1 position (index 13)\n//  * @param {Number} m32 Component in column 3, row 2 position (index 14)\n//  * @param {Number} m33 Component in column 3, row 3 position (index 15)\n//  * @returns {mat4} A new mat4\n//  */\n// export function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n//   let out = new glMatrix.ARRAYTYPE(16);\n//   out[0] = m00;\n//   out[1] = m01;\n//   out[2] = m02;\n//   out[3] = m03;\n//   out[4] = m10;\n//   out[5] = m11;\n//   out[6] = m12;\n//   out[7] = m13;\n//   out[8] = m20;\n//   out[9] = m21;\n//   out[10] = m22;\n//   out[11] = m23;\n//   out[12] = m30;\n//   out[13] = m31;\n//   out[14] = m32;\n//   out[15] = m33;\n//   return out;\n// }\n\n// /**\n//  * Set the components of a mat4 to the given values\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {Number} m00 Component in column 0, row 0 position (index 0)\n//  * @param {Number} m01 Component in column 0, row 1 position (index 1)\n//  * @param {Number} m02 Component in column 0, row 2 position (index 2)\n//  * @param {Number} m03 Component in column 0, row 3 position (index 3)\n//  * @param {Number} m10 Component in column 1, row 0 position (index 4)\n//  * @param {Number} m11 Component in column 1, row 1 position (index 5)\n//  * @param {Number} m12 Component in column 1, row 2 position (index 6)\n//  * @param {Number} m13 Component in column 1, row 3 position (index 7)\n//  * @param {Number} m20 Component in column 2, row 0 position (index 8)\n//  * @param {Number} m21 Component in column 2, row 1 position (index 9)\n//  * @param {Number} m22 Component in column 2, row 2 position (index 10)\n//  * @param {Number} m23 Component in column 2, row 3 position (index 11)\n//  * @param {Number} m30 Component in column 3, row 0 position (index 12)\n//  * @param {Number} m31 Component in column 3, row 1 position (index 13)\n//  * @param {Number} m32 Component in column 3, row 2 position (index 14)\n//  * @param {Number} m33 Component in column 3, row 3 position (index 15)\n//  * @returns {mat4} out\n//  */\n// export function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n//   out[0] = m00;\n//   out[1] = m01;\n//   out[2] = m02;\n//   out[3] = m03;\n//   out[4] = m10;\n//   out[5] = m11;\n//   out[6] = m12;\n//   out[7] = m13;\n//   out[8] = m20;\n//   out[9] = m21;\n//   out[10] = m22;\n//   out[11] = m23;\n//   out[12] = m30;\n//   out[13] = m31;\n//   out[14] = m32;\n//   out[15] = m33;\n//   return out;\n// }\n\n// /**\n//  * Set a mat4 to the identity matrix\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @returns {mat4} out\n//  */\n// export function identity(out) {\n//   out[0] = 1;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = 1;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = 1;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Transpose the values of a mat4\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the source matrix\n//  * @returns {mat4} out\n//  */\n// export function transpose(out, a) {\n//   // If we are transposing ourselves we can skip a few steps but have to cache some values\n//   if (out === a) {\n//     let a01 = a[1], a02 = a[2], a03 = a[3];\n//     let a12 = a[6], a13 = a[7];\n//     let a23 = a[11];\n\n//     out[1] = a[4];\n//     out[2] = a[8];\n//     out[3] = a[12];\n//     out[4] = a01;\n//     out[6] = a[9];\n//     out[7] = a[13];\n//     out[8] = a02;\n//     out[9] = a12;\n//     out[11] = a[14];\n//     out[12] = a03;\n//     out[13] = a13;\n//     out[14] = a23;\n//   } else {\n//     out[0] = a[0];\n//     out[1] = a[4];\n//     out[2] = a[8];\n//     out[3] = a[12];\n//     out[4] = a[1];\n//     out[5] = a[5];\n//     out[6] = a[9];\n//     out[7] = a[13];\n//     out[8] = a[2];\n//     out[9] = a[6];\n//     out[10] = a[10];\n//     out[11] = a[14];\n//     out[12] = a[3];\n//     out[13] = a[7];\n//     out[14] = a[11];\n//     out[15] = a[15];\n//   }\n\n//   return out;\n// }\n\n// /**\n//  * Inverts a mat4\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the source matrix\n//  * @returns {mat4} out\n//  */\n// export function invert(out, a) {\n//   let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n//   let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n//   let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n//   let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n//   let b00 = a00 * a11 - a01 * a10;\n//   let b01 = a00 * a12 - a02 * a10;\n//   let b02 = a00 * a13 - a03 * a10;\n//   let b03 = a01 * a12 - a02 * a11;\n//   let b04 = a01 * a13 - a03 * a11;\n//   let b05 = a02 * a13 - a03 * a12;\n//   let b06 = a20 * a31 - a21 * a30;\n//   let b07 = a20 * a32 - a22 * a30;\n//   let b08 = a20 * a33 - a23 * a30;\n//   let b09 = a21 * a32 - a22 * a31;\n//   let b10 = a21 * a33 - a23 * a31;\n//   let b11 = a22 * a33 - a23 * a32;\n\n//   // Calculate the determinant\n//   let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n//   if (!det) {\n//     return null;\n//   }\n//   det = 1.0 / det;\n\n//   out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n//   out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n//   out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n//   out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n//   out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n//   out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n//   out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n//   out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n//   out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n//   out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n//   out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n//   out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n//   out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n//   out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n//   out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n//   out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n//   return out;\n// }\n\n// /**\n//  * Calculates the adjugate of a mat4\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the source matrix\n//  * @returns {mat4} out\n//  */\n// export function adjoint(out, a) {\n//   let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n//   let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n//   let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n//   let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n//   out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n//   out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n//   out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n//   out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n//   out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n//   out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n//   out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n//   out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n//   out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n//   out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n//   out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n//   out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n//   out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n//   out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n//   out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n//   out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n//   return out;\n// }\n\n// /**\n//  * Calculates the determinant of a mat4\n//  *\n//  * @param {mat4} a the source matrix\n//  * @returns {Number} determinant of a\n//  */\n// export function determinant(a) {\n//   let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n//   let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n//   let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n//   let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n//   let b00 = a00 * a11 - a01 * a10;\n//   let b01 = a00 * a12 - a02 * a10;\n//   let b02 = a00 * a13 - a03 * a10;\n//   let b03 = a01 * a12 - a02 * a11;\n//   let b04 = a01 * a13 - a03 * a11;\n//   let b05 = a02 * a13 - a03 * a12;\n//   let b06 = a20 * a31 - a21 * a30;\n//   let b07 = a20 * a32 - a22 * a30;\n//   let b08 = a20 * a33 - a23 * a30;\n//   let b09 = a21 * a32 - a22 * a31;\n//   let b10 = a21 * a33 - a23 * a31;\n//   let b11 = a22 * a33 - a23 * a32;\n\n//   // Calculate the determinant\n//   return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n// }\n\n// /**\n//  * Multiplies two mat4s\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the first operand\n//  * @param {mat4} b the second operand\n//  * @returns {mat4} out\n//  */\n// export function multiply(out, a, b) {\n//   let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n//   let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n//   let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n//   let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n//   // Cache only the current line of the second matrix\n//   let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n//   out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n//   out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n//   out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n//   out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n//   b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n//   out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n//   out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n//   out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n//   out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n//   b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n//   out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n//   out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n//   out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n//   out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n//   b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n//   out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n//   out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n//   out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n//   out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n//   return out;\n// }\n\n// /**\n//  * Translate a mat4 by the given vector\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to translate\n//  * @param {vec3} v vector to translate by\n//  * @returns {mat4} out\n//  */\n// export function translate(out, a, v) {\n//   let x = v[0], y = v[1], z = v[2];\n//   let a00, a01, a02, a03;\n//   let a10, a11, a12, a13;\n//   let a20, a21, a22, a23;\n\n//   if (a === out) {\n//     out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n//     out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n//     out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n//     out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n//   } else {\n//     a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n//     a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n//     a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n//     out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n//     out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n//     out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n//     out[12] = a00 * x + a10 * y + a20 * z + a[12];\n//     out[13] = a01 * x + a11 * y + a21 * z + a[13];\n//     out[14] = a02 * x + a12 * y + a22 * z + a[14];\n//     out[15] = a03 * x + a13 * y + a23 * z + a[15];\n//   }\n\n//   return out;\n// }\n\n// /**\n//  * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to scale\n//  * @param {vec3} v the vec3 to scale the matrix by\n//  * @returns {mat4} out\n//  **/\n// export function scale(out, a, v) {\n//   let x = v[0], y = v[1], z = v[2];\n\n//   out[0] = a[0] * x;\n//   out[1] = a[1] * x;\n//   out[2] = a[2] * x;\n//   out[3] = a[3] * x;\n//   out[4] = a[4] * y;\n//   out[5] = a[5] * y;\n//   out[6] = a[6] * y;\n//   out[7] = a[7] * y;\n//   out[8] = a[8] * z;\n//   out[9] = a[9] * z;\n//   out[10] = a[10] * z;\n//   out[11] = a[11] * z;\n//   out[12] = a[12];\n//   out[13] = a[13];\n//   out[14] = a[14];\n//   out[15] = a[15];\n//   return out;\n// }\n\n// /**\n//  * Rotates a mat4 by the given angle around the given axis\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to rotate\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @param {vec3} axis the axis to rotate around\n//  * @returns {mat4} out\n//  */\n// export function rotate(out, a, rad, axis) {\n//   let x = axis[0], y = axis[1], z = axis[2];\n//   let len = Math.sqrt(x * x + y * y + z * z);\n//   let s, c, t;\n//   let a00, a01, a02, a03;\n//   let a10, a11, a12, a13;\n//   let a20, a21, a22, a23;\n//   let b00, b01, b02;\n//   let b10, b11, b12;\n//   let b20, b21, b22;\n\n//   if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n//   len = 1 / len;\n//   x *= len;\n//   y *= len;\n//   z *= len;\n\n//   s = Math.sin(rad);\n//   c = Math.cos(rad);\n//   t = 1 - c;\n\n//   a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n//   a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n//   a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n//   // Construct the elements of the rotation matrix\n//   b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n//   b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n//   b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n//   // Perform rotation-specific matrix multiplication\n//   out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n//   out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n//   out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n//   out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n//   out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n//   out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n//   out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n//   out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n//   out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n//   out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n//   out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n//   out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n//   if (a !== out) { // If the source and destination differ, copy the unchanged last row\n//     out[12] = a[12];\n//     out[13] = a[13];\n//     out[14] = a[14];\n//     out[15] = a[15];\n//   }\n//   return out;\n// }\n\n// /**\n//  * Rotates a matrix by the given angle around the X axis\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to rotate\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function rotateX(out, a, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n//   let a10 = a[4];\n//   let a11 = a[5];\n//   let a12 = a[6];\n//   let a13 = a[7];\n//   let a20 = a[8];\n//   let a21 = a[9];\n//   let a22 = a[10];\n//   let a23 = a[11];\n\n//   if (a !== out) { // If the source and destination differ, copy the unchanged rows\n//     out[0]  = a[0];\n//     out[1]  = a[1];\n//     out[2]  = a[2];\n//     out[3]  = a[3];\n//     out[12] = a[12];\n//     out[13] = a[13];\n//     out[14] = a[14];\n//     out[15] = a[15];\n//   }\n\n//   // Perform axis-specific matrix multiplication\n//   out[4] = a10 * c + a20 * s;\n//   out[5] = a11 * c + a21 * s;\n//   out[6] = a12 * c + a22 * s;\n//   out[7] = a13 * c + a23 * s;\n//   out[8] = a20 * c - a10 * s;\n//   out[9] = a21 * c - a11 * s;\n//   out[10] = a22 * c - a12 * s;\n//   out[11] = a23 * c - a13 * s;\n//   return out;\n// }\n\n// /**\n//  * Rotates a matrix by the given angle around the Y axis\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to rotate\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function rotateY(out, a, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n//   let a00 = a[0];\n//   let a01 = a[1];\n//   let a02 = a[2];\n//   let a03 = a[3];\n//   let a20 = a[8];\n//   let a21 = a[9];\n//   let a22 = a[10];\n//   let a23 = a[11];\n\n//   if (a !== out) { // If the source and destination differ, copy the unchanged rows\n//     out[4]  = a[4];\n//     out[5]  = a[5];\n//     out[6]  = a[6];\n//     out[7]  = a[7];\n//     out[12] = a[12];\n//     out[13] = a[13];\n//     out[14] = a[14];\n//     out[15] = a[15];\n//   }\n\n//   // Perform axis-specific matrix multiplication\n//   out[0] = a00 * c - a20 * s;\n//   out[1] = a01 * c - a21 * s;\n//   out[2] = a02 * c - a22 * s;\n//   out[3] = a03 * c - a23 * s;\n//   out[8] = a00 * s + a20 * c;\n//   out[9] = a01 * s + a21 * c;\n//   out[10] = a02 * s + a22 * c;\n//   out[11] = a03 * s + a23 * c;\n//   return out;\n// }\n\n// /**\n//  * Rotates a matrix by the given angle around the Z axis\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to rotate\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function rotateZ(out, a, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n//   let a00 = a[0];\n//   let a01 = a[1];\n//   let a02 = a[2];\n//   let a03 = a[3];\n//   let a10 = a[4];\n//   let a11 = a[5];\n//   let a12 = a[6];\n//   let a13 = a[7];\n\n//   if (a !== out) { // If the source and destination differ, copy the unchanged last row\n//     out[8]  = a[8];\n//     out[9]  = a[9];\n//     out[10] = a[10];\n//     out[11] = a[11];\n//     out[12] = a[12];\n//     out[13] = a[13];\n//     out[14] = a[14];\n//     out[15] = a[15];\n//   }\n\n//   // Perform axis-specific matrix multiplication\n//   out[0] = a00 * c + a10 * s;\n//   out[1] = a01 * c + a11 * s;\n//   out[2] = a02 * c + a12 * s;\n//   out[3] = a03 * c + a13 * s;\n//   out[4] = a10 * c - a00 * s;\n//   out[5] = a11 * c - a01 * s;\n//   out[6] = a12 * c - a02 * s;\n//   out[7] = a13 * c - a03 * s;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a vector translation\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.translate(dest, dest, vec);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {vec3} v Translation vector\n//  * @returns {mat4} out\n//  */\n// export function fromTranslation(out, v) {\n//   out[0] = 1;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = 1;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = 1;\n//   out[11] = 0;\n//   out[12] = v[0];\n//   out[13] = v[1];\n//   out[14] = v[2];\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a vector scaling\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.scale(dest, dest, vec);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {vec3} v Scaling vector\n//  * @returns {mat4} out\n//  */\n// export function fromScaling(out, v) {\n//   out[0] = v[0];\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = v[1];\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = v[2];\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a given angle around a given axis\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.rotate(dest, dest, rad, axis);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @param {vec3} axis the axis to rotate around\n//  * @returns {mat4} out\n//  */\n// export function fromRotation(out, rad, axis) {\n//   let x = axis[0], y = axis[1], z = axis[2];\n//   let len = Math.sqrt(x * x + y * y + z * z);\n//   let s, c, t;\n\n//   if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n//   len = 1 / len;\n//   x *= len;\n//   y *= len;\n//   z *= len;\n\n//   s = Math.sin(rad);\n//   c = Math.cos(rad);\n//   t = 1 - c;\n\n//   // Perform rotation-specific matrix multiplication\n//   out[0] = x * x * t + c;\n//   out[1] = y * x * t + z * s;\n//   out[2] = z * x * t - y * s;\n//   out[3] = 0;\n//   out[4] = x * y * t - z * s;\n//   out[5] = y * y * t + c;\n//   out[6] = z * y * t + x * s;\n//   out[7] = 0;\n//   out[8] = x * z * t + y * s;\n//   out[9] = y * z * t - x * s;\n//   out[10] = z * z * t + c;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from the given angle around the X axis\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.rotateX(dest, dest, rad);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function fromXRotation(out, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n\n//   // Perform axis-specific matrix multiplication\n//   out[0]  = 1;\n//   out[1]  = 0;\n//   out[2]  = 0;\n//   out[3]  = 0;\n//   out[4] = 0;\n//   out[5] = c;\n//   out[6] = s;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = -s;\n//   out[10] = c;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from the given angle around the Y axis\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.rotateY(dest, dest, rad);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function fromYRotation(out, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n\n//   // Perform axis-specific matrix multiplication\n//   out[0]  = c;\n//   out[1]  = 0;\n//   out[2]  = -s;\n//   out[3]  = 0;\n//   out[4] = 0;\n//   out[5] = 1;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = s;\n//   out[9] = 0;\n//   out[10] = c;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from the given angle around the Z axis\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.rotateZ(dest, dest, rad);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {Number} rad the angle to rotate the matrix by\n//  * @returns {mat4} out\n//  */\n// export function fromZRotation(out, rad) {\n//   let s = Math.sin(rad);\n//   let c = Math.cos(rad);\n\n//   // Perform axis-specific matrix multiplication\n//   out[0]  = c;\n//   out[1]  = s;\n//   out[2]  = 0;\n//   out[3]  = 0;\n//   out[4] = -s;\n//   out[5] = c;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = 1;\n//   out[11] = 0;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a quaternion rotation and vector translation\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.translate(dest, vec);\n//  *     let quatMat = mat4.create();\n//  *     quat4.toMat4(quat, quatMat);\n//  *     mat4.multiply(dest, quatMat);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {quat4} q Rotation quaternion\n//  * @param {vec3} v Translation vector\n//  * @returns {mat4} out\n//  */\n// export function fromRotationTranslation(out, q, v) {\n//   // Quaternion math\n//   let x = q[0], y = q[1], z = q[2], w = q[3];\n//   let x2 = x + x;\n//   let y2 = y + y;\n//   let z2 = z + z;\n\n//   let xx = x * x2;\n//   let xy = x * y2;\n//   let xz = x * z2;\n//   let yy = y * y2;\n//   let yz = y * z2;\n//   let zz = z * z2;\n//   let wx = w * x2;\n//   let wy = w * y2;\n//   let wz = w * z2;\n\n//   out[0] = 1 - (yy + zz);\n//   out[1] = xy + wz;\n//   out[2] = xz - wy;\n//   out[3] = 0;\n//   out[4] = xy - wz;\n//   out[5] = 1 - (xx + zz);\n//   out[6] = yz + wx;\n//   out[7] = 0;\n//   out[8] = xz + wy;\n//   out[9] = yz - wx;\n//   out[10] = 1 - (xx + yy);\n//   out[11] = 0;\n//   out[12] = v[0];\n//   out[13] = v[1];\n//   out[14] = v[2];\n//   out[15] = 1;\n\n//   return out;\n// }\n\n// /**\n//  * Returns the translation vector component of a transformation\n//  *  matrix. If a matrix is built with fromRotationTranslation,\n//  *  the returned vector will be the same as the translation vector\n//  *  originally supplied.\n//  * @param  {vec3} out Vector to receive translation component\n//  * @param  {mat4} mat Matrix to be decomposed (input)\n//  * @return {vec3} out\n//  */\n// export function getTranslation(out, mat) {\n//   out[0] = mat[12];\n//   out[1] = mat[13];\n//   out[2] = mat[14];\n\n//   return out;\n// }\n\n// /**\n//  * Returns the scaling factor component of a transformation\n//  *  matrix. If a matrix is built with fromRotationTranslationScale\n//  *  with a normalized Quaternion paramter, the returned vector will be\n//  *  the same as the scaling vector\n//  *  originally supplied.\n//  * @param  {vec3} out Vector to receive scaling factor component\n//  * @param  {mat4} mat Matrix to be decomposed (input)\n//  * @return {vec3} out\n//  */\n// export function getScaling(out, mat) {\n//   let m11 = mat[0];\n//   let m12 = mat[1];\n//   let m13 = mat[2];\n//   let m21 = mat[4];\n//   let m22 = mat[5];\n//   let m23 = mat[6];\n//   let m31 = mat[8];\n//   let m32 = mat[9];\n//   let m33 = mat[10];\n\n//   out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n//   out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n//   out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n//   return out;\n// }\n\n// /**\n//  * Returns a quaternion representing the rotational component\n//  *  of a transformation matrix. If a matrix is built with\n//  *  fromRotationTranslation, the returned quaternion will be the\n//  *  same as the quaternion originally supplied.\n//  * @param {quat} out Quaternion to receive the rotation component\n//  * @param {mat4} mat Matrix to be decomposed (input)\n//  * @return {quat} out\n//  */\n// export function getRotation(out, mat) {\n//   // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n//   let trace = mat[0] + mat[5] + mat[10];\n//   let S = 0;\n\n//   if (trace > 0) {\n//     S = Math.sqrt(trace + 1.0) * 2;\n//     out[3] = 0.25 * S;\n//     out[0] = (mat[6] - mat[9]) / S;\n//     out[1] = (mat[8] - mat[2]) / S;\n//     out[2] = (mat[1] - mat[4]) / S;\n//   } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) {\n//     S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n//     out[3] = (mat[6] - mat[9]) / S;\n//     out[0] = 0.25 * S;\n//     out[1] = (mat[1] + mat[4]) / S;\n//     out[2] = (mat[8] + mat[2]) / S;\n//   } else if (mat[5] > mat[10]) {\n//     S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n//     out[3] = (mat[8] - mat[2]) / S;\n//     out[0] = (mat[1] + mat[4]) / S;\n//     out[1] = 0.25 * S;\n//     out[2] = (mat[6] + mat[9]) / S;\n//   } else {\n//     S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n//     out[3] = (mat[1] - mat[4]) / S;\n//     out[0] = (mat[8] + mat[2]) / S;\n//     out[1] = (mat[6] + mat[9]) / S;\n//     out[2] = 0.25 * S;\n//   }\n\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a quaternion rotation, vector translation and vector scale\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.translate(dest, vec);\n//  *     let quatMat = mat4.create();\n//  *     quat4.toMat4(quat, quatMat);\n//  *     mat4.multiply(dest, quatMat);\n//  *     mat4.scale(dest, scale)\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {quat4} q Rotation quaternion\n//  * @param {vec3} v Translation vector\n//  * @param {vec3} s Scaling vector\n//  * @returns {mat4} out\n//  */\n// export function fromRotationTranslationScale(out, q, v, s) {\n//   // Quaternion math\n//   let x = q[0], y = q[1], z = q[2], w = q[3];\n//   let x2 = x + x;\n//   let y2 = y + y;\n//   let z2 = z + z;\n\n//   let xx = x * x2;\n//   let xy = x * y2;\n//   let xz = x * z2;\n//   let yy = y * y2;\n//   let yz = y * z2;\n//   let zz = z * z2;\n//   let wx = w * x2;\n//   let wy = w * y2;\n//   let wz = w * z2;\n//   let sx = s[0];\n//   let sy = s[1];\n//   let sz = s[2];\n\n//   out[0] = (1 - (yy + zz)) * sx;\n//   out[1] = (xy + wz) * sx;\n//   out[2] = (xz - wy) * sx;\n//   out[3] = 0;\n//   out[4] = (xy - wz) * sy;\n//   out[5] = (1 - (xx + zz)) * sy;\n//   out[6] = (yz + wx) * sy;\n//   out[7] = 0;\n//   out[8] = (xz + wy) * sz;\n//   out[9] = (yz - wx) * sz;\n//   out[10] = (1 - (xx + yy)) * sz;\n//   out[11] = 0;\n//   out[12] = v[0];\n//   out[13] = v[1];\n//   out[14] = v[2];\n//   out[15] = 1;\n\n//   return out;\n// }\n\n// /**\n//  * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n//  * This is equivalent to (but much faster than):\n//  *\n//  *     mat4.identity(dest);\n//  *     mat4.translate(dest, vec);\n//  *     mat4.translate(dest, origin);\n//  *     let quatMat = mat4.create();\n//  *     quat4.toMat4(quat, quatMat);\n//  *     mat4.multiply(dest, quatMat);\n//  *     mat4.scale(dest, scale)\n//  *     mat4.translate(dest, negativeOrigin);\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {quat4} q Rotation quaternion\n//  * @param {vec3} v Translation vector\n//  * @param {vec3} s Scaling vector\n//  * @param {vec3} o The origin vector around which to scale and rotate\n//  * @returns {mat4} out\n//  */\n// export function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n//   // Quaternion math\n//   let x = q[0], y = q[1], z = q[2], w = q[3];\n//   let x2 = x + x;\n//   let y2 = y + y;\n//   let z2 = z + z;\n\n//   let xx = x * x2;\n//   let xy = x * y2;\n//   let xz = x * z2;\n//   let yy = y * y2;\n//   let yz = y * z2;\n//   let zz = z * z2;\n//   let wx = w * x2;\n//   let wy = w * y2;\n//   let wz = w * z2;\n\n//   let sx = s[0];\n//   let sy = s[1];\n//   let sz = s[2];\n\n//   let ox = o[0];\n//   let oy = o[1];\n//   let oz = o[2];\n\n//   out[0] = (1 - (yy + zz)) * sx;\n//   out[1] = (xy + wz) * sx;\n//   out[2] = (xz - wy) * sx;\n//   out[3] = 0;\n//   out[4] = (xy - wz) * sy;\n//   out[5] = (1 - (xx + zz)) * sy;\n//   out[6] = (yz + wx) * sy;\n//   out[7] = 0;\n//   out[8] = (xz + wy) * sz;\n//   out[9] = (yz - wx) * sz;\n//   out[10] = (1 - (xx + yy)) * sz;\n//   out[11] = 0;\n//   out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n//   out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n//   out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n//   out[15] = 1;\n\n//   return out;\n// }\n\n// /**\n//  * Calculates a 4x4 matrix from the given quaternion\n//  *\n//  * @param {mat4} out mat4 receiving operation result\n//  * @param {quat} q Quaternion to create matrix from\n//  *\n//  * @returns {mat4} out\n//  */\n// export function fromQuat(out, q) {\n//   let x = q[0], y = q[1], z = q[2], w = q[3];\n//   let x2 = x + x;\n//   let y2 = y + y;\n//   let z2 = z + z;\n\n//   let xx = x * x2;\n//   let yx = y * x2;\n//   let yy = y * y2;\n//   let zx = z * x2;\n//   let zy = z * y2;\n//   let zz = z * z2;\n//   let wx = w * x2;\n//   let wy = w * y2;\n//   let wz = w * z2;\n\n//   out[0] = 1 - yy - zz;\n//   out[1] = yx + wz;\n//   out[2] = zx - wy;\n//   out[3] = 0;\n\n//   out[4] = yx - wz;\n//   out[5] = 1 - xx - zz;\n//   out[6] = zy + wx;\n//   out[7] = 0;\n\n//   out[8] = zx + wy;\n//   out[9] = zy - wx;\n//   out[10] = 1 - xx - yy;\n//   out[11] = 0;\n\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = 0;\n//   out[15] = 1;\n\n//   return out;\n// }\n\n// /**\n//  * Generates a frustum matrix with the given bounds\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {Number} left Left bound of the frustum\n//  * @param {Number} right Right bound of the frustum\n//  * @param {Number} bottom Bottom bound of the frustum\n//  * @param {Number} top Top bound of the frustum\n//  * @param {Number} near Near bound of the frustum\n//  * @param {Number} far Far bound of the frustum\n//  * @returns {mat4} out\n//  */\n// export function frustum(out, left, right, bottom, top, near, far) {\n//   let rl = 1 / (right - left);\n//   let tb = 1 / (top - bottom);\n//   let nf = 1 / (near - far);\n//   out[0] = (near * 2) * rl;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = (near * 2) * tb;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = (right + left) * rl;\n//   out[9] = (top + bottom) * tb;\n//   out[10] = (far + near) * nf;\n//   out[11] = -1;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = (far * near * 2) * nf;\n//   out[15] = 0;\n//   return out;\n// }\n\n// /**\n//  * Generates a perspective projection matrix with the given bounds\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {number} fovy Vertical field of view in radians\n//  * @param {number} aspect Aspect ratio. typically viewport width/height\n//  * @param {number} near Near bound of the frustum\n//  * @param {number} far Far bound of the frustum\n//  * @returns {mat4} out\n//  */\n// export function perspective(out, fovy, aspect, near, far) {\n//   let f = 1.0 / Math.tan(fovy / 2);\n//   let nf = 1 / (near - far);\n//   out[0] = f / aspect;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = f;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = (far + near) * nf;\n//   out[11] = -1;\n//   out[12] = 0;\n//   out[13] = 0;\n//   out[14] = (2 * far * near) * nf;\n//   out[15] = 0;\n//   return out;\n// }\n\n// /**\n//  * Generates a perspective projection matrix with the given field of view.\n//  * This is primarily useful for generating projection matrices to be used\n//  * with the still experiemental WebVR API.\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n//  * @param {number} near Near bound of the frustum\n//  * @param {number} far Far bound of the frustum\n//  * @returns {mat4} out\n//  */\n// export function perspectiveFromFieldOfView(out, fov, near, far) {\n//   let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n//   let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n//   let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n//   let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n//   let xScale = 2.0 / (leftTan + rightTan);\n//   let yScale = 2.0 / (upTan + downTan);\n\n//   out[0] = xScale;\n//   out[1] = 0.0;\n//   out[2] = 0.0;\n//   out[3] = 0.0;\n//   out[4] = 0.0;\n//   out[5] = yScale;\n//   out[6] = 0.0;\n//   out[7] = 0.0;\n//   out[8] = -((leftTan - rightTan) * xScale * 0.5);\n//   out[9] = ((upTan - downTan) * yScale * 0.5);\n//   out[10] = far / (near - far);\n//   out[11] = -1.0;\n//   out[12] = 0.0;\n//   out[13] = 0.0;\n//   out[14] = (far * near) / (near - far);\n//   out[15] = 0.0;\n//   return out;\n// }\n\n// /**\n//  * Generates a orthogonal projection matrix with the given bounds\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {number} left Left bound of the frustum\n//  * @param {number} right Right bound of the frustum\n//  * @param {number} bottom Bottom bound of the frustum\n//  * @param {number} top Top bound of the frustum\n//  * @param {number} near Near bound of the frustum\n//  * @param {number} far Far bound of the frustum\n//  * @returns {mat4} out\n//  */\n// export function ortho(out, left, right, bottom, top, near, far) {\n//   let lr = 1 / (left - right);\n//   let bt = 1 / (bottom - top);\n//   let nf = 1 / (near - far);\n//   out[0] = -2 * lr;\n//   out[1] = 0;\n//   out[2] = 0;\n//   out[3] = 0;\n//   out[4] = 0;\n//   out[5] = -2 * bt;\n//   out[6] = 0;\n//   out[7] = 0;\n//   out[8] = 0;\n//   out[9] = 0;\n//   out[10] = 2 * nf;\n//   out[11] = 0;\n//   out[12] = (left + right) * lr;\n//   out[13] = (top + bottom) * bt;\n//   out[14] = (far + near) * nf;\n//   out[15] = 1;\n//   return out;\n// }\n\n// /**\n//  * Generates a look-at matrix with the given eye position, focal point, and up axis\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {vec3} eye Position of the viewer\n//  * @param {vec3} center Point the viewer is looking at\n//  * @param {vec3} up vec3 pointing up\n//  * @returns {mat4} out\n//  */\n// export function lookAt(out, eye, center, up) {\n//   let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n//   let eyex = eye[0];\n//   let eyey = eye[1];\n//   let eyez = eye[2];\n//   let upx = up[0];\n//   let upy = up[1];\n//   let upz = up[2];\n//   let centerx = center[0];\n//   let centery = center[1];\n//   let centerz = center[2];\n\n//   if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n//       Math.abs(eyey - centery) < glMatrix.EPSILON &&\n//       Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n//     return identity(out);\n//   }\n\n//   z0 = eyex - centerx;\n//   z1 = eyey - centery;\n//   z2 = eyez - centerz;\n\n//   len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n//   z0 *= len;\n//   z1 *= len;\n//   z2 *= len;\n\n//   x0 = upy * z2 - upz * z1;\n//   x1 = upz * z0 - upx * z2;\n//   x2 = upx * z1 - upy * z0;\n//   len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n//   if (!len) {\n//     x0 = 0;\n//     x1 = 0;\n//     x2 = 0;\n//   } else {\n//     len = 1 / len;\n//     x0 *= len;\n//     x1 *= len;\n//     x2 *= len;\n//   }\n\n//   y0 = z1 * x2 - z2 * x1;\n//   y1 = z2 * x0 - z0 * x2;\n//   y2 = z0 * x1 - z1 * x0;\n\n//   len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n//   if (!len) {\n//     y0 = 0;\n//     y1 = 0;\n//     y2 = 0;\n//   } else {\n//     len = 1 / len;\n//     y0 *= len;\n//     y1 *= len;\n//     y2 *= len;\n//   }\n\n//   out[0] = x0;\n//   out[1] = y0;\n//   out[2] = z0;\n//   out[3] = 0;\n//   out[4] = x1;\n//   out[5] = y1;\n//   out[6] = z1;\n//   out[7] = 0;\n//   out[8] = x2;\n//   out[9] = y2;\n//   out[10] = z2;\n//   out[11] = 0;\n//   out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n//   out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n//   out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n//   out[15] = 1;\n\n//   return out;\n// }\n\n// /**\n//  * Generates a matrix that makes something look at something else.\n//  *\n//  * @param {mat4} out mat4 frustum matrix will be written into\n//  * @param {vec3} eye Position of the viewer\n//  * @param {vec3} center Point the viewer is looking at\n//  * @param {vec3} up vec3 pointing up\n//  * @returns {mat4} out\n//  */\n// export function targetTo(out, eye, target, up) {\n//   let eyex = eye[0],\n//       eyey = eye[1],\n//       eyez = eye[2],\n//       upx = up[0],\n//       upy = up[1],\n//       upz = up[2];\n\n//   let z0 = eyex - target[0],\n//       z1 = eyey - target[1],\n//       z2 = eyez - target[2];\n\n//   let len = z0*z0 + z1*z1 + z2*z2;\n//   if (len > 0) {\n//     len = 1 / Math.sqrt(len);\n//     z0 *= len;\n//     z1 *= len;\n//     z2 *= len;\n//   }\n\n//   let x0 = upy * z2 - upz * z1,\n//       x1 = upz * z0 - upx * z2,\n//       x2 = upx * z1 - upy * z0;\n\n//   out[0] = x0;\n//   out[1] = x1;\n//   out[2] = x2;\n//   out[3] = 0;\n//   out[4] = z1 * x2 - z2 * x1;\n//   out[5] = z2 * x0 - z0 * x2;\n//   out[6] = z0 * x1 - z1 * x0;\n//   out[7] = 0;\n//   out[8] = z0;\n//   out[9] = z1;\n//   out[10] = z2;\n//   out[11] = 0;\n//   out[12] = eyex;\n//   out[13] = eyey;\n//   out[14] = eyez;\n//   out[15] = 1;\n//   return out;\n// };\n\n// /**\n//  * Returns a string representation of a mat4\n//  *\n//  * @param {mat4} a matrix to represent as a string\n//  * @returns {String} string representation of the matrix\n//  */\n// export function str(a) {\n//   return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n//           a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n//           a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n//           a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n// }\n\n// /**\n//  * Returns Frobenius norm of a mat4\n//  *\n//  * @param {mat4} a the matrix to calculate Frobenius norm of\n//  * @returns {Number} Frobenius norm\n//  */\n// export function frob(a) {\n//   return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n// }\n\n// /**\n//  * Adds two mat4's\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the first operand\n//  * @param {mat4} b the second operand\n//  * @returns {mat4} out\n//  */\n// export function add(out, a, b) {\n//   out[0] = a[0] + b[0];\n//   out[1] = a[1] + b[1];\n//   out[2] = a[2] + b[2];\n//   out[3] = a[3] + b[3];\n//   out[4] = a[4] + b[4];\n//   out[5] = a[5] + b[5];\n//   out[6] = a[6] + b[6];\n//   out[7] = a[7] + b[7];\n//   out[8] = a[8] + b[8];\n//   out[9] = a[9] + b[9];\n//   out[10] = a[10] + b[10];\n//   out[11] = a[11] + b[11];\n//   out[12] = a[12] + b[12];\n//   out[13] = a[13] + b[13];\n//   out[14] = a[14] + b[14];\n//   out[15] = a[15] + b[15];\n//   return out;\n// }\n\n// /**\n//  * Subtracts matrix b from matrix a\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the first operand\n//  * @param {mat4} b the second operand\n//  * @returns {mat4} out\n//  */\n// export function subtract(out, a, b) {\n//   out[0] = a[0] - b[0];\n//   out[1] = a[1] - b[1];\n//   out[2] = a[2] - b[2];\n//   out[3] = a[3] - b[3];\n//   out[4] = a[4] - b[4];\n//   out[5] = a[5] - b[5];\n//   out[6] = a[6] - b[6];\n//   out[7] = a[7] - b[7];\n//   out[8] = a[8] - b[8];\n//   out[9] = a[9] - b[9];\n//   out[10] = a[10] - b[10];\n//   out[11] = a[11] - b[11];\n//   out[12] = a[12] - b[12];\n//   out[13] = a[13] - b[13];\n//   out[14] = a[14] - b[14];\n//   out[15] = a[15] - b[15];\n//   return out;\n// }\n\n// /**\n//  * Multiply each element of the matrix by a scalar.\n//  *\n//  * @param {mat4} out the receiving matrix\n//  * @param {mat4} a the matrix to scale\n//  * @param {Number} b amount to scale the matrix's elements by\n//  * @returns {mat4} out\n//  */\n// export function multiplyScalar(out, a, b) {\n//   out[0] = a[0] * b;\n//   out[1] = a[1] * b;\n//   out[2] = a[2] * b;\n//   out[3] = a[3] * b;\n//   out[4] = a[4] * b;\n//   out[5] = a[5] * b;\n//   out[6] = a[6] * b;\n//   out[7] = a[7] * b;\n//   out[8] = a[8] * b;\n//   out[9] = a[9] * b;\n//   out[10] = a[10] * b;\n//   out[11] = a[11] * b;\n//   out[12] = a[12] * b;\n//   out[13] = a[13] * b;\n//   out[14] = a[14] * b;\n//   out[15] = a[15] * b;\n//   return out;\n// }\n\n// /**\n//  * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n//  *\n//  * @param {mat4} out the receiving vector\n//  * @param {mat4} a the first operand\n//  * @param {mat4} b the second operand\n//  * @param {Number} scale the amount to scale b's elements by before adding\n//  * @returns {mat4} out\n//  */\n// export function multiplyScalarAndAdd(out, a, b, scale) {\n//   out[0] = a[0] + (b[0] * scale);\n//   out[1] = a[1] + (b[1] * scale);\n//   out[2] = a[2] + (b[2] * scale);\n//   out[3] = a[3] + (b[3] * scale);\n//   out[4] = a[4] + (b[4] * scale);\n//   out[5] = a[5] + (b[5] * scale);\n//   out[6] = a[6] + (b[6] * scale);\n//   out[7] = a[7] + (b[7] * scale);\n//   out[8] = a[8] + (b[8] * scale);\n//   out[9] = a[9] + (b[9] * scale);\n//   out[10] = a[10] + (b[10] * scale);\n//   out[11] = a[11] + (b[11] * scale);\n//   out[12] = a[12] + (b[12] * scale);\n//   out[13] = a[13] + (b[13] * scale);\n//   out[14] = a[14] + (b[14] * scale);\n//   out[15] = a[15] + (b[15] * scale);\n//   return out;\n// }\n\n// /**\n//  * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n//  *\n//  * @param {mat4} a The first matrix.\n//  * @param {mat4} b The second matrix.\n//  * @returns {Boolean} True if the matrices are equal, false otherwise.\n//  */\n// export function exactEquals(a, b) {\n//   return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n//          a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n//          a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n//          a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n// }\n\n// /**\n//  * Returns whether or not the matrices have approximately the same elements in the same position.\n//  *\n//  * @param {mat4} a The first matrix.\n//  * @param {mat4} b The second matrix.\n//  * @returns {Boolean} True if the matrices are equal, false otherwise.\n//  */\n// export function equals(a, b) {\n//   let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n//   let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n//   let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n//   let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n//   let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n//   let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n//   let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n//   let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n//   return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n//           Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n//           Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n//           Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n//           Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n//           Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n//           Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n//           Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n//           Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n//           Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n//           Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n//           Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n//           Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n//           Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n//           Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n//           Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n// }\n\n// /**\n//  * Alias for {@link mat4.multiply}\n//  * @function\n//  */\n// export const mul = multiply;\n\n// /**\n//  * Alias for {@link mat4.subtract}\n//  * @function\n//  */\n// export const sub = subtract;\n","import { Vec3 } from './Vec3';\nimport { Quaternion } from './Quaternion';\n\nexport class Matrix4 extends Float32Array {\n    static deg2Rad = Math.PI / 180;\n\n    raw: Matrix4;\n\n    static Identity(out: Matrix4) {\n        for (var i = 0; i <= out.length; i++) { out[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0\n        return out;\n    }\n\n    static Perspective(out: Matrix4, fovy: number, aspect: number, near: number, far: number) {\n        var f = 1.0 / Math.tan(fovy / 2),\n            nf = 1 / (near - far);\n        out[0] = f / aspect;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = f;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = (far + near) * nf;\n        out[11] = -1;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = (2 * far * near) * nf;\n        out[15] = 0;\n    }\n\n    static Ortho(out: Matrix4, left: number, right: number, bottom: number, top: number, near: number, far: number) {\n        var lr = 1 / (left - right),\n            bt = 1 / (bottom - top),\n            nf = 1 / (near - far);\n        out[0] = -2 * lr;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = -2 * bt;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[10] = 2 * nf;\n        out[11] = 0;\n        out[12] = (left + right) * lr;\n        out[13] = (top + bottom) * bt;\n        out[14] = (far + near) * nf;\n        out[15] = 1;\n    }\n\n    // make the rows into the columns\n    static Transpose(out: Matrix4, a: Matrix4) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        if (out === a) {\n            var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\n            out[1] = a[4];\n            out[2] = a[8];\n            out[3] = a[12];\n            out[4] = a01;\n            out[6] = a[9];\n            out[7] = a[13];\n            out[8] = a02;\n            out[9] = a12;\n            out[11] = a[14];\n            out[12] = a03;\n            out[13] = a13;\n            out[14] = a23;\n        } else {\n            out[0] = a[0];\n            out[1] = a[4];\n            out[2] = a[8];\n            out[3] = a[12];\n            out[4] = a[1];\n            out[5] = a[5];\n            out[6] = a[9];\n            out[7] = a[13];\n            out[8] = a[2];\n            out[9] = a[6];\n            out[10] = a[10];\n            out[11] = a[14];\n            out[12] = a[3];\n            out[13] = a[7];\n            out[14] = a[11];\n            out[15] = a[15];\n        }\n\n        return out;\n    }\n\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n    static NormalMat3(out: Matrix4, a: Matrix4) {\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n            b00 = a00 * a11 - a01 * a10,\n            b01 = a00 * a12 - a02 * a10,\n            b02 = a00 * a13 - a03 * a10,\n            b03 = a01 * a12 - a02 * a11,\n            b04 = a01 * a13 - a03 * a11,\n            b05 = a02 * a13 - a03 * a12,\n            b06 = a20 * a31 - a21 * a30,\n            b07 = a20 * a32 - a22 * a30,\n            b08 = a20 * a33 - a23 * a30,\n            b09 = a21 * a32 - a22 * a31,\n            b10 = a21 * a33 - a23 * a31,\n            b11 = a22 * a33 - a23 * a32,\n\n            // Calculate the determinant\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n        if (!det) { return null; }\n\n        det = 1.0 / det;\n\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n        return out;\n    }\n\n    // New function derived from fromRotationTranslation, just took out the translation stuff.\n    static FromQuaternion(out: Matrix4, q: Matrix4) {\n        // Quaternion math\n        var x = q[0], y = q[1], z = q[2], w = q[3],\n            x2 = x + x,\n            y2 = y + y,\n            z2 = z + z,\n\n            xx = x * x2,\n            xy = x * y2,\n            xz = x * z2,\n            yy = y * y2,\n            yz = y * z2,\n            zz = z * z2,\n            wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n\n        out[0] = 1 - (yy + zz);\n        out[1] = xy + wz;\n        out[2] = xz - wy;\n        out[3] = 0;\n        out[4] = xy - wz;\n        out[5] = 1 - (xx + zz);\n        out[6] = yz + wx;\n        out[7] = 0;\n        out[8] = xz + wy;\n        out[9] = yz - wx;\n        out[10] = 1 - (xx + yy);\n        out[11] = 0;\n        return out;\n    }\n\n    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\n    static FromQuaternionTranslation(out: Matrix4, q: Quaternion, v: Vec3) {\n        // Quaternion math\n        var x = q[0], y = q[1], z = q[2], w = q[3],\n            x2 = x + x,\n            y2 = y + y,\n            z2 = z + z,\n\n            xx = x * x2,\n            xy = x * y2,\n            xz = x * z2,\n            yy = y * y2,\n            yz = y * z2,\n            zz = z * z2,\n            wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n\n        out[0] = 1 - (yy + zz);\n        out[1] = xy + wz;\n        out[2] = xz - wy;\n        out[3] = 0;\n        out[4] = xy - wz;\n        out[5] = 1 - (xx + zz);\n        out[6] = yz + wx;\n        out[7] = 0;\n        out[8] = xz + wy;\n        out[9] = yz - wx;\n        out[10] = 1 - (xx + yy);\n        out[11] = 0;\n        out[12] = v[0];\n        out[13] = v[1];\n        out[14] = v[2];\n        out[15] = 1;\n        return out;\n    }\n\n    static FromQuaternionTranslationScale(out: Matrix4, q: Quaternion, v: Vec3, s: Vec3) {\n        // Quaternion math\n        var x = q[0], y = q[1], z = q[2], w = q[3],\n            x2 = x + x,\n            y2 = y + y,\n            z2 = z + z,\n\n            xx = x * x2,\n            xy = x * y2,\n            xz = x * z2,\n            yy = y * y2,\n            yz = y * z2,\n            zz = z * z2,\n            wx = w * x2,\n            wy = w * y2,\n            wz = w * z2,\n            sx = s[0],\n            sy = s[1],\n            sz = s[2];\n\n        out[0] = (1 - (yy + zz)) * sx;\n        out[1] = (xy + wz) * sx;\n        out[2] = (xz - wy) * sx;\n        out[3] = 0;\n        out[4] = (xy - wz) * sy;\n        out[5] = (1 - (xx + zz)) * sy;\n        out[6] = (yz + wx) * sy;\n        out[7] = 0;\n        out[8] = (xz + wy) * sz;\n        out[9] = (yz - wx) * sz;\n        out[10] = (1 - (xx + yy)) * sz;\n        out[11] = 0;\n        out[12] = v[0];\n        out[13] = v[1];\n        out[14] = v[2];\n        out[15] = 1;\n\n        return out;\n    }\n\n    static GetTranslation(out: Matrix4, mat: Matrix4) {\n        out[0] = mat[12];\n        out[1] = mat[13];\n        out[2] = mat[14];\n        return out;\n    }\n\n    static GetScaling(out: Matrix4, mat: Matrix4) {\n        var m11 = mat[0],\n            m12 = mat[1],\n            m13 = mat[2],\n            m21 = mat[4],\n            m22 = mat[5],\n            m23 = mat[6],\n            m31 = mat[8],\n            m32 = mat[9],\n            m33 = mat[10];\n        out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n        out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n        out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n        return out;\n    }\n\n    // Returns a quaternion representing the rotational component of a transformation matrix. If a matrix is built with\n    // fromRotationTranslation, the returned quaternion will be the same as the quaternion originally supplied\n    static GetRotation(out: Matrix4, mat: Matrix4) {\n        // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        var trace = mat[0] + mat[5] + mat[10],\n            S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (mat[6] - mat[9]) / S;\n            out[1] = (mat[8] - mat[2]) / S;\n            out[2] = (mat[1] - mat[4]) / S;\n        } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n            S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n            out[3] = (mat[6] - mat[9]) / S;\n            out[0] = 0.25 * S;\n            out[1] = (mat[1] + mat[4]) / S;\n            out[2] = (mat[8] + mat[2]) / S;\n        } else if (mat[5] > mat[10]) {\n            S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n            out[3] = (mat[8] - mat[2]) / S;\n            out[0] = (mat[1] + mat[4]) / S;\n            out[1] = 0.25 * S;\n            out[2] = (mat[6] + mat[9]) / S;\n        } else {\n            S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n            out[3] = (mat[1] - mat[4]) / S;\n            out[0] = (mat[8] + mat[2]) / S;\n            out[1] = (mat[6] + mat[9]) / S;\n            out[2] = 0.25 * S;\n        }\n        return out;\n    }\n\n    // ....................................................................\n    // Static Operation\n\n    // https://github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\n    static MultiplyVector(mat4: Matrix4, v: Float32Array) { // TODO: Dont need this, transformVec3 does a better job.\n        var x = v[0], y = v[1], z = v[2], w = v[3];\n        var c1r1 = mat4[0], c2r1 = mat4[1], c3r1 = mat4[2], c4r1 = mat4[3],\n            c1r2 = mat4[4], c2r2 = mat4[5], c3r2 = mat4[6], c4r2 = mat4[7],\n            c1r3 = mat4[8], c2r3 = mat4[9], c3r3 = mat4[10], c4r3 = mat4[11],\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\n\n        return [\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\n        ];\n    }\n\n    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\n    static TransformVec4(out: Matrix4, v: Float32Array, m: Matrix4) {\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n        return out;\n    }\n\n    static TransformVec3(out: Matrix4, v: Vec3, m: Matrix4) {\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12];\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13];\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14];\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15];\n        return out;\n    }\n\n    // From glMatrix\n    // Multiple two mat4 together\n    static Mult(out: Matrix4, a: Matrix4, b: Matrix4) {\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n        // Cache only the current line of the second matrix\n        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return out;\n    }\n\n    // ....................................................................\n    // Static Transformation\n    static scale(out: Matrix4, x: number, y: number, z: number) {\n        out[0] *= x;\n        out[1] *= x;\n        out[2] *= x;\n        out[3] *= x;\n        out[4] *= y;\n        out[5] *= y;\n        out[6] *= y;\n        out[7] *= y;\n        out[8] *= z;\n        out[9] *= z;\n        out[10] *= z;\n        out[11] *= z;\n        return out;\n    }\n\n    static RotateY(out: Matrix4, rad: number) {\n        var s = Math.sin(rad),\n            c = Math.cos(rad),\n            a00 = out[0],\n            a01 = out[1],\n            a02 = out[2],\n            a03 = out[3],\n            a20 = out[8],\n            a21 = out[9],\n            a22 = out[10],\n            a23 = out[11];\n\n        // Perform axis-specific matrix multiplication\n        out[0] = a00 * c - a20 * s;\n        out[1] = a01 * c - a21 * s;\n        out[2] = a02 * c - a22 * s;\n        out[3] = a03 * c - a23 * s;\n        out[8] = a00 * s + a20 * c;\n        out[9] = a01 * s + a21 * c;\n        out[10] = a02 * s + a22 * c;\n        out[11] = a03 * s + a23 * c;\n        return out;\n    }\n\n    static RotateX(out: Matrix4, rad: number) {\n        var s = Math.sin(rad),\n            c = Math.cos(rad),\n            a10 = out[4],\n            a11 = out[5],\n            a12 = out[6],\n            a13 = out[7],\n            a20 = out[8],\n            a21 = out[9],\n            a22 = out[10],\n            a23 = out[11];\n\n        // Perform axis-specific matrix multiplication\n        out[4] = a10 * c + a20 * s;\n        out[5] = a11 * c + a21 * s;\n        out[6] = a12 * c + a22 * s;\n        out[7] = a13 * c + a23 * s;\n        out[8] = a20 * c - a10 * s;\n        out[9] = a21 * c - a11 * s;\n        out[10] = a22 * c - a12 * s;\n        out[11] = a23 * c - a13 * s;\n        return out;\n    }\n\n    static RotateZ(out: Matrix4, rad: number) {\n        var s = Math.sin(rad),\n            c = Math.cos(rad),\n            a00 = out[0],\n            a01 = out[1],\n            a02 = out[2],\n            a03 = out[3],\n            a10 = out[4],\n            a11 = out[5],\n            a12 = out[6],\n            a13 = out[7];\n\n        // Perform axis-specific matrix multiplication\n        out[0] = a00 * c + a10 * s;\n        out[1] = a01 * c + a11 * s;\n        out[2] = a02 * c + a12 * s;\n        out[3] = a03 * c + a13 * s;\n        out[4] = a10 * c - a00 * s;\n        out[5] = a11 * c - a01 * s;\n        out[6] = a12 * c - a02 * s;\n        out[7] = a13 * c - a03 * s;\n        return out;\n    }\n\n    static Rotate(out: Matrix4, rad: number, axis: Vec3) {\n        var x = axis[0], y = axis[1], z = axis[2],\n            len = Math.sqrt(x * x + y * y + z * z),\n            s, c, t,\n            a00, a01, a02, a03,\n            a10, a11, a12, a13,\n            a20, a21, a22, a23,\n            b00, b01, b02,\n            b10, b11, b12,\n            b20, b21, b22;\n\n        if (Math.abs(len) < 0.000001) { return null; }\n\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n\n        s = Math.sin(rad);\n        c = Math.cos(rad);\n        t = 1 - c;\n\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\n\n        // Construct the elements of the rotation matrix\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n        // Perform rotation-specific matrix multiplication\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n        return out;\n    }\n\n    static Invert(out: Matrix4, mat: Matrix4) {\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\n\n        var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\n\n            b00 = a00 * a11 - a01 * a10,\n            b01 = a00 * a12 - a02 * a10,\n            b02 = a00 * a13 - a03 * a10,\n            b03 = a01 * a12 - a02 * a11,\n            b04 = a01 * a13 - a03 * a11,\n            b05 = a02 * a13 - a03 * a12,\n            b06 = a20 * a31 - a21 * a30,\n            b07 = a20 * a32 - a22 * a30,\n            b08 = a20 * a33 - a23 * a30,\n            b09 = a21 * a32 - a22 * a31,\n            b10 = a21 * a33 - a23 * a31,\n            b11 = a22 * a33 - a23 * a32,\n\n            // Calculate the determinant\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n        if (!det) { return false; }\n        det = 1.0 / det;\n\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n        return true;\n    }\n\n    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.Translate = function (out, a, v) {\n    static Translate(out: Matrix4, x: number, y: number, z: number) {\n        out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\n        out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\n        out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\n        out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\n    }\n    // endregion\n\n    constructor() { // Setup Identity\n        super(16); this[0] = this[5] = this[10] = this[15] = 1;\n        this.raw = Matrix4.Identity(this.raw);\n    }\n\n    // ----------------------------------------------\n    // region Methods\n\n    // vtranslate(v){Matrix4.translate(this.raw,v.x,v.y,v.z); return this; }\n\n    Translate(ary: Vec3) { Matrix4.Translate(this, ary[0], ary[1], ary[2]); return this; }\n    ResetTranslation() { this[12] = this[13] = this[14] = 0; this[15] = 1; return this; }\n\n    // reset data back to identity.\n    Reset() {\n        for (var i = 0; i <= this.length; i++) { this[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0\n        return this;\n    }\n    // copy another matrix's data to this one.\n    Copy(mat: Matrix4) {\n        for (var i = 0; i < 16; i++) { this[i] = mat[i]; }\n        return this;\n    }\n}","import { Vec3 } from './Vec3';\n\nexport class Quaternion extends Float32Array {\n    isModified: boolean;\n\n    static Multi(out: Quaternion, a: Quaternion, b: Quaternion) {\n        let ax = a[0], ay = a[1], az = a[2], aw = a[3],\n            bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n        out[0] = ax * bw + aw * bx + ay * bz - az * by;\n        out[1] = ay * bw + aw * by + az * bx - ax * bz;\n        out[2] = az * bw + aw * bz + ax * by - ay * bx;\n        out[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return out;\n    }\n    static MultiVec3(out: Vec3, q: Quaternion, v: Vec3) {\n        let ax = q[0], ay = q[1], az = q[2], aw = q[3],\n            bx = v[0], by = v[1], bz = v[2];\n\n        out[0] = ax + aw * bx + ay * bz - az * by;\n        out[1] = ay + aw * by + az * bx - ax * bz;\n        out[2] = az + aw * bz + ax * by - ay * bx;\n        return out;\n    }\n\n    static RotateVec3(qa: Quaternion, va: Vec3, out: Vec3) {\n        out = out || va;\n\n        // https://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion\n        // vprime = 2.0f * dot(u, v) * u\n        // + (s*s - dot(u, u)) * v\n        // 2.0f * s * cross(u, v);\n        let q = new Vec3(qa[0], qa[1], qa[2]),\t\t// Save the vector part of the Quaternion\n            v = new Vec3(va[0], va[1], va[2]),\t\t// Make a copy of the vector, going to chg its value\n            s = qa[3],\t\t\t\t\t\t// Save Quaternion Scalar (W)\n            d = Vec3.Dot(q, v),\t// U DOT V\n            dq = Vec3.Dot(q, q),\t// U DOT U\n            cqv = Vec3.Cross(q, v, new Vec3(0, 0, 0));\t// Cross Product for Q,V\n\n        Vec3.ScalarRev(q, 2.0 * d, q);\n        Vec3.ScalarRev(v, s * s - dq, v);\n        Vec3.ScalarRev(cqv, 2.0 * s, cqv);\n\n        out[0] = q[0] + v[0] + cqv[0];\n        out[1] = q[1] + v[1] + cqv[1];\n        out[2] = q[2] + v[2] + cqv[2];\n        return out;\n    }\n\n    // Ported to JS from C# example at https://pastebin.com/ubATCxJY\n    // Note, if Dir and Up are equal, a roll happends. Need to find a way to fix this.\n    static LookRotation(vDir: Vec3, vUp: Vec3, out: Quaternion) {\n        let zAxis = vDir.Clone();\t// Forward\n        let up = vUp.Clone();\n        let xAxis = new Vec3();\t\t// Right\n        let yAxis = new Vec3();\n\n        zAxis.Normalize();\n        Vec3.Cross(up, zAxis, xAxis);\n        xAxis.Normalize();\n        Vec3.Cross(zAxis, xAxis, yAxis); // new up\n\n        // fromAxis - Mat3 to Quaternion\n        let m00 = xAxis.x, m01 = xAxis.y, m02 = xAxis.z,\n            m10 = yAxis.x, m11 = yAxis.y, m12 = yAxis.z,\n            m20 = zAxis.x, m21 = zAxis.y, m22 = zAxis.z,\n            t = m00 + m11 + m22,\n            x, y, z, w, s;\n\n        if (t > 0.0) {\n            s = Math.sqrt(t + 1.0);\n            w = s * 0.5; // |w| >= 0.5\n            s = 0.5 / s;\n            x = (m12 - m21) * s;\n            y = (m20 - m02) * s;\n            z = (m01 - m10) * s;\n        } else if ((m00 >= m11) && (m00 >= m22)) {\n            s = Math.sqrt(1.0 + m00 - m11 - m22);\n            x = 0.5 * s; // |x| >= 0.5\n            s = 0.5 / s;\n            y = (m01 + m10) * s;\n            z = (m02 + m20) * s;\n            w = (m12 - m21) * s;\n        } else if (m11 > m22) {\n            s = Math.sqrt(1.0 + m11 - m00 - m22);\n            y = 0.5 * s; // |y| >= 0.5\n            s = 0.5 / s;\n            x = (m10 + m01) * s;\n            z = (m21 + m12) * s;\n            w = (m20 - m02) * s;\n        } else {\n            s = Math.sqrt(1.0 + m22 - m00 - m11);\n            z = 0.5 * s; // |z| >= 0.5\n            s = 0.5 / s;\n            x = (m20 + m02) * s;\n            y = (m21 + m12) * s;\n            w = (m01 - m10) * s;\n        }\n        out[0] = x;\n        out[1] = y;\n        out[2] = z;\n        out[3] = w;\n        return out;\n        /*\n        let num8 = (m00 + m11) + m22;\n        if (num8 > 0.0){\n            let num = Math.sqrt(num8 + 1.0);\n            out.w = num * 0.5;\n            num = 0.5 / num;\n            out.x = (m12 - m21) * num;\n            out.y = (m20 - m02) * num;\n            out.z = (m01 - m10) * num;\n            return out;\n        }\n\n        if((m00 >= m11) && (m00 >= m22)){\n            let num7 = Math.sqrt(1.0 + m00 - m11 - m22);\n            let num4 = 0.5 / num7;\n            out.x = 0.5 * num7;\n            out.y = (m01 + m10) * num4;\n            out.z = (m02 + m20) * num4;\n            out.w = (m12 - m21) * num4;\n            return out;\n        }\n\n        if(m11 > m22){\n            let num6 = Math.sqrt(((1.0 + m11) - m00) - m22);\n            let num3 = 0.5 / num6;\n            out.x = (m10 + m01) * num3;\n            out.y = 0.5 * num6;\n            out.z = (m21 + m12) * num3;\n            out.w = (m20 - m02) * num3;\n            return out;\n        }\n\n        let num5 = Math.sqrt(((1.0 + m22) - m00) - m11);\n        let num2 = 0.5 / num5;\n        out.x = (m20 + m02) * num2;\n        out.y = (m21 + m12) * num2;\n        out.z = 0.5 * num5;\n        out.w = (m01 - m10) * num2;\n        return out;\n        */\n    }\n\n    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/quat.js\n    static RotateX(out: Quaternion, a: Quaternion, rad: number) {\n        rad *= 0.5;\n        let ax = a[0], ay = a[1], az = a[2], aw = a[3],\n            bx = Math.sin(rad), bw = Math.cos(rad);\n\n        out[0] = ax * bw + aw * bx;\n        out[1] = ay * bw + az * bx;\n        out[2] = az * bw - ay * bx;\n        out[3] = aw * bw - ax * bx;\n        return out;\n    }\n    static RotateY(out: Quaternion, a: Quaternion, rad: number) {\n        rad *= 0.5;\n        let ax = a[0], ay = a[1], az = a[2], aw = a[3],\n            by = Math.sin(rad), bw = Math.cos(rad);\n\n        out[0] = ax * bw - az * by;\n        out[1] = ay * bw + aw * by;\n        out[2] = az * bw + ax * by;\n        out[3] = aw * bw - ay * by;\n        return out;\n    }\n    static RotateZ(out: Quaternion, a: Quaternion, rad: number) {\n        rad *= 0.5;\n        let ax = a[0], ay = a[1], az = a[2], aw = a[3],\n            bz = Math.sin(rad), bw = Math.cos(rad);\n\n        out[0] = ax * bw + ay * bz;\n        out[1] = ay * bw - ax * bz;\n        out[2] = az * bw + aw * bz;\n        out[3] = aw * bw - az * bz;\n        return out;\n    }\n    // https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js\n    static SetFromEuler(out: Quaternion, x: number, y: number, z: number, order: string) {\n        let c1 = Math.cos(x / 2),\n            c2 = Math.cos(y / 2),\n            c3 = Math.cos(z / 2),\n            s1 = Math.sin(x / 2),\n            s2 = Math.sin(y / 2),\n            s3 = Math.sin(z / 2);\n\n        switch (order) {\n            case 'XYZ':\n                out[0] = s1 * c2 * c3 + c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 - s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 + s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n            case 'YXZ':\n                out[0] = s1 * c2 * c3 + c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 - s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 - s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n            case 'ZXY':\n                out[0] = s1 * c2 * c3 - c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 + s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 + s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n            case 'ZYX':\n                out[0] = s1 * c2 * c3 - c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 + s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 - s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n            case 'YZX':\n                out[0] = s1 * c2 * c3 + c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 + s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 - s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n            case 'XZY':\n                out[0] = s1 * c2 * c3 - c1 * s2 * s3;\n                out[1] = c1 * s2 * c3 - s1 * c2 * s3;\n                out[2] = c1 * c2 * s3 + s1 * s2 * c3;\n                out[3] = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n            default:\n                return;\n        }\n    }\n    static Lerp(out: Quaternion, a: Quaternion, b: Quaternion, t: number) {\n        let ax = a[0],\n            ay = a[1],\n            az = a[2],\n            aw = a[3];\n        out[0] = ax + t * (b[0] - ax);\n        out[1] = ay + t * (b[1] - ay);\n        out[2] = az + t * (b[2] - az);\n        out[3] = aw + t * (b[3] - aw);\n\n        if (out.isModified !== undefined) { out.isModified = true; }\n        return out;\n    }\n    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/quat.js\n    static Invert(out: Quaternion, a: Quaternion) {\n        let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n        let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        let invDot = dot ? 1.0 / dot : 0;\n        // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n        out[0] = -a0 * invDot;\n        out[1] = -a1 * invDot;\n        out[2] = -a2 * invDot;\n        out[3] = a3 * invDot;\n        return out;\n    }\n    // endregion\n    constructor() {\n        super(4);\n        this[0] = this[1] = this[2] = 0;\n        this[3] = 1;\n        this.isModified = false;\n    }\n\n    // http://in2gpu.com/2016/03/14/opengl-fps-camera-quaternion/\n    // ----------------------------------------------\n    // region Setter/Getters\n    Reset() { this[0] = this[1] = this[2] = 0; this[3] = 1; this.isModified = false; return this; }\n\n    get x() { return this[0]; } set x(v: number) { this[0] = v; this.isModified = true; }\n    get y() { return this[1]; } set y(v: number) { this[1] = v; this.isModified = true; }\n    get z() { return this[2]; } set z(v: number) { this[2] = v; this.isModified = true; }\n    get w() { return this[3]; } set w(v: number) { this[3] = v; this.isModified = true; }\n\n    rx(rad: number) { Quaternion.RotateX(this, this, rad); this.isModified = true; return this; }\n    ry(rad: number) { Quaternion.RotateY(this, this, rad); this.isModified = true; return this; }\n    rz(rad: number) { Quaternion.RotateZ(this, this, rad); this.isModified = true; return this; }\n\n    SetAxisAngle(axis: Vec3, angle: number) { // AXIS MUST BE NORMALIZED.\n        let halfAngle = angle * .5;\n        let s = Math.sin(halfAngle);\n\n        this[0] = axis[0] * s;\n        this[1] = axis[1] * s;\n        this[2] = axis[2] * s;\n        this[3] = Math.cos(halfAngle);\n\n        this.isModified = true;\n        return this;\n    }\n    Copy(q: Quaternion) {\n        this[0] = q[0];\n        this[1] = q[1];\n        this[2] = q[2];\n        this[3] = q[3];\n        this.isModified = true;\n        return this;\n    }\n\n    // ex(deg){ Quaternion.rotateX(this,this,deg * DEG2RAD); this.isModified = true; return this; }\n    // ey(deg){ Quaternion.rotateY(this,this,deg * DEG2RAD); this.isModified = true; return this; }\n    // ez(deg){ Quaternion.rotateZ(this,this,deg * DEG2RAD); this.isModified = true; return this; }\n    // endregion\n\n    Normalize(out: Quaternion) {\n        let len = this[0] * this[0] + this[1] * this[1] + this[2] * this[2] + this[3] * this[3];\n        if (len > 0) {\n            len = 1 / Math.sqrt(len);\n            out = out || this;\n            out[0] = this[0] * len;\n            out[1] = this[1] * len;\n            out[2] = this[2] * len;\n            out[3] = this[3] * len;\n            if (out === this) { this.isModified = true; }\n        }\n        return this;\n    }\n}","\nexport enum GLBLENDING_FUNCTION {\n    ZERO = 0,\n    ONE = 1,\n    SRC_COLOR = 768,\n    ONE_MINUS_SRC_COLOR = 769,\n    DST_COLOR = 774,\n    ONE_MINUS_DST_COLOR = 775,\n    SRC_ALPHA = 770,\n    ONE_MINUS_SRC_ALPHA = 771,\n    DST_ALPHA = 772,\n    ONE_MINUS_DST_ALPHA = 773,\n    CONSTANT_COLOR = 32769,\n    ONE_MINUS_CONSTANT_COLOR = 32770,\n    CONSTANT_ALPHA = 32771,\n    ONE_MINUS_CONSTANT_ALPHA = 32772,\n    SRC_ALPHA_SATURATE = 776\n}\n\nexport class GLBlending {\n    static numSource: number = 0;\n    static numDestination: number = 0;\n    static glBlendingArray = [\n        'ZERO', 'ONE',\n        'SRC_COLOR', 'ONE_MINUS_SRC_COLOR',\n        'DST_COLOR', 'ONE_MINUS_DST_COLOR',\n        'SRC_ALPHA', 'ONE_MINUS_SRC_ALPHA',\n        'DST_ALPHA', 'ONE_MINUS_DST_ALPHA',\n        'CONSTANT_COLOR', 'ONE_MINUS_CONSTANT_COLOR',\n        'CONSTANT_ALPHA', 'ONE_MINUS_CONSTANT_ALPHA',\n        'SRC_ALPHA_SATURATE'\n    ];\n\n    private indexSource: number = 0;\n    private indexDestination: number = 1;\n    private glSource: number;\n    private glDestination: number;\n\n    static GLBlendingType(gl: WebGLRenderingContext, sMode: GLBLENDING_FUNCTION, dMode: GLBLENDING_FUNCTION) {\n        gl.blendFunc(sMode, dMode);\n    }\n    static GetSourceBlendingInOrder() {\n        /* */\n    }\n    static GetDestinationBlendingInOrder() {\n        /**/\n    }\n\n    constructor() {\n        this.indexSource = 6;\n        this.indexDestination = 1;\n        this.glSource = GLBLENDING_FUNCTION[GLBlending.glBlendingArray[this.indexSource]];\n        this.glDestination = GLBLENDING_FUNCTION[GLBlending.glBlendingArray[this.indexDestination]];\n        // this.GetLog();\n    }\n    ShiftSource() {\n        if (++this.indexSource === GLBlending.glBlendingArray.length) { this.indexSource = 0; }\n        this.glSource = GLBLENDING_FUNCTION[GLBlending.glBlendingArray[this.indexSource]];\n        this.GetLog();\n    }\n    ShiftDestination() {\n        if (++this.indexDestination === GLBlending.glBlendingArray.length) { this.indexDestination = 0; }\n        this.glDestination = GLBLENDING_FUNCTION[GLBlending.glBlendingArray[this.indexDestination]];\n        this.GetLog();\n    }\n    GetLog() {\n        console.log(GLBlending.glBlendingArray[this.indexSource], '|', GLBlending.glBlendingArray[this.indexDestination]);\n    }\n    UpdateBlending(gl: WebGLRenderingContext) {\n        gl.blendFunc(this.glSource, this.glDestination);\n    }\n\n}","\n// Load a text resource from a file over the network\n// import {} from '.'\n\nexport enum GL_DRAWING_TYPE {\n    POINTS, LINES,\n    LINE_LOOP, LINE_STRIP,\n    TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN\n}\n\nexport class GLCommon {\n    static ResizeCanvas(canvas: HTMLCanvasElement, multiplier: number = 1) {\n        let width = canvas.clientWidth * multiplier | 0;\n        let height = canvas.clientHeight * multiplier | 0;\n        if (canvas.width !== width || canvas.height !== height) {\n            canvas.width = width;\n            canvas.height = height;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n}\n","export enum UNIT_LENGTH {\r\n    METER = 'METER', KILOMETER = 'KILOMETER', CENTIMETER = 'CENTIMETER', MILLIMETER = 'MILLIMETER', MICROMETER = 'MICROMETER', NANOMETER = 'NANOMETER',\r\n    MILE = 'MILE', YARD = 'YARD', FOOT = 'FOOT', INCH = 'INCH'\r\n}\r\nexport enum UNIT {\r\n    METER = 'METER',\r\n    KM = 'KM',\r\n    MILE = 'MILE'\r\n}\r\nexport const shuffle = (array: any) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n};\r\nexport const random = (seed: number) => {\r\n  var mask = 0xffffffff;\r\n  var m_w  = (123456789 + seed) & mask;\r\n  var m_z  = (987654321 - seed) & mask;\r\n\r\n  return function() {\r\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\r\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\r\n\r\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\r\n    result /= 4294967296;\r\n    return result;\r\n  };\r\n};\r\nexport class MathUtility {\r\n    public static DEG2RAD = Math.PI / 180;\r\n    public static RAD2DEG = 180 / Math.PI;\r\n    public static Series(s: number = 0, e: number = 10, step: number = 1) {\r\n        let series: number[] = [];\r\n        for (let i = 0; i < e; i += step) { series.push(i); }\r\n        return series;\r\n    }\r\n    public static Range(s: number = 0, e: number = 1, rNumber: number = 10) {\r\n        let range: number[] = [];\r\n        let theStep = e / rNumber;\r\n        for (let i = 0; i < e; i += theStep) { range.push(i); }\r\n        return range;\r\n    }\r\n    public static Playground() {\r\n        // let d = this.DigitGenerator(1423);\r\n        // console.log(d);\r\n        // d = this.DigitGenerator(987);\r\n        // console.log(d);\r\n    }\r\n    public static DigitGenerator(num: number) { // 1423 + 1 + 4 + 2 + 3\r\n        let r = num;\r\n        while (num) {\r\n            r += Math.floor((num % 10));\r\n            num = Math.floor(num / 10);\r\n        }\r\n        return r;\r\n    }\r\n    // ........................................................... data\r\n    // region get ReMap Nomalize From 0.0 to 1.0\r\n    public static ReMapNomalize(CValue: number[]) {\r\n        let valueOut: number[] = [];\r\n        let domain: number[] = MathUtility.GetDomain(CValue);\r\n        for (let d of CValue) { valueOut.push(((d - domain[0]) / (domain[1] - domain[0]))); }\r\n        return valueOut;\r\n    }\r\n    // endregion get ReMap Nomalize From 0.0 to 1.0\r\n\r\n    // region get re-map\r\n    public static Remaps(CValue: number[], OldMin: number, OldMax: number, NewMin: number, NewMax: number) {\r\n        let temp: number[] = [];\r\n        for (let d of CValue) { temp.push(MathUtility.Remap(d, OldMin, OldMax, NewMin, NewMax)); }\r\n        return temp;\r\n    }\r\n    public static Remap(CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number) {\r\n        return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n    }\r\n    public static GetDomain(doubleList: number[]) {\r\n        let Min: number = Number.MAX_VALUE; let Max: number = Number.MIN_VALUE;\r\n        for (let d of doubleList) { if (Min > d) { Min = d; } if (Max < d) { Max = d; } }\r\n        return [Min, Max];\r\n    }\r\n    public static GetIndexBySort(d: number[]) {\r\n        let len = d.length;\r\n        let indices = new Array(len);\r\n        for (var i = 0; i < len; ++i) { indices[i] = i; }\r\n        indices.sort((a, b) => { return d[a] < d[b] ? -1 : d[a] > d[b] ? 1 : 0; });\r\n        return indices;\r\n    }\r\n    public static GetMaxIndex(d: number[]) {\r\n        let index = -1;\r\n        let max = Number.MIN_SAFE_INTEGER;\r\n        for (let i = 0; i < d.length; ++i) {\r\n            if (max < d[i]) { max = d[i]; index = i; }\r\n        }\r\n        return index;\r\n    }\r\n    // private static Heapify(d: number[], i: number) {\r\n    //     let c = 2 * i + 1;\r\n    //     if (c < d.length && d[c] < d[c + 1]) { c++; }\r\n    //     if (d[i] < d[c]) {\r\n    //         let temp = d[i];\r\n    //         d[i] = d[c];\r\n    //         d[c] = temp;\r\n    //     }\r\n    //     if (c <= Math.round(d.length / 2)) { this.Heapify(d, c); }\r\n    // }\r\n    public static GetRatioByWidthHidthByWidths(originWidth: number, originHeight: number, newWidth: number) {\r\n        return [newWidth, originHeight * (newWidth / originWidth)];\r\n    }\r\n    public static GetRatioByWidthHidthByHeight(originWidth: number, originHeight: number, newHeight: number) {\r\n        return [originWidth * (newHeight / originHeight), newHeight];\r\n    }\r\n    public static GetRatioByNewWidth(originWidth: number, originHeight: number, newWidth: number) {\r\n        return [newWidth, originHeight * (newWidth / originWidth)];\r\n    }\r\n    public static GetRatioByNewHeight(originWidth: number, originHeight: number, newHeight: number) {\r\n        return [originWidth * (newHeight / originHeight), newHeight];\r\n    }\r\n    public static IsContainNagativeNumber(vs: number[]) {\r\n        for (var i = 0; i < vs.length; ++i) { if (vs[i] < 0.0) { return true; } }\r\n        return false;\r\n    }\r\n    // ......................................................... geo\r\n    // #region remap geo utility\r\n    public static RemapMeterFromGPSPos(lat1: number, lon1: number, lat2: number, lon2: number) {  // generally used geo measurement function\r\n        let R = 6378.137; // Radius of earth in KM\r\n        let dLat = lat2 * Math.PI / 180 - lat1 * Math.PI / 180;\r\n        let dLon = lon2 * Math.PI / 180 - lon1 * Math.PI / 180;\r\n        let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        let d = R * c;\r\n        return d * 1000; // meters\r\n    }\r\n    public static GetKilogramFromNewton(w: number): number { return w * 0.10197162129779283; }\r\n    public static GetNewtonFromKilogram(w: number): number { return w * 9.80665; }\r\n    public static ReMapMileFromMeter(meter: number): number { return meter * 0.000621371; }\r\n    public static ReMapMeterFromMile(meter: number): number { return meter * 1609.34; }\r\n    public static ConverterUnitLength(value: number, from: UNIT_LENGTH, to: UNIT_LENGTH) {\r\n        // MathUtility.ConverterUnitLengthFromMeter\r\n        switch (from) {\r\n            case UNIT_LENGTH.NANOMETER: return value * 1000000000;\r\n            case UNIT_LENGTH.MICROMETER: return value * 1000000;\r\n            case UNIT_LENGTH.MILLIMETER: return value * 1000;\r\n            case UNIT_LENGTH.CENTIMETER: return value * 100;\r\n            case UNIT_LENGTH.METER: return value;\r\n            case UNIT_LENGTH.INCH: return value * 39.37007874;\r\n            case UNIT_LENGTH.FOOT: return value * 3.280839895;\r\n            case UNIT_LENGTH.YARD: return value * 1.0936132983;\r\n            case UNIT_LENGTH.MILE: return value * 0.0006213689;\r\n            case UNIT_LENGTH.KILOMETER: return value * 0.001;\r\n            default: return value;\r\n        }\r\n    }\r\n    public static ConverterUnitLengthFromMeter(value: number, unitLength: UNIT_LENGTH) {\r\n        switch (unitLength) {\r\n            case UNIT_LENGTH.NANOMETER: return value * 1000000000;\r\n            case UNIT_LENGTH.MICROMETER: return value * 1000000;\r\n            case UNIT_LENGTH.MILLIMETER: return value * 1000;\r\n            case UNIT_LENGTH.CENTIMETER: return value * 100;\r\n            case UNIT_LENGTH.METER: return value;\r\n            case UNIT_LENGTH.INCH: return value * 39.37007874;\r\n            case UNIT_LENGTH.FOOT: return value * 3.280839895;\r\n            case UNIT_LENGTH.YARD: return value * 1.0936132983;\r\n            case UNIT_LENGTH.MILE: return value * 0.0006213689;\r\n            case UNIT_LENGTH.KILOMETER: return value * 0.001;\r\n            default: return value;\r\n        }\r\n    }\r\n\r\n    public static MilesFromMeters(m: number) {\r\n        return m * 0.00062137;\r\n    }\r\n    public static MilesFromKM(m: number) {\r\n        return m * 0.62137119;\r\n    }\r\n    // ........................................................... geometry\r\n    public static Radians(degrees: number): number {\r\n        return (degrees * (3.14159265358979 / 180.0)); // myDegree *=  3.141592 / 180 // degrees to radians\r\n    }\r\n\r\n    public static Degrees(radians: number): number {\r\n        return (radians * (180.0 / 3.14159265358979));  // myRadian *= 180 / 3.141592 //  radian to degrees\r\n    }\r\n    // ........................................................... random\r\n    public static GetRandom() {\r\n        return Math.random();\r\n    }\r\n    public static GetRandomArbitrary(min: number, max: number) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    public static GetRandomInt(min: number, max: number) {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n    public static GetRandomIntFromRenage(range: number) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n    public static GetRandomIntsInclusive(min: number, max: number, total: number) {\r\n        let out = [];\r\n        for (let i = 0; i < total; ++i) {\r\n            out.push(this.GetRandomIntInclusive(min, max));\r\n        }\r\n        return out;\r\n    }\r\n    public static GetRandomIntInclusive(min: number, max: number) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    public static GetRandomItemWithStringList(array: string[]) {\r\n        return array[Math.floor(Math.random() * array.length)];\r\n    }\r\n    public static GetUUID() {   // reference : https://jsfiddle.net/briguy37/2MVFd/\r\n        let d = new Date().getTime();\r\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c: string) {\r\n            // eslint-disable-next-line\r\n            let r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            // eslint-disable-next-line\r\n            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n    // static GetUUID() {\r\n    //   function s4() {\r\n    //     return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    //   }\r\n    //   return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n    //     s4() + '-' + s4() + s4() + s4();\r\n    // }\r\n\r\n    // reference https://github.com/sketchpunk/FunWithWebGL2\r\n    public static Clamp(v: number, min: number, max: number) { return Math.max(min, Math.min(max, v)); }\r\n    public static SmoothStep(edge1: number, edge2: number, val: number) { // https://en.wikipedia.org/wiki/Smoothstep\r\n        var x = Math.max(0, Math.min(1, (val - edge1) / (edge2 - edge1)));\r\n        return x * x * (3 - 2 * x);\r\n    }\r\n    // Get a number between A and B from a normalized number.\r\n    public static Lerp(a: number, b: number, t: number) { return a + t * (b - a); }\r\n\r\n    // From a point in space, closest spot to a 2D line\r\n    public static ClosestPointToLine2D(x0: number, y0: number, x1: number, y1: number, px: number, py: number) {\r\n        var dx = x1 - x0,\r\n            dy = y1 - y0,\r\n            t = ((px - x0) * dx + (py - y0) * dy) / (dx * dx + dy * dy),\r\n            x = x0 + (dx * t), // Util.lerp(x0, x1, t),\r\n            y = y0 + (dy * t); // Util.lerp(y0, y1, t);\r\n        return [x, y];\r\n    }\r\n\r\n    //  // Return back the two points that are closes on two infinite lines\r\n    // // http://geomalgorithms.com/a07-_distance.html\r\n    // static closestpoint_2Lines(A0:Vec3, A1:Vec3, B0:Vec3, B1:Vec3) {\r\n    //     var u = A1.Clone().Sub(A0),\r\n    //         v = B1.Clone().Sub(B0),\r\n    //         w = A0.Clone().Sub(B0),\r\n    //         a = Vec3.dot(u, u),         // always >= 0\r\n    //         b = Vec3.dot(u, v),\r\n    //         c = Vec3.dot(v, v),         // always >= 0\r\n    //         d = Vec3.dot(u, w),\r\n    //         e = Vec3.dot(v, w),\r\n    //         D = a * c - b * b,        // always >= 0\r\n    //         tU, tV;\r\n    //     //compute the line parameters of the two closest points\r\n    //     if (D < 0.000001) {\t// the lines are almost parallel\r\n    //         tU = 0.0;\r\n    //         tV = (b > c ? d / b : e / c);    // use the largest denominator\r\n    //     } else {\r\n    //         tU = (b * e - c * d) / D;\r\n    //         tV = (a * e - b * d) / D;\r\n    //     }\r\n\r\n    //     //Calc Length\r\n    //     //Vector   vLen = w + (uT * u) - (vT * v);  // =  L1(sc) - L2(tc)\r\n    //     //Float len = sqrt( dot(vLen,vLen) );\r\n\r\n    //     return [u.scale(tU).add(A0), v.scale(tV).add(B0)];\r\n    // }\r\n\r\n    // http://hevi.info/do-it-yourself/interpolating-and-array-to-fit-another-size/\r\n    public static LinearInterpolate(before: number, after: number, atPoint: number) {\r\n        return before + (after - before) * atPoint;\r\n    }\r\n    public static GetInterpolatedArray(data: number[], fitCount: number) {\r\n        let newData = new Array();\r\n        let springFactor = (data.length - 1) / (fitCount - 1);\r\n        newData[0] = data[0]; // for new allocation\r\n        for (let i = 1; i < fitCount - 1; i++) {\r\n            let tmp: number = i * springFactor;\r\n            let before: number = +(Math.floor(tmp)).toFixed();\r\n            let after: number = +(Math.ceil(tmp)).toFixed();\r\n            let atPoint: number = tmp - before;\r\n            newData[i] = this.LinearInterpolate(data[before], data[after], atPoint);\r\n        }\r\n        newData[fitCount - 1] = data[data.length - 1]; // for new allocation\r\n        return newData;\r\n    }\r\n    // // Return back the two points that are the closests but bound by the limit of two segments\r\n    // // http://geomalgorithms.com/a07-_distance.html\r\n    // static closestPointS_2Segments(A0, A1, B0, B1) {\r\n    //     var u = A1.clone().sub(A0),\r\n    //         v = B1.clone().sub(B0),\r\n    //         w = A0.clone().sub(B0),\r\n    //         a = Vec3.dot(u, u),         // always >= 0\r\n    //         b = Vec3.dot(u, v),\r\n    //         c = Vec3.dot(v, v),         // always >= 0\r\n    //         d = Vec3.dot(u, w),\r\n    //         e = Vec3.dot(v, w),\r\n    //         D = a * c - b * b,        // always >= 0\r\n    //         sc, sN, sD = D,       // sc = sN / sD, default sD = D >= 0\r\n    //         tc, tN, tD = D;       // tc = tN / tD, default tD = D >= 0\r\n\r\n    //     // compute the line parameters of the two closest points\r\n    //     if (D < 0.000001) { // the lines are almost parallel\r\n    //         sN = 0.0;         // force using point P0 on segment S1\r\n    //         sD = 1.0;         // to prevent possible division by 0.0 later\r\n    //         tN = e;\r\n    //         tD = c;\r\n    //     } else {                 // get the closest points on the infinite lines\r\n    //         sN = (b * e - c * d);\r\n    //         tN = (a * e - b * d);\r\n    //         if (sN < 0.0) {        // sc < 0 => the s=0 edge is visible\r\n    //             sN = 0.0;\r\n    //             tN = e;\r\n    //             tD = c;\r\n    //         } else if (sN > sD) {  // sc > 1  => the s=1 edge is visible\r\n    //             sN = sD;\r\n    //             tN = e + b;\r\n    //             tD = c;\r\n    //         }\r\n    //     }\r\n\r\n    //     if (tN < 0.0) { // tc < 0 => the t=0 edge is visible\r\n    //         tN = 0.0;\r\n    //         // recompute sc for this edge\r\n    //         if (-d < 0.0) sN = 0.0;\r\n    //         else if (-d > a) sN = sD;\r\n    //         else {\r\n    //             sN = -d;\r\n    //             sD = a;\r\n    //         }\r\n    //     } else if (tN > tD) { // tc > 1  => the t=1 edge is visible\r\n    //         tN = tD;\r\n    //         // recompute sc for this edge\r\n    //         if ((-d + b) < 0.0) sN = 0;\r\n    //         else if ((-d + b) > a) sN = sD;\r\n    //         else {\r\n    //             sN = (-d + b);\r\n    //             sD = a;\r\n    //         }\r\n    //     }\r\n\r\n    //     // finally do the division to get sc and tc\r\n    //     sc = (Math.abs(sN) < 0.000001 ? 0.0 : sN / sD);\r\n    //     tc = (Math.abs(tN) < 0.000001 ? 0.0 : tN / tD);\r\n\r\n    //     // get the difference of the two closest points\r\n    //     //Vector   dP = w + (sc * u) - (tc * v);  // =  S1(sc) - S2(tc)\r\n\r\n    //     return [u.scale(sc).add(A0), v.scale(tc).add(B0)];\r\n    // }\r\n\r\n    //     public static GetGeoProjectedPtOnSurface(Surface s, List<Point3d> pts)\r\n    // {\r\n    //     List < Point3d > outPts = new List<Point3d>();\r\n    //     Interval domainU = s.Domain(0);\r\n    //     Interval domainV = s.Domain(1);\r\n\r\n    //     foreach(Point3d p in pts)\r\n    //     {\r\n\r\n    //         double theLong = RemapLongToSurface(p.X, domainU.Min, domainU.Max);\r\n    //         double theLat = RemapLatToSurface(p.Y, domainV.Min, domainV.Max);\r\n\r\n    //         Point3d ppp = s.PointAt(theLong, theLat);\r\n\r\n    //         outPts.Add(ppp);\r\n    //     }\r\n    //     return outPts;\r\n    // }\r\n    public static RemapLongToSurface(CValue: number, min: number, max: number) { return (((CValue - (-180)) * (max - min)) / (180 - (-180)) + min); }\r\n    public static RemapLatToSurface(CValue: number, min: number, max: number) { return (((CValue - (-90)) * (max - min)) / (90 - (-90)) + min); }\r\n    public static RemapLongToSurfaceNormal(CValue: number) { return ((CValue - (-180)) * (1.0 - 0)) / (180 - (-180)); } // 0 to 1\r\n    public static RemapLatToSurfaceNormal(CValue: number) { return ((CValue - (-90)) * (1.0 - 0)) / (90 - (-90)); } // 0 to 1\r\n    public static RemapLong(CValue: number) { return (CValue + 180) * Math.PI * 2 / 360 * -1; } // -1 for reversing direction\r\n    public static RemapLat(CValue: number) { return (CValue + 90) * Math.PI / 180; }\r\n    // public static double RemapLong(double CValue, double OldMin = 0 , double OldMax = 180, double NewMin=0, double NewMax=3.14 * 2)\r\n    // {\r\n    //   double Nvalue = (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n    //   return Nvalue;\r\n    // }\r\n    // public static double RemapLat(double CValue, double OldMin = 90 , double OldMax = -90, double NewMin=-0, double NewMax=3.14)\r\n    // {\r\n    //   double Nvalue = (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n    //   return Nvalue;\r\n    // }\r\n    // static RemapLong(CValue: number) { return CValue * Math.PI * 2 / 180; }\r\n    // static Remap(CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number) {\r\n    //     return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n    // }\r\n    // .. circle\r\n    public static GetRadiusByArea(area: number) { return Math.sqrt(area / Math.PI); }\r\n    public static GetRadiusByCircumference(circumference: number) { return circumference / Math.PI * 0.5; }\r\n\r\n}\r\n\r\n// // Copyright(C) 2015 NJ Namju Lee <nj.namju@gmail.com>\r\n\r\n// namespace NJS {\r\n//     public class NMath {\r\n\r\n//         public static number CalculateFalloff(List < NVector3 > pts, NVector3 pt, number s, number f)\r\n//         {\r\n//         number newValue = 0.0;\r\n//         foreach(NVector3 p in pts)\r\n//         {\r\n//             number v = NJS.PointUtils.CalculateFalloff(pt, p, s, f);\r\n//             newValue += v;\r\n//         }\r\n//         return newValue;\r\n//     }\r\n//         public static public number GetDegreeFromDotProduct(Vector3d v0, Vector3d v1)\r\n//     {\r\n//         return Degrees(Math.Acos(GetDotProduct(v0, v1) / v0.Length * v1.Length));\r\n//     }\r\n//         public static public number GetDotProduct(Vector3d v0, Vector3d v1)\r\n//     {\r\n//         return v0.X * v1.X + v0.Y * v1.Y + v0.Z * v1.Z;\r\n//     }\r\n\r\n//     #region get min max domain\r\n\r\n//         public static List < number > GetDomain(List < number > numberList)\r\n//     {\r\n\r\n//         List < number > domain = new List<number>();\r\n//         number Min = number.MaxValue;\r\n//         number Max = number.MinValue;\r\n\r\n//         foreach(number d in numberList)\r\n//         {\r\n//             if (Min > d) {\r\n//                 Min = d;\r\n//             }\r\n//             if (Max < d) {\r\n//                 Max = d;\r\n//             }\r\n//         }\r\n//         domain.push(Min);\r\n//         domain.push(Max);\r\n//         return domain;\r\n//     }\r\n\r\n//         public static List < float > GetDomain(List < float > numberList)\r\n//     {\r\n\r\n//         List < float > domain = new List<float>();\r\n//         float Min = 1000000000.0f;\r\n//         float Max = -100000000.0f;\r\n\r\n//         foreach(float d in numberList)\r\n//         {\r\n//             if (Min > d) {\r\n//                 Min = d;\r\n//             }\r\n//             if (Max < d) {\r\n//                 Max = d;\r\n//             }\r\n//         }\r\n//         domain.push(Min);\r\n//         domain.push(Max);\r\n//         return domain;\r\n//     }\r\n//         public static List < int > GetDomain(List < int > intList)\r\n//     {\r\n\r\n//         List < int > domain = new List<int>();\r\n//         int Min = int.MaxValue;\r\n//         int Max = int.MinValue;\r\n\r\n//         foreach(int d in intList)\r\n//         {\r\n//             if (Min > d) {\r\n//                 Min = d;\r\n//             }\r\n//             if (Max < d) {\r\n//                 Max = d;\r\n//             }\r\n//         }\r\n//         domain.push(Min);\r\n//         domain.push(Max);\r\n//         return domain;\r\n//     }\r\n//     #endregion get min max domain\r\n\r\n//     #region Panel control\r\n//         public static number GetMinMaxValue(number value, number minTarget, number maxTarget)\r\n//     {\r\n\r\n//         if (value <= minTarget) {\r\n//             value = minTarget;\r\n//         }\r\n//         else if (maxTarget <= value) {\r\n//             value = maxTarget;\r\n//         }\r\n//         return value;\r\n//     }\r\n\r\n//     #endregion Panel control\r\n\r\n//         public static Mesh GetCrackingMesh(Mesh m, NVector3 pt, number a, int iter)\r\n//     {\r\n\r\n//         //index variable used in order to step through the faces\r\n//         int i = 0;\r\n//         int j = 0;\r\n\r\n//         //that's the output mesh on which we'll be adding all new replacement meshes we will create\r\n//         Mesh compositemesh = new Mesh();\r\n\r\n//         //these 4 points will be used to store the coordinates of the vertices around each face\r\n//         NVector3 p1 = new NVector3();\r\n//         NVector3 p2 = new NVector3();\r\n//         NVector3 p3 = new NVector3();\r\n//         NVector3 p4 = new NVector3();\r\n\r\n//         //temporary variables that store the indices of the 4 vertices around each face\r\n//         int v1 = 0;\r\n//         int v2 = 0;\r\n//         int v3 = 0;\r\n//         int v4 = 0;\r\n\r\n//         Mesh tm = m.DuplicateMesh();// new Mesh(m);\r\n//         Mesh tm2 = new Mesh();\r\n//         for (j = 0; j < iter; j++) {\r\n//             //Loop that steps through all the faces in the mesh m\r\n//             //the faces are stored in a list called m_F\r\n//             //The function Count() tells us how many faces are in the list m.m_F\r\n\r\n//             tm2 = new Mesh();\r\n//             for (i = 0; i < tm.Faces.Count; i++) {\r\n//                 //check if the current face m.m_F[i] is a quad [that is, it has 4 vertices]\r\n//                 //if it is do whateer in the curly brackets, else do whatever is contained in the else curly brackets\r\n//                 if (tm.Faces[i].IsQuad) {\r\n//                     //Create a temporary mesh object that will hold a copy of the mesh that we\r\n//                     //will be creating as replacement for the quad face m.m_F[i]\r\n//                     Mesh fmesh = new Mesh();//4, 5, false, false);\r\n\r\n//                     //Set the coordinates of the 4 points p1,p2,p3,p4 to the coordinates of the vertices around face m_F[i]\r\n//                     //m_V is the list of vertices of the mesh m\r\n//                     //get_vi(0) is called on the current mesh face m.m_F[i] o return the index of the first [0th] vertex of the face\r\n//                     //the index is used to get the actual point location from the vertex list m_V\r\n\r\n//                     v1 = tm.Faces[i].A;\r\n//                     v2 = tm.Faces[i].B;\r\n//                     v3 = tm.Faces[i].C;\r\n//                     v4 = tm.Faces[i].D;\r\n\r\n//                     p1 = new NVector3(tm.Vertices[v1]);\r\n//                     p2 = new NVector3(tm.Vertices[v2]);\r\n//                     p3 = new NVector3(tm.Vertices[v3]);\r\n//                     p4 = new NVector3(tm.Vertices[v4]);\r\n\r\n//                     //Face normal\r\n//                     Vector3d fn = Vector3d.CrossProduct(p3 - p1, p4 - p2);\r\n//                     fn.Unitize();\r\n\r\n//                     NVector3 fc = (p1 + p2 + p3 + p4) * 0.25;\r\n//                     //  if (fn * (pt - fc) > 0.0) {\r\n//                     //Set the vertices of the new mesh to the loations of the vertices of face F[i]\r\n//                     fmesh.Vertices.SetVertex(0, p1);\r\n//                     fmesh.Vertices.SetVertex(1, p2);\r\n//                     fmesh.Vertices.SetVertex(2, p3);\r\n//                     fmesh.Vertices.SetVertex(3, p4);\r\n//                     fmesh.Vertices.SetVertex(4, fc + fn * a);\r\n\r\n//                     //Construct the new triangles\r\n//                     fmesh.Faces.SetFace(0, 4, 0, 1);\r\n//                     fmesh.Faces.SetFace(1, 4, 1, 2);\r\n//                     fmesh.Faces.SetFace(2, 4, 2, 3);\r\n//                     fmesh.Faces.SetFace(3, 4, 3, 0);\r\n\r\n//                     //Append the newly constructed mesh to the composite output mesh\r\n//                     tm2.Append(fmesh);\r\n//                     // }\r\n//                 }\r\n//                 else {\r\n//                     //Create a temporary mesh object that will hold a copy of the mesh that we\r\n//                     //will be creating as replacement for the quad face m.m_F[i]\r\n//                     Mesh fmesh = new Mesh();//3, 4, false, false);\r\n\r\n//                     //Set the coordinates of the 4 points p1,p2,p3,p4 to the coordinates of the vertices around face m_F[i]\r\n//                     //m_V is the list of vertices of the mesh m\r\n//                     //get_vi(0) is called on the current mesh face m.m_F[i] o return the index of the first [0th] vertex of the face\r\n//                     //the index is used to get the actual point location from the vertex list m_V\r\n\r\n//                     v1 = tm.Faces[i].A;\r\n//                     v2 = tm.Faces[i].B;\r\n//                     v3 = tm.Faces[i].C;\r\n\r\n//                     p1 = new NVector3(tm.Vertices[v1]);\r\n//                     p2 = new NVector3(tm.Vertices[v2]);\r\n//                     p3 = new NVector3(tm.Vertices[v3]);\r\n\r\n//                     //Face normal\r\n//                     Vector3d fn = Vector3d.CrossProduct(p3 - p1, p4 - p2);\r\n//                     fn.Unitize();\r\n\r\n//                     NVector3 fc = (p1 + p2 + p3) / 3.0;\r\n//                     //  if (fn * (pt - fc) > 0.0) {\r\n//                     //Set the vertices of the new mesh to the loations of the vertices of face F[i]\r\n//                     fmesh.Vertices.SetVertex(0, p1);\r\n//                     fmesh.Vertices.SetVertex(1, p2);\r\n//                     fmesh.Vertices.SetVertex(2, p3);\r\n//                     fmesh.Vertices.SetVertex(3, fc + fn * a);\r\n\r\n//                     //Construct the new triangles\r\n//                     fmesh.Faces.SetFace(0, 3, 0, 1);\r\n//                     fmesh.Faces.SetFace(1, 3, 1, 2);\r\n//                     fmesh.Faces.SetFace(2, 3, 2, 0);\r\n\r\n//                     //Append the newly constructed mesh to the composite output mesh\r\n//                     tm2.Append(fmesh);\r\n//                     // }\r\n//                 }\r\n//             }\r\n\r\n//             tm = tm2;\r\n//         }\r\n\r\n//         compositemesh.Append(tm2);\r\n\r\n//         compositemesh.FaceNormals.ComputeFaceNormals();\r\n//         compositemesh.Normals.ComputeNormals();\r\n//         return compositemesh;\r\n//     }\r\n\r\n//         private static Mesh GetMeshColorFromNormalBW(Mesh m, number f, NVector3 p, ref object A)\r\n//     {\r\n//         int i;\r\n//         m.VertexColors.Clear();\r\n//         for (i = 0; i < m.Vertices.Count; ++i) {\r\n//             NVector3 pp = new NVector3(m.Vertices[i]);\r\n//             Vector3d n = new Vector3d(m.Normals[i]);\r\n//             Vector3d dv = p - pp;\r\n//             dv.Unitize();\r\n\r\n//             number d = dv * n;//Math.Cos(dv * n * f);\r\n//             d = Math.Pow(d * d, f);\r\n\r\n//             int dd = (int)(d * 255.0);\r\n//             if (dd < 0) dd = 0;\r\n//             else if (dd > 255) dd = 255;\r\n//             m.VertexColors.push(Color.FromArgb(255, dd, dd, dd));\r\n//         }\r\n//         return m;\r\n//     }\r\n\r\n//         private static Mesh GetMeshColorFromNormalRGB(Mesh m, number f, NVector3 p)\r\n//     {\r\n//         int i;\r\n//         m.VertexColors.Clear();\r\n//         for (i = 0; i < m.Vertices.Count; ++i) {\r\n//             NVector3 pp = new NVector3(m.Vertices[i]);\r\n//             Vector3d n = new Vector3d(m.Normals[i]);\r\n//             Vector3d dv = p - pp;\r\n//             dv.Unitize();\r\n\r\n//             number dr = (1.0 + n.X) * 0.5;\r\n//             number dg = (1.0 + n.Y) * 0.5;\r\n//             number db = (1.0 + n.Z) * 0.5;\r\n\r\n//             int ddr = (int)(dr * 255.0);\r\n//             if (ddr < 0) ddr = 0;\r\n//             else if (ddr > 255) ddr = 255;\r\n\r\n//             int ddg = (int)(dg * 255.0);\r\n//             if (ddg < 0) ddg = 0;\r\n//             else if (ddg > 255) ddg = 255;\r\n\r\n//             int ddb = (int)(db * 255.0);\r\n//             if (ddb < 0) ddb = 0;\r\n//             else if (ddb > 255) ddb = 255;\r\n//             m.VertexColors.push(Color.FromArgb(255, ddr, ddg, ddb));\r\n//         }\r\n//         return m;\r\n//     }\r\n\r\n//     #region GetNextUVfromTwoPoints\r\n//         public static public List < int > GetNextUVfromTwoPoints(NVector3 orginPt, NVector3 targetPt)\r\n//     {\r\n//         List < int > uvTemp = new List<int>();\r\n//         number de = NJS.PointUtils.GetDegreeBetweenPoints(orginPt, targetPt);\r\n//         number angle = NJS.NMath.Degrees(de);\r\n//         int u = 0;\r\n//         int v = 0;\r\n//         if (-22.5 <= angle && angle <= 22.5) {\r\n//             u = 1; v = 0;\r\n//         }\r\n//         else if (22.5 <= angle && angle <= 67.5) {\r\n//             u = 1; v = 1;\r\n//         }\r\n//         else if (67.5 <= angle && angle <= 112.5) {\r\n//             u = 0; v = 1;\r\n//         }\r\n//         else if (112.5 <= angle && angle <= 157.5) {\r\n//             u = -1; v = 1;\r\n//         }\r\n//         else if ((157.5 <= angle && angle <= 180) || (angle <= -157.5 && -180 <= angle)) {\r\n//             u = -1; v = 0;\r\n//         }\r\n//         else if (angle <= -22.5 && -67.5 <= angle) {\r\n//             u = 1; v = -1;\r\n//         }\r\n//         else if (angle <= -67.5 && -112.5 <= angle) {\r\n//             u = 0; v = -1;\r\n//         }\r\n//         else if (angle <= -112.5 && -157.5 <= angle) {\r\n//             u = -1; v = -1;\r\n//         }\r\n//         uvTemp.push(u);\r\n//         uvTemp.push(v);\r\n//         return uvTemp;\r\n//     }\r\n\r\n//         public static public List < int > GetNextUVfromDegrre(number degree)\r\n//     {\r\n//         List < int > uvTemp = new List<int>();\r\n//         number angle = degree;\r\n//         int u = 0;\r\n//         int v = 0;\r\n//         if (-22.5 <= angle && angle <= 22.5) {\r\n//             u = 1; v = 0;\r\n//         }\r\n//         else if (22.5 <= angle && angle <= 67.5) {\r\n//             u = 1; v = 1;\r\n//         }\r\n//         else if (67.5 <= angle && angle <= 112.5) {\r\n//             u = 0; v = 1;\r\n//         }\r\n//         else if (112.5 <= angle && angle <= 157.5) {\r\n//             u = -1; v = 1;\r\n//         }\r\n//         else if ((157.5 <= angle && angle <= 180) || (angle <= -157.5 && -180 <= angle)) {\r\n//             u = -1; v = 0;\r\n//         }\r\n//         else if (angle <= -22.5 && -67.5 <= angle) {\r\n//             u = 1; v = -1;\r\n//         }\r\n//         else if (angle <= -67.5 && -112.5 <= angle) {\r\n//             u = 0; v = -1;\r\n//         }\r\n//         else if (angle <= -112.5 && -157.5 <= angle) {\r\n//             u = -1; v = -1;\r\n//         }\r\n//         uvTemp.push(u);\r\n//         uvTemp.push(v);\r\n//         return uvTemp;\r\n//     }\r\n//     #endregion GetNextUVfromTwoPoints\r\n\r\n//         //GetSlicedMesh\r\n//         public static public void GetSlicedMesh(Mesh mesh, List < Mesh > cuttingmeshes, out List < Mesh > slicedmeshesout)\r\n//     {\r\n\r\n//         IEnumerable < Mesh > slicedmeshes = new List<Mesh>();\r\n//         slicedmeshes = mesh.Split(cuttingmeshes);\r\n//         slicedmeshesout = slicedmeshes.ToList();\r\n\r\n//     }\r\n\r\n//         //PROJECT MESH ON PLANES\r\n//         public static public void GetProjectedMesh(List < Mesh > facadecuttingmeshes, out List < Mesh > projectedmeshesout)\r\n//     {\r\n//         Plane groundplane = new Plane(NVector3.Origin, Vector3d.ZAxis);\r\n//         List < Mesh > projectedmeshes = new List<Mesh>();\r\n//         for (int i = 0; i < facadecuttingmeshes.Count; i++)\r\n//         {\r\n//             Mesh facadecuttingmeshi = facadecuttingmeshes[i];\r\n//             facadecuttingmeshi.Transform(Transform.PlanarProjection(groundplane));\r\n//             projectedmeshes.push(facadecuttingmeshi);\r\n//         }\r\n\r\n//         projectedmeshesout = projectedmeshes;\r\n//     }\r\n\r\n//         ///................................................ shffle array or list start\r\n//         public static T[] ShuffleArray<T>(T[] arr) {\r\n//         Random rnd = new Random();\r\n//         T[] outTemp = new T[arr.Length];\r\n//         for (int i = arr.Length - 1; i > 0; i--) {\r\n//             int r = rnd.Next(0, i);\r\n//             T tmp = arr[i];\r\n//             arr[i] = arr[r];\r\n//             arr[r] = tmp;\r\n//         }\r\n//         for (int i = 0; i < arr.Length; ++i) {\r\n//             outTemp[i] = arr[rnd.Next(0, arr.Length)];\r\n//         }\r\n//         return outTemp;\r\n//     }\r\n//         public static List < T > ShuffleList<T>(List < T > arr) {\r\n//         Random rnd = new Random();\r\n//         List < T > outTemp = new List<T>(arr.Count);\r\n//         for (int i = arr.Count - 1; i > 0; i--) {\r\n//             int r = rnd.Next(0, i);\r\n//             T tmp = arr[i];\r\n//             arr[i] = arr[r];\r\n//             arr[r] = tmp;\r\n//         }\r\n//         for (int i = 0; i < arr.Count; ++i) {\r\n//             outTemp[i] = arr[rnd.Next(0, arr.Count)];\r\n//         }\r\n//         return outTemp;\r\n//     }\r\n//         ///................................................ shffle array or list end\r\n\r\n//         public int GetUVfromNumberByRoot(int num)\r\n//     {\r\n//         int n = (int)Math.Ceiling(Math.Sqrt(num));\r\n//         return n;\r\n//     }\r\n\r\n//\r\n\r\n//     //............................................................................ blender\r\n\r\n// }\r\n// }","import { GeometryBase } from './Base/AbstractGeometryBase';\r\nimport { NVector3 } from './NVector3';\r\nimport { MathUtility } from '../../NUtility/Math/MathUtility';\r\n// import { Point } from './Point';\r\nexport class NLine extends GeometryBase {\r\n    p0: NVector3;\r\n    p1: NVector3;\r\n    public static GetLineFromVecs(vs: NVector3[]) {\r\n        let lns: NLine[] = [];\r\n        for (let i = 0; i < vs.length; ++i) {\r\n            if (i === vs.length - 1) {\r\n                lns.push(new NLine(vs[i], vs[0]));\r\n            } else { lns.push(new NLine(vs[i], vs[i + 1])); }\r\n        }\r\n        return lns;\r\n    }\r\n    public static GetUnOverlapWithLines(ln: NLine[], others: NLine[]) {\r\n        let index = [];\r\n        let newLns = [];\r\n        for (let i = 0; i < ln.length; ++i) {\r\n            index.push(false);\r\n            for (let j = 0; j < others.length; ++j) {\r\n                if (NLine.IsOverlap(ln[i], others[j])) {\r\n                    index[i] = true;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < index.length; ++i) {\r\n            if (!index[i]) { newLns.push(ln[i]); }\r\n        }\r\n        return newLns;\r\n    }\r\n    public static IsOverlap(ln: NLine, other: NLine): boolean {\r\n        if (ln.p0.IsOverlap(other.p0) && ln.p1.IsOverlap(other.p1)) {\r\n            return true;\r\n        } else if (ln.p0.IsOverlap(other.p1) && ln.p1.IsOverlap(other.p0)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public static RemoveOverlapWithLines(lns: NLine[]) {\r\n        let index = [];\r\n        let nLns = [];\r\n        for (let i = 0; i < lns.length; ++i) {\r\n            let over = false;\r\n            index.push(0);\r\n            for (let j = i + 1; j < lns.length; ++j) {\r\n                over = NLine.IsOverlap(lns[i], lns[j]);\r\n                if (over) { index[i]++; }\r\n            }\r\n        }\r\n        for (let i = 0; i < index.length; ++i) {\r\n            if (index[i] === 0) { { nLns.push(lns[i]); } }\r\n        }\r\n        return nLns;\r\n    }\r\n    constructor(p0: NVector3, p1: NVector3) {\r\n        super();\r\n        this.p0 = p0; this.p1 = p1;\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D): void {\r\n        ctx.lineWidth = 0.5;\r\n        ctx.strokeStyle = 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.p0.x, this.p0.y);\r\n        ctx.lineTo(this.p1.x, this.p1.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    public DistanceToPoint(p: NVector3) {\r\n        // slope\r\n        let m = (this.p1.y - this.p0.y) / (this.p1.x - this.p0.x),\r\n            // y offset\r\n            b = this.p0.y - (m * this.p0.x),\r\n            d = [];\r\n        // distance to the linear equation\r\n        d.push(Math.abs(p.y - (m * p.x) - b) / Math.sqrt(Math.pow(m, 2) + 1));\r\n        // distance to p0\r\n        d.push(Math.sqrt(Math.pow((p.x - this.p0.x), 2) + Math.pow((p.y - this.p0.y), 2)));\r\n        // distance to p1\r\n        d.push(Math.sqrt(Math.pow((p.x - this.p1.x), 2) + Math.pow((p.y - this.p1.y), 2)));\r\n        // return the smallest distance\r\n        return d.sort((aa, bb) => { return (aa - bb); })[0]; // causes an array to be sorted numerically and ascending;\r\n    }\r\n    public PointCloseToLine(p: NVector3) {\r\n        let dx = this.p1.x - this.p0.x,\r\n            dy = this.p1.y - this.p0.y,\r\n            t = ((p.x - this.p0.x) * dx + (p.y - this.p0.y) * dy) / (dx * dx + dy * dy),\r\n            x = MathUtility.Lerp(this.p0.x, this.p1.x, t),\r\n            y = MathUtility.Lerp(this.p0.y, this.p1.y, t);\r\n        return [x, y];\r\n    }\r\n    public GetLog(): string {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public IsMouseInside(x: number, y: number): boolean {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Translate(x: number, y: number): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Move(x: number, y: number): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Remove(): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    Hide(): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}","import { GeometryBase } from './Base/AbstractGeometryBase';\r\nimport { NVector3 } from './NVector3';\r\nimport { MathUtility } from '../../NUtility/Math/MathUtility';\r\n// import { Point } from './Point';\r\nexport class NLine extends GeometryBase {\r\n    p0: NVector3;\r\n    p1: NVector3;\r\n    public static GetLineFromVecs(vs: NVector3[]) {\r\n        let lns: NLine[] = [];\r\n        for (let i = 0; i < vs.length; ++i) {\r\n            if (i === vs.length - 1) {\r\n                lns.push(new NLine(vs[i], vs[0]));\r\n            } else { lns.push(new NLine(vs[i], vs[i + 1])); }\r\n        }\r\n        return lns;\r\n    }\r\n    public static GetUnOverlapWithLines(ln: NLine[], others: NLine[]) {\r\n        let index = [];\r\n        let newLns = [];\r\n        for (let i = 0; i < ln.length; ++i) {\r\n            index.push(false);\r\n            for (let j = 0; j < others.length; ++j) {\r\n                if (NLine.IsOverlap(ln[i], others[j])) {\r\n                    index[i] = true;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < index.length; ++i) {\r\n            if (!index[i]) { newLns.push(ln[i]); }\r\n        }\r\n        return newLns;\r\n    }\r\n    public static IsOverlap(ln: NLine, other: NLine): boolean {\r\n        if (ln.p0.IsOverlap(other.p0) && ln.p1.IsOverlap(other.p1)) {\r\n            return true;\r\n        } else if (ln.p0.IsOverlap(other.p1) && ln.p1.IsOverlap(other.p0)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public static RemoveOverlapWithLines(lns: NLine[]) {\r\n        let index = [];\r\n        let nLns = [];\r\n        for (let i = 0; i < lns.length; ++i) {\r\n            let over = false;\r\n            index.push(0);\r\n            for (let j = i + 1; j < lns.length; ++j) {\r\n                over = NLine.IsOverlap(lns[i], lns[j]);\r\n                if (over) { index[i]++; }\r\n            }\r\n        }\r\n        for (let i = 0; i < index.length; ++i) {\r\n            if (index[i] === 0) { { nLns.push(lns[i]); } }\r\n        }\r\n        return nLns;\r\n    }\r\n    constructor(p0: NVector3, p1: NVector3) {\r\n        super();\r\n        this.p0 = p0; this.p1 = p1;\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D): void {\r\n        ctx.lineWidth = 0.5;\r\n        ctx.strokeStyle = 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.p0.x, this.p0.y);\r\n        ctx.lineTo(this.p1.x, this.p1.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    public DistanceToPoint(p: NVector3) {\r\n        // slope\r\n        let m = (this.p1.y - this.p0.y) / (this.p1.x - this.p0.x),\r\n            // y offset\r\n            b = this.p0.y - (m * this.p0.x),\r\n            d = [];\r\n        // distance to the linear equation\r\n        d.push(Math.abs(p.y - (m * p.x) - b) / Math.sqrt(Math.pow(m, 2) + 1));\r\n        // distance to p0\r\n        d.push(Math.sqrt(Math.pow((p.x - this.p0.x), 2) + Math.pow((p.y - this.p0.y), 2)));\r\n        // distance to p1\r\n        d.push(Math.sqrt(Math.pow((p.x - this.p1.x), 2) + Math.pow((p.y - this.p1.y), 2)));\r\n        // return the smallest distance\r\n        return d.sort((aa, bb) => { return (aa - bb); })[0]; // causes an array to be sorted numerically and ascending;\r\n    }\r\n    public PointCloseToLine(p: NVector3) {\r\n        let dx = this.p1.x - this.p0.x,\r\n            dy = this.p1.y - this.p0.y,\r\n            t = ((p.x - this.p0.x) * dx + (p.y - this.p0.y) * dy) / (dx * dx + dy * dy),\r\n            x = MathUtility.Lerp(this.p0.x, this.p1.x, t),\r\n            y = MathUtility.Lerp(this.p0.y, this.p1.y, t);\r\n        return [x, y];\r\n    }\r\n    public GetLog(): string {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public RenderPost(ctx: CanvasRenderingContext2D): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public IsMouseInside(x: number, y: number): boolean {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Translate(x: number, y: number): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Move(x: number, y: number): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public Remove(): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    Hide(): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}","// import { MouseEventData } from '../../Core/AppCore/EventInteraction/MouseInteraction';\r\nimport { NVector3 } from '../NVector3';\r\nexport abstract class GeometryBase {\r\n    vec: NVector3 = new NVector3(0, 0, 0);\r\n    constructor() { /* */ }\r\n    public abstract GetLog(): string;\r\n    public abstract IsMouseInside(x: number, y: number): boolean;\r\n    public abstract Translate(x: number, y: number): void;\r\n    public abstract Move(x: number, y: number): void;\r\n    public abstract Remove(): void;\r\n    // abstract RenderPost(ctx: CanvasRenderingContext2D): void;\r\n    // abstract Render(ctx: CanvasRenderingContext2D): void;\r\n}","import { NVector3 } from '../NVector3';\r\nimport { NLine } from '../NLine';\r\nimport { MathUtility } from '../../../NUtility/Math/MathUtility';\r\n// import { Point } from './Point';\r\nexport class NVectorUtility {\r\n    public static GetGridArray(xNum: number, yNum: number, x0: number, y0: number, x1: number, y1: number) {\r\n        let vertexs = new Float32Array(xNum * yNum * 2);\r\n        const xd: number = (x1 - x0) / (xNum - 1);\r\n        const yd: number = (y1 - y0) / (yNum - 1);\r\n        let i = 0;\r\n        for (let yi = 0; yi < yNum; ++yi) {\r\n            const theY = (yd * yi) + y0;\r\n            for (let xi = 0; xi < xNum; ++xi) {\r\n                const theX = (xd * xi) + x0;\r\n                vertexs[i++] = theX;\r\n                vertexs[i++] = theY;\r\n\r\n            }\r\n        }\r\n        return vertexs;\r\n    }\r\n    public static GetGridVec(xNum: number, yNum: number, x0: number, y0: number, x1: number, y1: number) {\r\n        let vs = [];\r\n        const xd: number = (x1 - x0) / (xNum - 1);\r\n        const yd: number = (y1 - y0) / (yNum - 1);\r\n        for (let yi = 0; yi < yNum; ++yi) {\r\n            const theY = (yd * yi) + y0;\r\n            for (let xi = 0; xi < xNum; ++xi) {\r\n                const theX = (xd * xi) + x0;\r\n                vs.push(new NVector3(theX, theY));\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public static GetGridVec3d(xNum: number, yNum: number, zNum: number, x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) {\r\n        let vs = [];\r\n        const xd: number = (x1 - x0) / (xNum - 1);\r\n        const yd: number = (y1 - y0) / (yNum - 1);\r\n        const zd: number = (z1 - z0) / (zNum - 1);\r\n        for (let zi = 0; zi < zNum; ++zi) {\r\n            const theZ = (zd * zi) + z0;\r\n            for (let yi = 0; yi < yNum; ++yi) {\r\n                const theY = (yd * yi) + y0;\r\n                for (let xi = 0; xi < xNum; ++xi) {\r\n                    const theX = (xd * xi) + x0;\r\n                    vs.push(new NVector3(theX, theY, theZ));\r\n                }\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public static GetLineGridVec(xNum: number = 10, yNum: number = 10, xInterval: number = 100, yInterval: number = 100) {\r\n        let lns: NLine[] = [];\r\n        xNum = xNum - 1; yNum = yNum - 1;\r\n        let minV = new NVector3(-xNum * 0.5 * xInterval, -yNum * 0.5 * yInterval, 0);\r\n        let maxV = new NVector3(xNum * 0.5 * xInterval, yNum * 0.5 * yInterval, 0);\r\n\r\n        for (let i = 0; i <= yNum; ++i) {\r\n            let v0 = new NVector3(minV.x + (i * xInterval), minV.y, 0);\r\n            let v1 = new NVector3(minV.x + (i * xInterval), maxV.y, 0);\r\n            let ln0 = new NLine(v0, v1);\r\n            lns.push(ln0);\r\n            v0 = new NVector3(minV.x, minV.y + (i * yInterval), 0);\r\n            v1 = new NVector3(maxV.x, minV.y + (i * yInterval), 0);\r\n            ln0 = new NLine(v0, v1);\r\n            lns.push(ln0);\r\n        }\r\n        return lns;\r\n    }\r\n    public static GetCircleVec(xo: number, yo: number, xs: number = 1, ys: number = 1, n: number = 360) {\r\n        let circleVer = [xo, yo]; let iter = 360 / n; // center vec first\r\n        for (let i = 0; i <= 360; i += iter) {\r\n            let j = i * Math.PI / 180;\r\n            let xx = xo + Math.sin(j) * xs;\r\n            let yy = yo + Math.cos(j) * ys;\r\n            circleVer.push(xx, yy);\r\n        }\r\n        return new Float32Array(circleVer);\r\n    }\r\n    public static GetCircleVec3d(xo: number, yo: number, zo: number, xs: number = 1, ys: number = 1, n: number = 360) {\r\n        let circleVer = [xo, yo, zo]; let iter = 360 / n; // center vec first\r\n        for (let i = 0; i <= 360; i += iter) {\r\n            let j = i * Math.PI / 180;\r\n            let xx = xo + Math.sin(j) * xs;\r\n            let yy = yo + Math.cos(j) * ys;\r\n            let zz = zo;\r\n            circleVer.push(xx, yy, zz);\r\n        }\r\n        return new Float32Array(circleVer);\r\n    }\r\n    public static GetSpherec3d(radius: number = 100) {\r\n        let pts: number[] = [];\r\n        for (let x = 0; x < 3.14 * 2; x += 0.1) {\r\n            for (let y = 0; y < 3.14; y += 0.1) {\r\n                let xx = radius * Math.cos(x) * Math.sin(y);\r\n                let yy = radius * Math.sin(x) * Math.sin(y);\r\n                let zz = radius * Math.cos(y);\r\n                pts.push(xx, yy, zz);\r\n            }\r\n        }\r\n        return new Float32Array(pts);\r\n    }\r\n    public static GetArcVec(xo: number, yo: number, start: number, end: number, r: number, n: number = 5) {\r\n        let circleVer = [new NVector3(xo, yo)];\r\n        let sAngle = ((Math.PI * 2) * start) + Math.PI * 0.5;\r\n        let eAngle = ((Math.PI * 2) * end) + Math.PI * 0.5;\r\n        let iter = (eAngle - sAngle) / n; // center vec first\r\n        for (let i = sAngle; i <= eAngle + 0.001; i += iter) {\r\n            let xx = xo + Math.sin(i) * r;\r\n            let yy = yo - Math.cos(i) * r;\r\n            circleVer.push(new NVector3(xx, yy));\r\n        }\r\n        return circleVer;\r\n    }\r\n    // ........................................................... projected\r\n    public static GetSpherecVecs3d(xNum: number = 18, yNum: number = 10, radius: number = 100) {\r\n        let vs: NVector3[] = [];\r\n\r\n        let xInteral = Math.PI * 2 / xNum;\r\n        let yInteral = Math.PI / yNum;\r\n\r\n        for (let x = 0; x < Math.PI * 2; x += xInteral) {\r\n            for (let y = 0; y < Math.PI; y += yInteral) {\r\n                let xx = radius * Math.cos(x) * Math.sin(y);\r\n                let yy = radius * Math.sin(x) * Math.sin(y);\r\n                let zz = radius * Math.cos(y);\r\n                vs.push(new NVector3(xx, yy, zz));\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public static GetSpherecVecs3dRandom(num: number = 200, radius: number = 100) {\r\n        let vs: NVector3[] = [];\r\n\r\n        for (let i = 0; i < num; ++i) {\r\n            let x = Math.PI * 2 * Math.random();\r\n            let y = Math.PI * Math.random();\r\n            let xx = radius * Math.cos(x) * Math.sin(y);\r\n            let yy = radius * Math.sin(x) * Math.sin(y);\r\n            let zz = radius * Math.cos(y);\r\n            vs.push(new NVector3(xx, yy, zz));\r\n        }\r\n        return vs;\r\n    }\r\n\r\n    public static GetSpherecVecs3dRandomWithThicknessOffset(num: number = 200, radius: number = 100, offset: number = 0.1) {\r\n        // var sizes = new Float32Array(dotsAmount);\r\n        // var colorsAttribute = new Float32Array(dotsAmount * 3);\r\n        const out = [];\r\n        for (var i = 0; i < num; i++) {\r\n            // var vector = new THREE.Vector3();\r\n\r\n            // vector.color = Math.floor(Math.random() * colors.length);\r\n            const theta = Math.random() * Math.PI * 2;\r\n            const phi =\r\n                (1 - Math.sqrt(Math.random())) *\r\n                Math.PI /\r\n                2 *\r\n                (Math.random() > 0.5 ? 1 : -1);\r\n\r\n            const x = Math.cos(theta) * Math.cos(phi);\r\n            const y = Math.sin(phi);\r\n            const z = Math.sin(theta) * Math.cos(phi);\r\n\r\n            // vector.scaleX = 5;\r\n\r\n            const v = new NVector3(x, y, z);\r\n            v.Mult(radius + (Math.random() - 0.5) * offset);\r\n\r\n            // if (Math.random() > 0.5) {\r\n            //     moveDot(vector, i);\r\n            // }\r\n\r\n            out.push(v);\r\n            // dotsGeometry.vertices.push(vector);\r\n            // vector.toArray(positions, i * 3);\r\n            // colors[vector.color].toArray(colorsAttribute, i * 3);\r\n            // sizes[i] = 5;\r\n        }\r\n        return out;\r\n    }\r\n    public static GetSpherecVecs3dForWire(xNum: number = 18, yNum: number = 10, radius: number = 100) {\r\n        let vs: NVector3[] = [];\r\n\r\n        let xInteral = Math.PI * 2 / xNum;\r\n        let yInteral = Math.PI / yNum;\r\n\r\n        for (let y = 0; y < Math.PI; y += yInteral) {\r\n            for (let x = 0; x < Math.PI * 2; x += xInteral) {\r\n                let xx = radius * Math.cos(x) * Math.sin(y);\r\n                let yy = radius * Math.sin(x) * Math.sin(y);\r\n                let zz = radius * Math.cos(y);\r\n                vs.push(new NVector3(xx, yy, zz));\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < Math.PI * 2; x += xInteral) {\r\n            for (let y = 0; y < Math.PI; y += yInteral) {\r\n                let xx = radius * Math.cos(x) * Math.sin(y);\r\n                let yy = radius * Math.sin(x) * Math.sin(y);\r\n                let zz = radius * Math.cos(y);\r\n                vs.push(new NVector3(xx, yy, zz));\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public static GetPoints3dProjectedToGlobe(goePos: number[], radius: number = 10, zElevation: boolean = false, scaleZ: number = 10) {\r\n        let vs: NVector3[] = [];\r\n        for (let i = 0; i < goePos.length - 3; i += 3) {\r\n            // console.log(goePos[i], goePos[i + 1], goePos[i + 2]);\r\n            let x = MathUtility.RemapLong(goePos[i]);\r\n            let y = MathUtility.RemapLat(goePos[i + 1]);\r\n            let z = goePos[i + 2];\r\n            let xx = radius * Math.cos(x) * Math.sin(y);\r\n            let yy = radius * Math.sin(x) * Math.sin(y);\r\n            let zz = radius * Math.cos(y);\r\n            let v = new NVector3(xx, yy, zz);\r\n            if (zElevation) {\r\n                let zVal = z * scaleZ;\r\n                let nv = NVector3.Normalize(v).Mult(zVal);\r\n                v.Add(nv);\r\n            }\r\n            vs.push(v);\r\n        }\r\n        return vs;\r\n    }\r\n    public static GetPoint3dProjectedToGlobeByVecs(vs: NVector3[]) {\r\n        let nVecs = [];\r\n        for (let i = 0; i < vs.length; ++i) {\r\n            nVecs.push(this.GetPoint3dProjectedToGlobeByVec(vs[i].x, vs[i].y));\r\n        }\r\n        return nVecs;\r\n    }\r\n    public static GetPoint3dProjectedToGlobeByVec(long: number, lat: number, ele: number = 0, radius: number = 1, zElevation: boolean = false, scaleZ: number = 10) {\r\n        let x = MathUtility.RemapLong(long);\r\n        let y = MathUtility.RemapLat(lat);\r\n        let z = ele;\r\n        let xx = radius * Math.cos(x) * Math.sin(y);\r\n        let yy = radius * Math.sin(x) * Math.sin(y);\r\n        let zz = radius * Math.cos(y);\r\n        let v = new NVector3(xx, yy, zz);\r\n        if (zElevation) {\r\n            let zVal = z * scaleZ;\r\n            let nv = NVector3.Normalize(v).Mult(zVal);\r\n            v.Add(nv);\r\n        }\r\n        return v;\r\n    }\r\n    public static GetLineVecProjectedToGlobe(v0: NVector3, elevation: number = 0.1) {\r\n        let vs: NVector3[] = [];\r\n        // for (let i = 0; i < goePos.length - 3; i += 3) {\r\n        // console.log(goePos[i], goePos[i + 1], goePos[i + 2]);\r\n        let x = MathUtility.RemapLong(v0.x);\r\n        let y = MathUtility.RemapLat(v0.y);\r\n        let z = v0.z;\r\n        let xx = z * Math.cos(x) * Math.sin(y);\r\n        let yy = z * Math.sin(x) * Math.sin(y);\r\n        let zz = z * Math.cos(y);\r\n\r\n        vs.push(new NVector3(xx, yy, zz));\r\n\r\n        z = v0.z + elevation;\r\n        xx = z * Math.cos(x) * Math.sin(y);\r\n        yy = z * Math.sin(x) * Math.sin(y);\r\n        zz = z * Math.cos(y);\r\n        vs.push(new NVector3(xx, yy, zz));\r\n        // }\r\n        return vs;\r\n    }\r\n    constructor() { /* */ }\r\n}\r\n\r\n// //Copyright(C) 2015 NJ Namju Lee <nj.namju@gmail.com>\r\n\r\n// using System;\r\n// using System.Collections.Generic;\r\n// using System.Linq;\r\n// using System.Text;\r\n// using System.Threading.Tasks;\r\n// using Rhino;\r\n// using Rhino.Geometry;\r\n\r\n// namespace NJS\r\n// {\r\n//     public class PointUtils\r\n//     {\r\n//         public class Point2dGridWithTwoPoints\r\n//         {\r\n\r\n//             public List<Point3d> Pts;\r\n//             public List<Curve> UCurve ;\r\n//             public List<Curve> VCurve ;\r\n//             public int Xn;\r\n//             public int Yn;\r\n//             public Mesh Mesh;\r\n//             public Surface Surface;\r\n//             public Point2dGridWithTwoPoints(Point3d p1, Point3d p2, int _xn, int _yn)\r\n//             {\r\n\r\n//                 this.Pts = Pts2dWithTwoPts(p1, p2, _xn, _yn);\r\n//                 this.Xn = _xn;\r\n//                 this.Yn = _yn;\r\n//                 this.CalculateUCurve();\r\n//                 this.CalculateVCurve();\r\n//                 this.Mesh = NJS.MeshUtils.CreateMeshFromPts(this.Pts, this.Xn, this.Yn);\r\n//                 this.Surface = NJS.SurfaceUtils.GetSurfaceFromPts(this.Pts, this.Xn, this.Yn, 3, 3);\r\n//             }\r\n\r\n//             #region a simple point grid with two points\r\n//             // a simple point grid\r\n//             public static List<Point3d> Pts2dWithTwoPts(Point3d P1, Point3d P2, int xn, int yn)\r\n//             {\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n//                 Point3d xStart = P1;\r\n//                 let xinterval = (P2.X - P1.X) / (let)(xn-1);\r\n//                 double yinterval = (P2.Y - P1.Y) / (double)(yn-1);\r\n\r\n//                 for (int j = 0; j < yn; ++j)\r\n//                 {\r\n//                     for (int i = 0; i < xn; ++i)\r\n//                     {\r\n//                         pts.Add(new Point3d(xStart.X + (i * xinterval), xStart.Y + (j * yinterval), 0));\r\n//                     }\r\n//                 }\r\n//                 return pts;\r\n//             }\r\n//             public static List<Point3d> Pts2dWithTwoPtsDistance(Point3d P1, Point3d P2, double dis)\r\n//             {\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n//                 Point3d xStart = P1;\r\n//                 double xinterval = (P2.X - P1.X) / (double)(dis);\r\n//                 double yinterval = (P2.Y - P1.Y) / (double)(dis);\r\n\r\n//                 for (int j = 0; j < yinterval; ++j)\r\n//                 {\r\n//                     for (int i = 0; i < xinterval; ++i)\r\n//                     {\r\n//                         pts.Add(new Point3d(xStart.X + (i * dis), xStart.Y + (j * dis), 0));\r\n//                     }\r\n\r\n//                 }\r\n//                 return pts;\r\n//             }\r\n//             #endregion\r\n//             #region a simple point grid\r\n//             // a simple point grid\r\n//             public static List<Point3d> Pts2d(double x, double y, int xn, int yn)\r\n//             {\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n//                 double xinterval = x / (double)xn;\r\n//                 double yinterval = y / (double)yn;\r\n\r\n//                 for (int j = 0; j < yn; j++)\r\n//                 {\r\n//                     for (int i = 0; i < xn; i++)\r\n//                     {\r\n//                         pts.Add(new Point3d(i * xinterval, j * yinterval, 0));\r\n//                     }\r\n\r\n//                 }\r\n//                 return pts;\r\n//             }\r\n//             #endregion\r\n//             #region Pts2dFromSurface\r\n//             public static List<Point3d> Pts2dFromSurface(Surface surface, int xNum, int yNum)\r\n//             {\r\n\r\n//                 double ud = (surface.Domain(0).Max - surface.Domain(0).Min) / (double)(xNum-1);\r\n//                 double vd = (surface.Domain(1).Max - surface.Domain(1).Min) / (double)(yNum-1);\r\n\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n\r\n//                 for (int j = 0; j < yNum; j++)\r\n//                 {\r\n//                     double v = surface.Domain(1).Min + (j * vd);\r\n//                     for (int i = 0; i < xNum; i++)\r\n//                     {\r\n\r\n//                         double u = surface.Domain(0).Min + (i * ud); // I reverse I and J otherwise the point odering is differ from the future surface\r\n\r\n//                         Point3d pt = surface.PointAt(u, v);\r\n//                         pts.Add(pt);\r\n\r\n//                     }\r\n//                 }\r\n\r\n//                 return pts;\r\n\r\n//             }\r\n//             #endregion\r\n\r\n//             #region Pts3dFromSurface\r\n//             public static List<Point3d> Pts3dFromSurface(Surface surface, int xNum, int yNum, int zNum, double height)\r\n//             {\r\n\r\n//                 double ud = (surface.Domain(0).Max - surface.Domain(0).Min) / (double)(xNum );\r\n//                 double vd = (surface.Domain(1).Max - surface.Domain(1).Min) / (double)(yNum );\r\n//                 double zd = height / (double)zNum;\r\n\r\n//                 Rhino.Collections.RhinoList<Transform> trans = new Rhino.Collections.RhinoList<Transform>();\r\n//                 Rhino.Collections.RhinoList<Vector3d> vecs = new Rhino.Collections.RhinoList<Vector3d>();\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n\r\n//                 //Vector3d vec = new Vector3d(0, 0, 0);\r\n\r\n//                 for (int k = 0; k <= yNum; k++)\r\n//                 {\r\n//                     for (int j = 0; j <= xNum; j++)\r\n//                     {\r\n//                         for (int i = 0; i <= zNum; i++)\r\n//                         {\r\n\r\n//                             double u = surface.Domain(0).Min + (i * ud);\r\n//                             double v = surface.Domain(1).Min + (j * vd);\r\n//                             double w = height * k;\r\n\r\n//                             Point3d pt = surface.PointAt(u, v);\r\n//                             pt.Z += w;\r\n\r\n//                             /*\r\n//                             foreach (Point3d rotor in rotors)\r\n//                             {\r\n//                                 Vector3d v = nj.PointUtils.PointGrid.Rotor(pt, rotor, -rotorStrength, rotorsFalloff);\r\n//                                 vec += v;\r\n//                                 pt += v;\r\n//                             }\r\n\r\n//                             foreach (Point3d attPt in attractors)\r\n//                             {\r\n//                                 Vector3d v = nj.PointUtils.PointGrid.Attractor(pt, attPt, attractorsStrength, attractorsFalloff);\r\n//                                 vec = v;\r\n//                                 pt += v;\r\n//                             }\r\n\r\n//                             foreach (Point3d explosion in explosions)\r\n//                             {\r\n//                                 Vector3d v = nj.PointUtils.PointGrid.Explosion(pt, explosion, explosionsStrength, explosionsFalloff);\r\n//                                 vec += v;\r\n//                                 pt += v;\r\n//                             }\r\n//                            */\r\n\r\n//                             //scale = Transform.Scale(Point3d.Origin, 1);\r\n\r\n//                             // move *= Transform.Translation((Vector3d) pt - (Vector3d) Point3d.Origin);\r\n//                             //Transform composite = move * scale;\r\n//                             //trans.Add(composite);\r\n//                             //trans.Add(vec);\r\n//                             //vec.Unitize();\r\n//                             //vecs.Add(vec * 10);\r\n//                             // ptsLow.Add(pt);\r\n\r\n//                             pts.Add(pt); //) + (norVec.Z * k));\r\n//                         }\r\n//                     }\r\n//                 }\r\n\r\n//                 return pts;\r\n\r\n//             }\r\n//             #endregion\r\n\r\n//             #region calculate attractors\r\n//             public void CalculateAttractors(List<Point3d> rotors, double rotorStrength, double rotorsFalloff)\r\n//             {\r\n\r\n//                 Vector3d vec;\r\n\r\n//                 for (int i = 0; i < this.Pts.Count; i++)\r\n//                 {\r\n\r\n//                     foreach (Point3d rotor in rotors)\r\n//                     {\r\n//                         Vector3d v = NJS.PointUtils.Attractor(this.Pts[i], rotor, rotorStrength, rotorsFalloff);\r\n//                         vec = v;\r\n//                         this.Pts[i] += v;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             #endregion\r\n\r\n//             #region calculate Explosions\r\n//             public void CalculateExplosions(List<Point3d> explosions, double explosionsStrength, double explosionsFalloff)\r\n//             {\r\n\r\n//                 Vector3d vec;\r\n\r\n//                 for (int i = 0; i < this.Pts.Count; i++)\r\n//                 {\r\n\r\n//                     foreach (Point3d explosion in explosions)\r\n//                     {\r\n//                         Vector3d v = NJS.PointUtils.Explosion(this.Pts[i], explosion, explosionsStrength, explosionsFalloff);\r\n//                         vec = v;\r\n//                         this.Pts[i] += v;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             #endregion\r\n\r\n//             #region calculate Rotors\r\n//             public void CalculateRotors(List<Point3d> rotors, double rotorStrength, double rotorsFalloff)\r\n//             {\r\n\r\n//                 Vector3d vec;\r\n\r\n//                 for (int i = 0; i < this.Pts.Count; i++)\r\n//                 {\r\n\r\n//                     foreach (Point3d rotor in rotors)\r\n//                     {\r\n//                         Vector3d v = NJS.PointUtils.Rotor(this.Pts[i], rotor, rotorStrength, rotorsFalloff);\r\n//                         vec = v;\r\n//                         this.Pts[i] += v;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             #endregion\r\n\r\n//             #region public void get U curve\r\n//             public void CalculateUCurve()\r\n//             {\r\n//                 this.VCurve = NJS.CurveUtils.UIsoCurve(this.Pts, this.Xn, this.Yn);\r\n//                 //return this.uCurve;\r\n\r\n//             }\r\n//             #endregion\r\n\r\n//             #region public void  get V curve\r\n//             public void CalculateVCurve()\r\n//             {\r\n//                 this.UCurve = NJS.CurveUtils.VIsoCurve(this.Pts, this.Xn, this.Yn);\r\n//                 //return this.vCurve;\r\n\r\n//             }\r\n//             #endregion\r\n\r\n//             /*\r\n//             #region public void  get U minimal Curve\r\n//             public List<Curve> Get_UV_minimalCurve(int iter = 50, int npts = 50)\r\n//             {\r\n\r\n//                 for (int u = 0; u < this.uCurve.Count; u++)\r\n//                 {\r\n//                     this.uCurve[u] = NJS.CurveUtils.MinimalCurve(this.uCurve[u], iter, npts);\r\n//                 }\r\n//                 for (int v = 0; v < this.vCurve.Count; v++)\r\n//                 {\r\n//                     this.vCurve[v] = NJS.CurveUtils.MinimalCurve(this.vCurve[v], iter, npts);\r\n//                 }\r\n//                 this.UVCurve.Clear();\r\n//                 this.UVCurve.AddRange(this.uCurve);\r\n//                 this.UVCurve.AddRange(this.vCurve);\r\n//                 return this.UVCurve;\r\n\r\n//             }\r\n//             #endregion\r\n//             */\r\n\r\n//             #region public void  get U minimal Curve\r\n//             public void Calculate_U_MinimalCurve(int iter = 50, int npts = 50)\r\n//             {\r\n\r\n//                 for (int u = 0; u < this.UCurve.Count; u++)\r\n//                 {\r\n//                     this.UCurve[u] = NJS.CurveUtils.MinimalCurve(this.UCurve[u], iter, npts);\r\n//                 }\r\n\r\n//                 //return this.uCurve;\r\n\r\n//             }\r\n//             #endregion\r\n\r\n//             #region public void  get V minimal Curve\r\n//             public void Calculate_V_MinimalCurve(int iter = 50, int npts = 50)\r\n//             {\r\n\r\n//                 for (int v = 0; v < this.VCurve.Count; v++)\r\n//                 {\r\n//                     this.VCurve[v] = NJS.CurveUtils.MinimalCurve(this.VCurve[v], iter, npts);\r\n//                 }\r\n\r\n//                 //return this.vCurve;\r\n\r\n//             }\r\n//             #endregion\r\n//             #region Update\r\n//             public void Update()\r\n//             {\r\n\r\n//                 UpdateSurface();\r\n//                 UpdateUVcurve();\r\n//                 UpdateMesh();\r\n//             }\r\n\r\n//             public void UpdateSurface()\r\n//             {\r\n//                 List<Point3d> pts = NJS.PointUtils.FlipUVPointDirection(this.Pts, this.Xn, this.Yn);\r\n//                 this.Surface = Rhino.Geometry.NurbsSurface.CreateFromPoints(pts, this.Xn , this.Yn, 3, 3);\r\n\r\n//             }\r\n\r\n//             public void UpdateUVcurve()\r\n//             {\r\n\r\n//                 this.UCurve = NJS.CurveUtils.UIsoCurve(this.Pts, this.Xn, this.Yn);\r\n//                 this.VCurve = NJS.CurveUtils.VIsoCurve(this.Pts, this.Xn, this.Yn);\r\n\r\n//             }\r\n\r\n//             public void UpdateMesh()\r\n//             {\r\n//                 this.Mesh = NJS.MeshUtils.CreateMeshFromPts(this.Pts, this.Xn, this.Yn);\r\n\r\n//             }\r\n\r\n//             #endregion\r\n//         }\r\n//         #region Point 3d Grid with two points\r\n//         public class Point3dGridWithTwoPoints\r\n//         {\r\n//             public List<Point3d> Pts;\r\n//             public List<Curve> UCurve;\r\n//             public List<Curve> VCurve;\r\n//             public int Xn;\r\n//             public int Yn;\r\n//             public int Zn;\r\n//             public Mesh Mesh;\r\n//             public Surface Surface;\r\n\r\n//             public Point3dGridWithTwoPoints(Point3d p1, Point3d p2, int xn, int yn, int zn)\r\n//             {\r\n\r\n//                 this.Pts = Pts3dWithTwoPts(p1, p2, xn, yn, zn);\r\n//             }\r\n//             #region Pts3dWithTwoPts\r\n//             public static List<Point3d> Pts3dWithTwoPts(Point3d P1, Point3d P2, int xn, int yn, int zn)\r\n//             {\r\n//                 List<Point3d> pts = new List<Point3d>();\r\n//                 Point3d xStart = P1;\r\n//                 double xinterval = (P2.X - P1.X) / (double)(xn - 1);\r\n//                 double yinterval = (P2.Y - P1.Y) / (double)(yn - 1);\r\n//                 double zinterval = (P2.Z - P1.Z) / (double)(zn - 1);\r\n\r\n//                 for (int k = 0; k < zn; ++k)\r\n//                 {\r\n//                     for (int j = 0; j < yn; ++j)\r\n//                     {\r\n//                         for (int i = 0; i < xn; ++i)\r\n//                         {\r\n//                             pts.Add(new Point3d(xStart.X + (i * xinterval), xStart.Y + (j * yinterval), xStart.Z + (k * zinterval)));\r\n//                         }\r\n\r\n//                     }\r\n//                 }\r\n//                 return pts;\r\n//             }\r\n//             #endregion\r\n//             #region calculate attractors\r\n//             public void CalculateAttractors(List<Point3d> rotors, double rotorStrength, double rotorsFalloff)\r\n//             {\r\n\r\n//                 Vector3d vec;\r\n\r\n//                 for (int i = 0; i < this.Pts.Count; i++)\r\n//                 {\r\n\r\n//                     foreach (Point3d rotor in rotors)\r\n//                     {\r\n//                         Vector3d v = NJS.PointUtils.Attractor(this.Pts[i], rotor, rotorStrength, rotorsFalloff);\r\n//                         vec = v;\r\n//                         this.Pts[i] += v;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             #endregion\r\n//             #region calculate Explosions\r\n//             public void CalculateExplosions(List<Point3d> explosions, double explosionsStrength, double explosionsFalloff)\r\n//                 {\r\n\r\n//                     Vector3d vec;\r\n\r\n//                     for (int i = 0; i < this.Pts.Count; i++)\r\n//                     {\r\n\r\n//                         foreach (Point3d explosion in explosions)\r\n//                         {\r\n//                             Vector3d v = NJS.PointUtils.Explosion(this.Pts[i], explosion, explosionsStrength, explosionsFalloff);\r\n//                             vec = v;\r\n//                             this.Pts[i] += v;\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             #endregion\r\n//             #region calculate Rotors\r\n//             public void CalculateRotors(List<Point3d> rotors, double rotorStrength, double rotorsFalloff)\r\n//             {\r\n\r\n//                 Vector3d vec;\r\n\r\n//                 for (int i = 0; i < this.Pts.Count; i++)\r\n//                 {\r\n\r\n//                     foreach (Point3d rotor in rotors)\r\n//                     {\r\n//                         Vector3d v = NJS.PointUtils.Rotor(this.Pts[i], rotor, rotorStrength, rotorsFalloff);\r\n//                         vec = v;\r\n//                         this.Pts[i] += v;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             #endregion\r\n//         }\r\n//         #endregion\r\n//         public class NVector3\r\n//         {\r\n\r\n//             public double X;\r\n//             public double Y;\r\n//             public double Z;\r\n//             public double NormalX;\r\n//             public double NormalY;\r\n//             public double NormalZ;\r\n//             public double Length;\r\n\r\n//             public string name;\r\n\r\n//             #region Construction of Vecto\r\n//             public NVector3()\r\n//             {\r\n//                 this.X = 0.0;\r\n//                 this.Y = 0.0;\r\n//                 this.Z = 0.0;\r\n//             }\r\n\r\n//             public NVector3(double x, double y, double z)\r\n//             {\r\n//                 this.X = x;\r\n//                 this.Y = y;\r\n//                 this.Z = z;\r\n//             }\r\n//             public NVector3(double x, double y, double z, string name)\r\n//             {\r\n//                 this.X = x;\r\n//                 this.Y = y;\r\n//                 this.Z = z;\r\n//                 this.name = name;\r\n//             }\r\n//             public NVector3(double val)\r\n//             {\r\n//                 this.X = val;\r\n//                 this.Y = val;\r\n//                 this.Z = val;\r\n//             }\r\n//             public NVector3(Point3d pt)\r\n//             {\r\n//                 this.X = pt.X;\r\n//                 this.Y = pt.Y;\r\n//                 this.Z = pt.Z;\r\n//             }\r\n//             #endregion\r\n//             #region Calculate Vector sets\r\n//             /*\r\n//             a. Cross product of two vectors to produce a new one\r\n//             b.Normalization of a vector\r\n//             c. Dot product of two vector\r\n//             d. Addition of two vectors to produce a new one\r\n//             e.Addition of a vector to an existing vector\r\n//             f. Subtraction of two vectors to produce a new one\r\n//             g.Length of a vector\r\n//             h. Squared length of a vector\r\n//             i. Normal vector from 3 points represented by vectors\r\n//             j.Average of a List<CVector> or ListArray<CVector> of vectors [you will need to add the following line at the top of your java file in processing: import java.util.*;]\r\n//             */\r\n//             public void CalculateScale(double scale) {\r\n//                 this.X *= scale; this.Y *= scale; this.Z *= scale;\r\n//             }\r\n\r\n//             public void CalculateLength()\r\n//             {\r\n//                 this.Length = Math.Sqrt(this.X * this.X + this.Y * this.Y + this.Z * this.Z);\r\n//             }\r\n\r\n//             public void CalculateNormalization()\r\n//             {\r\n//                 double len = Math.Sqrt(this.X * this.X + this.Y * this.Y + this.Z * this.Z);\r\n//                 this.NormalX = this.X / len;\r\n//                 this.NormalY = this.Y / len;\r\n//                 this.NormalZ = this.Z / len;\r\n//             }\r\n\r\n//             public Vector3d CalculateCrossProduct(Point3d v1, Point3d v2)\r\n//             {\r\n//                 double x = v1.Y * v2.Z - v1.Z * v2.Y;\r\n//                 double y = v1.Z * v2.X - v1.Y * v2.Z;\r\n//                 double z = v1.X * v2.Y - v1.Y * v2.X;\r\n//                 Vector3d v = new Vector3d(x, y, z);\r\n//                 return v;\r\n//             }\r\n//             public void Scale(double s) {\r\n//                 X *= s;\r\n//                 Y *= s;\r\n//                 Z *= s;\r\n//             }\r\n\r\n//             public double CalculateDotProduct(Point3d p0, Point3d p1)\r\n//             {\r\n//                 double d = (p0.X * p1.X) + (p0.Y * p1.Y) + (p0.Z * p1.Z);\r\n//                 return d;\r\n//             }\r\n//             public void CalculateAddition(NVector3 other)\r\n//             {\r\n\r\n//             }\r\n//             public void CalculateSubtraction()\r\n//             {\r\n\r\n//             }\r\n\r\n//             public void CalculateLengthSquare()\r\n//             {\r\n\r\n//             }\r\n\r\n//             public void CalculateNormalFromThreePts()\r\n//             {\r\n\r\n//             }\r\n//             public void CalculateAverageOfNVectors()\r\n//             {\r\n\r\n//             }\r\n//             #endregion\r\n//             #region Get Vector sets\r\n//             public double GetLength()\r\n//             {\r\n//                 double dp = Dot(this); // smae as below\r\n//                 return Math.Sqrt(dp);\r\n//             }\r\n\r\n//             public NVector3 Normalized()\r\n//             {\r\n//                 double length = GetLength();\r\n//                 return new NVector3(X / length, Y / length, Z / length);\r\n//             }\r\n//             public void Normalize()\r\n//             {\r\n//                 double length = GetLength();\r\n//                 Y /= length;\r\n//                 Y /= length;\r\n//                 Z /= length;\r\n\r\n//             }\r\n//             public void Add(NVector3 other)\r\n//             {\r\n//                 X += other.X;\r\n//                 Y += other.Y;\r\n//                 Z += other.Z;\r\n//             }\r\n//             public double Dot(NVector3 other)\r\n//             {\r\n//                 return X * other.X + Y * other.Y + Z * other.Z;\r\n//             }\r\n//             #endregion\r\n//             public Point3d ToPoint3d() {\r\n//                 return new Point3d(X, Y, Z);\r\n//             }\r\n\r\n//             public override string ToString()\r\n//             {\r\n//                 return \"(\" + this.X + \",\" + this.Y + \",\" + this.Z + \")\";\r\n//             }\r\n//         }\r\n//         public class PointSorting\r\n//         {\r\n//             public List<Point3d> orderedList = new List<Point3d>();\r\n//             public List<Point3d> oList = new List<Point3d>();\r\n//             int t = 0;\r\n\r\n//             public PointSorting(List<Point3d> pts)\r\n//             {\r\n//                 oList.AddRange(pts);\r\n//             }\r\n\r\n//             #region Z order\r\n//             public void CalculateZOrder()\r\n//             {\r\n//                 if (oList.Count == 0)\r\n//                 {\r\n\r\n//                 }\r\n//                 else {\r\n//                     GetListZOrder();\r\n//                     t++;\r\n//                 }\r\n//             }\r\n//             void GetListZOrder()\r\n//             {\r\n//                 double max = GetMaxZ(oList);\r\n//                 for (int i = 0; i < this.oList.Count; i++)\r\n//                 {\r\n//                     if (max == oList[i].Z)\r\n//                     {\r\n//                         orderedList.Add(oList[i]);\r\n//                         oList.RemoveAt(i);\r\n//                         CalculateZOrder();\r\n//                     }\r\n//                 }\r\n//             }\r\n//             double GetMaxZ(List<Point3d> pts)\r\n//             {\r\n\r\n//                 double max = -10000;\r\n//                 for (int i = 0; i < pts.Count; i++)\r\n//                 {\r\n//                     if (max < pts[i].Z)\r\n//                     {\r\n//                         max = pts[i].Z;\r\n//                     }\r\n//                 }\r\n//                 return max;\r\n//             }\r\n//             #endregion\r\n\r\n//             #region X order\r\n//             public void CalculateXOrder()\r\n//             {\r\n//                 if (oList.Count == 0)\r\n//                 {\r\n\r\n//                 }\r\n//                 else {\r\n//                     GetListXOrder();\r\n//                     t++;\r\n//                 }\r\n//             }\r\n//             void GetListXOrder()\r\n//             {\r\n//                 double max = GetMaxX(oList);\r\n//                 for (int i = 0; i < this.oList.Count; i++)\r\n//                 {\r\n//                     if (max == oList[i].X)\r\n//                     {\r\n//                         orderedList.Add(oList[i]);\r\n//                         oList.RemoveAt(i);\r\n//                         CalculateXOrder();\r\n//                     }\r\n//                 }\r\n//             }\r\n//             double GetMaxX(List<Point3d> pts)\r\n//             {\r\n\r\n//                 double max = -10000;\r\n//                 for (int i = 0; i < pts.Count; i++)\r\n//                 {\r\n//                     if (max < pts[i].X)\r\n//                     {\r\n//                         max = pts[i].X;\r\n//                     }\r\n//                 }\r\n//                 return max;\r\n//             }\r\n//             #endregion\r\n//             #region X order\r\n//             public void CalculateYOrder()\r\n//             {\r\n//                 if (oList.Count == 0)\r\n//                 {\r\n\r\n//                 }\r\n//                 else {\r\n//                     GetListYOrder();\r\n//                     t++;\r\n//                 }\r\n//             }\r\n//             void GetListYOrder()\r\n//             {\r\n//                 double max = GetMaxY(oList);\r\n//                 for (int i = 0; i < this.oList.Count; i++)\r\n//                 {\r\n//                     if (max == oList[i].Y)\r\n//                     {\r\n//                         orderedList.Add(oList[i]);\r\n//                         oList.RemoveAt(i);\r\n//                         CalculateYOrder();\r\n//                     }\r\n//                 }\r\n//             }\r\n//             double GetMaxY(List<Point3d> pts)\r\n//             {\r\n\r\n//                 double max = -10000;\r\n//                 for (int i = 0; i < pts.Count; i++)\r\n//                 {\r\n//                     if (max < pts[i].Y)\r\n//                     {\r\n//                         max = pts[i].Y;\r\n//                     }\r\n//                 }\r\n//                 return max;\r\n//             }\r\n//             #endregion\r\n//             // general function\r\n//             public void DeepcopyList()\r\n//             {\r\n\r\n//                 this.oList = new List<Point3d>();\r\n//                 foreach (Point3d p in orderedList)\r\n//                 {\r\n//                     oList.Add(new Point3d(p.X, p.Y, p.Z));\r\n//                 }\r\n\r\n//             }\r\n\r\n//             public List<Point3d> GetPointsWithNumber(int n)\r\n//             {\r\n//                 List<Point3d> newPt = new List<Point3d>();\r\n//                 for (int i = 0; i < n ; i++)\r\n//                 {\r\n\r\n//                     newPt.Add(new Point3d( orderedList[i].X, orderedList[i].Y, orderedList[i].Z));\r\n//                 }\r\n//                 return newPt;\r\n//             }\r\n//         }\r\n\r\n//         public Point3d GetDotProjection(Point3d v0, Point3d v1, Point3d v2) {\r\n//             Vector3d vv1 = v1 - v0;\r\n//             Vector3d vv2 = v2 - v0;\r\n//             vv1.Unitize();\r\n//             Vector3d p = (Vector3d)v0 + vv1 * (vv2 * vv1);\r\n//             return (Point3d)p;\r\n//         }\r\n//         #region Falloff calculation for pts\r\n//         public static double CalculateFalloff(Point3d pt, Point3d attractor, double strength, double falloff) {\r\n//             Vector3d v = attractor - pt;\r\n//             double dist = v.Length;\r\n//             return dist * (strength * (Math.Exp(-falloff * dist * dist)));\r\n//         }\r\n//         #endregion\r\n//         #region Attractor calculation for pts\r\n//         public static Vector3d Attractor(Point3d pt, Point3d attractor, double strength, double falloff) {\r\n//             Vector3d v = attractor - pt;\r\n//             v.Unitize();\r\n//             double dist = v.Length;\r\n//             return (v * (strength * Math.Exp(-falloff * dist * dist)));\r\n//         }\r\n//         #endregion\r\n//         #region Explosion calculation for pts\r\n//         public static Vector3d Explosion(Point3d pt, Point3d Explosion, double strength, double falloff) {\r\n//             Vector3d v = Explosion - pt;\r\n//             v.Unitize();\r\n//             double dist = v.Length;\r\n//             return (v * -(strength * Math.Exp(-falloff * dist * dist)));\r\n//         }\r\n//         #endregion\r\n//         #region Rotor calculation for pts\r\n//         public static Vector3d Rotor(Point3d pt, Point3d rotor, double strength, double falloff)\r\n//         {\r\n//             Vector3d v = rotor - pt;\r\n//             v.Unitize();\r\n//             v.Rotate(3.141592 / 2, Vector3d.ZAxis);\r\n//             double dist = v.Length;\r\n//             return (v * (strength * (Math.Exp(-falloff * dist * dist))));\r\n//         }\r\n//         #endregion\r\n\r\n//         #region Explosion calculation for pts\r\n//         public static List<Point3d> FlipPtsOrder(List<Point3d> p1, int xNum, int yNum) {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n//             int count = 0;\r\n//             for (int j = 0; j < xNum; j++) {\r\n//                 for (int i = 0; i < yNum; i++) {\r\n//                     pts.Add(p1[count]);\r\n//                     count += 1;\r\n//                 }\r\n//             }\r\n//             return (pts);\r\n//         }\r\n//         #endregion\r\n//         #region Flip UV Point Direction\r\n//         public static List<Point3d> FlipUVPointDirection(List<Point3d> p1, int xNum, int yNum)\r\n//         {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n\r\n//             for (int x = 0; x < xNum; ++x)\r\n//             {\r\n//                 for (int y = 0; y < yNum; ++y)\r\n//                 {\r\n//                     pts.Add(p1[(y * (xNum)) + x]);\r\n//                 }\r\n//             }\r\n//             return pts;\r\n//         }\r\n//         #endregion\r\n\r\n//         #region rebuild List of Points by Number //\r\n//         public static List<Point3d> GetPointGridByNNum(List<Point3d> pts, int u, int v, int nNum)\r\n//         {\r\n//             List<Point3d> temp = new List<Point3d>();\r\n//             for (int j = 0; j < v; ++j) {\r\n//                 for (int i = 0; i < u; ++i) {\r\n//                     if (j % nNum != 0) continue;\r\n//                     int k = j * u + i;\r\n//                     temp.Add(pts[k]);\r\n//                 }\r\n//             }\r\n//             return temp;\r\n//         }\r\n//         #endregion\r\n\r\n//         #region Get line grid from point list with u and v\r\n//         public List<Line> GetLineGridFromPoint(List<Point3d> pts, int u, int v)\r\n//         {\r\n//             List<Line> lns = new List<Line>();\r\n//             for (int j = 0; j < v - 1; ++j)\r\n//             {\r\n//                 for (int i = 0; i < u - 1; ++i)\r\n//                 {\r\n//                     int k = j * u + i;\r\n//                     lns.Add(new Line(pts[k], pts[k + 1]));\r\n//                     lns.Add(new Line(pts[k], pts[k + u]));\r\n//                     if (i == u - 2)\r\n//                     {\r\n//                         lns.Add(new Line(pts[k + 1], pts[k + u + 1]));\r\n//                     }\r\n//                     if (j == v - 2)\r\n//                     {\r\n//                         lns.Add(new Line(pts[k + u], pts[k + u + 1]));\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return lns;\r\n//         }\r\n//         #endregion\r\n\r\n//         #region get weave U points\r\n//         public static List<Point3d> GetWeaveUPTs(List<Point3d> p1, List<Point3d> p2)\r\n//         {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n\r\n//             for (int i = 0; i <= p1.Count - 1; i++)\r\n//             {\r\n//                 if (i % 2 == 0)\r\n//                 {\r\n//                     pts.Add(p1[i]);\r\n//                 }\r\n//                 else\r\n//                 {\r\n//                     pts.Add(p2[i]);\r\n//                 }\r\n//             }\r\n//             return (pts);\r\n//         }\r\n//         #endregion\r\n//         #region get weave V points\r\n//         public static List<Point3d> GetWeaveVPTs(List<Point3d> p1, List<Point3d> p2)\r\n//         {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n\r\n//             for (int i = 0; i <= p1.Count - 1; i++)\r\n//             {\r\n//                 if (i % 2 == 0)\r\n//                 {\r\n//                     pts.Add(p2[i]);\r\n//                 }\r\n//                 else\r\n//                 {\r\n//                     pts.Add(p1[i]);\r\n//                 }\r\n//             }\r\n//             return (pts);\r\n//         }\r\n//         #endregion\r\n\r\n//         #region Get a point from average among points\r\n//         public static Point3d GetPtsFromMesh(List<Point3d> pts)\r\n//         {\r\n\r\n//             double x = 0;\r\n//             double y = 0;\r\n//             double z = 0;\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 x += pts[i].X;\r\n//                 y += pts[i].Y;\r\n//                 z += pts[i].Z;\r\n//             }\r\n\r\n//             Point3d pt = new Point3d(x / pts.Count, y / pts.Count, z / pts.Count);\r\n//             return pt;\r\n\r\n//         }\r\n//         #endregion\r\n//         #region GetCenter points from polylines\r\n//         public static List<Point3d> GetCenterPointsFromPolyline(List<Curve> cList)\r\n//         {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n//             foreach (Curve c in cList)\r\n//             {\r\n//                 Rhino.Geometry.Polyline pl;\r\n//                 if (c.TryGetPolyline(out pl))\r\n//                 {\r\n//                     List<Point3d> pp = new List<Point3d>();\r\n//                     foreach (Point3d p in pl) pp.Add(p);\r\n//                     pts.Add(GetCenterPointFromFourPoints(pp));\r\n//                 }\r\n//             }\r\n//             return pts;\r\n//         }\r\n\r\n//         // get center pts from four points\r\n//         public static Point3d GetCenterPointFromFourPoints(List<Point3d> pts)\r\n//         {\r\n//             Point3d pp = Point3d.Origin;\r\n//             for (int i = 0; i < pts.Count - 1; ++i) pp += pts[i];\r\n//             return pp / (pts.Count - 1);\r\n//         }\r\n//         #endregion\r\n\r\n//         #region Get a point from average among points\r\n//         public static Point3d GetPtFromAverage(List<Point3d> pts)\r\n//         {\r\n\r\n//             double x = 0;\r\n//             double y = 0;\r\n//             double z = 0;\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 x += pts[i].X;\r\n//                 y += pts[i].Y;\r\n//                 z += pts[i].Z;\r\n//             }\r\n\r\n//             Point3d pt = new Point3d(x / pts.Count, y / pts.Count, z / pts.Count);\r\n//             return pt;\r\n\r\n//         }\r\n//         #endregion\r\n//         #region Get a mid point\r\n//         public Point3d GetMidPoint(Point3d p1, Point3d p2)\r\n//         {\r\n\r\n//             Point3d mp = (p1 + p2) * 0.5;\r\n//             return mp;\r\n\r\n//         }\r\n//         #endregion\r\n\r\n//         public static Point3d GetMidPTbyT(Point3d p1, Point3d p2, double t)\r\n//         {\r\n//             Vector3d v = p2 - p1;\r\n//             return new Point3d(p1 + v * t);\r\n//         }\r\n//         public static List<Point3d> GetMidPTbyNum(Point3d p1, Point3d p2, int n) {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n//             Vector3d v = (p2 - p1) / (n + 1); // we need to add to off the loop\r\n//             for (int i = 1; i < n + 1; ++i)  // we need to start from 1 to prevent from overlaping pt with start point\r\n//             {\r\n//                 Vector3d vv = (p2 - p1);\r\n//                 vv = (v * i) + (Vector3d)p1;\r\n//                 pts.Add((Point3d)vv);\r\n//             }\r\n\r\n//             return pts;\r\n//         }\r\n//         public static double GetDistance(Point3d p1, Point3d p2)\r\n//         {\r\n//             double dis = Math.Abs(Math.Sqrt(((p2.X - p1.X) * (p2.X - p1.X)) + ((p2.Y - p1.Y) * (p2.Y - p1.Y)) + ((p2.Z - p1.Z) * (p2.Z - p1.Z))));\r\n//             return dis;\r\n//         }\r\n//         public static double GetDistance2(Point3d p1, Point3d p2)\r\n//         {\r\n//             double dis = (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y) + (p1.Z - p2.Z) * (p1.Z - p2.Z);\r\n//             return dis;\r\n//         }\r\n//         public static int GetClosestIndexFromPTS(Point3d p, List<Point3d> targetPTs)\r\n//         {\r\n//             int ClosestIndex = 0;\r\n//             List<double> dis = new List<double>();\r\n\r\n//             foreach(Point3d pt in targetPTs)\r\n//             {\r\n//                 dis.Add(p.DistanceTo(pt));\r\n//             }\r\n\r\n//             double temp = 10000;\r\n//             for (int i = 0; i < dis.Count; i++)\r\n//             {\r\n//                 if (dis[i] < temp)\r\n//                 {\r\n//                     temp = dis[i];\r\n//                     ClosestIndex = i;\r\n//                 }\r\n//             }\r\n//             return ClosestIndex;\r\n//         }\r\n//         public static List<int> GetClosestIndexsFromPTSWithRadius(Point3d p, List<Point3d> targetPTs, double r)\r\n//         {\r\n//             List<int> outIndex = new List<int>();\r\n//             for (int i = 0; i < targetPTs.Count; i++)\r\n//             {\r\n//                if (p.DistanceTo(targetPTs[i]) < r)\r\n//                 {\r\n//                     outIndex.Add(i);\r\n//                 }\r\n//             }\r\n//             return outIndex;\r\n//         }\r\n//         public static Point3d GetClosestPtFromPTS(Point3d p, List<Point3d> targetPTs)\r\n//         {\r\n//             int ClosestIndex = 0;\r\n//             List<double> dis = new List<double>();\r\n\r\n//             foreach (Point3d pt in targetPTs)\r\n//             {\r\n//                 dis.Add(p.DistanceTo(pt));\r\n//             }\r\n\r\n//             double temp = 10000;\r\n//             for (int i = 0; i < dis.Count; i++)\r\n//             {\r\n//                 if (dis[i] < temp)\r\n//                 {\r\n//                     temp = dis[i];\r\n//                     ClosestIndex = i;\r\n//                 }\r\n//             }\r\n//             return targetPTs[ClosestIndex];\r\n//         }\r\n\r\n//         public static List<Point3d> GetClosesPTsfromMesh(List<Point3d> pts, Mesh m)\r\n//         {\r\n//             List<Point3d> tempPts = new List<Point3d>();\r\n//             foreach (Point3d pt in pts)\r\n//             {\r\n//                 Point3d tempPt = GetClosesPTfromMesh(pt, m);\r\n//                 tempPts.Add(tempPt);\r\n//             }\r\n//             return tempPts;\r\n//         }\r\n//         public static Point3d GetClosesPTfromMesh(Point3d p, Mesh m)\r\n//         {\r\n//             int ClosestIndex = 0;\r\n//             List<double> dis = new List<double>();\r\n\r\n//             for (int i = 0; i < m.Vertices.Count; ++i)\r\n//             {\r\n//                 Point3d vp = m.Vertices[i];\r\n//                 dis.Add(p.DistanceTo(vp));\r\n//             }\r\n\r\n//             double temp = 10000;\r\n//             for (int i = 0; i < dis.Count; i++)\r\n//             {\r\n//                 if (dis[i] < temp)\r\n//                 {\r\n//                     temp = dis[i];\r\n//                     ClosestIndex = i;\r\n//                 }\r\n//             }\r\n//             return m.Vertices[ClosestIndex];\r\n//         }\r\n\r\n//         public List<Point3d> GetPTsInsideOfBreps(List<Brep> brep, Mesh m)\r\n//         {\r\n//             List<Point3d> tempPts = new List<Point3d>();\r\n//             foreach (Brep b in brep)\r\n//             {\r\n//                 for (int i = 0; i < m.Vertices.Count; ++i)\r\n//                 {\r\n//                     Point3d vp = m.Vertices[i];\r\n\r\n//                     if (b.IsPointInside(vp, 0.1, false))\r\n//                     {\r\n//                         tempPts.Add(vp);\r\n//                     }\r\n\r\n//                 }\r\n//             }\r\n//             return tempPts;\r\n//         }\r\n\r\n//         public List<Vector3d> GetVectorPtsFrom3pts(Point3d p0, Point3d p1, Point3d p2)\r\n//         {\r\n//             List<Point3d> pt = new List<Point3d>();\r\n//             List<Point3d> vp = new List<Point3d>();\r\n//             List<Vector3d> v = new List<Vector3d>();\r\n\r\n//             Vector3d xAxis = p1 - p0;\r\n//             Vector3d yAxis = p2 - p0;\r\n//             Vector3d zAxis = Vector3d.CrossProduct(xAxis, yAxis);\r\n//             yAxis = Vector3d.CrossProduct(zAxis, xAxis);\r\n\r\n//             xAxis.Unitize();\r\n//             yAxis.Unitize();\r\n//             zAxis.Unitize();\r\n\r\n//             v.Add(xAxis);\r\n//             v.Add(yAxis);\r\n//             v.Add(zAxis);\r\n\r\n//             return v;\r\n//         }\r\n//         /*\r\n//         public static Mesh GetPointsByWave(List<Point3d> pt, double a1, double f1, double r1, double p1, double a2, double f2, double r2, double p2)\r\n//         {\r\n\r\n//             for (int i = 0; i < pt.Count; ++i)\r\n//             {\r\n//                 Point3d p = new Point3d(m.Vertices[i]);\r\n//                 Vector3d n = new Vector3d(m.Normals[i]);\r\n//                 double s = m.TextureCoordinates[i].X;\r\n//                 double t = m.TextureCoordinates[i].Y;\r\n//                 double wp1 = Math.cos(r1) * s + Math.sin(r1) * t;\r\n//                 double wave1 = a1 * Math.cos(wp1 * f1 + p1);\r\n//                 double wp2 = Math.cos(r2) * s + Math.sin(r2) * t;\r\n//                 double wave2 = a2 * Math.cos(wp2 * f2 + p2);\r\n\r\n//                 p = p + n * wave1 * wave2;\r\n\r\n//                 m.Vertices.SetVertex(i, p);\r\n//             }\r\n\r\n//             m.FaceNormals.ComputeFaceNormals();\r\n//             m.Normals.ComputeNormals();\r\n\r\n//             return m;\r\n//         }\r\n//         */\r\n//         #region ray test\r\n//         public static bool RayTest(Point3d p, Vector3d v, List<Brep> breps)\r\n//         {\r\n//             Ray3d ray = new Rhino.Geometry.Ray3d(p, v);\r\n//             Point3d[] intersectPTS = Rhino.Geometry.Intersect.Intersection.RayShoot(ray, breps, 1000);\r\n//             if (intersectPTS == null) return false;\r\n//             return true;\r\n//         }\r\n//         public static bool RayTest(Point3d p, Vector3d v, List<Brep> breps, out Point3d[] interPoint)\r\n//         {\r\n//             Ray3d ray = new Rhino.Geometry.Ray3d(p, v);\r\n//             Point3d[] intersectPTS = Rhino.Geometry.Intersect.Intersection.RayShoot(ray, breps, 1000);\r\n//             interPoint = intersectPTS;\r\n//             if (intersectPTS == null) return false;\r\n//             return true;\r\n//         }\r\n\r\n//         #endregion\r\n\r\n//         public static List<Point3d> GetPointsWithIndex(List<Point3d> pts, int n) {\r\n\r\n//             List<Point3d> newPt = new List<Point3d>();\r\n//             for (int i = 0; i <= n; i++)\r\n//             {\r\n//                 newPt.Add(pts[i]);\r\n//             }\r\n//             return newPt;\r\n//         }\r\n//         public static List<Point3d> GetPointsFromBrepFace(Rhino.Geometry.SumSurface s) {\r\n//             List<Point3d> ptOut = new List<Point3d>();\r\n\r\n//             ptOut.Add(s.PointAt(s.Domain(0).Min, s.Domain(1).Min));\r\n//             ptOut.Add(s.PointAt(s.Domain(0).Min, s.Domain(1).Max));\r\n//             ptOut.Add(s.PointAt(s.Domain(0).Max, s.Domain(1).Max));\r\n//             ptOut.Add(s.PointAt(s.Domain(0).Max, s.Domain(1).Min));\r\n\r\n//             return ptOut;\r\n//         }\r\n//         public static Point3d[,] GetPtsArrayFromSurface(Surface surface, int xNum, int yNum)\r\n//         {\r\n//             // Statics = new StatSystem();\r\n//             // StatNode nodeStart = new StatNode[xNum, yNum];\r\n//             Point3d[,] pts = new Point3d[xNum, yNum];\r\n//             double ud = (surface.Domain(0).Max - surface.Domain(0).Min) / (double)xNum - 1.0;\r\n//             double vd = (surface.Domain(1).Max - surface.Domain(1).Min) / (double)yNum - 1.0;\r\n//             for (int j = 0; j < yNum; j++)\r\n//             {\r\n//                 double v = surface.Domain(1).Min + (j * vd);\r\n\r\n//                 for (int i = 0; i < xNum; i++)\r\n//                 {\r\n\r\n//                     double u = surface.Domain(0).Min + (i * ud); // I reverse I and J otherwise the point odering is differ from the future surface\r\n//                     Point3d pt = surface.PointAt(u, v);\r\n//                     pts[i, j] = pt;\r\n\r\n//                 }\r\n//             }\r\n//             return pts;\r\n//         }\r\n//         #region remove overlape pts\r\n//         public static public List<Point3d> RemoveOverlapedPts(List<Point3d> pts)\r\n//         {\r\n//             List<Point3d> vList = new List<Point3d>();\r\n\r\n//             vList.Add(pts[0]);\r\n\r\n//             for (int i = 1; i < pts.Count; i++)\r\n//             {\r\n//                 bool noOver = true;\r\n//                 for (int j = 0; j < vList.Count; j++)\r\n//                 {\r\n//                     //if (vList[j].X == pts[i].X && vList[j].Y == pts[i].Y && vList[j].Z == pts[i].Z)\r\n//                     if (vList[j].DistanceTo(pts[i]) < 0.00001)\r\n//                     {\r\n//                         noOver = false;\r\n//                         continue;\r\n//                     }\r\n//                 }\r\n//                 if (noOver)\r\n//                 {\r\n//                     vList.Add(pts[i]);\r\n//                 }\r\n//             }\r\n//             return vList;\r\n\r\n//         }\r\n//         #endregion\r\n//         /*\r\n//         List<Point3d> pts = x;\r\n//         List<Point3d> sorted = pts.OrderBy(p => p.Y).ThenBy(p => p.Z).ToList();\r\n//         A = sorted;\r\n//         */\r\n\r\n//         //x.OrderBy(p => p.X).ThenBy(p => p.Y).ThenBy(p => p.Z).ToList();\r\n//         #region sorting point X Y Z\r\n//         public static List<Point3d> SortingX(List<Point3d> pts, bool reverse = false)\r\n//         {\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 for (int j = 0; j < pts.Count; j++)\r\n//                 {\r\n//                     if (pts[i].X < pts[j].X)\r\n//                     {\r\n//                         Point3d temp = pts[i];\r\n//                         pts[i] = pts[j];\r\n//                         pts[j] = temp;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             if (reverse)\r\n//             {\r\n//                 pts.Reverse();\r\n//                 return pts;\r\n//             }\r\n//             else {\r\n//                 return pts;\r\n//             }\r\n//         }\r\n//         public static List<Point3d> SortingY(List<Point3d> pts, bool reverse = false)\r\n//         {\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 for (int j = 0; j < pts.Count; j++)\r\n//                 {\r\n//                     if (pts[i].Y < pts[j].Y)\r\n//                     {\r\n//                         Point3d temp = pts[i];\r\n//                         pts[i] = pts[j];\r\n//                         pts[j] = temp;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             if (reverse)\r\n//             {\r\n//                 pts.Reverse();\r\n//                 return pts;\r\n//             }\r\n//             else {\r\n//                 return pts;\r\n//             }\r\n//         }\r\n//         public static List<Point3d> SortingZ(List<Point3d> pts, bool reverse = false)\r\n//         {\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 for (int j = 0; j < pts.Count; j++)\r\n//                 {\r\n//                     if (pts[i].Z < pts[j].Z)\r\n//                     {\r\n//                         Point3d temp = pts[i];\r\n//                         pts[i] = pts[j];\r\n//                         pts[j] = temp;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             if (reverse)\r\n//             {\r\n//                 pts.Reverse();\r\n//                 return pts;\r\n//             }\r\n//             else {\r\n//                 return pts;\r\n//             }\r\n//         }\r\n//         #endregion\r\n//         #region\r\n//         // get angle from two vectors or points\r\n//         public static public double GetDegreeBetweenPoints(Vector3d a, Vector3d b)\r\n//         {\r\n//             double deltaY = b.Y - a.Y;\r\n//             double deltaX = b.X - a.X;\r\n//             return Math.Atan2(deltaY, deltaX);\r\n//         }\r\n//         public static public double GetDegreeBetweenPoints(Point3d a, Point3d b)\r\n//         {\r\n//             double deltaY = b.Y - a.Y;\r\n//             double deltaX = b.X - a.X;\r\n//             return Math.Atan2(deltaY, deltaX);\r\n//         }\r\n//         #endregion get angle from two vectors or points\r\n//         #region get diamond grid from point grid\r\n//         public static public List<Point3d> GetBumpFromPointSurface(List<Point3d> pts, int u, int v, Surface s, double scale = 10)\r\n//         {\r\n//             List<Point3d> newPts = new List<Point3d>();\r\n\r\n//             if (u % 2 != 0)\r\n//             {\r\n//                 for (int i = 0; i < v; ++i)\r\n//                 {\r\n//                     for (int j = 0; j < u; ++j)\r\n//                     {\r\n//                         int k = i * u + j;\r\n//                         double theU, theV;\r\n//                         s.ClosestPoint(pts[k], out theU, out theV);\r\n//                         Vector3d nv = s.NormalAt(theU, theV);\r\n//                         if (k % 2 != 0)\r\n//                         {\r\n//                             Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                             tp += nv * (-scale);\r\n//                             newPts.Add(tp);\r\n//                         }\r\n//                         else\r\n//                         {\r\n//                             Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                             tp += nv * scale;\r\n//                             newPts.Add(tp);\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             else\r\n//             {\r\n//                 for (int i = 0; i < v; ++i)\r\n//                 {\r\n//                     for (int j = 0; j < u; ++j)\r\n//                     {\r\n//                         int k = i * u + j;\r\n//                         double theU, theV;\r\n//                         s.ClosestPoint(pts[k], out theU, out theV);\r\n//                         Vector3d nv = s.NormalAt(theU, theV);\r\n//                         if (i % 2 != 0)\r\n//                         {\r\n\r\n//                             if (k % 2 != 0)\r\n//                             {\r\n//                                 Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                                 tp += nv * (-scale);\r\n//                                 newPts.Add(tp);\r\n//                             }\r\n//                             else\r\n//                             {\r\n//                                 Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                                 tp += nv * scale;\r\n//                                 newPts.Add(tp);\r\n//                             }\r\n//                         }\r\n//                         else\r\n//                         {\r\n//                             if (k % 2 == 0)\r\n//                             {\r\n//                                 Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                                 tp += nv * (-scale);\r\n//                                 newPts.Add(tp);\r\n//                             }\r\n//                             else\r\n//                             {\r\n//                                 Point3d tp = new Point3d(pts[k].X, pts[k].Y, pts[k].Z);\r\n//                                 tp += nv * scale;\r\n//                                 newPts.Add(tp);\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return newPts;\r\n//         }\r\n\r\n//         public static public List<Polyline> GetDiaGrid(List<Point3d> pts, int u, int v)\r\n//         {\r\n//             List<Point3d> ptsOut = new List<Point3d>();\r\n//             List<Line> lns = new List<Line>();\r\n//             List<Polyline> pls = new List<Polyline>();\r\n//             for (int i = 0; i < v; ++i)\r\n//             {\r\n//                 for (int j = 0; j < u; ++j)\r\n//                 {\r\n//                     if (i < v - 2 && 0 < j && j < u - 1)\r\n//                     {\r\n//                         if (i % 2 == 0 && j % 2 == 1)\r\n//                         {\r\n\r\n//                             int k0 = i * u + j;\r\n//                             int k1 = (i * u + j) + u + 1;\r\n//                             int k2 = (i * u + j) + u + u;\r\n//                             int k3 = (i * u + j) + u - 1;\r\n\r\n//                             Point3d p0 = pts[k0];\r\n//                             Point3d p1 = pts[k1];\r\n//                             Point3d p2 = pts[k2];\r\n//                             Point3d p3 = pts[k3];\r\n\r\n//                             Line ln0 = new Line(p0, p1);\r\n//                             Line ln1 = new Line(p1, p2);\r\n//                             Line ln2 = new Line(p2, p3);\r\n//                             Line ln3 = new Line(p3, p0);\r\n\r\n//                             ptsOut.Add(p0);\r\n//                             ptsOut.Add(p1);\r\n\r\n//                             lns.Add(ln0);\r\n//                             lns.Add(ln1);\r\n//                             lns.Add(ln2);\r\n//                             lns.Add(ln3);\r\n\r\n//                             Polyline pl = new Polyline();\r\n//                             pl.Add(p0);\r\n//                             pl.Add(p1);\r\n//                             pl.Add(p2);\r\n//                             pl.Add(p3);\r\n//                             pl.Add(p0);\r\n//                             pls.Add(pl);\r\n//                             if (1 < i && j < u - 2)\r\n//                             {\r\n//                                 int kp1 = (i * u + j) - u + 1;\r\n//                                 int kp2 = (i * u + j) + 2;\r\n//                                 int kp3 = (i * u + j) + u + 1;\r\n\r\n//                                 Point3d pp0 = pts[k0];\r\n//                                 Point3d pp1 = pts[kp1];\r\n//                                 Point3d pp2 = pts[kp2];\r\n//                                 Point3d pp3 = pts[kp3];\r\n\r\n//                                 Line lnp0 = new Line(pp0, pp1);\r\n//                                 Line lnp1 = new Line(pp1, pp2);\r\n//                                 Line lnp2 = new Line(pp2, pp3);\r\n//                                 Line lnp3 = new Line(pp3, pp0);\r\n\r\n//                                 ptsOut.Add(pp0);\r\n//                                 ptsOut.Add(pp1);\r\n\r\n//                                 lns.Add(lnp0);\r\n//                                 lns.Add(lnp1);\r\n//                                 lns.Add(lnp2);\r\n//                                 lns.Add(lnp3);\r\n\r\n//                                 Polyline plp = new Polyline();\r\n//                                 plp.Add(pp0);\r\n//                                 plp.Add(pp1);\r\n//                                 plp.Add(pp2);\r\n//                                 plp.Add(pp3);\r\n//                                 plp.Add(pp0);\r\n//                                 pls.Add(plp);\r\n\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return pls;\r\n//         }\r\n\r\n//         public static public Surface GetSurfaceFromPts(List<Point3d> pts, int uCount, int vCount, int uDegree = 3, int vDegree = 3)\r\n//         {\r\n//             Surface m = Rhino.Geometry.NurbsSurface.CreateFromPoints(pts, vCount, uCount, uDegree, vDegree);\r\n//             return m;\r\n//         }\r\n\r\n//         #endregion\r\n\r\n//         public static public List<Point3d> GetBumpFromPointGrid(List<Point3d> pts, int u, int v) {\r\n//             List<Point3d> newPts = new List<Point3d>();\r\n//             if (u % 2 != 0) {\r\n//                 for (int i = 0; i < v; ++i) {\r\n//                     for (int j = 0; j < u; ++j) {\r\n//                         int k = i * u + j;\r\n//                         if (k % 2 != 0) newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z));\r\n//                         else newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z + 3));\r\n//                     }\r\n//                 }\r\n//             }else{\r\n//                 for (int i = 0; i < v; ++i) {\r\n//                     for (int j = 0; j < u; ++j) {\r\n//                         int k = i * u + j;\r\n//                         if (i % 2 != 0) {\r\n//                             if (k % 2 != 0) newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z));\r\n//                             else newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z + 3));\r\n//                         }else{\r\n//                             if (k % 2 == 0) newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z));\r\n//                             else newPts.Add(new Point3d(pts[k].X, pts[k].Y, pts[k].Z + 3));\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return newPts;\r\n//         }\r\n\r\n//         // get boundaryBox from Pline\r\n//         public static List<Point3d> GetBoundaryFromPline(List<Point3d> pts)\r\n//         {\r\n//             List<Point3d> boundaryPts = new List<Point3d>();\r\n//             Point3d p1 = Point3d.Origin;\r\n//             Point3d p2 = Point3d.Origin;\r\n//             for (int i = 0; i < pts.Count; i++)\r\n//             {\r\n//                 if (i == 0)\r\n//                 {\r\n//                     p1 = new Point3d(pts[i].X, pts[i].Y, pts[i].Z);\r\n//                     p2 = new Point3d(pts[i].X, pts[i].Y, pts[i].Z);\r\n//                 }\r\n//                 if (p1.X > pts[i].X) p1.X = pts[i].X;\r\n//                 if (p1.Y > pts[i].Y) p1.Y = pts[i].Y;\r\n//                 if (p1.Z > pts[i].Z) p1.Z = pts[i].Z;\r\n\r\n//                 if (p2.X < pts[i].X) p2.X = pts[i].X;\r\n//                 if (p2.Y < pts[i].Y) p2.Y = pts[i].Y;\r\n//                 if (p2.Z < pts[i].Z) p2.Z = pts[i].Z;\r\n//             }\r\n//             boundaryPts.Add(p1);\r\n//             boundaryPts.Add(new Point3d(p2.X, p1.Y, p1.Z));\r\n//             boundaryPts.Add(p2);\r\n//             boundaryPts.Add(new Point3d(p1.X, p2.Y, p2.Z));\r\n//             return boundaryPts;\r\n//         }\r\n//         // endget boundaryBox from Pline\r\n\r\n//         // IsInside // https://github.com/substack/point-in-polygon\r\n//         public static public bool IsInside(Point3d v, List<Point3d> vecs) {\r\n//             double x = v.X, y = v.Y;\r\n//             bool inside = false;\r\n//             for (int i = 0, j = vecs.Count - 1; i < vecs.Count; j = i++) {\r\n//                 double xi = vecs[i].X, yi = vecs[i].Y;\r\n//                 double xj = vecs[j].X, yj = vecs[j].Y;\r\n//                 bool intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n//                 if (intersect) inside = !inside;\r\n//             }\r\n//             return inside;\r\n//         }\r\n//         // end IsInside\r\n\r\n//         public static List<Point3d> GetPoint3dInsideBrep(List<Brep> bs, List<Point3d> ps) {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n//             foreach (Point3d p in ps) {\r\n//                 foreach (Brep b in bs) {\r\n//                     if (b.IsPointInside(p, 0.1, true)) {\r\n//                         pts.Add(p);\r\n//                         break;\r\n//                     }\r\n//                 }\r\n//             }\r\n//             return pts;\r\n//         }\r\n//         // https://web.archive.org/web/20100405070507/http:/valis.cs.uiuc.edu/~sariel/research/CG/compgeom/msg00831.html\r\n//         public double GetArea2(List<Point3d> pts)\r\n//         {\r\n\r\n//             double area = 0;\r\n//             //double center2dx = 0;\r\n//             //double center2dy = 0;\r\n\r\n//             for (int i = 0; i < pts.Count - 1; i++)\r\n//             {\r\n//                 //tmreal t = 2 * pts[i].X * pts[i + 0].Y + pts[i].Y * pts[i + 1].X + pts[i].X * pts[i + 1].Y + 2 * pts[i + 1].X * pts[i + 1].Y;\r\n//                 area += (pts[i].X - pts[i + 1].X) * (pts[i].Y + pts[i + 1].Y);\r\n//                 //center2d.x += (+pts[i].X - pts[i + 1].X) * t;\r\n//                 //center2d.y += (-pts[i].Y + pts[i + 1].Y) * t;\r\n\r\n//             }\r\n//             area *= 0.5;\r\n\r\n//             //center2dx *= 1 / (6 * area);\r\n//             //center2dy *= 1 / (6 * area);\r\n\r\n//             return area;\r\n//         }\r\n//         /*\r\n\r\n//       //...........................................................6\r\n//       private void RunScript(double k, ref object outPt)\r\n//       {\r\n\r\n//         List<Point3d> pts = new List<Point3d>();\r\n\r\n//         double radiiInterval = (10.0 - 2.0 ) / (double) 10;\r\n//         double kInterval = (k - 0.0 ) / (double) 20;\r\n\r\n//         for (int j = 0 ; j < 20; j++) {\r\n//           double angle = kInterval * j;\r\n//           for (int i = 0 ; i < 10; i++) {\r\n//             double radius = radiiInterval * i;\r\n\r\n//             double x = radius * Math.cos(angle);\r\n//             double y = radius * Math.sin(angle);\r\n\r\n//             pts.Add(new Point3d(x, y, 0));\r\n\r\n//           }\r\n//         }\r\n//         outPt = pts;\r\n//       }\r\n//       //...........................................................6 -1\r\n//      List<Point3d> pts = new List<Point3d>();\r\n//     //domain interval\r\n//     double radiiInterval = (10.0 - 2.0 ) / (double) 10;\r\n//     double kInterval = (k - 0.0 ) / (double) 20;\r\n\r\n//     double positionX = 0;\r\n//     double positionY = 0;\r\n\r\n//     for (int y = 0 ; y < 10; y++) {\r\n//       for (int x = 2 ; x < 20; x++) {\r\n\r\n//         //double ang = Math.Atan(i / j);\r\n\r\n//         pts.Add(new Point3d(positionY * Math.cos(positionX), positionY * Math.sin(positionX), 0));\r\n//         positionX += radiiInterval;\r\n//       }\r\n\r\n//       positionY += kInterval;\r\n//       //radiiInterval += radiiInterval;\r\n//     }\r\n//     outPt = pts;\r\n//     //pts.append(rs.AddPoint(y * math.cos(x), y * math.sin(x), 0))\r\n\r\n//       //...........................................................7\r\n//   private void RunScript(double k, ref object outPt)\r\n//   {\r\n\r\n//     List<Point3d> pts = new List<Point3d>();\r\n//     // domain interval\r\n//     double radiiInterval = (10.0 - 2.0 ) / (double) 10;\r\n//     double kInterval = (k - 0.0 ) / (double) 20;\r\n//     for (int j = 0 ; j < 20; j++) {\r\n//       double angle = kInterval * j;\r\n//       for (int i = 2 ; i < 10; i++) {\r\n//         double radius = radiiInterval * i;\r\n//         double y = Math.sinh(radius) * (Math.sin(angle));\r\n//         double x = Math.cosh(radius) * (Math.cos(angle));\r\n//         pts.Add(new Point3d(x, y, 0));\r\n//       }\r\n//     }\r\n//     outPt = pts;\r\n\r\n//   }\r\n//         //...........................................................7-1\r\n//       List<Point3d> pts = new List<Point3d>();\r\n//     // domain interval\r\n//     double radiiInterval = (10.0 - 2.0 ) / (double) 10;\r\n//     double kInterval = (k - 0.0 ) / (double) 20;\r\n\r\n//     //double positionY = 0.0;\r\n//     double positionX = 0.0;\r\n//     double positionY = 0.0;\r\n\r\n//     for (int i = 0 ; i < 10; i++) {\r\n\r\n//       double x = Math.cosh(positionX) * (Math.cos(positionY));\r\n\r\n//       // x = a \\ \\cosh \\ mu \\ \\cos \\ nu\r\n//       double y = Math.sinh(positionX) * (Math.sin(positionY));\r\n\r\n//       //double y = positionX * Math.sin(Math.PI / positionY);\r\n\r\n//       pts.Add(new Point3d(x, y, 0));\r\n\r\n//       positionX += radiiInterval;\r\n//       positionY += kInterval;\r\n//     }\r\n\r\n//     outPt = pts;\r\n//     //........................................................... 2016 version\r\n//     List<Point3d> pts = GetPointPolarCoordin(x, y);\r\n//     A = pts;\r\n//     B = GetPolylinePolarCoordin(x, y);\r\n\r\n//   List<Point3d> GetPointPolarCoordin(int u, int v) {\r\n//     List<Point3d> pts = new List<Point3d>();\r\n//     for (int j = 0; j < v; ++j) {\r\n//       for (int i = 0; i < u; ++i) {\r\n//         Point3d p = GetPointForPolarCoordinate(i, j);\r\n//         //Point3d p = GetPointForEllipticCoordinate(i, j);\r\n//         pts.Add(p);\r\n//       }\r\n//     }\r\n//     return pts;\r\n//   }\r\n//   List<Polyline> GetPolylinePolarCoordin(int u, int v) {\r\n//     List<Polyline> pls = new List<Polyline>();\r\n//     double radius = v / (3.14 * 2);\r\n//     for (int j = 0; j < v; ++j) {\r\n//       Polyline pl = new Polyline();\r\n//       for (int i = 0; i < u; ++i) {\r\n//         //Point3d p = GetPointForPolarCoordinate(i, radius * j);\r\n//         Point3d p = GetPointForEllipticCoordinate(i, j);\r\n//         pl.Add(p);\r\n//       }\r\n//       pls.Add(pl);\r\n//     }\r\n//     for (int j = 0; j < v; ++j) {\r\n//       Polyline pl = new Polyline();\r\n//       for (int i = 0; i < u; ++i) {\r\n//         //Point3d p = GetPointForPolarCoordinate(j, i);\r\n//         Point3d p = GetPointForEllipticCoordinate(i, j);\r\n//         pl.Add(p);\r\n//       }\r\n//       pls.Add(pl);\r\n//     }\r\n//     return pls;\r\n//   }\r\n//     public List<Point3d> GetPointsForPolarCoordinate(int xNum, int yNum, double k, double r) {\r\n//     List<Point3d> pts = new List<Point3d>();\r\n//     double radiiInterval = (10.0 - 2.0 ) / (double) r;\r\n//     double kInterval = (k - 0.0 ) / (double) 20;\r\n//     for (int j = 0 ; j < xNum; j++) {\r\n//       double angle = kInterval * j;\r\n//       for (int i = 0 ; i < yNum; i++) {\r\n//         double radius = radiiInterval * i;\r\n//         double x = radius * Math.cos(angle);\r\n//         double y = radius * Math.sin(angle);\r\n//         pts.Add(new Point3d(x, y, 0));\r\n//       }\r\n//     }\r\n//     return pts;\r\n//   }\r\n//   Point3d GetPointForPolarCoordinate(double radius, double degree) {\r\n//     double x = radius * Math.sin(degree);\r\n//     double y = radius * Math.cos(degree);\r\n//     return new Point3d(x, y, 0);\r\n//     return new Point3d(radius, degree, 0);\r\n//   }\r\n//   public List<Point3d> GetPointsForPolarCoordinate(int xNum, int yNum, double k, double r) {\r\n//     List<Point3d> pts = new List<Point3d>();\r\n//     double radiiInterval = (10.0 - 2.0 ) / (double) r;\r\n//     double kInterval = (k - 0.0 ) / (double) 20;\r\n//     for (int j = 0 ; j < xNum; j++) {\r\n//       double angle = kInterval * j;\r\n//       for (int i = 0 ; i < yNum; i++) {\r\n//         double radius = radiiInterval * i;\r\n//         double u = radius;\r\n//         double v = angle;\r\n//         double x = 2 * Math.cosh(u) * Math.cos(v);\r\n//         double y = 2 * Math.sinh(u) * Math.sin(v);\r\n//         pts.Add(new Point3d(x, y, 0));\r\n//       }\r\n//     }\r\n//     return pts;\r\n//   }\r\n//   Point3d GetPointForEllipticCoordinate(double u, double v) {\r\n//     double x = 2 * Math.cosh(u) * Math.cos(v);\r\n//     double y = 2 * Math.sinh(u) * Math.sin(v);\r\n//     return new Point3d(x, y, 0);\r\n//   }\r\n//         */\r\n\r\n//         public static public List<Point3d> GetStartEndPTfromLine(List<Line> lns)\r\n//         {\r\n//             List<Point3d> pts = new List<Point3d>();\r\n//             foreach (Line l in lns)\r\n//             {\r\n//                 NurbsCurve c = l.ToNurbsCurve();\r\n//                 pts.Add(c.PointAtStart);\r\n//                 pts.Add(c.PointAtEnd);\r\n//             }\r\n//             return pts;\r\n//         }\r\n\r\n//         public static public List<Point3d> GetPtsInsideCurve(List<Point3d> pts, List<Curve> curves) {\r\n//             List<Point3d> ptOut = new List<Point3d>();\r\n//             foreach (Point3d p in pts) {\r\n//                 bool inside = false;\r\n//                 foreach (Curve c in curves) {\r\n//                     if (c.Contains(p) == PointContainment.Inside) {\r\n//                         inside = true;\r\n//                         continue;\r\n//                     }\r\n//                 }\r\n//                 if (inside) ptOut.Add(p);\r\n//             }\r\n//             return ptOut;\r\n//         }\r\n//         //////////////////// Grid preset\r\n//         #region\r\n\r\n//         public List<Line> GetGrid2DVertical(Point3d p1, int rx, double width, double height, int mod, int mtype, double dist, out List<Point3d> ptsOut)\r\n//         {\r\n//             int i;\r\n//             int j;\r\n\r\n//             double dx = (p1.X + width - p1.X) / (double)(rx - 1.0);\r\n//             int ry = (int)(0.5 + (p1.Y + height - p1.Y) / dx);\r\n//             //int rz = (int) (0.5 + (p1.Z + height - p1.Z) / dx);\r\n\r\n//             List<Point3d> pt = new List<Point3d>();\r\n\r\n//             for (j = 0; j < ry; j++)\r\n//             {\r\n//                 for (i = 0; i < rx; i++)\r\n//                 {\r\n//                     double x = p1.X + i * dx;\r\n//                     double y = p1.Y;\r\n//                     double z = p1.Z + j * dx; // p1.Z;\r\n//                     if (mtype == 0)\r\n//                     {\r\n//                         if ((i * i - j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 1)\r\n//                     {\r\n//                         if ((i * i + j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 2)\r\n//                     {\r\n//                         if ((i * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else\r\n//                     {\r\n//                         if ((i * j + j * i) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             List<Line> ln = new List<Line>();\r\n//             double d2 = dist * dist;\r\n//             for (j = 0; j < pt.Count; ++j)\r\n//             {\r\n//                 for (i = j + 1; i < pt.Count; ++i)\r\n//                 {\r\n//                     if (dist2(pt[i], pt[j]) < d2)\r\n//                     {\r\n//                         ln.Add(new Line(pt[i], pt[j]));\r\n//                     }\r\n//                 }\r\n//             }\r\n//             ptsOut = pt;\r\n//             return ln;\r\n//         }\r\n\r\n//         public List<Line> GetGrid2D(Point3d p1, Point3d p2, int rx, int mod, int mtype, double dist, out List<Point3d> ptsOut, out List<List<int>> Connectivity)\r\n//         {\r\n//             int i;\r\n//             int j;\r\n\r\n//             double dx = (p2.X - p1.X) / (double)(rx - 1.0);\r\n//             int ry = (int)(0.5 + (p2.Y - p1.Y) / dx);\r\n//             int rz = (int)(0.5 + (p2.Z - p1.Z) / dx);\r\n\r\n//             List<Point3d> pt = new List<Point3d>();\r\n\r\n//             for (j = 0; j < ry; j++)\r\n//             {\r\n//                 for (i = 0; i < rx; i++)\r\n//                 {\r\n//                     double x = p1.X + i * dx;\r\n//                     double y = p1.Y + j * dx;\r\n//                     double z = p1.Z;\r\n//                     if (mtype == 0)\r\n//                     {\r\n//                         if ((i * i - j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 1)\r\n//                     {\r\n//                         if ((i * i + j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 2)\r\n//                     {\r\n//                         if ((i * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else\r\n//                     {\r\n//                         if ((i * j + j * i) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                 }\r\n\r\n//             }\r\n\r\n//             List<List<int>> connectivity = new List<List<int>>();\r\n//             List<Line> ln = new List<Line>();\r\n//             double d2 = dist * dist;\r\n//             for (j = 0; j < pt.Count; ++j)\r\n//             {\r\n//                 List<int> temp = new List<int>();\r\n//                 for (i = j + 1; i < pt.Count; ++i)\r\n//                 {\r\n//                     if (dist2(pt[i], pt[j]) < d2)\r\n//                     {\r\n//                         temp.Add(i);\r\n//                         temp.Add(j);\r\n//                         ln.Add(new Line(pt[i], pt[j]));\r\n//                     }\r\n\r\n//                 }\r\n//                 connectivity.Add(temp);\r\n//             }\r\n//             Connectivity = connectivity;\r\n//             ptsOut = pt;\r\n//             return ln;\r\n//         }\r\n\r\n//         public List<Line> GetGrid3D(Point3d p1, Point3d p2, int rx, int mod, int mtype, double dist, out List<Point3d> ptsOut)\r\n//         {\r\n//             int i;\r\n//             int j;\r\n//             int k;\r\n//             double dx = (p2.X - p1.X) / (double)(rx - 1.0);\r\n//             int ry = (int)(0.5 + (p2.Y - p1.Y) / dx);\r\n//             int rz = (int)(0.5 + (p2.Z - p1.Z) / dx);\r\n\r\n//             List<Point3d> pt = new List<Point3d>();\r\n//             for (k = 0; k < rz; ++k) {\r\n//                 for (j = 0; j < ry; j++) {\r\n//                     for (i = 0; i < rx; i++) {\r\n//                         double x = p1.X + i * dx;\r\n//                         double y = p1.Y + j * dx;\r\n//                         double z = p1.Z + k * dx;\r\n//                         if (mtype == 0) {\r\n//                             if ((i * i - j * j + k * k) % mod == 0) {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else if (mtype == 1)\r\n//                         {\r\n//                             if ((i * i + j * j + k * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else if (mtype == 2)\r\n//                         {\r\n//                             if ((i * j * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else\r\n//                         {\r\n//                             if ((i * j + j * k + i * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             List<Line> ln = new List<Line>();\r\n//             double d2 = dist * dist;\r\n//             for (j = 0; j < pt.Count; ++j) {\r\n//                 for (i = j + 1; i < pt.Count; ++i) {\r\n//                     if (dist2(pt[i], pt[j]) < d2) {\r\n//                         ln.Add(new Line(pt[i], pt[j]));\r\n//                     }\r\n//                 }\r\n//             }\r\n//             ptsOut = pt;\r\n//             return ln;\r\n//         }\r\n//         public List<Line> GetGrid2DFromSurface(Surface surface, int xNum, int yNum, int mod, int mtype, double dist, out List<Point3d> ptsOut)\r\n//         {\r\n//             int i;\r\n//             int j;\r\n//             double ud = (surface.Domain(0).Max - surface.Domain(0).Min) / (double)(xNum - 1);\r\n//             double vd = (surface.Domain(1).Max - surface.Domain(1).Min) / (double)(yNum - 1); ;\r\n\r\n//             List<Point3d> pt = new List<Point3d>();\r\n\r\n//             for (j = 0; j < yNum; j++)\r\n//             {\r\n//                 double v = surface.Domain(1).Min + (j * vd);\r\n//                 for (i = 0; i < xNum; i++)\r\n//                 {\r\n\r\n//                     double u = surface.Domain(0).Min + (i * ud); // I reverse I and J otherwise the point odering is differ from the future surface\r\n\r\n//                     Point3d tpt = surface.PointAt(u, v);\r\n//                     //pts.Add(pt)\r\n\r\n//                     double x = tpt.X; //p1.X + i * dx;\r\n//                     double y = tpt.Y; //p1.Y;\r\n//                     double z = tpt.Z; //p1.Z + j * dx; // p1.Z;\r\n//                     if (mtype == 0)\r\n//                     {\r\n//                         if ((i * i - j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 1)\r\n//                     {\r\n//                         if ((i * i + j * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else if (mtype == 2)\r\n//                     {\r\n//                         if ((i * j) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                     else\r\n//                     {\r\n//                         if ((i * j + j * i) % mod == 0)\r\n//                         {\r\n//                             pt.Add(new Point3d(x, y, z));\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             List<Line> ln = new List<Line>();\r\n//             double d2 = dist * dist;\r\n//             for (j = 0; j < pt.Count; ++j)\r\n//             {\r\n//                 for (i = j + 1; i < pt.Count; ++i)\r\n//                 {\r\n//                     if (dist2(pt[i], pt[j]) < d2)\r\n//                     {\r\n//                         ln.Add(new Line(pt[i], pt[j]));\r\n//                     }\r\n//                 }\r\n//             }\r\n//             ptsOut = pt;\r\n//             return ln;\r\n//         }\r\n//         public static public Point3d GetCenterPtFromMesh(Mesh m) {\r\n//             Point3d cp = new Point3d(0, 0, 0);\r\n//             foreach (Point3d p in m.Vertices) {\r\n//                 cp += p;\r\n//             }\r\n//             cp /= m.Vertices.Count;\r\n//             return cp;\r\n//         }\r\n//         public List<Line> GetGrid3DFromSurface(Surface surface, int xNum, int yNum, int zNum, double zLength, int mod, int mtype, double dist, out List<Point3d> ptsOut)\r\n//         {\r\n//             int i;\r\n//             int j;\r\n//             int k;\r\n//             double ud = (surface.Domain(0).Max - surface.Domain(0).Min) / (double)(xNum - 1);\r\n//             double vd = (surface.Domain(1).Max - surface.Domain(1).Min) / (double)(yNum - 1); ;\r\n//             double zd = zLength / (double)(zNum - 1); ;\r\n\r\n//             List<Point3d> pt = new List<Point3d>();\r\n//             for (k = 0; k < zNum; k++)\r\n//             {\r\n//                 for (j = 0; j < yNum; j++)\r\n//                 {\r\n//                     double v = surface.Domain(1).Min + (j * vd);\r\n//                     for (i = 0; i < xNum; i++)\r\n//                     {\r\n\r\n//                         double u = surface.Domain(0).Min + (i * ud); // I reverse I and J otherwise the point odering is differ from the future surface\r\n\r\n//                         Point3d tpt = surface.PointAt(u, v);\r\n//                         Vector3d nv = surface.NormalAt(u, v);\r\n//                         tpt += nv * zd * k;\r\n//                         //pts.Add(pt)\r\n\r\n//                         double x = tpt.X; //p1.X + i * dx;\r\n//                         double y = tpt.Y; //p1.Y;\r\n//                         double z = tpt.Z; //p1.Z + j * dx; // p1.Z;\r\n//                         if (mtype == 0)\r\n//                         {\r\n//                             if ((i * i - j * j + k * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else if (mtype == 1)\r\n//                         {\r\n//                             if ((i * i + j * j + k * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else if (mtype == 2)\r\n//                         {\r\n//                             if ((i * j * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                         else\r\n//                         {\r\n//                             if ((i * j + j * k + i * k) % mod == 0)\r\n//                             {\r\n//                                 pt.Add(new Point3d(x, y, z));\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//             List<Line> ln = new List<Line>();\r\n//             double d2 = dist * dist;\r\n//             for (j = 0; j < pt.Count; ++j)\r\n//             {\r\n//                 for (i = j + 1; i < pt.Count; ++i)\r\n//                 {\r\n//                     if (dist2(pt[i], pt[j]) < d2)\r\n//                     {\r\n//                         ln.Add(new Line(pt[i], pt[j]));\r\n//                     }\r\n//                 }\r\n//             }\r\n//             ptsOut = pt;\r\n//             return ln;\r\n//         }\r\n//         double dist2(Point3d p0, Point3d p1)\r\n//         {\r\n//             return (p0.X - p1.X) * (p0.X - p1.X) + (p0.Y - p1.Y) * (p0.Y - p1.Y) + (p0.Z - p1.Z) * (p0.Z - p1.Z);\r\n//         }\r\n//         #endregion\r\n//     } //end class\r\n// } // end namescape\r\n","export class NumericalMotion {\r\n    public static t: number = 0.0;\r\n    public static Scale(r: number) { return (Math.sin(NumericalMotion.t) + 5.0) * 0.2 * r; }\r\n    public static ScaleLocalT(r: number, t: number) { return (Math.sin(t) + 5.0) * 0.2 * r; }\r\n    public static ScaleMin(r: number) { return ((Math.sin(NumericalMotion.t) + 5.0) * 0.02 + 0.9) * r; }\r\n    public static ScaleMinOfMin(t: number) { return Math.cos(t); }\r\n    public static ScaleMinLocalT(r: number, t: number) { return ((Math.sin(t) + 5.0) * 0.02 + 0.9) * r; }\r\n    // reference for easing motion.\r\n    // https://codepen.io/xerxesnoble/pen/JNgmJR?editors=0010\r\n    public static linear(t: number) { return t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuad(t: number) { return t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuad(t: number) { return t * (2 - t); }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuad(t: number) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInCubic(t: number) { return t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutCubic(t: number) { return (--t) * t * t + 1; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutCubic(t: number) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuart(t: number) { return t * t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuart(t: number) { return 1 - (--t) * t * t * t; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuart(t: number) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuint(t: number) { return t * t * t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuint(t: number) { return 1 + (--t) * t * t * t * t; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuint(t: number) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\r\n    // elastic bounce effect at the beginning\r\n    public static EaseInElastic(t: number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1; }\r\n    // elastic bounce effect at the end\r\n    public static EaseOutElastic(t: number) { return .04 * t / (--t) * Math.sin(25 * t); }\r\n    // elastic bounce effect at the beginning and end\r\n    public static EaseInOutElastic(t: number) { t -= .5; return t < 0 ? (.01 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1; }\r\n\r\n    // https://joshondesign.com/2013/03/01/improvedEasingEquations\r\n    public static easeOutElastic2(t: number) { var p = 0.3; return Math.pow(2, -10 * t) * Math.sin((t - p / 4) * (2 * Math.PI) / p) + 1; }\r\n\r\n    // https://github.com/AndrewRayCode/easing-utils/blob/master/src/easing.js\r\n    // Slight acceleration from zero to full speed\r\n    public static easeInSine(t: number) { return -1 * Math.cos(t * (Math.PI / 2)) + 1; }\r\n    // Slight deceleration at the end\r\n    public static easeOutSine(t: number) { return Math.sin(t * (Math.PI / 2)); }\r\n    // Slight acceleration at beginning and slight deceleration at end\r\n    public static easeInOutSine(t: number) { return -0.5 * (Math.cos(Math.PI * t) - 1); }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuad(t: number) { return t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuad(t: number) { return t * (2 - t); }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuad(t: number) { return t < 0.5 ? 2 * t * t : - 1 + (4 - 2 * t) * t; }\r\n    // Accelerating from zero velocity\r\n    public static easeInCubic(t: number) { return t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutCubic(t: number) { const t1 = t - 1; return t1 * t1 * t1 + 1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutCubic(t: number) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuart(t: number) { return t * t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuart(t: number) { const t1 = t - 1; return 1 - t1 * t1 * t1 * t1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuart(t: number) { const t1 = t - 1; return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1; }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuint(t: number) { return t * t * t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuint(t: number) { const t1 = t - 1; return 1 + t1 * t1 * t1 * t1 * t1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuint(t: number) { const t1 = t - 1; return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * t1 * t1 * t1 * t1 * t1; }\r\n    // Accelerate exponentially until finish\r\n    public static easeInExpo(t: number) { if (t === 0) { return 0; } return Math.pow(2, 10 * (t - 1)); }\r\n    // Initial exponential acceleration slowing to stop\r\n    public static easeOutExpo(t: number) { if (t === 1) { return 1; } return (-Math.pow(2, -10 * t) + 1); }\r\n    // Exponential acceleration and deceleration\r\n    public static easeInOutExpo(t: number) {\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 1;\r\n        if (scaledTime < 1) { return 0.5 * Math.pow(2, 10 * (scaledTime1)); } return 0.5 * (-Math.pow(2, -10 * scaledTime1) + 2);\r\n    }\r\n    // Increasing velocity until stop\r\n    public static easeInCirc(t: number) { const scaledTime = t / 1; return -1 * (Math.sqrt(1 - scaledTime * t) - 1); }\r\n    // Start fast, decreasing velocity until stop\r\n    public static easeOutCirc(t: number) { const t1 = t - 1; return Math.sqrt(1 - t1 * t1); }\r\n    // Fast increase in velocity, fast decrease in velocity\r\n    public static easeInOutCirc(t: number) {\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 2;\r\n        if (scaledTime < 1) { return -0.5 * (Math.sqrt(1 - scaledTime * scaledTime) - 1); }\r\n        return 0.5 * (Math.sqrt(1 - scaledTime1 * scaledTime1) + 1);\r\n    }\r\n    // Slow movement backwards then fast snap to finish\r\n    public static easeInBack(t: number, magnitude: number = 1.70158) { return t * t * ((magnitude + 1) * t - magnitude); }\r\n    // Fast snap to backwards point then slow resolve to finish\r\n    public static easeOutBack(t: number, magnitude: number = 1.70158) {\r\n        const scaledTime = (t / 1) - 1; return (scaledTime * scaledTime * ((magnitude + 1) * scaledTime + magnitude)) + 1;\r\n    }\r\n    // Slow movement backwards, fast snap to past finish, slow resolve to finish\r\n    public static easeInOutBack(t: number, magnitude: number = 1.70158) {\r\n        const scaledTime = t * 2;\r\n        const scaledTime2 = scaledTime - 2;\r\n        const s = magnitude * 1.525;\r\n        if (scaledTime < 1) { return 0.5 * scaledTime * scaledTime * (((s + 1) * scaledTime) - s); }\r\n        return 0.5 * (scaledTime2 * scaledTime2 * ((s + 1) * scaledTime2 + s) + 2);\r\n    }\r\n    // Bounces slowly then quickly to finish\r\n    public static easeInElastic(t: number, magnitude: number = 0.7) {\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t / 1;\r\n        const scaledTime1 = scaledTime - 1;\r\n        const p = 1 - magnitude;\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        return -(Math.pow(2, 10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\r\n    }\r\n    // Fast acceleration, bounces to zero\r\n    public static easeOutElastic(t: number, magnitude: number = 0.7) {\r\n        const p = 1 - magnitude;\r\n        const scaledTime = t * 2;\r\n        if (t === 0 || t === 1) { return t; }\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        return (Math.pow(2, -10 * scaledTime) * Math.sin((scaledTime - s) * (2 * Math.PI) / p)) + 1;\r\n    }\r\n    // Slow start and end, two bounces sandwich a fast motion\r\n    public static easeInOutElastic(t: number, magnitude: number = 0.65) {\r\n        const p = 1 - magnitude;\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 1;\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        if (scaledTime < 1) {\r\n            return -0.5 * (Math.pow(2, 10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\r\n        } else { return (Math.pow(2, -10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p) * 0.5) + 1; }\r\n    }\r\n    // Bounce to completion\r\n    public static easeOutBounce(t: number) {\r\n        const scaledTime = t / 1;\r\n        if (scaledTime < (1 / 2.75)) {\r\n            return 7.5625 * scaledTime * scaledTime;\r\n        } else if (scaledTime < (2 / 2.75)) {\r\n            const scaledTime2 = scaledTime - (1.5 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.75;\r\n        } else if (scaledTime < (2.5 / 2.75)) {\r\n            const scaledTime2 = scaledTime - (2.25 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.9375;\r\n        } else { const scaledTime2 = scaledTime - (2.625 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.984375; }\r\n    }\r\n    // Bounce increasing in velocity until completion\r\n    public static easeInBounce(t: number) { return 1 - NumericalMotion.easeOutBounce(1 - t); }\r\n    // Bounce in and bounce out\r\n    public static easeInOutBounce(t: number) { if (t < 0.5) { return NumericalMotion.easeInBounce(t * 2) * 0.5; } return (NumericalMotion.easeOutBounce((t * 2) - 1) * 0.5) + 0.5; }\r\n    public static Easing() {\r\n        // let r0 =0\r\n        // let r1 =0\r\n        // if(this.r <= this.rOrigin) {\r\n        //     r0 = this.rOrigin;\r\n        //     r1 = this.rTaget;\r\n        // } else{\r\n        //     r1 = this.rOrigin;\r\n        //     r0 = this.rTaget;\r\n        // }\r\n        // this.vec * 0.95+(tVec * 0.05);\r\n        //     if(this.isAniScale) {\r\n        //         r * 0.95+(rt * 0.05);\r\n        //         if(r >rt) {\r\n        //             this.isAniScale=!this.isAniScale;\r\n        //         }\r\n        //     }\r\n    }\r\n    public static Update() {\r\n        NumericalMotion.t += 0.05;\r\n    }\r\n}","export class Deltatime {\r\n    public now: number;\r\n    public delta: number;\r\n    public frameRate: number;\r\n\r\n    private last: number = 0;\r\n    private timeLastRender: number;\r\n    msLoop: number;\r\n    constructor() {\r\n        //\r\n    }\r\n    public UpdateFPS() {\r\n        this.now = window.performance.now();\r\n        this.msLoop = this.now - this.last;\r\n        this.last = this.now;\r\n\r\n        this.delta = this.delta + Math.min(1, (this.msLoop) / 1000);\r\n\r\n        if (this.delta > this.frameRate) { this.delta = this.delta - this.frameRate; }\r\n\r\n        this.delta = (Date.now() - this.timeLastRender) / 1000;\r\n        this.timeLastRender = Date.now();\r\n        this.frameRate = (1 / this.delta);\r\n\r\n    }\r\n    public get dt() {\r\n        return this.delta;\r\n    }\r\n}","export enum APPS {\r\n    WALLPAPER2D = 'WALLPAPER2D',\r\n    ANNOTATION2D = 'ANNOTATION2D',\r\n    ANNOTATION3D = 'ANNOTATION3D',\r\n\r\n    WALLPAPER3D = 'WALLPAPER3D',\r\n    DRAWINGTOOL2D = 'DRAWINGTOOL2D',\r\n    DRAWINGTOOL3D = 'DRAWINGTOOL3D',\r\n}\r\nexport enum ADDONS {\r\n    SMARTDRAWING = 'SMARTDRAWING',\r\n    MAPFILTER = 'MAPFILTER',\r\n    MAPTICON = 'MAPTICON',\r\n    DRAWINGBLOCK = 'DRAWINGBLOCK',\r\n}\r\nexport enum ACTIVECOMMAND_MODE_N3D {\r\n    NONE = 'NONE', SELECT = 'SELECT', REMOVE = 'REMOVE',\r\n\r\n}\r\nexport enum ML_MODEL_TYPE {\r\n    NONE = 'NONE',\r\n    DEEP_LEARNING = 'DEEP_LEARNING'\r\n}\r\nexport enum ACTIVE_SKETCH_MODE {\r\n    ERASER = 'ERASER',\r\n    NONE = 'NONE',\r\n    SIMPLE_PENCIL = 'SIMPLE_PENCIL',\r\n    SIMPLE_MULT_PENCIL = 'SIMPLE_MULT_PENCIL',\r\n    BRUSH_PENCIL = 'BRUSH_PENCIL',\r\n    FUR_PENCIL = 'FUR_PENCIL',\r\n    FUR_PENCIL_TEXTURE = 'FUR_PENCIL_TEXTURE',\r\n    BRAID_PENCIL = 'BRAID_PENCIL',\r\n    STAR_PENCIL = 'STAR_PENCIL',\r\n    MULTIPLE_LINE_PENCIL = 'MULTIPLE_LINE_PENCIL',\r\n    RANDOM_RADIUS_PENCIL = 'RANDOM_RADIUS_PENCIL',\r\n    COLORED_PIXELS_PENCIL = 'COLORED_PIXELS_PENCIL',\r\n    PATTERN_BASED_PENCIL = 'PATTERN_BASED_PENCIL',\r\n    SHAPED_PENCIL = 'SHAPED_PENCIL'\r\n}\r\nexport enum PROJECTION_TYPE {\r\n    MERCATOR = 'MERCATOR',\r\n    SPHERICALPROJECTION = 'SPHERICALPROJECTION',\r\n    ORTHOGRAPHIC = 'ORTHOGRAPHIC',\r\n    CONIC_EQUAL_AREA = 'CONIC_EQUAL_AREA',\r\n    CONIC_EQUI_DISTANT = 'CONIC_EQUI_DISTANT',\r\n    EQUAL_EARTH = 'EQUAL_EARTH',\r\n    EQUI_RECTANGULAR = 'EQUI_RECTANGULAR',\r\n    GNOMONIC = 'GNOMONIC',\r\n    CONIC_CONFORMAL = 'CONIC_CONFORMAL',\r\n    STEREO_GRAPHIC = 'STEREO_GRAPHIC',\r\n    ALBERS_USA = 'ALBERS_USA',\r\n}\r\nexport enum ACTIVECOMMAND_MODE {\r\n    // NONE = 'NONE', SELECT = 'SELECT', REMOVE = 'REMOVE', SELECT_RECT = 'SELECT_RECT', SELECT_LASSO = 'SELECT_LASSO', MOVE_EASEING = 'MOVE_EASEING', UNDO = 'UNDO', REDO = 'REDO',\r\n    // // .............................. shape\r\n    // POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED',\r\n    // POLYLINE = 'POLYLINE', POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    // POLYGON = 'POLYGON', POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    // POLYLINE_BENDING = 'POLYLINE_BENDING', LINE_GRAPH = 'LINE_GRAPH',\r\n    // CIRCLE = 'CIRCLE', CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    // RECTANGLE = 'RECTANGLE',\r\n    // POINT_ICON = 'POINT_ICON', TEXT = 'TEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n    // ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE',\r\n    // CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    // FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    // SMARTDRAWING = 'SMARTDRAWING', SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    // LINE = 'LINE',\r\n    // // .............................. geometry\r\n    // CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    // CLINE = 'CLINE', CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    // CARC = 'CARC', CCIRCLE = 'CCIRCLE', CRECTANGLE = 'CRECTANGLE', CNGON = 'CNGON', CSTAR = 'CSTAR',\r\n    // CCURVE = 'CCURVE', CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    // CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', CFREEHAND_CURVE = 'CFREEHAND_CURVE', CFREEHAND_LINE = 'CFREEHAND_LINE', CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n    // CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n    // // .............................. internal\r\n    // CPOINT = 'CPOINT', CNODE = 'CNODE', CEDGE = 'CEDGE',\r\n\r\n    NONE = 'NONE', SELECT = 'SELECT', REMOVE = 'REMOVE', SELECT_RECT = 'SELECT_RECT', SELECT_LASSO = 'SELECT_LASSO', MOVE_EASEING = 'MOVE_EASEING', UNDO = 'UNDO', REDO = 'REDO',\r\n    // .............................. shape\r\n    POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED',\r\n    POLYLINE = 'POLYLINE', FREEHAND_POLYLINE_BENDING = 'FREEHAND_POLYLINE_BENDING', POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    POLYGON = 'POLYGON', POLYGON_GRAPH = 'POLYGON_GRAPH',\r\n    POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    POLYLINE_BENDING = 'POLYLINE_BENDING', LINE_GRAPH = 'LINE_GRAPH',\r\n    CIRCLE = 'CIRCLE', CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    RECTANGLE = 'RECTANGLE',\r\n    POINT_ICON = 'POINT_ICON', TEXT = 'TEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n    ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE',\r\n    CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_POLYGON = 'FREEHAND_POLYGON',\r\n    FREEHAND_CURVE = 'FREEHAND_CURVE', FREEHAND_CURVE_CLOSED = 'FREEHAND_CURVE_CLOSED',\r\n    SMARTDRAWING = 'SMARTDRAWING', SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    LINE = 'LINE',\r\n\r\n    APOINT = 'APOINT',\r\n    // .............................. geometry\r\n    CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    CLINE = 'CLINE', CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    CARC = 'CARC', CCIRCLE = 'CCIRCLE', CRECTANGLE = 'CRECTANGLE', CNGON = 'CNGON', CSTAR = 'CSTAR',\r\n    CCURVE = 'CCURVE', CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', CFREEHAND_CURVE = 'CFREEHAND_CURVE', CFREEHAND_LINE = 'CFREEHAND_LINE', CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n\r\n    CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n    // .............................. internal\r\n    CPOINT = 'CPOINT', CNODE = 'CNODE', CEDGE = 'CEDGE',\r\n\r\n    LINE_SPIKE = 'LINE_SPIKE', CIRCLE_TRAJECTORY = 'CIRCLE_TRAJECTORY', ARC_SPIKE = 'ARC_SPIKE',\r\n}\r\nexport enum GTYPE {\r\n    POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED', POINT_ICON = 'POINT_ICON',\r\n    POLYLINE = 'POLYLINE', POLYLINE_BENDING = 'POLYLINE_BENDING',\r\n    POLYGON = 'POLYGON', POLYGON_GRAPH = 'POLYGON_GRAPH', POLYGON_MULTIPLE = 'POLYGON_MULTIPLE',\r\n    CIRCLE = 'CIRCLE', RECTANGLE = 'RECTANGLE', AN_GON = 'AN_GON',\r\n    ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE', TEXT = 'TEXT', CATEXT = 'CATEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n\r\n    APOINT = 'APOINT', AMIDPOINT = 'AMIDPOINT', ANODE = 'ANODE', APOINT_PATH = 'APOINT_PATH', ANODE_RECT = 'ANODE_RECT',\r\n    ANODE_CIRCLE = 'ANODE_CIRCLE', ANODE_NGON = 'ANODE_NGON', ANODE_TEXT = 'ANODE_TEXT',\r\n    AMIDPOINT_ALINE = 'AMIDPOINT_ALINE',\r\n\r\n    CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    SMARTDRAWING = 'SMARTDRAWING',\r\n    ALINE = 'ALINE',\r\n\r\n    CPOINT = 'CPOINT', CMIDPOINT = 'CMIDPOINT', CNODE = 'CNODE', CNODE_RECT = 'CNODE_RECT', CNODE_CIRCLE = 'CNODE_CIRCLE', CNODE_NGON = 'CNODE_NGON', CNODE_TEXT = 'CNODE_TEXT',\r\n    CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    CLINE = 'CLINE', CEDGE = 'CEDGE',\r\n    CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CRECTANGLE = 'CRECTANGLE', CN_GON = 'CN_GON', CN_STAR = 'CN_STAR',\r\n    CARC = 'CARC', CCIRCLE = 'CCIRCLE', CCURVE = 'CCURVE', CCURVE_OPEN = 'CCURVE_OPEN', CCURVE_CLOSED = 'CCURVE_CLOSED',\r\n    CBLACKHOLE = 'CBLACKHOLE', CFREEHAND = 'CFREEHAND', COTHERS = 'COTHERS'\r\n}\r\nexport enum CURSOR {\r\n    DEFAULT = 'default',\r\n    AUTO = 'auto',\r\n    CROSSHAIR = 'crosshair',\r\n    MOVE = 'move',\r\n    POINTER = 'pointer',\r\n    TEXT = 'text',\r\n    WAIT = 'wait',\r\n    HELP = 'help',\r\n    PROGRESS = 'progress',\r\n}\r\n\r\nexport enum X_GTYPE {\r\n\r\n    X_NONE = 'X_NONE', X_REMOVE = 'X_REMOVE',\r\n    X_SELECT = 'X_SELECT', X_SELECT_RECT = 'X_SELECT_RECT', X_SELECT_LASSO = 'X_SELECT_LASSO', X_UNDO = 'X_UNDO', X_REDO = 'X_REDO',\r\n\r\n    X_ARROW_SINGLE = 'X_ARROW_SINGLE', X_ARROW_DOUBLE = 'X_ARROW_DOUBLE',\r\n\r\n    X_POINT_REGULAR = 'X_POINT_REGULAR', X_POINT_NUMBERED = 'X_POINT_NUMBERED',\r\n\r\n    X_POLYLINE = 'X_POLYLINE', X_FREEHAND_POLYLINE = 'X_FREEHAND_POLYLINE',\r\n\r\n    X_POLYGON = 'X_POLYGON',\r\n    X_CIRCLE = 'X_CIRCLE', X_RECTANGLE = 'X_RECTANGLE',\r\n\r\n    X_TEXT_LEADERLINE = 'X_TEXT_LEADERLINE',\r\n    // .............................. internal\r\n    X_POINT = 'X_POINT', X_NODE = 'X_NODE', X_EDGE = 'X_EDGE', X_POINT_ICON = 'X_POINT_ICON'\r\n\r\n    // POLYLINE = 'POLYLINE', X_POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    // POLYGON = 'POLYGON', X_POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', X_POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    // POLYLINE_BENDING = 'POLYLINE_BENDING', X_LINE_GRAPH = 'LINE_GRAPH',\r\n    // , X_CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', X_CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    //\r\n    // , X_TEXT = 'TEXT',\r\n    //\r\n    // CURVE = 'CURVE', X_CURVE_OPEN = 'CURVE_OPEN', X_CURVE_CLOSE = 'CURVE_CLOSE',\r\n    // FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', X_FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    // SMARTDRAWING = 'SMARTDRAWING', X_SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    // LINE = 'LINE',\r\n\r\n    // .............................. geometry\r\n    // X_CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    // CARC = 'CARC', X_CCIRCLE = 'CCIRCLE', X_CRECTANGLE = 'CRECTANGLE', X_CNGON = 'CNGON', X_CSTAR = 'CSTAR',\r\n    // CCURVE = 'CCURVE', X_CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    // CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', X_CFREEHAND_CURVE = 'CFREEHAND_CURVE', X_CFREEHAND_LINE = 'CFREEHAND_LINE', X_CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n    // CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', X_CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n\r\n}\r\n\r\nexport enum ACTION_TYPE {\r\n    PointerOut = 'pointerOut',\r\n    SetDrawingMode = 'setDrawingMode',\r\n    ToggleMapfilter = 'toggleMapfilter',\r\n    ToggleQuickActions = 'toggleQuickActions',\r\n    ChangeTheme = 'changeTheme',\r\n    ToggleDrawingTooltips = 'toggleDrawingTooltips',\r\n    ToggleGrid = 'toggleGrid',\r\n    ToggleMeasure = 'toggleMeasure',\r\n    ShiftUnit = 'shiftUnit',\r\n    DumpIconsBase64s = 'dumpIconsBase64s',\r\n    AddIconBase64 = 'addIconBase64',\r\n    SelectIconBase64 = 'selectIconBase64',\r\n    // DumpIcons = 'dumpIcons',\r\n    // AddBase64 = 'addBase64',\r\n    // SelectBase64 = 'selectBase64',\r\n    InclusiveSelect = 'inclusiveSelect',\r\n    InclusiveDeselect = 'inclusiveDeselect',\r\n    ExclusiveSelect = 'exclusiveSelect',\r\n    ExclusiveDeselect = 'exclusiveDeselect',\r\n    ReorderNumberedPoints = 'reorderNumberedPoints',\r\n    Remove = 'remove',\r\n    RemoveSelected = 'removeSelected',\r\n    Update = 'update',\r\n    Enter = 'enter',\r\n    Leave = 'leave',\r\n    Show = 'show',\r\n    Hide = 'hide',\r\n    HidePopup = 'hidePopup',\r\n    ShowPopup = 'showPopup',\r\n    Dump = 'dump',\r\n    InitGhost = 'initGhost',\r\n    EnterGhost = 'enterGhost',\r\n    LeaveGhost = 'leaveGhost',\r\n    ShowGhostPopup = 'showGhostPopup',\r\n    HideGhostPopup = 'hideGhostPopup',\r\n    AddGhost = 'addGhost',\r\n    Add = 'add',\r\n    Transform = 'transform',\r\n    RemoveGhost = 'removeGhost',\r\n    ShowText = 'showText',\r\n    HideText = 'hideText',\r\n    StartEditingText = 'startEditingText',\r\n    EndEditingText = 'endEditingText'\r\n}\r\nexport enum TEXTALIGN {\r\n    START = 'start', END = 'end', LEFT = 'left', CENTER = 'center', RIGHT = 'right'\r\n}\r\nexport enum TEXTBOX {\r\n    WRAP = 'WRAP', LINEBREAK = 'LINEBREAK', NORMAL = 'NORMAL'\r\n}\r\nexport enum LINECAP {\r\n    ROUND = 'round',\r\n    BUTT = 'butt',\r\n    SQUARE = 'square'\r\n}\r\nexport enum FHTYPE {\r\n    CURVE = 'CURVE', CURVE_CLOSED = 'CURVE_CLOSED', LINE = 'LINE', PLINE = 'PLINE', PLINE_BENDING = 'PLINE_BENDING', PGON = 'PGON', SMOOTH = 'SMOOTH', SMDRAWING = 'SMDRAWING'\r\n}\r\nexport enum OPTIMIZER {\r\n    REGULAR = 'REGULAR', DOUGLAS_PEUCKER = 'DOUGLAS_PEUCKER',\r\n}\r\nexport enum VIDEO_SIZE {\r\n    FULL_HD = 'd',\r\n}\r\nexport enum GRAPHIC_MODE {\r\n    SVG = 'SVG', CANVAS = 'CANVAS', GL = 'GL'\r\n}\r\nexport enum CLOGTYPE {\r\n    COMMAND = 'COMMAND', OBJECT = 'OBJECT'\r\n}\r\nexport enum COMPILE_MODE {\r\n    PRODUCTION = 'PRODUCTION', DEVELOPMENT = 'DEVELOPMENT', LOCAL = 'LOCAL'\r\n}\r\nexport enum INTERACTION_MODE {\r\n    DRAWING = 'DRAWING', INTERACTIVE_VIEWER = 'INTERACTIVE_VIEWER', OBSERVE_VIEWER = 'OBSERVE_VIEWER'\r\n}\r\nexport enum RENDER_MODE {\r\n    DRAWING = 'DRAWING', INTERACTIVE_VIEWER = 'INTERACTIVE_VIEWER', OBSERVE_VIEWER = 'OBSERVE_VIEWER'\r\n}\r\nexport enum BROWSER_TYPE {\r\n    OPERA = 'Opera',\r\n    CHROME = 'Chrome',\r\n    SAFARI = 'Safari',\r\n    FIREFOX = 'Firefox',\r\n    IE = 'IE',\r\n    EDGE = 'Edge',\r\n    UNKNOWN = 'unknown',\r\n}\r\nexport enum PRESS_TYPE {\r\n    UP = 'UP', DOWN = 'DOWN'\r\n}\r\nexport enum CLICK_TYPE {\r\n    LEFT = 'LEFT', MIDDLE = 'MIDDLE', RIGHT = 'RIGHT', WHEEL = 'WHEEL',\r\n    DRAG = 'DRAG', DRAG_LEFT = 'DRAG_LEFT', DRAG_MIDDLE = 'DRAG_MIDDLE', DRAG_RIGHT = 'DRAG_RIGHT',\r\n    MOVE = 'MOVE', DOUBLE = 'DOUBLE', UP = 'UP',\r\n    DOWN = 'DOWN', DOWN_MIDDLE = 'DOWN_MIDDLE', DOWN_RIGHT = 'DOWN_RIGHT'\r\n}\r\nexport enum TOUCH_TYPE {\r\n    START = 'START', END = 'END', MOVE = 'MOVE', CANCEL = 'CANCEL'\r\n}\r\nexport enum EVENT_LISTENER_TYPE { NATIVE = 'NATIVE', JSAPI4X = 'JSAPI4X' }\r\n// ..........................................................................................\r\nexport enum CAMERA_TYPE_THREE {\r\n    PERSPECTIVE = 'PERSPECTIVE',\r\n    ORTHOGRAPHIC = 'ORTHOGRAPHIC',\r\n    STEREO = 'STEREO'\r\n}\r\nexport enum MAPFILTER_MODE {\r\n    CANVAS = 'CANVAS',\r\n    GL = 'GL'\r\n}","import { CLICK_TYPE } from '../../../NJSCore/Core/AppCore/Common/Enumeration';\r\nimport { ActiveCommandBase } from '../Core/ActiveCommand';\r\nexport class MouseEventData {\r\n  x: number = -1; y: number = -1; z: number = -1;\r\n  preX: number = -1; preY: number = -1; preZ: number = -1;\r\n  yGLPicking: number;\r\n  command: ActiveCommandBase;\r\n  CLICK_TYPE: CLICK_TYPE = CLICK_TYPE.MOVE;\r\n  isDown: boolean = false;\r\n  isDoubleClick: boolean = false;\r\n  isMove: boolean = false;\r\n  pressedShift: boolean = false;\r\n  pressedAlt: boolean = false;\r\n  pressedCtrl: boolean = false;\r\n\r\n  lat?: number = -1;\r\n  long?: number = -1;\r\n  wheel: number = 0;\r\n  preWheel: number = 0;\r\n\r\n  // premEvent: MouseEventData;\r\n  native: MouseEvent;\r\n  constructor() {\r\n    //\r\n  }\r\n  public DeepCopy() {\r\n    let mEvent = new MouseEventData();\r\n    mEvent.x = this.x; mEvent.y = this.y; mEvent.z = this.z; mEvent.preX = this.preX; mEvent.preY = this.preY; mEvent.preZ = this.preZ;\r\n    mEvent.pressedAlt = this.pressedAlt; mEvent.pressedShift = this.pressedShift; mEvent.pressedCtrl = this.pressedCtrl;\r\n    mEvent.isDoubleClick = this.isDoubleClick; mEvent.isDown = this.isDown; mEvent.isMove = this.isMove;\r\n    mEvent.lat = this.lat; mEvent.long = this.long; mEvent.wheel = this.wheel; mEvent.preWheel = this.preWheel;\r\n    mEvent.yGLPicking = this.yGLPicking;\r\n    mEvent.CLICK_TYPE = this.CLICK_TYPE;\r\n    mEvent.command = this.command;\r\n    mEvent.native = this.native;\r\n    return mEvent;\r\n  }\r\n}\r\nexport class MouseInteraction {\r\n  mouseEventDataPre: MouseEventData; // = new MouseEventData();\r\n\r\n  isEnable: boolean = true;\r\n\r\n  click: boolean = false;\r\n  prevent: boolean = false;\r\n  delay: number = 300;\r\n  timer: NodeJS.Timer | number;\r\n  down: boolean = false;\r\n  e: MouseEventData;\r\n  divHost: HTMLElement;\r\n  constructor(divHost: HTMLElement) {\r\n    this.divHost = divHost;\r\n    this.mouseEventDataPre = new MouseEventData();\r\n\r\n    this.InitNativeMouseEvent(this.divHost);\r\n    this.InitNativeMouseWheelEvent(this.divHost);\r\n  }\r\n  // ................................................................ event from native\r\n  InitNativeMouseWheelEvent(div: HTMLElement) {\r\n    div.onwheel = (e: WheelEvent) => { this.MouseWheel(e, e.deltaY); };\r\n  }\r\n  InitNativeMouseEvent(div?: HTMLElement | undefined) {\r\n    if (div === undefined || div === null) {\r\n      document.onclick = (e: MouseEvent) => {\r\n        this.timer = setTimeout(\r\n          () => {\r\n            if (!this.prevent) { this.MouseClick(e); }\r\n            this.prevent = false;\r\n          },\r\n          this.delay);\r\n      };\r\n      document.ondblclick = (e: MouseEvent) => {\r\n        clearTimeout(this.timer as NodeJS.Timer);\r\n        this.prevent = true;\r\n        this.MouseDoubleClick(e);\r\n      };\r\n      document.onmousedown = (e: MouseEvent) => { this.MouseDown(e); };\r\n      document.onmouseup = (e: MouseEvent) => { this.MouseUp(e); };\r\n      document.onmousemove = (e: MouseEvent) => { this.MouseMove(e); };\r\n    } else {\r\n      div.onclick = (e: MouseEvent) => {\r\n        this.timer = setTimeout(\r\n          () => {\r\n            if (!this.prevent) { this.MouseClick(e); }\r\n            this.prevent = false;\r\n          },\r\n          this.delay);\r\n      };\r\n      div.ondblclick = (e: MouseEvent) => {\r\n        clearTimeout(this.timer as number);\r\n        this.prevent = true;\r\n        this.MouseDoubleClick(e);\r\n      };\r\n      div.onmousedown = (e: MouseEvent) => { this.MouseDown(e); };\r\n      div.onmouseup = (e: MouseEvent) => { this.MouseUp(e); };\r\n      div.onmousemove = (e: MouseEvent) => { this.MouseMove(e); };\r\n    }\r\n  }\r\n  MouseDown(e: MouseEvent) {\r\n    this.click = true;\r\n    this.down = true;\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.DOWN;\r\n    mEvent.isDown = true;\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseClick(e: MouseEvent) {\r\n    if (!this.click) { return; }\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    if (e.button === 0) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.LEFT;\r\n    } else if (e.button === 1) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.MIDDLE;\r\n    } else if (e.button === 2) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.RIGHT;\r\n    }\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseDoubleClick(e: MouseEvent) {\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.DOUBLE;\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseDrag(e: MouseEvent) {\r\n    this.click = false;\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.DRAG;\r\n    mEvent.isDown = true;\r\n    if (e.buttons === 1) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.DRAG;\r\n    } else if (e.buttons === 4) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.DRAG_MIDDLE;\r\n    } else if (e.buttons === 2) {\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.DRAG_RIGHT;\r\n    }\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseMove(e: MouseEvent) {\r\n    if (this.down) { this.MouseDrag(e); return; }\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.MOVE;\r\n    mEvent.isDown = false;\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseUp(e: MouseEvent) {\r\n    this.down = false;\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.UP;\r\n    mEvent.isDown = false;\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  MouseWheel(e: MouseEvent, v: number) {\r\n    let mEvent = this.CommonEventBuilder(e);\r\n    mEvent.wheel = v;\r\n    mEvent.CLICK_TYPE = CLICK_TYPE.WHEEL;\r\n    this.MouseEvenEmitting(mEvent);\r\n  }\r\n  AppendDownEvent(e: MouseEvent) {\r\n    // let e: any = MouseEventListener.mouseClick;\r\n\r\n    // document.onmousedown = (e) => {\r\n    //   let mEvent = this.CommonEventBuilder(e);\r\n    //   if (e.button === 0) mEvent.CLICK_TYPE = CLICK_TYPE.LEFT;\r\n    //   else if (e.button === 1) mEvent.CLICK_TYPE = CLICK_TYPE.MIDDLE;\r\n    //   else if (e.button === 2) mEvent.CLICK_TYPE = CLICK_TYPE.RIGHT;\r\n    //   mEvent.isDown = true;\r\n    //   //mEvent.FROM = FROM.NATIVE;\r\n    //   mEvent.CLICK_TYPE = CLICK_TYPE.DOWN;\r\n    //\r\n    // };\r\n  }\r\n  AppendUpEvent() {\r\n    document.onmouseup = (e: MouseEvent) => {\r\n      let mEvent = this.CommonEventBuilder(e);\r\n      if (e.button === 0) {\r\n        mEvent.CLICK_TYPE = CLICK_TYPE.LEFT;\r\n      } else if (e.button === 1) {\r\n        mEvent.CLICK_TYPE = CLICK_TYPE.MIDDLE;\r\n      } else if (e.button === 2) {\r\n        mEvent.CLICK_TYPE = CLICK_TYPE.RIGHT;\r\n      }\r\n      mEvent.isDown = false;\r\n      // mEvent.FROM = FROM.NATIVE;\r\n      mEvent.CLICK_TYPE = CLICK_TYPE.UP;\r\n      this.MouseEvenEmitting(mEvent);\r\n    };\r\n  }\r\n  // ................................................................ event from ArcGIS\r\n  CommonEventBuilder(e: MouseEvent): MouseEventData {\r\n    let mEvent: MouseEventData = new MouseEventData();\r\n    mEvent.preX = this.mouseEventDataPre.x;\r\n    mEvent.preY = this.mouseEventDataPre.y;\r\n    // mEvent.premEvent = this.mouseEventDataPre;\r\n\r\n    mEvent.pressedShift = e.shiftKey;\r\n    mEvent.pressedAlt = e.altKey;\r\n    mEvent.pressedCtrl = e.ctrlKey;\r\n\r\n    mEvent.x = e.offsetX;\r\n    mEvent.y = e.offsetY;\r\n    mEvent.preWheel = this.mouseEventDataPre.wheel;\r\n    mEvent.wheel = 0;\r\n    mEvent.native = e;\r\n    this.mouseEventDataPre = mEvent;\r\n    this.e = mEvent;\r\n    return mEvent;\r\n  }\r\n  MouseEvenEmitting(mouseEventData: MouseEventData) {\r\n    if (mouseEventData.isMove) {\r\n      // console.log(mouseEventData);\r\n    }\r\n    this.MouseEventEmittingBinding(mouseEventData);\r\n  }\r\n  MouseEventEmittingBinding(mouseEventData: MouseEventData) {\r\n    console.log('implmentation needed', mouseEventData);\r\n  }\r\n}","// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\nimport { ActiveCommandBase } from '../Core/ActiveCommand/ActiveCommandBase';\r\nimport { TOUCH_TYPE } from '../../../NJSCore/Core/AppCore/Common/Enumeration';\r\nexport class TouchEventData {\r\n    x: number = -1; y: number = -1; z: number = -1;\r\n    preX: number = -1; preY: number = -1; preZ: number = -1;\r\n    yGLPicking: number;\r\n    command: ActiveCommandBase;\r\n    TOUCH_TYPE: TOUCH_TYPE = TOUCH_TYPE.MOVE;\r\n\r\n    identifier: number;\r\n    // touchType: Touch['touchType'];\r\n\r\n    radiusX: number;\r\n    radiusY: number;\r\n    rotationAngle: number;\r\n    force: number;\r\n\r\n    color: string;\r\n    // tslint:disable-next-line:no-any\r\n    constructor() {\r\n        // console.trace();\r\n    }\r\n    public DeepCopy() {\r\n        const mEvent = new TouchEventData();\r\n        mEvent.x = this.x; mEvent.y = this.y; mEvent.z = this.z;\r\n        mEvent.preX = this.preX; mEvent.preY = this.preY; mEvent.preZ = this.preZ;\r\n\r\n        mEvent.yGLPicking = this.yGLPicking;\r\n        mEvent.TOUCH_TYPE = this.TOUCH_TYPE;\r\n        mEvent.command = this.command;\r\n        // mEvent.native = this.native;\r\n        return mEvent;\r\n    }\r\n}\r\nexport class TouchEventDataList {\r\n    // preEvent: TouchEventDataList;\r\n    native: MouseEvent;\r\n    eventList: TouchEventData[];\r\n    TOUCH_TYPE: TOUCH_TYPE = TOUCH_TYPE.MOVE;\r\n    // tslint:disable-next-line:no-any\r\n    constructor() {\r\n        this.eventList = [];\r\n    }\r\n    // Build(e: TouchEvent) {\r\n    // tslint:disable-next-line:no-any\r\n    public Build(e: any, tType: TOUCH_TYPE) {\r\n        for (let i = 0; i < e.touches.length; ++i) {\r\n            const tEvent = new TouchEventData();\r\n            tEvent.identifier = e.touches[i].identifier;\r\n\r\n            tEvent.TOUCH_TYPE = tType;\r\n\r\n            tEvent.radiusX = e.touches[i].radiusX;\r\n            tEvent.radiusY = e.touches[i].radiusY;\r\n\r\n            tEvent.rotationAngle = e.touches[i].rotationAngle;\r\n            tEvent.x = e.touches[i].clientX;\r\n            tEvent.y = e.touches[i].clientY;\r\n            tEvent.force = e.touches[i].force;\r\n\r\n            tEvent.color = this.ColorForTouch(e.touches[i]);\r\n            this.eventList.push(tEvent);\r\n        }\r\n        //    this.OngoingTouchIndexById()\r\n    }\r\n    public DeepCopy() {\r\n        // return\r\n    }\r\n    // private OngoingTouchIndexById(idToFind: number, ongoingTouches: TouchList) {\r\n    //     for (var i = 0; i < ongoingTouches.length; i++) {\r\n    //         var id = ongoingTouches[i].identifier;\r\n    //         if (id === idToFind) { return i; }\r\n    //     }\r\n    //     return -1;    // not found\r\n    // }\r\n    private ColorForTouch(touch: Touch) {\r\n        const r = touch.identifier % 16;\r\n        const g = Math.floor(touch.identifier / 3) % 16;\r\n        const b = Math.floor(touch.identifier / 7) % 16;\r\n        const rs = r.toString(16); // make it a hex digit\r\n        const gs = g.toString(16); // make it a hex digit\r\n        const bs = b.toString(16); // make it a hex digit\r\n        const color = '#' + rs + gs + bs;\r\n        // console.log('color for touch with identifier ' + touch.identifier + ' = ' + color);\r\n        return color;\r\n    }\r\n}\r\nexport class TouchInteraction {\r\n    public static touchEventDataPre: TouchEventDataList; // = new MouseEventData();\r\n\r\n    isEnable: boolean = true;\r\n\r\n    click: boolean = false;\r\n    prevent: boolean = false;\r\n    delay: number = 100;\r\n    timer: NodeJS.Timer | number;\r\n    down: boolean = false;\r\n    e: TouchEventData;\r\n    preEvent: TouchInteraction | undefined;\r\n    divHost: HTMLElement;\r\n    public static CommonEventBuilder(e: TouchEvent, type: TOUCH_TYPE): TouchEventDataList {\r\n        const mEvent: TouchEventDataList = new TouchEventDataList();\r\n        mEvent.TOUCH_TYPE = type;\r\n        mEvent.Build(e, type);\r\n\r\n        this.touchEventDataPre = mEvent;\r\n        return mEvent;\r\n    }\r\n    constructor(divHost: HTMLElement) {\r\n        this.divHost = divHost;\r\n        this.InitNativeTouchEvent(this.divHost);\r\n    }\r\n    public InitNativeTouchEvent(div: HTMLElement) {\r\n        div.ontouchstart = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.START);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchend = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.END);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchmove = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.MOVE);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchcancel = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.CANCEL);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n    }\r\n    TouchEventEmittingBinding(mouseEventData: TouchEventDataList) {\r\n        console.log('implmentation needed', mouseEventData);\r\n    }\r\n}","//// reference\r\n// https://stackoverflow.com/questions/12024770/access-camera-from-a-browser\r\n// https://www.html5rocks.com/en/tutorials/getusermedia/intro/\r\n// https://www.youtube.com/watch?v=nCrQ1A2BEZ0\r\nexport const SIZE = { // https://en.wikipedia.org/wiki/Display_resolution\r\n    FULL_HD: [1920, 1080],\r\n    HD: [1280, 720],\r\n    NTSC: [720, 480],\r\n\r\n    WXGA: [1080, 720],\r\n    XGA: [1024, 768],\r\n    SVG: [800, 480]\r\n};\r\nexport class Camera {\r\n    public static id: number = 0;\r\n    public static FILTERS = [\r\n        'grayscale',\r\n        'sepia',\r\n        'blur',\r\n        'brightness',\r\n        'contrast',\r\n        'hue-rotate',\r\n        'hue-rotate2',\r\n        'hue-rotate3',\r\n        'saturate',\r\n        'invert',\r\n        ''\r\n    ];\r\n\r\n    video: HTMLVideoElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    width: number = 400; // 1280; // 400;\r\n    height: number = 400; // 720; // 400;\r\n\r\n    mediaStream: MediaStream;\r\n\r\n    hostDiv: HTMLElement;\r\n    id: string;\r\n\r\n    public static GetCamera() {\r\n        // let canvas: HTMLCanvasElement = document.createElement('canvas') as HTMLCanvasElement;\r\n        // let ctx = canvas.getContext('2d');\r\n        // let videoUrl = window.URL; // || window.webkitURL;\r\n\r\n        // navigator.getUserMedia = navigator.get\r\n    }\r\n    constructor(div: HTMLElement) {\r\n        this.hostDiv = div;\r\n        this.width = div.clientWidth;\r\n        this.height = div.clientHeight;\r\n        this.id = 'njslab-web-core-camera' + Camera.id++;\r\n\r\n        const d = SIZE.FULL_HD;\r\n        console.log(d);\r\n        // var constraints = {\r\n        //     audio: false,\r\n        //     video: {\r\n        //         facingMode: facingMode\r\n        //     }\r\n        // };\r\n\r\n        this.InitVideo(div);\r\n        this.InitMedia();\r\n    }\r\n    public SetSizeFromTemplate(size: number[]) {\r\n        this.width = size[0]; this.height = size[1];\r\n        this.video.style.width = size[0] + 'px'; this.video.style.height = size[1] + 'px';\r\n        this.hostDiv.style.width = size[0] + 'px'; this.hostDiv.style.height = size[1] + 'px';\r\n    }\r\n    public InitCanvas() {\r\n        const canvas = document.createElement('canvas');\r\n        if (canvas) {\r\n            this.canvas = canvas;\r\n            const ctx = this.canvas.getContext('2d');\r\n            if (ctx) { this.ctx = ctx; }\r\n        }\r\n    }\r\n    public InitVideo(div: HTMLElement) {\r\n        this.video = document.createElement('video');\r\n        this.video.id = this.id;\r\n        this.video.setAttribute('playsinline', '');\r\n        this.video.setAttribute('autoplay', '');\r\n        this.video.setAttribute('muted', '');\r\n        // this.video.className = Camera.FILTERS[2];\r\n        this.video.style.filter = 'blur(3px)';\r\n        this.video.style.filter = 'contrast(150%)';\r\n        this.video.style.width = this.width + 'px';\r\n        this.video.style.height = this.height + 'px';\r\n\r\n        div.appendChild(this.video);\r\n    }\r\n    public InitMedia() {\r\n        const constraints = {\r\n            video: {\r\n                facingMode: 'facingMode',\r\n                // width: Camera.SIZE.FULL_HD[0],\r\n                // height: Camera.SIZE.FULL_HD[1],\r\n                width: this.width,\r\n                height: this.height,\r\n            },\r\n            audio: false\r\n        };\r\n\r\n        if (this.HasGetUserMedia()) {\r\n            navigator.mediaDevices.getUserMedia(constraints).then((stream: MediaStream) => {\r\n                this.mediaStream = stream;\r\n                this.video.srcObject = this.mediaStream;\r\n            });\r\n        } else {\r\n            alert('getUserMedia() is not supported by your browser');\r\n        }\r\n    }\r\n    public GetImageData() {\r\n        this.ctx.drawImage(this.video, 0, 0, this.width, this.height);\r\n        let frame = this.ctx.getImageData(0, 0, this.width, this.height);\r\n        console.log(frame);\r\n    }\r\n    public Resize(width: number, height: number) {\r\n        this.width = width; this.height = height;\r\n        this.video.style.width = width + 'px';\r\n        this.video.style.height = height + 'px';\r\n    }\r\n    public HasGetUserMedia() {\r\n        return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\r\n    }\r\n    public Dummy() {\r\n        //\r\n    }\r\n    public Dispose() {\r\n        // this.mediaStream.stop();\r\n        this.mediaStream.getTracks().forEach(track => track.stop());\r\n\r\n        // Array.from(document.getElementsByClassName(this.id)).forEach(\r\n        //     (element) => { //   (element, index, array) => {\r\n        //         this.hostDiv.removeChild(element);\r\n        //     }\r\n        // );\r\n\r\n        this.hostDiv.removeChild(this.video);\r\n    }\r\n}","export class NJSLoader {\r\n    public static path: string = '/njslabSandboxStatic';\r\n    public static async URL(url: string) {\r\n        return fetch(url)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenOBJ(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'torus.obj';\r\n        return fetch(`${NJSLoader.path}/3dData/${file}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenOBJForExternalRenderer(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        console.log(path);\r\n        return fetch(path, { mode: 'no-cors' })\r\n            .then((response: Response) => {\r\n                // console.log(response.text());\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx01(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'weektest.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx02(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'BusRoute.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx03(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'globeMap.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJson(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenJson(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenJsonAnnotationTheme(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/theme/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenThemeJSON(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/theme/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenDataJSON(file: string) {\r\n        return fetch(`${NJSLoader.path}/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async OpenImg(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/img/${path}`)\r\n            .then((response: Response) => {\r\n                return response.blob();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                const img = new Image();\r\n                const objectURL = URL.createObjectURL(d);\r\n                img.src = objectURL;\r\n                img.onload = () => {\r\n                    img.crossOrigin = 'anonymous';\r\n                    // njslabSandboxStatic.app.imageUtilities.SetData(img);\r\n                };\r\n                console.log(img);\r\n                return img;\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadImg(path: string) {\r\n        return fetch(`${NJSLoader.path}/${path}`)\r\n            .then((response: Response) => {\r\n                return response.blob();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                const objectURL = URL.createObjectURL(d);\r\n                return objectURL;\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVG(path: string) {\r\n        return fetch(`${NJSLoader.path}/${path}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVGFromLocal(path: string) {\r\n        return fetch(`${NJSLoader.path}/images/${path}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVGFromHTTP(path: string) {\r\n        return fetch(path, { mode: 'no-cors' })\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    public static async PointRegular() {\r\n        //\r\n    }\r\n\r\n    public static async OpenXML(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        // let parser = new DOMParser();\r\n        // let response = await fetch(path);\r\n        // let text = await response.text();\r\n        // let xml = await parser.parseFromString(text, 'text/xml');\r\n        // let d = await this.XmlToJson(xml);\r\n        // return d;\r\n    }\r\n    public static async OpenCSV(path: string) {\r\n        /* */\r\n    }\r\n    public static async OpenTXT(path: string) {\r\n        /* */\r\n    }\r\n    // reference https://davidwalsh.name/convert-xml-json\r\n    // static XmlToJson(xml: XMLDocument) {\r\n    // let obj = new Object; // Create the return object\r\n    // if (xml.nodeType === 1) { // element\r\n    //     if (xml.[attributes].length > 0) {// do attributes\r\n    //         obj['@attributes'] = {};\r\n    //         for (let j = 0; j < xml.attributes.length; j++) {\r\n    //             let attribute = xml.attributes.item(j);\r\n    //             obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n    //         }\r\n    //     }\r\n    // } else if (xml.nodeType === 3) { // text\r\n    //     if (xml.nodeValue) { obj = xml.nodeValue; }\r\n    // }\r\n    // if (xml.hasChildNodes()) { // do children\r\n    //     for (let i = 0; i < xml.childNodes.length; i++) {\r\n    //         let item = xml.childNodes.item(i) as XMLDocument;\r\n    //         let nodeName = item.nodeName;\r\n    //         if (typeof (obj[nodeName]) === 'undefined') {\r\n    //             obj[nodeName] = this.XmlToJson(item);\r\n    //         } else {\r\n    //             if (typeof (obj[nodeName].push) === 'undefined') {\r\n    //                 let old = obj[nodeName];\r\n    //                 obj[nodeName] = [];\r\n    //                 obj[nodeName].push(old);\r\n    //             }\r\n    //             obj[nodeName].push(this.XmlToJson(item));\r\n    //         }\r\n    //     }\r\n    // }\r\n    // return obj;\r\n    // }\r\n    // static XmlToJson(xml: XMLDocument) {\r\n    //     let obj = new Object(); // Create the return object\r\n    //     if (xml.nodeType === 1) { // element\r\n    //         // tslint:disable-next-line:no-string-literal\r\n    //         if (xml['attributes'].length > 0) {// do attributes\r\n    //             obj['@attributes'] = {};\r\n    //             // tslint:disable-next-line:no-string-literal\r\n    //             for (let j = 0; j < xml['attributes'].length; j++) {\r\n    //                 // tslint:disable-next-line:no-string-literal\r\n    //                 let attribute = xml['attributes'].item(j);\r\n    //                 obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n    //             }\r\n    //         }\r\n    //     } else if (xml.nodeType === 3) { // text\r\n    //         if (xml.nodeValue) { obj = xml.nodeValue; }\r\n    //     }\r\n    //     if (xml.hasChildNodes()) { // do children\r\n    //         for (let i = 0; i < xml.childNodes.length; i++) {\r\n    //             // tslint:disable-next-line:no-any\r\n    //             let item = xml.childNodes.item(i) as any;\r\n    //             let nodeName = item.nodeName;\r\n    //             if (typeof (obj[nodeName]) === 'undefined') {\r\n    //                 obj[nodeName] = this.XmlToJson(item);\r\n    //             } else {\r\n    //                 if (typeof (obj[nodeName].push) === 'undefined') {\r\n    //                     let old = obj[nodeName];\r\n    //                     obj[nodeName] = [];\r\n    //                     obj[nodeName].push(old);\r\n    //                 }\r\n    //                 obj[nodeName].push(this.XmlToJson(item));\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return obj;\r\n    // }\r\n    public static async GetObjectFromSVGPath(path: string) {\r\n        let parser = new DOMParser();\r\n        let response = await fetch(path);\r\n        let text = await response.text();\r\n        let xml = await parser.parseFromString(text, 'text/xml');\r\n        let d = this.XmlToJson(xml);\r\n        return d;\r\n    }\r\n    public static async GetObjectFromSVGImporting(content: string) {\r\n        let parser = new DOMParser();\r\n        let xml = await parser.parseFromString(content, 'text/xml');\r\n        let d = this.XmlToJson(xml);\r\n        return d;\r\n    }\r\n\r\n    public static XmlToJson(xml: XMLDocument) {\r\n        let obj = new Object(); // Create the return object\r\n        if (xml.nodeType === 1) { // element\r\n            // tslint:disable-next-line:no-string-literal\r\n            if (xml['attributes'].length > 0) {// do attributes\r\n                obj['@attributes'] = {};\r\n                // tslint:disable-next-line:no-string-literal\r\n                for (let j = 0; j < xml['attributes'].length; j++) {\r\n                    // tslint:disable-next-line:no-string-literal\r\n                    let attribute = xml['attributes'].item(j);\r\n                    obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n                }\r\n            }\r\n        } else if (xml.nodeType === 3) { // text\r\n            if (xml.nodeValue) { obj = xml.nodeValue; }\r\n        }\r\n        if (xml.hasChildNodes()) { // do children\r\n            for (let i = 0; i < xml.childNodes.length; i++) {\r\n                // tslint:disable-next-line:no-any\r\n                let item = xml.childNodes.item(i) as any;\r\n                let nodeName = item.nodeName;\r\n                if (typeof (obj[nodeName]) === 'undefined') {\r\n                    obj[nodeName] = this.XmlToJson(item);\r\n                } else {\r\n                    if (typeof (obj[nodeName].push) === 'undefined') {\r\n                        let old = obj[nodeName];\r\n                        obj[nodeName] = [];\r\n                        obj[nodeName].push(old);\r\n                    }\r\n                    obj[nodeName].push(this.XmlToJson(item));\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    constructor() {/* */ }\r\n}","import { MathUtility } from './MathUtility';\r\nexport class SortUtility {\r\n    private static sorted: number[] = [];\r\n    public static Test() {\r\n        let data = MathUtility.GetRandomIntsInclusive(0, 10000, 10000);\r\n\r\n        console.log(data);\r\n        let t = performance.now();\r\n        this.SortMerge(data, 0, data.length - 1);\r\n        let tt = performance.now();\r\n        console.log(data);\r\n        console.log('SortMerge', tt - t);\r\n\r\n        data = MathUtility.GetRandomIntsInclusive(0, 10000, 10000);\r\n        console.log(data);\r\n        t = performance.now();\r\n        this.SortQuickAscending(data);\r\n        tt = performance.now();\r\n        console.log(data);\r\n        console.log('SortQuickAscending', tt - t);\r\n\r\n        data = MathUtility.GetRandomIntsInclusive(0, 10000, 10000);\r\n        console.log(data);\r\n        t = performance.now();\r\n        this.SortBubbleAscending(data);\r\n        tt = performance.now();\r\n        console.log(data);\r\n        console.log('SortBubbleAscending', tt - t);\r\n\r\n        data = MathUtility.GetRandomIntsInclusive(0, 10000, 10000);\r\n        console.log(data);\r\n        t = performance.now();\r\n        this.SortInsertionAscending(data);\r\n        tt = performance.now();\r\n        console.log(data);\r\n        console.log('SortInsertionAscending', tt - t);\r\n    }\r\n    public static GetIndexBySort(d: number[]) {\r\n        let len = d.length;\r\n        let indices = new Array(len);\r\n        for (var i = 0; i < len; ++i) { indices[i] = i; }\r\n        indices.sort((a, b) => { return d[a] < d[b] ? -1 : d[a] > d[b] ? 1 : 0; });\r\n        return indices;\r\n    }\r\n\r\n    public static GetIndexBySortDescending(d: number[]) {\r\n        let len = d.length;\r\n        let indices = new Array(len);\r\n        for (var i = 0; i < len; ++i) { indices[i] = i; }\r\n        indices.sort((a, b) => { return d[a] > d[b] ? -1 : d[a] < d[b] ? 1 : 0; });\r\n        return indices;\r\n    }\r\n\r\n    public static SortHeapAscending(d: number[]) {\r\n        let len = d.length;\r\n        for (let i = 0; i < len; ++i) {\r\n            let c = i;\r\n            do {\r\n                let root = Math.round((c - 1) / 2);\r\n                if (d[root] < d[c]) {\r\n                    let temp = d[root];\r\n                    d[root] = d[c];\r\n                    d[c] = temp;\r\n                }\r\n                c = root;\r\n\r\n            } while (c !== 0);\r\n        }\r\n        for (let i = len - 1; i >= 0; i--) {\r\n            let temp = d[0];\r\n            d[0] = d[i];\r\n            d[i] = temp;\r\n            let root = 0;\r\n            let c = 1;\r\n\r\n            do {\r\n                c = 2 * root + 1;\r\n                if (c < i - 1 && d[c] < d[c + 1]) {\r\n                    c++;\r\n                }\r\n                if (c < i && d[root] < d[c]) {\r\n                    temp = d[root];\r\n                    d[root] = d[c];\r\n                    d[c] = temp;\r\n                }\r\n                root = c;\r\n            } while (c < i);\r\n        }\r\n        return d;\r\n    }\r\n    public static SortHeapDescending(d: number[]) {\r\n        // let len = d.length;\r\n        // for (let i = len - 1; i >= 0; i--) {\r\n        //     let c = i;\r\n        //     do {\r\n        //         let root = Math.round((c - 1) / 2);\r\n        //         if (d[root] > d[c]) {\r\n        //             let temp = d[root];\r\n        //             d[root] = d[c];\r\n        //             d[c] = temp;\r\n        //         }\r\n        //         c = root;\r\n\r\n        //     } while (c !== 0);\r\n        // }\r\n        // for (let i = len - 1; i >= 0; i--) {\r\n        //     let temp = d[0];\r\n        //     d[0] = d[i];\r\n        //     d[i] = temp;\r\n        //     let root = 0;\r\n        //     let c = 1;\r\n\r\n        //     do {\r\n        //         c = 2 * root + 1;\r\n        //         if (c < i - 1 && d[c] < d[c + 1]) {\r\n        //             c++;\r\n        //         }\r\n        //         if (c < i && d[root] > d[c]) {\r\n        //             temp = d[root];\r\n        //             d[root] = d[c];\r\n        //             d[c] = temp;\r\n        //         }\r\n        //         root = c;\r\n        //     } while (c < i);\r\n        // }\r\n        return d;\r\n    }\r\n    // ........................................................................\r\n    private static Merge(d: number[], m: number, middle: number, n: number) {\r\n        let i = m;\r\n        let j = middle + 1;\r\n        let k = m;\r\n        while (i <= middle && j <= n) {\r\n            if (d[i] <= d[j]) {\r\n                this.sorted[k] = d[i];\r\n                i++;\r\n            } else {\r\n                this.sorted[k] = d[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n        if (i > middle) {\r\n            for (let t = j; t <= n; ++t) {\r\n                this.sorted[k] = d[t];\r\n                k++;\r\n            }\r\n        } else {\r\n            for (let t = i; t <= middle; ++t) {\r\n                this.sorted[k] = d[t];\r\n                k++;\r\n            }\r\n        }\r\n        for (let t = m; t <= n; ++t) {\r\n            d[t] = this.sorted[t];\r\n        }\r\n    }\r\n    private static SortMergeLoop(d: number[], m: number, n: number) {\r\n        if (m < n) {\r\n            const middle = Math.floor((m + n) / 2);\r\n            this.SortMergeLoop(d, m, middle);\r\n            this.SortMergeLoop(d, middle + 1, n);\r\n            this.Merge(d, m, middle, n);\r\n        }\r\n    }\r\n    public static SortMerge(d: number[], m: number, n: number) {\r\n        this.sorted = [];\r\n        this.SortMergeLoop(d, m, n);\r\n    }\r\n    // ........................................................................\r\n    public static SortQuickAscending(d: number[], start: number = 0, end: number = d.length - 1) {\r\n        if (start >= end) { return; }\r\n        let temp = 0;\r\n\r\n        let key = start;\r\n        let i = start + 1;\r\n        let j = end;\r\n\r\n        while (i <= j) {\r\n            while (i <= end && d[i] <= d[key]) { i++; }\r\n            while (j > start && d[j] >= d[key]) { j--; }\r\n            if (i > j) {\r\n                temp = d[j];\r\n                d[j] = d[key];\r\n                d[key] = temp;\r\n            } else {\r\n                temp = d[i];\r\n                d[i] = d[j];\r\n                d[j] = temp;\r\n            }\r\n        }\r\n        this.SortQuickAscending(d, start, j - 1);\r\n        this.SortQuickAscending(d, j + 1, end);\r\n    }\r\n    public static SortQuickDescending(d: number[], start: number = 0, end: number = d.length - 1) {\r\n        if (start >= end) { return; }\r\n        let temp = 0;\r\n\r\n        let key = start;\r\n        let i = start + 1;\r\n        let j = end;\r\n\r\n        while (i <= j) {\r\n            while (i <= end && d[i] >= d[key]) { i++; }\r\n            while (j > start && d[j] <= d[key]) { j--; }\r\n            if (i > j) {\r\n                temp = d[j];\r\n                d[j] = d[key];\r\n                d[key] = temp;\r\n            } else {\r\n                temp = d[i];\r\n                d[i] = d[j];\r\n                d[j] = temp;\r\n            }\r\n        }\r\n        this.SortQuickDescending(d, start, j - 1);\r\n        this.SortQuickDescending(d, j + 1, end);\r\n    }\r\n    // ........................................................................\r\n    public static SortInsertionAscending(d: number[]) {\r\n        let temp = 0, j = 0, len = d.length;\r\n        for (let i = 0; i < len - 1; ++i) {\r\n            j = i;\r\n            while (d[j] > d[j + 1]) {\r\n                temp = d[j];\r\n                d[j] = d[j + 1];\r\n                d[j + 1] = temp;\r\n                j--;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n    public static SortInsertionDescending(d: number[]) {\r\n        let temp = 0, j = 0, len = d.length;\r\n        for (let i = 0; i < len - 1; ++i) {\r\n            j = i;\r\n            while (d[j] < d[j + 1]) {\r\n                temp = d[j];\r\n                d[j] = d[j + 1];\r\n                d[j + 1] = temp;\r\n                j--;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n    // ........................................................................\r\n    public static SortBubbleAscending(d: number[]) {\r\n        let temp = 0, len = d.length;\r\n        for (let i = 0; i < len; ++i) {\r\n            for (let j = 0; j < len - 1 - i; ++j) {\r\n                if (d[j] > d[j + 1]) {\r\n                    temp = d[j];\r\n                    d[j] = d[j + 1];\r\n                    d[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n    public static SortBubbleDescending(d: number[]) {\r\n        let temp = 0, len = d.length;\r\n        for (let i = 0; i < len; ++i) {\r\n            for (let j = 0; j < len - 1 - i; ++j) {\r\n                if (d[j] < d[j + 1]) {\r\n                    temp = d[j];\r\n                    d[j] = d[j + 1];\r\n                    d[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n    // ........................................................................\r\n    public static SortSelectionAscending(d: number[]) {\r\n        let index = 0, temp = 0, len = d.length;\r\n        for (let i = 0; i < len; ++i) {\r\n            let min: number = Number.MAX_SAFE_INTEGER;\r\n            for (let j = i; j < len; ++j) {\r\n                if (d[j] < min) { min = d[j]; index = j; }\r\n            }\r\n            temp = d[i];\r\n            d[i] = d[index];\r\n            d[index] = temp;\r\n        }\r\n        return d;\r\n    }\r\n    public static SortSelectionDescending(d: number[]) {\r\n        let index = 0, temp = 0, len = d.length;\r\n        for (let i = 0; i < len; ++i) {\r\n            let min: number = Number.MIN_SAFE_INTEGER;\r\n            for (let j = i; j < len; ++j) {\r\n                if (d[j] > min) { min = d[j]; index = j; }\r\n            }\r\n            temp = d[i];\r\n            d[i] = d[index];\r\n            d[index] = temp;\r\n        }\r\n        return d;\r\n    }\r\n}","import { BROWSER_TYPE } from '../../../../NJSCore/Core/AppCore/Common/Enumeration';\r\nexport class BrowserUtility {\r\n    private _type: BROWSER_TYPE;\r\n    private _isMobile: boolean;\r\n\r\n    // ?product=shirt&color=blue&newuser&size=m\r\n    public static getAllUrlParams(url: string = window.location.search) {\r\n        let queryString = url ? url.split('?')[1] : window.location.search.slice(1);\r\n        let obj = {};\r\n\r\n        if (queryString) {\r\n            queryString = queryString.split('#')[0];\r\n            let arr = queryString.split('&');\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let a = arr[i].split('=');\r\n                let paramName = a[0];\r\n                let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\r\n\r\n                paramName = paramName.toLowerCase();\r\n                if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\r\n\r\n                if (paramName.match(/\\[(\\d+)?\\]$/)) {\r\n                    let key = paramName.replace(/\\[(\\d+)?\\]/, '');\r\n                    if (!obj[key]) obj[key] = [];\r\n\r\n                    if (paramName && paramName.match(/\\[\\d+\\]$/)) {\r\n                        if ((/\\[(\\d+)\\]/.exec(paramName)) !== null) {\r\n                            let index = /\\[(\\d+)\\]/.exec(paramName);\r\n                            if (index && index[1]) {\r\n                                obj[key][index] = paramValue;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        obj[key].push(paramValue);\r\n                    }\r\n                } else {\r\n                    if (!obj[paramName]) {\r\n                        obj[paramName] = paramValue;\r\n                    } else if (obj[paramName] && typeof obj[paramName] === 'string') {\r\n                        obj[paramName] = [obj[paramName]];\r\n                        obj[paramName].push(paramValue);\r\n                    } else {\r\n                        obj[paramName].push(paramValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n    constructor() {\r\n        this.DetectBrowser();\r\n        this.DetectIsMoile();\r\n        // console.debug(this.type, ', isMobile', this.isMobile);\r\n    }\r\n    private DetectBrowser() {\r\n        if ((navigator.userAgent.indexOf('Edge') !== -1)) {\r\n            this._type = BROWSER_TYPE.EDGE;\r\n            return;\r\n        }\r\n        if ((navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) !== -1) {\r\n            this._type = BROWSER_TYPE.OPERA;\r\n        }\r\n        if (navigator.userAgent.indexOf('Chrome') !== -1) {\r\n            this._type = BROWSER_TYPE.CHROME;\r\n            return;\r\n        }\r\n        if (navigator.userAgent.indexOf('Safari') !== -1) {\r\n            this._type = BROWSER_TYPE.SAFARI;\r\n            return;\r\n        }\r\n        if (navigator.userAgent.indexOf('Firefox') !== -1) {\r\n            this._type = BROWSER_TYPE.FIREFOX;\r\n            return;\r\n            // } else if ((navigator.userAgent.indexOf('MSIE') !== -1) || (!!document.documentMode === true)) { // IF IE > 10\r\n        }\r\n        if ((navigator.userAgent.indexOf('MSIE') !== -1)) { // IF IE > 10\r\n            this._type = BROWSER_TYPE.IE;\r\n        }\r\n\r\n        // else {\r\n        this._type = BROWSER_TYPE.UNKNOWN;\r\n        // }\r\n    }\r\n    private DetectIsMoile() {\r\n        this._isMobile = false; // initiate as false\r\n        // device detection\r\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\r\n            this._isMobile = true;\r\n        }\r\n    }\r\n    public get type() {\r\n        return this._type;\r\n    }\r\n    public get isMobile() {\r\n        return this._isMobile;\r\n    }\r\n}","export class ArrayUtility {\r\n  public static FindIndexOfMax(array: number[]) {\r\n    let i: number = 1;\r\n    let mi: number = 0;\r\n    while (i < array.length) {\r\n      if (!(array[i] < array[mi])) { mi = i; }\r\n      i += 1;\r\n    }\r\n    return mi;\r\n  }\r\n  public static FindIndexOfMin(array: number[]) {\r\n    let i: number = 1;\r\n    let mi: number = 0;\r\n    while (i < array.length) {\r\n      if (!(array[i] > array[mi])) { mi = i; }\r\n      i += 1;\r\n    }\r\n    return mi;\r\n  }\r\n}\r\nexport class Print {\r\n  public static isPrint: boolean = true;\r\n  public static log(s: string) {\r\n    if (!Print.isPrint) { return; }\r\n    // console.log(s);\r\n  }\r\n}","import { NJSLoader } from '../../../IO/FilesURL/NJSLoader';\r\nexport class IctxShape {\r\n    type: string;\r\n    pos: number[] = [];\r\n}\r\nexport interface SVGForCanvas {\r\n    type: string;\r\n    width: number;\r\n    height: number;\r\n    path: IctxShape[];\r\n    path2d: Path2D;\r\n}\r\nexport class SVGUtility {\r\n    public static async GetObjectFromSVGXML(xmlString: string) {\r\n        let parser = new DOMParser();\r\n        let xml = await parser.parseFromString(xmlString, 'text/xml');\r\n        let d = NJSLoader.XmlToJson(xml);\r\n        return d;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromString(svg: any) {\r\n        // console.log(svg);\r\n        // const shapePath = shapeString.split(',');\r\n        // this is for edge\r\n        let pathes: string[] = ['M8.5,0', 'C3.806,0', '0,1.817', '0,6.543', 'L0,23.444', 'L8.5,32', 'L17,23.444', 'L17,6.543', 'C17,1.817', '13.194,0', '8.5,0', 'Z', 'M8.5,15.1', 'C5.95949015,15.1', '3.9,13.0405098', '3.9,10.5', 'C3.9,7.95949015', '5.95949015,5.9', '8.5,5.9', 'C11.0405098,5.9', '13.1,7.95949015', '13.1,10.5', 'C13.1002653,11.7200772', '12.6157091,12.8902593', '11.7529842,13.7529842', 'C10.8902593,14.6157091', '9.72007717,15.1002653', '8.5,15.1', 'Z']; // svg.svg.path['@attributes'].d.split(' ');\r\n        let theI: number = 0;\r\n        let ctxShape: IctxShape[] = [];\r\n        for (let i = 0; i < pathes.length; ++i) {\r\n            // console.log(pathes[i]);\r\n            if (pathes[i][0] === 'M') {\r\n                ctxShape[i + ' M'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'C') {\r\n                theI = i;\r\n                ctxShape[theI + ' C'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'L') {\r\n                theI = i;\r\n                ctxShape[theI + ' L'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === '0' || Number(pathes[i][0])) {\r\n                let d = pathes[i].split(',').map(Number);\r\n                ctxShape[theI + ' C'].push(d[0], d[1]);\r\n            }\r\n        }\r\n\r\n        let region = new Path2D();\r\n        Object.keys(ctxShape).map(key => {\r\n            let g = ctxShape[key];\r\n            if (g) {\r\n                let ii = key.split(' ')[1];\r\n                if (ii === 'M') {\r\n                    region.moveTo(g[0], g[1]);\r\n                } else if (ii === 'C') {\r\n                    region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                } else if (ii === 'L') {\r\n                    // console.log(g[0], g[1]);\r\n                    region.lineTo(g[0], g[1]);\r\n                }\r\n                // console.log(ii);\r\n            }\r\n        });\r\n        region.closePath();\r\n\r\n        let sVGForCanvas: SVGForCanvas = {\r\n            type: 'path',\r\n            height: parseInt(svg.svg['@attributes'].height, 10),\r\n            width: parseInt(svg.svg['@attributes'].width, 10),\r\n            path: ctxShape,\r\n            path2d: region\r\n        };\r\n        return sVGForCanvas;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromSVGXML(svg: any): SVGForCanvas {\r\n        svg = JSON.parse(JSON.stringify(svg));\r\n        let ctxShape: IctxShape[] = [];\r\n        // console.log(svg);\r\n        let pathes: string[] = svg.svg.g.g.path['@attributes'].d.split(' ');\r\n        let theI: number = 0;\r\n        for (let i = 0; i < pathes.length; ++i) {\r\n            // console.log(pathes[i]);\r\n            if (pathes[i][0] === 'M') {\r\n                ctxShape[i + ' M'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'C') {\r\n                theI = i;\r\n                ctxShape[theI + ' C'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'L') {\r\n                theI = i;\r\n                ctxShape[theI + ' L'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === '0' || Number(pathes[i][0])) {\r\n                let d = pathes[i].split(',').map(Number);\r\n                ctxShape[theI + ' C'].push(d[0], d[1]);\r\n            }\r\n        }\r\n        let region = new Path2D();\r\n        Object.keys(ctxShape).map(key => {\r\n            let g = ctxShape[key];\r\n            if (g) {\r\n                let ii = key.split(' ')[1];\r\n                if (ii === 'M') {\r\n                    region.moveTo(g[0], g[1]);\r\n                } else if (ii === 'C') {\r\n                    region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                } else if (ii === 'L') {\r\n                    // console.log(g[0], g[1]);\r\n                    region.lineTo(g[0], g[1]);\r\n                }\r\n                // console.log(ii);\r\n            }\r\n        });\r\n        region.closePath();\r\n        // console.log(ctxShape);\r\n        let sVGForCanvas: SVGForCanvas = {\r\n            type: 'path',\r\n            height: parseInt(svg.svg['@attributes'].height, 10),\r\n            width: parseInt(svg.svg['@attributes'].width, 10),\r\n            path: ctxShape,\r\n            path2d: region\r\n        };\r\n        return sVGForCanvas;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromOptiSVGXML(svg: any): SVGForCanvas | undefined {\r\n        svg = JSON.parse(JSON.stringify(svg));\r\n        // console.log(svg);\r\n        if (svg.svg && svg.svg.path) {\r\n            let ctxShape: IctxShape[] = [];\r\n            // console.log(svg);\r\n            let pathes: string[] = svg.svg.path['@attributes'].d;\r\n            // console.log(pathes);\r\n            let stringData = '';\r\n            for (let s of pathes) {\r\n                if (s.toLowerCase() === 'c' || s === '-') {\r\n                    stringData += ' ';\r\n                }\r\n                if (s.toLowerCase() === 's') {\r\n                    stringData += ' ';\r\n                }\r\n                stringData += s;\r\n            }\r\n            pathes = stringData.split(' ');\r\n            let newPath = '';\r\n            for (let i = 0; i < pathes.length; i += 2) {\r\n                newPath += `${pathes[i]},${pathes[i + 1]} `;\r\n            }\r\n            pathes = newPath.split(' ');\r\n\r\n            let theI: number = 0;\r\n            for (let i = 0; i < pathes.length; ++i) {\r\n                // console.log(pathes[i]);\r\n                try {\r\n                    if (pathes[i][0] === 'M') {\r\n                        ctxShape[i + ' M'] = pathes[i]\r\n                            .slice(1)\r\n                            .split(',')\r\n                            .map(Number);\r\n                        continue;\r\n                    } else if (pathes[i][0] === 'C' || pathes[i][0] === 'c' || pathes[i].includes('c')) {\r\n                        theI = i;\r\n                        ctxShape[theI + ' C'] = pathes[i]\r\n                            .slice(1)\r\n                            .split(',')\r\n                            .map(Number);\r\n                        continue;\r\n                    } else if (pathes[i][0] === '0' || Number(pathes[i][0])) {\r\n                        let d = pathes[i].split(',').map(Number);\r\n                        ctxShape[theI + ' C'].push(d[0], d[1]);\r\n                    }\r\n                } catch (error) {\r\n                    //\r\n                }\r\n            }\r\n            let region = new Path2D();\r\n            Object.keys(ctxShape).map(key => {\r\n                let g = ctxShape[key];\r\n                if (g) {\r\n                    let ii = key.split(' ')[1];\r\n                    if (ii === 'M') {\r\n                        region.moveTo(g[0], g[1]);\r\n                    } else if (ii === 'C') {\r\n                        region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                    } else if (ii === 'L') {\r\n                        // console.log(g[0], g[1]);\r\n                        region.lineTo(g[0], g[1]);\r\n                    }\r\n                    // console.log(ii);\r\n                }\r\n            });\r\n            region.closePath();\r\n            // console.log(ctxShape);\r\n            let sVGForCanvas: SVGForCanvas = {\r\n                type: 'path',\r\n                height: parseInt(svg.svg['@attributes'].height, 10),\r\n                width: parseInt(svg.svg['@attributes'].width, 10),\r\n                path: ctxShape,\r\n                path2d: region\r\n            };\r\n            return sVGForCanvas;\r\n        } else if (svg.svg && svg.svg.circle) {\r\n            let ctxShape: IctxShape[] = [];\r\n            let region = new Path2D();\r\n            /*\r\n            console.log(svg.svg.circle['@attributes']);\r\n            ctxShape.push({ fill: svg.svg.circle['@attributes'].fill });\r\n            ctxShape.push({ stroke: svg.svg.circle['@attributes'].stroke });\r\n          */\r\n            let sVGForCanvas: SVGForCanvas = {\r\n                type: 'circle',\r\n                height: parseInt(svg.svg['@attributes'].height, 10),\r\n                width: parseInt(svg.svg['@attributes'].width, 10),\r\n                path: ctxShape,\r\n                path2d: region\r\n            };\r\n            return sVGForCanvas;\r\n        }\r\n        return undefined;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromOptiSVGXMLPath(svg: any): any {\r\n        svg = JSON.parse(JSON.stringify(svg));\r\n        // console.log(svg);\r\n        if (svg.svg && svg.svg.path) {\r\n            // let ctxShape: IctxShape[] = [];\r\n            // console.log(svg);\r\n            let pathes: string[] = svg.svg.path['@attributes'].d;\r\n            // console.log(pathes);\r\n            return pathes;\r\n        }\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromOptiSVGXML_(svg: any): SVGForCanvas | undefined {\r\n        svg = JSON.parse(JSON.stringify(svg));\r\n        // console.log(svg);\r\n        if (svg.svg && svg.svg.path) {\r\n            // let ctxShape: IctxShape[] = [];\r\n            // console.log(svg);\r\n            let pathes: string[] = svg.svg.path['@attributes'].d;\r\n            // console.log(pathes);\r\n            let stringData = '';\r\n            for (let s of pathes) {\r\n                if (s.toLowerCase() === 'c' || s === '-') {\r\n                    stringData += ' ';\r\n                }\r\n                if (s.toLowerCase() === 's') {\r\n                    stringData += ' ';\r\n                }\r\n                if (s.toLowerCase() === 'l') {\r\n                    stringData += ' ';\r\n                }\r\n                stringData += s;\r\n            }\r\n            pathes = stringData.split(' ');\r\n            // let newPath = '';\r\n            // for (let i = 0 ; i < pathes.length; i += 2 ) {\r\n            //     newPath += `${pathes[i]},${pathes[i + 1]} `;\r\n            // }\r\n            // pathes = newPath.split(' ');\r\n\r\n            // console.log(pathes);\r\n            let ctxShape: IctxShape[] = [];\r\n            for (let i = 0; i < pathes.length; ++i) {\r\n                // index++;\r\n                const line = pathes[i];\r\n                if (line) {\r\n                    if (pathes[i].includes('C')) {\r\n                        let shape = new IctxShape();\r\n                        shape.type = 'C';\r\n                        let theRemain = pathes[i].substr(1, pathes[i].length);\r\n\r\n                        let pos = theRemain.split(',');\r\n                        shape.pos.push(+pos[0]); shape.pos.push(+pos[1]);\r\n\r\n                        pos = pathes[++i].split(',');\r\n                        shape.pos.push(+pos[0]); shape.pos.push(+pos[1]);\r\n\r\n                        pos = pathes[++i].split(',');\r\n                        shape.pos.push(+pos[0]); shape.pos.push(+pos[1]);\r\n\r\n                        ctxShape.push(shape);\r\n                    } else if (pathes[i].includes('L')) {\r\n                        let shape = new IctxShape();\r\n                        shape.type = 'L';\r\n                        let theRemain = pathes[i].substr(1, pathes[i].length);\r\n\r\n                        let pos = theRemain.split(',');\r\n                        shape.pos.push(+pos[0]); shape.pos.push(+pos[1]);\r\n                        ctxShape.push(shape);\r\n                    } else if (pathes[i].includes('M')) {\r\n                        let shape = new IctxShape();\r\n                        shape.type = 'M';\r\n                        let theRemain = pathes[i].substr(1, pathes[i].length);\r\n\r\n                        let pos = theRemain.split(',');\r\n                        shape.pos.push(+pos[0]); shape.pos.push(+pos[1]);\r\n                        ctxShape.push(shape);\r\n                    } else if (pathes[i].includes('Z')) {\r\n                        let shape = new IctxShape();\r\n                        shape.type = 'Z';\r\n                        ctxShape.push(shape);\r\n                    } else {\r\n\r\n                        // ctxShape.push(pathes[i].substr(0, 1));\r\n                        // let theRemain = pathes[i].substr(1, pathes[i].length);\r\n                        // ctxShape[ctxShape.length - 1] += (' ' + theRemain);\r\n                    }\r\n                    // console.log(pathes[i]);\r\n                } else {\r\n                    // ctxShape.push(pathes[i]);\r\n                    // console.log('-----------------------------');\r\n                }\r\n            }\r\n\r\n            // console.log(ctxShape);\r\n\r\n            // for (let i = 0; i < ctxShape.length; ++i) {\r\n            // console.log(pathes[i]);\r\n\r\n            /*\r\n            try {\r\n\r\n                if (pathes[i][0] === 'M') {\r\n                    ctxShape[i + ' M'] = (pathes[i].slice(1).split(',').map(Number));\r\n                    continue;\r\n                } else if (pathes[i][0] === 'C' || pathes[i][0] === 'c' || pathes[i].includes('c') ) {\r\n                    theI = i;\r\n                    ctxShape[theI + ' C'] = (pathes[i].slice(1).split(',').map(Number));\r\n                    continue;\r\n                } else if (pathes[i][0] === 'L' || pathes[i][0] === 'l' || pathes[i].includes('l') ) {\r\n                    theI = i;\r\n\r\n                    const ddd = pathes[i].split(',');\r\n                    console.log(ddd);\r\n                    for (let i = 0; i < ddd.length; ++i ) {\r\n                        console.log(ddd[i]);\r\n                    }\r\n                    ctxShape[theI + ' L'] = (pathes[i].slice(1).split(',').map((n) => {\r\n                        //\r\n                        console.log(n);\r\n                    }));\r\n                    continue;\r\n                } else if (pathes[i][0] === '0' || Number(pathes[i][0])) {\r\n                    let d = pathes[i].split(',').map(Number);\r\n                    ctxShape[theI + ' C'].push(d[0], d[1]);\r\n                }\r\n            } catch (error) {\r\n                //\r\n            }\r\n            */\r\n            // }\r\n            let region = new Path2D();\r\n            Object.keys(ctxShape).map(key => {\r\n                let g = ctxShape[key];\r\n                if (g) {\r\n                    let ii = key.split(' ')[1];\r\n                    if (ii === 'M') {\r\n                        region.moveTo(g[0], g[1]);\r\n                    } else if (ii === 'C') {\r\n                        region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                    } else if (ii === 'L') {\r\n                        // console.log(g[0], g[1]);\r\n                        region.lineTo(g[0], g[1]);\r\n                    }\r\n                    // console.log(ii);\r\n                }\r\n            });\r\n            region.closePath();\r\n            // console.log(ctxShape);\r\n            let sVGForCanvas: SVGForCanvas = {\r\n                type: 'path',\r\n                height: parseInt(svg.svg['@attributes'].height, 10),\r\n                width: parseInt(svg.svg['@attributes'].width, 10),\r\n                path: ctxShape,\r\n                path2d: region\r\n            };\r\n            return sVGForCanvas;\r\n        } else if (svg.svg && svg.svg.circle) {\r\n            let ctxShape: IctxShape[] = [];\r\n            // console.log(svg.svg.circle['@attributes']);\r\n\r\n            // ctxShape.push({ 'fill': svg.svg.circle['@attributes'].fill });\r\n            // ctxShape.push({ 'stroke': svg.svg.circle['@attributes'].stroke });\r\n            let region = new Path2D();\r\n            Object.keys(ctxShape).map(key => {\r\n                let g = ctxShape[key];\r\n                if (g) {\r\n                    let ii = key.split(' ')[1];\r\n                    if (ii === 'M') {\r\n                        region.moveTo(g[0], g[1]);\r\n                    } else if (ii === 'C') {\r\n                        region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                    } else if (ii === 'L') {\r\n                        // console.log(g[0], g[1]);\r\n                        region.lineTo(g[0], g[1]);\r\n                    }\r\n                    // console.log(ii);\r\n                }\r\n            });\r\n            region.closePath();\r\n\r\n            let sVGForCanvas: SVGForCanvas = {\r\n                type: 'circle',\r\n                height: parseInt(svg.svg['@attributes'].height, 10),\r\n                width: parseInt(svg.svg['@attributes'].width, 10),\r\n                path: ctxShape,\r\n                path2d: region\r\n            };\r\n            return sVGForCanvas;\r\n        }\r\n        return undefined;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    public static GetCanvaseShapePathFromSVGXMLIcon(svg: any): SVGForCanvas {\r\n        svg = JSON.parse(JSON.stringify(svg));\r\n        let ctxShape: IctxShape[] = [];\r\n        let pathes: string[] = svg.svg.g.path['@attributes'].d.split(' ');\r\n        let theI: number = 0;\r\n        // console.log(pathes);\r\n        for (let i = 0; i < pathes.length; ++i) {\r\n            // console.log(pathes[i]);\r\n            if (pathes[i][0] === 'M') {\r\n                ctxShape[i + ' M'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'L' || Number(pathes[i][0])) {\r\n                ctxShape[i + ' L'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === 'Z' || Number(pathes[i][0])) {\r\n                ctxShape[i + ' Z'] = '';\r\n                continue;\r\n            } else if (pathes[i][0] === 'C') {\r\n                theI = i;\r\n                ctxShape[theI + ' C'] = (pathes[i].slice(1).split(',').map(Number));\r\n                continue;\r\n            } else if (pathes[i][0] === '0' || Number(pathes[i][0])) {\r\n                let d = pathes[i].split(',').map(Number);\r\n                ctxShape[theI + ' C'].push(d[0], d[1]);\r\n            }\r\n        }\r\n        let region = new Path2D();\r\n        Object.keys(ctxShape).map(key => {\r\n            let g = ctxShape[key];\r\n            if (g) {\r\n                let ii = key.split(' ')[1];\r\n                if (ii === 'M') {\r\n                    region.moveTo(g[0], g[1]);\r\n                } else if (ii === 'C') {\r\n                    region.bezierCurveTo(g[0], g[1], g[2], g[3], g[4], g[5]);\r\n                } else if (ii === 'L') {\r\n                    // console.log(g[0], g[1]);\r\n                    region.lineTo(g[0], g[1]);\r\n                }\r\n                // console.log(ii);\r\n            }\r\n        });\r\n        region.closePath();\r\n        // console.log(ctxShape);\r\n        let sVGForCanvas: SVGForCanvas = {\r\n            type: 'path',\r\n            height: parseInt(svg.svg['@attributes'].height, 10),\r\n            width: parseInt(svg.svg['@attributes'].width, 10),\r\n            path: ctxShape,\r\n            path2d: region\r\n        };\r\n        return sVGForCanvas;\r\n    }\r\n    constructor() {/* */ }\r\n}","export class Describe {\r\n    index: string;\r\n    data: number[];\r\n    count: number;\r\n    min: number;\r\n    max: number;\r\n    mean: number;\r\n    sum: number;\r\n    median: number;\r\n    variance: number;\r\n    STD: number;\r\n    toFixed: number;\r\n    constructor(data: number[], count: number, min: number, max: number, mean: number, sum: number, median: number, variance: number, STD: number, index: string) {\r\n        this.data = data;\r\n        this.count = count;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.mean = mean;\r\n        this.sum = sum;\r\n        this.median = median;\r\n        this.variance = variance;\r\n        this.STD = STD;\r\n        this.index = index;\r\n        this.toFixed = 4;\r\n    }\r\n    ToString() {\r\n        const s: string[] = [];\r\n        s.push('index : ' + this.index);\r\n        s.push('count : ' + this.count);\r\n        s.push('min : ' + this.min.toFixed(this.toFixed));\r\n        s.push('max : ' + this.max.toFixed(this.toFixed));\r\n        s.push('mean : ' + this.mean.toFixed(this.toFixed));\r\n        s.push('sum : ' + this.sum.toFixed(this.toFixed));\r\n        s.push('median : ' + this.median.toFixed(this.toFixed));\r\n        s.push('variance : ' + this.variance.toFixed(this.toFixed));\r\n        s.push('STD : ' + this.STD.toFixed(this.toFixed));\r\n        return s;\r\n    }\r\n}\r\nexport class StatisticsUtility {\r\n\r\n    static DescribeNumeric(n: number[], index: string = 'null') {\r\n        let describe = new Describe(\r\n            n,\r\n            n.length,\r\n            StatisticsUtility.Min(n),\r\n            StatisticsUtility.Max(n),\r\n            StatisticsUtility.Mean(n),\r\n            StatisticsUtility.Sum(n),\r\n            StatisticsUtility.Median(n),\r\n            StatisticsUtility.Variance(n),\r\n            StatisticsUtility.StandardDeviation(n),\r\n            index\r\n        );\r\n        return describe;\r\n    }\r\n    static Min(n: number[]) { return Math.min(...n); }\r\n    static Max(n: number[]) { return Math.max(...n); }\r\n    static Mean(n: number[]) { return StatisticsUtility.Average(n); }\r\n    static Average(n: number[]) { let sum = StatisticsUtility.Sum(n); return sum / n.length; }\r\n    static Sum(n: number[]) {\r\n        let i = n.length;\r\n        let sum = 0.0;\r\n        while (i--) { sum += n[i]; }\r\n        return sum;\r\n    }\r\n    static Median(n: number[]) {\r\n        let nn = StatisticsUtility.SortAscending(n);\r\n        let half = Math.floor(nn.length / 2);\r\n        if (nn.length % 2) { return nn[half]; } else { return (nn[half - 1] + nn[half]) / 2.0; }\r\n    }\r\n    static SortAscending(n: number[]) {\r\n        return n.sort((a: number, b: number) => { return a - b; });\r\n    }\r\n    static SortDescending(n: number[]) {\r\n        return n.sort((b: number, a: number) => { return a - b; });\r\n    }\r\n    static Variance(n: number[]) {\r\n        let mean = StatisticsUtility.Mean(n);\r\n        let sum = 0;\r\n        for (let i = 0; i < n.length; ++i) {\r\n            if (n[i] < mean) { sum += Math.pow(mean - n[i], 2); } else { sum += Math.pow(mean - n[i], 2); }\r\n        }\r\n        return sum / (n.length - 1.0);\r\n    }\r\n    static StandardDeviation(n: number[]) {\r\n        let variance = StatisticsUtility.Variance(n);\r\n        return Math.sqrt(variance);\r\n    }\r\n\r\n    // ............................................................................å\r\n    static GetDataForHistDataFromNumeric(n: number[], bin: number = 5) {\r\n        let bins: number[][] = [];\r\n        let d = StatisticsUtility.SortAscending(n);\r\n        let domain = [d[0], d[d.length - 1]];\r\n        let interval = (domain[1] - domain[0]) / (bin - 1);\r\n        let start = 0;\r\n        for (let i = 0; i < bin; ++i) {\r\n            const maxNum = domain[0] + ((i + 1) * interval);\r\n            let data: number[] = [];\r\n            for (let j = start; j < n.length; ++j) {\r\n                if (n[j] < maxNum) { data.push(n[j]); } else { start = j; break; }\r\n            }\r\n            bins.push(data);\r\n        }\r\n        return bins;\r\n    }\r\n    public static GetIndexByDataForHistDataFromNumeric(n: number[][], v: number) {\r\n        for (let i = 0; i < n.length; ++i) {\r\n            for (let j = 0; j < n[i].length; ++j) {\r\n                if (v < n[i][j]) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n// // Copyright(C) 2015 NJ Namju Lee <nj.namju@gmail.com>\r\n\r\n// import numpy as np\r\n// import pandas as pd\r\n// import random\r\n// import sklearn as sk\r\n// from sklearn.neighbors import KNeighborsRegressor as KNN\r\n// from sklearn.cross_validation import train_test_split as sk_split\r\n// from sklearn.linear_model import LinearRegression as Lin_Reg\r\n// import time\r\n// import matplotlib\r\n// import matplotlib.pyplot as plt\r\n\r\n// import skLearnLib\r\n// import math\r\n\r\n// import scipy as sp\r\n// import itertools\r\n\r\n//     from statsmodels.regression.linear_model import OLS\r\n// # % matplotlib inline\r\n\r\n// ######################################################################################\r\n// # ** MAE ** is the easiest to understand, because it's the average error.\r\n// # ** MSE ** is more popular than MAE, because MSE \"punishes\" larger errors.\r\n// # ** RMSE ** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\r\n\r\n// def MAE_MeanAbsoluteError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = metrics.mean_absolute_error(xTrue, xPred)\r\n// return result\r\n// def MSE_MeanSquaredError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = metrics.mean_squared_error(xTrue, xPred)\r\n// return result\r\n// def RMSE_MeanSquaredError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = np.sqrt(metrics.mean_squared_error(xTrue, xPred))\r\n// return result\r\n// def GetR2Score(yTrue, yPred):\r\n// from sklearn.metrics import r2_score\r\n//     print r2_score(yTrue, yPred)\r\n// def PrintScore(yTrue, yPred):\r\n// print \"MAE_MeanAbsoluteError:\", MAE_MeanAbsoluteError(yTrue, yPred)\r\n// print \"MSE_MeanSquaredError:\", MSE_MeanSquaredError(yTrue, yPred)\r\n// print \"RMSE_MeanSquaredError:\", RMSE_MeanSquaredError(yTrue, yPred)\r\n// print \"GetR2Score:\", GetR2Score(yTrue, yPred)\r\n\r\n// ######################################################################################\r\n\r\n// def MSE_MeanSquaredErrorLoss(fullData, targetData): # common use\r\n// sum = RSS_ResidualSumofSquares(fullData, targetData)\r\n// return sum / len(fullData)\r\n// def MSE_MeanSquaredErrorLossForCategorical(fullData, targetData): # Categorical\r\n// sum = 0.0;\r\n// for i in range(len(fullData)):\r\n//     if (fullData[i] != targetData[i]): sum += 1\r\n// return sum / len(fullData)\r\n// def GetMean(dataArray):\r\n// return np.mean(dataArray)\r\n// #     theSum = 0.0\r\n// #     for d in dataArray: theSum += d\r\n// #     return theSum / len(dataArray)\r\n// def getMedian(dataArray):\r\n// return np.median(dataArray)\r\n// def RSS_ResidualSumofSquares(dataFull, missingFill): # residual standard error, RSE ??? --OLS(Ordinary Least Squares) Residual Sum of Squares(RSS)\r\n// sumSoFar = 0.0\r\n// for i in range(len(missingFill)):\r\n//     sumSoFar += (dataFull[i] - missingFill[i]) ** 2\r\n// return sumSoFar\r\n// def TSS_TotalSumOfSquare(fullData, targetData):\r\n// # meanVal = targetData.mean() # for numpy\r\n//     meanVal = GetMean(targetData) # manual\r\n// sumSoFar = 0.0\r\n// for i in range(len(targetData)):\r\n// # sumSoFar += (fullData.y[i] - meanVal) ** 2\r\n// sumSoFar += (fullData[i] - meanVal) ** 2\r\n// return sumSoFar\r\n// def R_Squared_CoefficientOfDetermination(fullData, targetData): # this is for regression\r\n//     RSS = RSS_ResidualSumofSquares(fullData, targetData)\r\n//     TSS = TSS_TotalSumOfSquare(fullData, targetData)\r\n//     return 1 - (RSS / TSS)\r\n// def R_Squared_CoefficientOfDeterminationBySKLearn(fullData, targetData):\r\n// return sk.metrics.r2_score(fullData, targetData)\r\n// # x = [1, 2, 3, 4, 5]\r\n// # y = [6, 7, 4, 3, 2]\r\n// # y_ = [5.5, 5.0, 5.0, 3.0, 3.5]\r\n// # print MSE_MeanSquaredErrorLoss(y, y_)\r\n// # print R_Squared_CoefficientOfDetermination(y, y_)\r\n// # print R_Squared_CoefficientOfDeterminationBySKLearn(y, y_)\r\n\r\n// def GetListFromPDColumn(pdCol):\r\n// temp = []\r\n// for d in pdCol: temp.append(d)\r\n// return temp;\r\n\r\n// def RSS(e): # e = Y - Y_hat\r\n// return np.sum(e ** 2)\r\n// def RSE(RSS, lengthYpredict): #  input lengthYpredict, return sigma\r\n// return np.sqrt(RSS / (lengthYpredict - 2));\r\n// def SIGMA(y, ylength): # Y - Y_hat\r\n// theRss = RSS(y);\r\n// return RSE(theRss, ylength);\r\n\r\n// def SIGMAFromList(y, y_hatList): # YTestList - Y_hatList\r\n// sig = []\r\n// for i in range(len(y_hatList)):\r\n// #         print  y[i]\r\n// sig.append(SIGMA(y[i] - y_hatList[i], len(y_hatList)))\r\n// return sig\r\n\r\n// def SE_b1(sigma, X):\r\n// np.sqrt(sigma ** 2 / np.sum((X - np.mean(X)) ** 2))\r\n// def SE_b1WithMatrix(sigma, X):\r\n// np.sqrt(sigma ** 2 / np.dot(np.sum((X - np.mean(X)), np.sum((X - np.mean(X))))))\r\n\r\n// def MaxAbsoluteDeviation(dataFull, dataPredict):\r\n// theMax = 0.0\r\n// for i in range(len(dataFull)):\r\n//     theNum = dataFull[i] - dataPredict[i]\r\n// if theMax < theNum: theMax = theNum\r\n// return theMax\r\n\r\n// def SumOfAbsoluteDeviations(dataFull, missingFill):\r\n// sumSoFar = 0.0\r\n// for i in range(len(missingFill)):\r\n//     sumSoFar += math.abs((dataFull[i] - missingFill[i]) ** 2)\r\n// return sumSoFar\r\n\r\n// def confInt(lstArray, percent):\r\n// num = len(lstArray)\r\n// uppercut = float((100 - percent) / 2)\r\n// cut = (num * (uppercut / 100))\r\n// return lstArray[cut: -cut]\r\n\r\n// def ComputeCorrelationCoefficients(xPanda): # Compute matrix of correlation coefficients\r\n// corr_matrix = np.corrcoef(xPanda.T)\r\n// return corr_matrix;\r\n// def VisHeatMapForCorrelationMatrix(corr_matrix): # Display heat map\r\n// fig, ax = plt.subplots(1, 1, figsize = (6, 6))\r\n// ax.pcolor(corr_matrix)\r\n// ax.set_title('Heatmap of correlation matrix')\r\n// plt.show()\r\n// # data = np.loadtxt('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_4/datasets/dataset_1.txt', delimiter = ',', skiprows = 1)\r\n// # # Split predictors and response\r\n// # x = data[:, : -1]\r\n// # y = data[:, -1]\r\n// # corr_matrix = ComputeCorrelationCoefficients(x)\r\n// # VisHeatMapForCorrelationMatrix(corr_matrix)\r\n\r\n// ##..............................................data Generator for simple linear reg from lec 3\r\n// def GenerateDataLinearFun(N = 1000, beta0 = 2.2, beta1 = 3.0, sigma = 10.0, Xmax = 1.0):\r\n// epsilon = np.random.normal(0, sigma, N) # Random normally distributed points\r\n// X = np.linspace(0, Xmax, N)\r\n// Y = beta0 + beta1 * X + epsilon\r\n// return X, Y\r\n\r\n// def GenerateDataNotLinearFun(N = 1000, beta0 = 2.2, beta1 = 3.0, sigma = 1.0, Xmax = 1.0, alpha = 1):\r\n// epsilon = np.random.normal(0, sigma, N) # Random normally distributed points\r\n// X = np.linspace(0, Xmax, N)\r\n// Y = beta0 + beta1 * X + alpha * np.sin(6 * X) + epsilon\r\n// #Y = beta0 + beta1 * X + 4 * beta1 * (X > 0.5) + epsilon\r\n// #Y = beta0 + beta1 * X + alpha * X * X * X + epsilon\r\n// return X, Y\r\n\r\n// ##..............................................GetConfidenceInterval from lec 3\r\n// def GetConfidenceInterval(X, Y):\r\n// def FitLinearModelForCoefficients(X, Y):\r\n// # Estimate the coefficients\r\n// beta1 = np.sum((X - np.mean(X)) * (Y - np.mean(Y))) / np.sum((X - np.mean(X)) ** 2)\r\n// beta0 = np.mean(Y) - beta1 * np.mean(X)\r\n// return beta0, beta1\r\n// def PredictLinearModelForY(X, beta0, beta1):\r\n// Y = beta0 + beta1 * X\r\n// return Y\r\n// beta0_hat, beta1_hat = FitLinearModelForCoefficients(X, Y)\r\n// Y_hat = PredictLinearModelForY(X, beta0_hat, beta1_hat)\r\n// e = Y - Y_hat\r\n// RSS = np.sum(e ** 2)\r\n// RSE = np.sqrt(RSS / (len(X) - 2))\r\n// sigma = RSE\r\n// SE_b1 = np.sqrt(sigma ** 2 / np.sum((X - np.mean(X)) ** 2))\r\n// print(\"Standard error on beta1\", SE_b1)\r\n// print(\"Estimate value of beta1\", beta1_hat)\r\n// print(\"95% confidence interval is: [\", beta1_hat - 2 * SE_b1, beta1_hat + 2 * SE_b1, \"]\")\r\n// print(\"Correct value is: \", 3)\r\n// # N = 100000 # 10, 100, 100000\r\n// # x, y = GenerateDataLinearFun(N)\r\n// # GetConfidenceInterval(x, y)\r\n\r\n// def plotit(gamma):\r\n// def FitLinearModel(X, Y):\r\n// # Estimate the coefficients\r\n// beta1 = np.sum((X - np.mean(X)) * (Y - np.mean(Y))) / np.sum((X - np.mean(X)) ** 2)\r\n// beta0 = np.mean(Y) - beta1 * np.mean(X)\r\n// return beta0, beta1\r\n// def PredictLinearModel(X, beta0, beta1):\r\n// Y = beta0 + beta1 * X\r\n// return Y\r\n// # GENERATE DATA THAT ARE NOT FROM A LINEAR FUNCTION\r\n// N = 1000 # number of points\r\n// beta0 = 2.2; beta1 = 3.0\r\n// X, Y = GenerateDataNotLinearFun(N, beta0, beta1, sigma = 0.001, alpha = gamma)\r\n\r\n// beta0_hat, beta1_hat = FitLinearModel(X, Y)\r\n// print(\"estimated coefficients\", beta0_hat, beta1_hat)\r\n\r\n// # estimate y\r\n// Y_hat = PredictLinearModel(X, beta0_hat, beta1_hat)\r\n\r\n// # calculate the RSE, R2\r\n// RSS = np.sum((Y - Y_hat) ** 2)\r\n// RSE = np.sqrt(np.sum((Y - Y_hat) ** 2)) / (N - 2)\r\n// TSS = np.sum((Y - np.mean(Y)) ** 2)\r\n\r\n// plt.figure(figsize = (20, 12))\r\n// R2 = 1 - RSS / TSS\r\n// plt.plot(X, Y, 'b+')\r\n// plt.plot(X, Y_hat, label = \"Estimated\")\r\n// plt.plot(X, beta0 + beta1 * X + gamma * X * X * X, label = \"True Y, gamma=\" + str(gamma))\r\n// plt.legend(loc = 'best')\r\n// plt.xlabel('X')\r\n// plt.ylabel('Y')\r\n// plt.show()\r\n\r\n// print(\"RSE=\" + str(RSE))\r\n// print(\"R2=\" + str(R2))\r\n\r\n// # plotit(0.15) # -5 / 0.55 # define the non - linear\r\n\r\n// def GetSubsetOfPredicttorsByForward(xNumpyMatrix, yList):\r\n// x = xNumpyMatrix\r\n// y = yList\r\n// ### Best Subset Selection\r\n// min_bic = 1e10 # set some initial large value for min BIC score\r\n//     best_subset = []# best subset of predictors\r\n// print # total number of predictors\r\n// # Create all possible subsets of the set of 10 predictors\r\n// predictorSet = set(range(xNumpyMatrix.shape[1]))\r\n// print \"total number of predictor: \", len(predictorSet)\r\n\r\n// for sizeK in range(len(predictorSet)):\r\n// # Create all possible subsets of size 'size', using the 'combination' function from the 'itertools' library\r\n// subsetsSizeK = itertools.combinations(predictorSet, sizeK + 1)\r\n// maxRsquared = -1e10 # set some initial small value for max R ^ 2 score\r\n//         bestKsubset = []# best subset of predictors of size k\r\n// for predictor_subset in subsetsSizeK:\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, predictor_subset]\r\n\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n\r\n// # Update max R ^ 2 and best predictor subset of size k\r\n// # If current predictor subset has a higher R ^ 2 score than that of the best subset\r\n// # we've found so far, remember the current predictor subset as the best!\r\n// if (maxRsquared < r_squared):\r\n//     maxRsquared = r_squared\r\n// bestKsubset = predictor_subset[:]\r\n\r\n// # Use only the best subset of size k for the predictors\r\n//         x_subset = x[:, bestKsubset]\r\n\r\n// # Fit and evaluate BIC of the best subset of size k\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// bic = results.bic\r\n\r\n// # Update minimum BIC and best predictor subset\r\n// # If current predictor has a lower BIC score than that of the best subset\r\n// # we've found so far, remember the current predictor as the best!\r\n// if (bic < min_bic):\r\n//     min_bic = bic\r\n// best_subset = bestKsubset[:]\r\n// print 'Step-wise forward subset selection:'\r\n// return sorted(best_subset)\r\n// # # load data by Numpy\r\n// # dataFull = np.loadtxt(\"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_04/datasets/dataset_1.txt\", delimiter = \",\", skiprows = 1)\r\n// # # filter all X feature annd Y\r\n// # xDataList = dataFull[:,: -1]\r\n// # yData = dataFull[:, -1]\r\n// # bestSubsetForward = GetSubsetOfPredicttorsByForward(xDataList, yData);\r\n// # print bestSubsetForward\r\n\r\n// def GetSubsetOfPredicttorsByBackward(xNumpyMatrix, yList):\r\n// x = xNumpyMatrix\r\n// y = yList\r\n\r\n// ###  Step - wise Backward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// print \"total number of predictor: \", d\r\n// # Keep track of current set of chosen predictors\r\n// current_predictors = range(d)\r\n\r\n// # First, fit and evaluate BIC using all 'd' number of predictors\r\n// model = OLS(y, x)\r\n// results = model.fit()\r\n// bic_all = results.bic\r\n\r\n// # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n// global_min_bic = bic_all\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n\r\n// # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n// for size in range(d - 1, 1, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n// max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n// bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n\r\n// # Iterate over current set of predictors(for potential elimination)\r\n//     for i in current_predictors:\r\n// # Create copy of current predictors, and remove predictor 'i'\r\n// temp = current_predictors[:]\r\n// temp.remove(i)\r\n\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// worst_predictor = i\r\n// bic_without_worst_predictor = results.bic\r\n\r\n// # Remove worst predictor from current set of predictors\r\n// current_predictors.remove(worst_predictor)\r\n\r\n// # Check if BIC for the predictor we just removed is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_without_worst_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_without_worst_predictor\r\n// print 'Step-wise backward subset selection:'\r\n// return sorted(best_subset)\r\n// # # load data by Numpy\r\n// # dataFull = np.loadtxt(\"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_04/datasets/dataset_1.txt\", delimiter = \",\", skiprows = 1)\r\n// # # filter all X feature annd Y\r\n// # xDataList = dataFull[:,: -1]\r\n// # yData = dataFull[:, -1]\r\n// # bestSubsetBackward = GetSubsetOfPredicttorsByBackward(xDataList, yData)\r\n// # print bestSubsetBackward\r\n\r\n// # s = pd.Series(list('abca'))\r\n// # print s\r\n\r\n// # print pd.get_dummies(s)\r\n\r\n// ################################################################# string to one hot encoding\r\n// def encode_categorical(array):\r\n// from sklearn import preprocessing\r\n//     if not array.dtype == np.dtype('float64'):\r\n// return preprocessing.LabelEncoder().fit_transform(array)\r\n//     else:\r\n// return array\r\n// data = dfSeoulRe.apply(encode_categorical)\r\n\r\n// ############################################################################################# feature selection\r\n// def StepWiseForwardSelection(x, y, data): #panda data frame\r\n// from statsmodels.regression.linear_model import OLS\r\n// ### Step - wise Forward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// # Keep track of current set of chosen predictors, and the remaining set of predictors\r\n// current_predictors = []\r\n// remaining_predictors = range(d)\r\n// # Set some initial large value for min BIC score for all possible subsets\r\n//     global_min_bic = 1e10\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n// # Iterate over all possible subset sizes, 0 predictors to d predictors\r\n// for size in range(d):\r\n//     max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         best_predictor = -1 # set some throwaway initial number for the best predictor to add\r\n// bic_with_best_predictor = 1e10 # set some initial large value for BIC score\r\n// # Iterate over all remaining predictors to find best predictor to add\r\n// for i in remaining_predictors:\r\n// # Make copy of current set of predictors\r\n// temp = current_predictors[:]\r\n// # Add predictor 'i'\r\n// temp.append(i)\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n// # Add a column of ones\r\n// x_subset = np.hstack((x_subset, np.ones((x_subset.shape[0], 1))))\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// best_predictor = i\r\n// bic_with_best_predictor = results.bic\r\n// # Remove best predictor from remaining list, and add best predictor to current list\r\n// remaining_predictors.remove(best_predictor)\r\n// current_predictors.append(best_predictor)\r\n// # Check if BIC for with the predictor we just added is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_with_best_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_with_best_predictor\r\n// print 'Step-wise forward subset selection:'\r\n// print sorted(best_subset) # add 1 as indices start from 0\r\n// forward = data.columns.values[sorted(best_subset)]\r\n// print forward\r\n// return forward\r\n\r\n// def StepWiseBackwardSelection(x, y, data): #panda data frame\r\n// from statsmodels.regression.linear_model import OLS\r\n// ###  Step - wise Backward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// # Keep track of current set of chosen predictors\r\n// current_predictors = range(d)\r\n// # First, fit and evaluate BIC using all 'd' number of predictors\r\n// model = OLS(y, x)\r\n// results = model.fit()\r\n// bic_all = results.bic\r\n// # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n// global_min_bic = bic_all\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n// # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n// for size in range(d - 1, 0, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n// max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n// bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n// # Iterate over current set of predictors(for potential elimination)\r\n//     for i in current_predictors:\r\n// # Create copy of current predictors, and remove predictor 'i'\r\n// temp = current_predictors[:]\r\n// temp.remove(i)\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n// # Add a column of ones\r\n// x_subset = np.hstack((x_subset, np.ones((x_subset.shape[0], 1))))\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// worst_predictor = i\r\n// bic_without_worst_predictor = results.bic\r\n// # Remove worst predictor from current set of predictors\r\n// current_predictors.remove(worst_predictor)\r\n// # Check if BIC for the predictor we just removed is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_without_worst_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_without_worst_predictor\r\n\r\n// print 'Step-wise backward subset selection:'\r\n// print sorted(best_subset)\r\n// backward = data.columns.values[sorted(best_subset)]\r\n// print backward\r\n// return backward\r\n\r\n// data = dfSeoulRe.convert_objects(convert_numeric = True)\r\n// x = data.values #.as_matrix()\r\n// y = data[\"building\"]\r\n// forward = StepWiseForwardSelection(x, y, segSeoul)\r\n// backward = StepWiseBackwardSelection(x, y, segSeoul)\r\n\r\n// import os\r\n// import pandas as pd\r\n// import numpy as np\r\n\r\n// # open data from the absolute path\r\n// def getPandasFromFile(path, fileName):\r\n// path = os.path.join(path, fileName)\r\n// return pd.read_csv(path)\r\n\r\n// def getNumpyFromFile(path, fileName):\r\n// path = os.path.join(path, fileName)\r\n// return np.genfromtxt(path, delimiter = ',')\r\n\r\n// def getPandasFromJson(json):\r\n// return pd.DataFrame(json)\r\n\r\n// def getPandasFromJson(list):\r\n// return pd.Series(list)\r\n\r\n// def split(dataset, m): # temp = split(dataFull, 80)[0].y\r\n// train = dataset.sample(frac = m * 0.01, random_state = 100)\r\n// test = dataset.drop(train.index)\r\n// trainNew = dataset.drop(test.index)\r\n// return trainNew, test\r\n\r\n// ########################################################################\r\n\r\n// def fillNull(Rdata, Rmissing_ind):\r\n// from copy import deepcopy\r\n//     temp = deepcopy(Rdata)\r\n// for i in Rmissing_ind:\r\n//     temp[\"y\"][i] = np.nan\r\n// return temp\r\n\r\n// def split(dataset, m):\r\n// train = dataset.sample(frac = m * 0.01, random_state = 100)\r\n// test = dataset.drop(train.index)\r\n// trainNew = dataset.drop(test.index)\r\n// return trainNew, test\r\n\r\n// fileName = 'dataset_HW1.txt'\r\n// path = \"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_1/\"\r\n\r\n// df = getPandasFromFile(path, fileName)\r\n// print(df.head(3))\r\n// print(df.tail(3))\r\n// print \"this is df.describe\"\r\n// print(df.describe()) # The.describe() function returns all the descriptive stats for each column as a data frame object!\r\n// print(\"the size of data frame is \", df.shape[0])\r\n\r\n// selectedCol = df[range(1, df.shape[1] - 1)]# ignoring first and last colums\r\n// newCol = pd.DataFrame(columns = selectedCol.columns.values)\r\n// newCol.loc[\"min\"] = selectedCol.min()\r\n// newCol.loc[\"max\"] = selectedCol.max()\r\n// newCol.loc[\"range\"] = selectedCol.max() - selectedCol.min()\r\n// print newCol\r\n\r\n// newCol.loc[\"mean\"] = selectedCol.mean()\r\n// newCol.loc[\"median\"] = selectedCol.median()\r\n// newCol.loc[\"std\"] = selectedCol.std()\r\n// # print newCol\r\n\r\n// childrenData = df[df[\"patient_age\"] <= 17]\r\n// childrenStats = pd.DataFrame(columns = childrenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// childrenStats = childrenStats[theColumnRange]\r\n// childrenStats.loc['child_max'] = childrenData[theColumnRange].max()\r\n// childrenStats.loc['child_min'] = childrenData[theColumnRange].min()\r\n// childrenStats.loc['child_range'] = childrenStats.values[0] - childrenStats.values[1]\r\n// childrenStats.loc['child_mean'] = childrenData[[1, 2, 4]].mean()\r\n// childrenStats.loc['child_median'] = childrenData[[1, 2, 4]].median()\r\n// childrenStats.loc['child_std'] = childrenData[[1, 2, 4]].std()\r\n// # print childrenStats\r\n\r\n// #  for women stats\r\n// adultWomenData = df[(df[\"patient_age\"] > 17) & (df[\"patient_gender\"] == \"female\")]\r\n// adultWomenStats = pd.DataFrame(columns = adultWomenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// adultWomenStats = adultWomenStats[theColumnRange]\r\n// adultWomenStats.loc['adult_women_max'] = adultWomenData[theColumnRange].max() # going to be 0 index\r\n// adultWomenStats.loc['adult_women_min'] = adultWomenData[theColumnRange].min() # going to be 1 index\r\n// adultWomenStats.loc['adult_women_range'] = adultWomenStats.values[0] - adultWomenStats.values[1]\r\n// adultWomenStats.loc['adult_women_mean'] = adultWomenData[[1, 2, 4]].mean()\r\n// adultWomenStats.loc['adult_women_median'] = adultWomenData[[1, 2, 4]].median()\r\n// adultWomenStats.loc['adult_women_std'] = adultWomenData[[1, 2, 4]].std()\r\n// # print adultWomenStats\r\n\r\n// #  for women stats\r\n// adultMenData = df[(df[\"patient_age\"] > 17) & (df[\"patient_gender\"] == \"male\")]\r\n// adultMenStats = pd.DataFrame(columns = adultMenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// adultMenStats = adultMenStats[theColumnRange]\r\n// adultMenStats.loc['adult_men_max'] = adultMenData[theColumnRange].max() # going to be 0 index\r\n// adultMenStats.loc['adult_men_min'] = adultMenData[theColumnRange].min() # going to be 1 index\r\n// adultMenStats.loc['adult_men_range'] = adultMenStats.values[0] - adultMenStats.values[1]\r\n// adultMenStats.loc['adult_men_mean'] = adultMenData[[1, 2, 4]].mean()\r\n// adultMenStats.loc['adult_men_median'] = adultMenData[[1, 2, 4]].median()\r\n// adultMenStats.loc['adult_men_std'] = adultMenData[[1, 2, 4]].std()\r\n// # print adultMenStats\r\n\r\n// print \"adultMenStats.iloc[0] to access or 'name' !!\"\r\n// print adultMenStats.iloc[0]\r\n\r\n// children = childrenData.shape[0]\r\n// adults = df.shape[0] - children\r\n// print \"the num of chil : \", children, \"the num of adults : \", adults\r\n\r\n// import matplotlib.pyplot as plt\r\n// fig = plt.figure(figsize = (10, 10))\r\n\r\n// ax1 = fig.add_subplot(221)\r\n// ax1.pie([children, adults],\r\n//     labels = ['children: ' + str(children), 'adults: ' + str(adults)],\r\n//     colors = ['red', 'gold'],\r\n//     autopct = '%1.1f%%', shadow = True, startangle = 90)\r\n\r\n// #women vs men pie chart\r\n// women = df[df['patient_gender'] == 'female'].shape[0]#number of women\r\n// men = df.shape[0] - women #men = total number - women\r\n\r\n// ax2 = fig.add_subplot(222)\r\n// ax2.pie([women, men],\r\n//     labels = ['women: ' + str(women), 'men: ' + str(men)],\r\n//     colors = ['lightskyblue', 'yellowgreen'],\r\n//     autopct = '%1.1f%%', shadow = True, startangle = 90)\r\n\r\n// numAdultWomen = adultWomenData.shape[0]\r\n// numAdultMen = adultMenData.shape[0]\r\n\r\n// ax3 = fig.add_subplot(223)\r\n// ax3.pie([numAdultMen, numAdultWomen],\r\n//     labels = ['adult men : ' + str(numAdultMen),\r\n//     'adult women : ' + str(numAdultWomen)],\r\n//     colors = ['lightblue', 'green'],\r\n//     autopct = \"%1.1f%%\",\r\n//     shadow = True,\r\n//     startangle = 90\r\n// )\r\n\r\n// plt.show()\r\n\r\n// def plotHist(axes, data, title, x_label, y_label, color):\r\n// axes.hist(data,\r\n//     100,\r\n//     normed = 1,\r\n//     facecolor = color,\r\n//     alpha = 0.75)\r\n\r\n// axes.set_title(title)\r\n// axes.set_xlabel(x_label)\r\n// axes.set_ylabel(y_label)\r\n// return axes\r\n\r\n// # print df['marker_1']\r\n\r\n// fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8)) = plt.subplots(4, 2, figsize = (15, 10))\r\n\r\n// ax1 = plotHist(ax1, df['marker_1'], \"histogram of marker 1\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax2 = plotHist(ax2, df['marker_2'], \"histogram of marker 2\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax3 = plotHist(ax3, childrenData['marker_1'], \"histogram of marker 1 for children\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax4 = plotHist(ax4, childrenData['marker_2'], \"histogram of marker 2 for children\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax5 = plotHist(ax5, adultWomenData['marker_1'], \"histogram of marker 1 for adult women\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax6 = plotHist(ax6, adultWomenData['marker_2'], \"histogram of marker 2 for adult women\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax7 = plotHist(ax7, adultMenData['marker_1'], \"histogram of marker 1 for adult men\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax8 = plotHist(ax8, adultMenData['marker_2'], \"histogram of marker 2 for adult men\", 'frequency', \"marker 2 value\", \"red\")\r\n\r\n// plt.tight_layout()\r\n// plt.show()\r\n\r\n// def plot_scatter(axes, data, plot_title, x_lable, y_lable, groups):\r\n// import matplotlib.cm as cmx\r\n// import matplotlib.colors as colors\r\n// #set up color map(one color per group number)\r\n\r\n// #split[0, 1] in to as many parts as there are groups\r\n// group_numbers = np.linspace(0, 1, groups)\r\n// #get a color map\r\n// c_map = plt.get_cmap('rainbow')\r\n// #get a range of colors from color map\r\n// c_norm = colors.Normalize(vmin = 0, vmax = group_numbers[-1])\r\n// #get a map that maps a group number to a color\r\n// number_map = cmx.ScalarMappable(norm = c_norm, cmap = c_map)\r\n\r\n// #plot points colored by their group number\r\n// for group in xrange(groups):\r\n// #convert a group number into a color using our map\r\n// color = number_map.to_rgba(group_numbers[group])\r\n// #make a scatter plot of a specific group colored by its group number color\r\n// axes.scatter(data[data['subtype'] == group]['marker_1'],\r\n//     data[data['subtype'] == group]['marker_2'],\r\n//     c = color,\r\n//     alpha = 0.5)\r\n\r\n// axes.set_title(plot_title)\r\n// axes.set_xlabel(x_lable)\r\n// axes.set_ylabel(y_lable)\r\n\r\n// fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize = (10, 10))\r\n\r\n// plot_scatter(ax1, df, 'scatter plot of entire dataset', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax2, childrenData, 'scatter plot of children', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax3, adultWomenData, 'scatter plot of adult female', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax4, adultMenData, 'scatter plot of adult male', 'marker 1', 'marker 2', 4)\r\n\r\n// plt.tight_layout()\r\n// plt.show()\r\n\r\n// dataFull = getPandasFromFile(\"dataset\", \"dataset_1_full.txt\")\r\n// #print split(full, 80)[0].y\r\n// #print split(full, 80)[1].y\r\n// temp = split(dataFull, 80)[0].y\r\n// idx = temp.index[2]\r\n// #print split(full, 80)[1]\r\n// #print idx\r\n// #print temp[idx]\r\n// print temp.values[: 5]\r\n// print temp.values[-5:]\r\n\r\n// a = temp.values[: 5]\r\n// b = temp.values[-5:]\r\n\r\n// print list(a) + list(b)\r\n\r\n// train = dataFull.sample(frac = 0.8, random_state = 100)\r\n// train = train.sort()\r\n// test = dataFull.drop(train.index)\r\n\r\n// import sys, time\r\n// import numpy as np\r\n// import pandas as pd\r\n\r\n// #############w##################################################### split data for train and test\r\n// def SplitDataWithSKLearn(X,y, testSize=0.2, randomState=4):\r\n//     from sklearn.cross_validation import train_test_split\r\n//     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=testSize, random_state=randomState)\r\n//     print \"train, X length:\", len(X_train), \", Y length:\" , len(y_train)\r\n//     print \"test, X length:\", len(X_test), \", Y length:\" , len(y_test)\r\n//     return X_train, X_test, y_train, y_test\r\n\r\n// def split(dataset,m): # temp = split(dataFull,80)[0].y\r\n//     train = dataset.sample(frac=m*0.01,random_state=100)\r\n//     test = dataset.drop(train.index)\r\n//     trainNew = dataset.drop(test.index)\r\n//     return trainNew, test\r\n\r\n// def splitFromRandom(data):\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * .7)]\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * .7):]\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices, :]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices, :]\r\n//     return train, test\r\n// # df = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_01/dataset_HW1.txt')\r\n// # children_data = df[df['patient_age'] < 18]\r\n// # train, test = split(children_data)\r\n\r\n// def splitByRandom(data, percent): # 0.7\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * percent)] # .7\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * percent):] # .7\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices]\r\n//     return train, test\r\n\r\n// def splitFromTopWithPercentage(dataset,percent): # temp = split(dataFull,80)[0].y\r\n//     theTotalLength = len(dataset.index.values)\r\n//     theLength = theTotalLength * percent / 100\r\n//     theInverseIndex = [i for i in range(theLength + 1, theTotalLength)]\r\n//     theIndex = [i for i in range(0, theLength + 1)]\r\n//     theFristData = dataset.drop(theInverseIndex, 0)\r\n//     theNextData = dataset.drop(theIndex, 0)\r\n//     return theFristData, theNextData\r\n\r\n// def splitFromTopWithPercentagePandasToNumpy(xDFforList, yDFforItem,percent): # pandasDF m 0.5%, 1 is maximum, let say 100%\r\n//     # Convert data frame to array\r\n//     x = xDFforList.values\r\n//     y = yDFforItem.values\r\n\r\n//     # ii. SPLIT TRAIN AND TEST SETS\r\n//     # No. of training points\r\n//     n = x.shape[0]\r\n//     n_train = int(np.round(n*percent)) # 0.25\r\n\r\n//     # First 25% train, remaining test\r\n//     x_train = x[0:n_train,:]\r\n//     y_train = y[0:n_train]\r\n//     x_test = x[n_train:,:]\r\n//     y_test = y[n_train:]\r\n\r\n// def GetDataBySplit(data , string):\r\n//     d = data.split(\",\")\r\n//     return d\r\n\r\n// def SortListOfList(d):\r\n//     d.sort(key=lambda x: x[0], reverse=True)\r\n//     return d\r\n\r\n// def dot_product(v1, v2):\r\n//     return sum(map(lambda x: x[0] * x[1], zip(v1, v2)))\r\n\r\n// def cosine_measure(v1, v2):\r\n//     prod = dot_product(v1, v2)\r\n//     len1 = math.sqrt(dot_product(v1, v1))\r\n//     len2 = math.sqrt(dot_product(v2, v2))\r\n//     return prod / (len1 * len2)\r\n\r\n// # print countdown(5);\r\n// def countdown(n):\r\n//     #print(\"QUIZ TIME\")\r\n//     for i in range(5*1,0, -1):\r\n//         time.sleep(1)\r\n//         sys.stdout.write(str(i)+' ')\r\n//         sys.stdout.flush()\r\n\r\n// ############################################################################ random sampling\r\n// def getRandomSamplingRowFromNumpy(data, num):\r\n//     return data[[ np.random.randint(0,num) for i in range(num)],:]\r\n// def getRandomSamplingDataMatricsFromRow(dataTrain, numList=200, numSample = 100 ):\r\n//     dataSmapleList = []\r\n//     for i in range(numList):\r\n//         dataSmapleList.append(getRandomSampleingRowFromNumpy(dataTrain, numSample))\r\n//     return dataSmapleList\r\n// def getRandomSamplingRowFromNumpy(data, num):\r\n//     return data[[ np.random.randint(0,num) for i in range(num)],:]\r\n// # data = np.array([[1,2,3],[4,5,6],[7,8,9]])\r\n// # print data\r\n// # print getRandomSampleingRowFromNumpy(data, 3)\r\n\r\n// def getColumnSortFromNumpyMatrix(dataArray):\r\n//     if type(dataArray) == np.ndarray :\r\n//         return np.sort(dataArray.T).T # transpose to compute sort\r\n//     else:\r\n//         dataArray = np.array(dataArray) # make the list numpy to transpose and sort\r\n//         return np.sort(dataArray.T).T # transpose to compute sort\r\n// def getRowSortFromNumpyMatrix(dataArray):\r\n//     if type(dataArray) == np.ndarray :\r\n//         return np.sort(dataArray) # transpose to compute sort\r\n//     else:\r\n//         dataArray = np.array(dataArray) # make the list numpy to transpose and sort\r\n//         return np.sort(dataArray) # transpose to compute sort\r\n\r\n// # dd = [[4,5,7], [7,3,1],[3,34,9]]\r\n// # dd = np.array(dd)\r\n// # print dd\r\n// # print getRowSortFromNumpyMatrix(dd);\r\n\r\n// #############################################################################\r\n\r\n// def GetSquareRamdaList(min, max):\r\n//     return [10 ** i for i in range(min, max+1)]\r\n\r\n// def fillNull(dataPandaDataFrame, dataListForMissing):\r\n//     from copy import deepcopy\r\n//     temp = deepcopy(dataPandaDataFrame)\r\n//     for i in dataListForMissing:\r\n//         temp[\"y\"][i] = np.nan\r\n//     return temp\r\n\r\n// def InsertNoneByRandom(data, percent): # 0.7\r\n//     # percent = 1.0 - percent\r\n//     newDF = data.copy(deep=True)\r\n//     dataLength = len(data)\r\n//     rndIndex  = np.random.choice(dataLength,int(dataLength * percent) )\r\n//     newDF.iloc[rndIndex] = np.nan# 'null'\r\n//     print \"The total length of old data:\", dataLength\r\n//     print \"The total length of new data:\", newDF.count()\r\n//     print \"the length of None in the new data:\", newDF.isnull().sum(),\"(\",percent,\"%)\"\r\n//     return newDF\r\n\r\n// def GetXYListFromPandaDataFrame(dataPD): # in Pandas List (multiple x and one y) to split and resort based on x column and y\r\n//     xList = []\r\n//     y = []\r\n//     length = dataPD.shape[1]\r\n//     for i, d in enumerate(dataPD.T.values):\r\n//         if( i < length-1): xList.append(d) # list for x columns\r\n//         else: y = d # a value for only one y\r\n//     return xList, y\r\n\r\n// def DeleteLastColFromPandaDataFrame(dataFullPD):\r\n//     indexCol = dataFull.columns.values\r\n//     return dataFull.drop(indexCol[-1], 1) # 0 for rows and 1 for columns\r\n// def SplitXYColumnFromPandaDataFrame(dataPD): # input as panda data frame out 1) x feature list, y feature item\r\n//     indexCol = dataPD.columns.values\r\n//     xlist = dataPD.drop(indexCol[-1:], 1)\r\n//     yItem = dataPD.drop(indexCol[:-1], 1)\r\n//     return xlist, yItem\r\n\r\n// def GetDummiesFromPandaDataFrame(dataPD):\r\n\r\n//     # Create a new data frame with first attribute\r\n//     x_df_expanded = pd.DataFrame({}) # first column is numerical\r\n//     # Iterate over all attributes\r\n//     for column in dataPD.columns:\r\n//         # Check if attribute is not categorical: either dtype is not object\r\n//         if (len(dataPD[column].unique())<8\r\n//         or (dataPD[column].dtype == np.dtype('object'))\r\n//         or (dataPD[column].dtype == np.dtype('string'))):\r\n//             encoding = pd.get_dummies(dataPD[column])\r\n//             x_df_expanded = pd.concat([x_df_expanded, encoding], axis=1)\r\n//         else:\r\n//             x_df_expanded = pd.concat([x_df_expanded, dataPD[column]], axis=1)\r\n//             # print encoding.iloc[:1].values\r\n//     return x_df_expanded\r\n\r\n// def GetCountForNullFromPandas(d):\r\n//     return d.isnull().sum()\r\n\r\n// # a = np.array([1,10,3,4,5,6])\r\n// # a = a.reshape((3,2))\r\n// # b = CopyNumpy(a);\r\n// # b[0][-1] = 99\r\n// # print a\r\n// # print b\r\n\r\n// ######\r\n// # print b + 2\r\n// # print b ** 2\r\n// # print b < 10\r\n\r\n// ######\r\n// # print b\r\n// # PrintNumpy(b)\r\n// # print GetColumnFromNumpy(b, 1 , False)\r\n\r\n// # print ComputeCutWithRangeNumpy(b, 3,10)\r\n// # print GetComparedWithMaxNumpy(b, 10)\r\n\r\n// ######\r\n// # dataWithNAN = np.array([1,2,3,np.NAN, 4])\r\n// # print ComputeCutWithNANNumpy(dataWithNAN)\r\n\r\n// ################################################## sort\r\n// # newData = [[10,7, 1],[8,3, 10], [23,4,9]]\r\n// # newData = np.array(newData)\r\n// # print newData\r\n// # newData1 = CopyNumpy(newData)\r\n// # newData1.sort()\r\n// # print newData1\r\n// # newData1[:,0].sort()\r\n// # print newData1\r\n\r\n// ################################################## data structure\r\n// def GetArrayFromMatrix(d):\r\n//     newD, = np.array(d.T)\r\n//     return newD\r\n// def GetMatrixFromArrayForSKLearn(d): # because we need to make a matrix for SK\r\n//     return d.reshape((len(d),1))\r\n\r\n// ################################################### customized K Fold\r\n// # this is list of list. first list contain individual KFold, in this case, 5 # the second index is about train and test, the length should be 2.\r\n// def GetDataFrameListFromKFold(dt, k,lamdaLst): # should be no remainder by k # return list of PandasDataFrames\r\n//     Kfold = []; tempFold = []; num = 0;\r\n//     totalLength = len(dt)\r\n//     theLength = totalLength/k\r\n//     for i in range(totalLength+1):\r\n//         if num == theLength+1:\r\n//             Kfold.append(tempFold)\r\n//             tempFold = []\r\n//             tempFold.append(i)\r\n//             num =1;\r\n//         elif i == totalLength:\r\n//               Kfold.append(tempFold)\r\n//         else:\r\n//             tempFold.append(i)\r\n//             num+=1\r\n//     dt = dt.T\r\n//     KfoldList = []\r\n//     for i in Kfold: KfoldList.append(dt[i].T)\r\n//     kfoldListOut = []\r\n//     for j in range(len(KfoldList)):\r\n//         theTrainDataFrame = []\r\n//         theTestDataFrame = []\r\n//         fold = []\r\n//         for i, d in enumerate(KfoldList):\r\n//             if(j == i): theTrainDataFrame = d\r\n//             else:theTestDataFrame.append(d)\r\n//         theTestDataFrame = pd.concat(theTestDataFrame)\r\n//         fold.append(theTrainDataFrame)\r\n//         fold.append(theTestDataFrame)\r\n//         kfoldListOut.append(fold)\r\n//     return kfoldListOut\r\n// # dataFrameListFromKFold = GetDataFrameListFromKFold(dataFullDummies, 5,listRamda) # dataFullDummies\r\n// # # this is list of list. first list contain individual KFold, in this case, 5 # the second index is about train and test, the length should be 2.\r\n// # print len(dataFrameListFromKFold)\r\n// # print len(dataFrameListFromKFold[0])\r\n\r\n// ################################################### customized Booststrapping\r\n// def Booststrapping(dataFrame, num_samples):\r\n//     indexCol = dataFrame.columns.values\r\n//     indexRow = dataFrame.index.values\r\n\r\n//     indexRow = np.random.permutation(len(indexRow))\r\n//     dataFrame = dataFrame.T\r\n//     return dataFrame[indexRow].T\r\n\r\n// def GetDataFrameListFromBooststrapping(dataFrame, num_samples, num_List):\r\n//     outList = []\r\n//     for i in range(num_List):\r\n//         outList.append(Booststrapping(dataFrame,num_samples))\r\n//     return outList\r\n\r\n// # print len(GetDataFrameListFromBooststrapping(dataFullDummies, 200, 5))\r\n\r\n// ################################################### customized Booststrapping\r\n// def GetSubsetOfPredicttorsByForward(xNumpyMatrix, yList):\r\n//     x = xNumpyMatrix\r\n//     y = yList\r\n\r\n//     ### Best Subset Selection\r\n//     min_bic = 1e10 # set some initial large value for min BIC score\r\n//     best_subset = [] # best subset of predictors\r\n\r\n//     # Create all possible subsets of the set of 10 predictors\r\n//     predictorSet = set(range(xNumpyMatrix.shape[1]))\r\n//     print \"total number of predictor: \",len(predictorSet)\r\n\r\n//     for sizeK in range(len(predictorSet)):\r\n//         # Create all possible subsets of size 'size', using the 'combination' function from the 'itertools' library\r\n//         subsetsSizeK = itertools.combinations(predictorSet, sizeK +1)\r\n//         maxRsquared = -1e10 # set some initial small value for max R^2 score\r\n//         bestKsubset = [] # best subset of predictors of size k\r\n//         for predictor_subset in subsetsSizeK:\r\n//             # Use only a subset of predictors in the training data\r\n//             x_subset = x[:, predictor_subset]\r\n\r\n//             # Fit and evaluate R^2\r\n//             model = OLS(y, x_subset)\r\n//             results = model.fit()\r\n//             r_squared = results.rsquared\r\n\r\n//             # Update max R^2 and best predictor subset of size k\r\n//             # If current predictor subset has a higher R^2 score than that of the best subset\r\n//             # we've found so far, remember the current predictor subset as the best!\r\n//             if(maxRsquared < r_squared ):\r\n//                 maxRsquared = r_squared\r\n//                 bestKsubset = predictor_subset[:]\r\n\r\n//         # Use only the best subset of size k for the predictors\r\n//         x_subset = x[:, bestKsubset]\r\n\r\n//         # Fit and evaluate BIC of the best subset of size k\r\n//         model = OLS(y, x_subset)\r\n//         results = model.fit()\r\n//         bic = results.bic\r\n\r\n//         # Update minimum BIC and best predictor subset\r\n//         # If current predictor has a lower BIC score than that of the best subset\r\n//         # we've found so far, remember the current predictor as the best!\r\n//         if(bic < min_bic):\r\n//             min_bic = bic\r\n//             best_subset = bestKsubset[:]\r\n//     print 'Step-wise forward subset selection:'\r\n//     return sorted(best_subset)\r\n// # bestSubsetForward = GetSubsetOfPredicttorsByForward(xDataList, yData)\r\n// # print bestSubsetForward\r\n// def GetSubsetOfPredicttorsByBackward(xNumpyMatrix, yList):\r\n//     x = xNumpyMatrix\r\n//     y = yList\r\n\r\n//     ###  Step-wise Backward Selection\r\n//     d = x.shape[1] # total no. of predictors\r\n//     print \"total number of predictor: \",d\r\n//     # Keep track of current set of chosen predictors\r\n//     current_predictors = range(d)\r\n\r\n//     # First, fit and evaluate BIC using all 'd' number of predictors\r\n//     model = OLS(y, x)\r\n//     results = model.fit()\r\n//     bic_all = results.bic\r\n\r\n//     # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n//     global_min_bic = bic_all\r\n//     # Keep track of the best subset of predictors\r\n//     best_subset = []\r\n\r\n//     # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n//     for size in range(d - 1, 1, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n//         max_r_squared = -1e10 # set some initial small value for max R^2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n//         bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n\r\n//         # Iterate over current set of predictors (for potential elimination)\r\n//         for i in current_predictors:\r\n//             # Create copy of current predictors, and remove predictor 'i'\r\n//             temp = current_predictors[:]\r\n//             temp.remove(i)\r\n\r\n//             # Use only a subset of predictors in the training data\r\n//             x_subset = x[:, temp]\r\n\r\n//             # Fit and evaluate R^2\r\n//             model = OLS(y, x_subset)\r\n//             results = model.fit()\r\n//             r_squared = results.rsquared\r\n\r\n//             # Check if we get a higher R^2 value than than current max R^2, if so, update\r\n//             if(r_squared > max_r_squared):\r\n//                 max_r_squared = r_squared\r\n//                 worst_predictor = i\r\n//                 bic_without_worst_predictor = results.bic\r\n\r\n//         # Remove worst predictor from current set of predictors\r\n//         current_predictors.remove(worst_predictor)\r\n\r\n//         # Check if BIC for the predictor we just removed is lower than\r\n//         # the global minimum across all subset of predictors\r\n//         if(bic_without_worst_predictor < global_min_bic):\r\n//             best_subset = current_predictors[:]\r\n//             global_min_bic = bic_without_worst_predictor\r\n//     print 'Step-wise backward subset selection:'\r\n//     return sorted(best_subset)\r\n// # bestSubsetBackward = GetSubsetOfPredicttorsByBackward(xDataList, yData)\r\n// # print bestSubsetBackward\r\n\r\n// # [[1,1] , [ 1,1,] .... ]\r\n// def split2dData(data, percent=0.7):\r\n//     section = int(len(data) * percent)\r\n//     train = data[:section,:]\r\n//     test = data[section:,:]\r\n//     return train, test\r\n// def split1dData(data, percent=0.7):\r\n//     section = int(len(data) * percent)\r\n//     train = data[:section]\r\n//     test = data[section:]\r\n//     return train, test\r\n\r\n// def split(dataset,m):\r\n//     train=dataset.sample(frac=m*0.01,random_state=100)\r\n//     test=dataset.drop(train.index)\r\n//     trainNew=dataset.drop(test.index)\r\n//     return trainNew, test\r\n\r\n// # dataTrain, dataTest  = split(dataFull, 70)\r\n\r\n// #### Let's put our function definitions in one cell, for readability  from HW 01\r\n\r\n// #--------  split\r\n// #input: data (dataframe)\r\n// #output: train (dataframe), test (dataframe)\r\n\r\n// def split(data):\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * .7)]\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * .7):]\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices, :]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices, :]\r\n\r\n//     return train, test\r\n\r\n// #--------  classify\r\n// #input: train (dataframe), test (dataframe)\r\n// #output: predicted_subtypes (numpy array)\r\n\r\n// def classify(train, test):\r\n//     #create dataframe with just biometric and disease subtype info\r\n//     biometric_df = train[['marker_1', 'marker_2', 'subtype']]\r\n\r\n//     #group the records in dataframe by 'subtype' and compute mean\r\n//     mean_df = biometric_df.groupby('subtype').mean()\r\n\r\n//     #converts row labels like 0.0, 1.0 to string (this will save us indexing headaches)\r\n//     mean_df.index = mean_df.index.map(str)\r\n\r\n//     #iterate through the rows in the mean dataframe\r\n//     for index, mean in mean_df.iterrows():\r\n//         #for each cluster mean, store the distance between all test points and mean\r\n//         #in new column labeled by the cluster number\r\n//         test.loc[:, index] = ((test['marker_1'] - mean['marker_1'])**2\r\n//                               + (test['marker_2'] - mean['marker_2'])**2)\r\n\r\n//     #now the dataframe \"test\" has four new columns: 0, 1, 2, 3\r\n//     #the n-th value in the 0 column represents the distance btw the\r\n//     #n-th data point and the 0-th cluster mean\r\n\r\n//     #get the columns from test that are store the distances to the cluster means\r\n//     distances = test[mean_df.index]\r\n\r\n//     #for each record, get the labels on the column that stores the minimum distance\r\n//     predicted_subtypes = distances.idxmin(axis=1).values\r\n\r\n//     #converts row labels like 0.0, 1.0 from string back to float (to make arithmetic easier)\r\n//     predicted_subtypes = predicted_subtypes.astype(float)\r\n//     return predicted_subtypes\r\n\r\n// #--------  evaluate\r\n// #input: predicted_subtypes (array), true_subtypes (array)\r\n// #output: percent_correct (float)\r\n\r\n// def evaluate(predicted_subtypes, true_subtypes):\r\n//     #subtract the array of predicted subtypes and the array of true subtypes\r\n//     comparison = predicted_subtypes - true_subtypes\r\n\r\n//     #when the predicted value is different from the true value, that entry is non-zero\r\n//     #we set all non-zero entries (wrong predictions) to 1\r\n//     comparison[comparison != 0] = 1\r\n\r\n//     #the total number of wrong predictions is the sum of the array (where entries have a 1\r\n//     #for wrong and 0 for right)\r\n//     total_wrong = comparison.sum()\r\n\r\n//     right_percent = (len(comparison) - total_wrong) / (len(comparison) * 1.0)\r\n\r\n//     return right_percent\r\n\r\n// def GetColArrayFromList(d):\r\n//     d = pd.DataFrame(d);\r\n//     d = np.array(d.as_matrix())\r\n//     return d\r\n\r\n// ##################################################################################### Pandas use case\r\n// ############################################################################# Pandas utilities\r\n\r\n// def PandasUtility():\r\n//     import pandas as pd\r\n//     df = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_01/dataset_HW1.txt')\r\n//     print 'number of patients:', df.shape[0]\r\n//     df.head(n=5) #print first 5 rows of dataframe\r\n//     df_cols_1_to_4 = df[range(1, 5)]  #choose columns 1, 2, 3, 4 (ignoring columns 0 and 4)\r\n//     column_names = df_cols_1_to_4.columns.values #get column names from important_column dataframe\r\n//     stats = pd.DataFrame(columns=column_names) #create pandas dataframe with column names given by column_names\r\n//     stats.loc['max'] = df_cols_1_to_4.max() #create a row called 'max' and store max values from the columns of important_columns\r\n//     stats.loc['min'] = df_cols_1_to_4.min() #create a row called 'min' and store min values from the columns of important_columns\r\n//     stats.loc['range'] = df_cols_1_to_4.max() - df_cols_1_to_4.min()    #create a row called 'range' and store range of values from the columns of important_columns\r\n//     stats.head(n=5)\r\n//     df_cols_1_2_4 = df[[1, 2, 4]]\r\n//     stats.loc['mean'] = df_cols_1_2_4.mean()\r\n//     stats.loc['median'] = df_cols_1_2_4.median()\r\n//     stats.loc['std'] = df_cols_1_2_4.std()\r\n//     print stats\r\n\r\n//     #Create three different datasets by filtering our entire set\r\n//     children_data = df[df['patient_age'] < 18]\r\n//     adult_women_data = df[(df['patient_age'] > 17) & (df['patient_gender'] == 'female')]\r\n//     adult_male_data = df[(df['patient_age'] > 17) & (df['patient_gender'] == 'male')]\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = children_data[range(1, 5)].columns.values\r\n//     child_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     child_stats.loc['child_max'] = children_data[range(1, 5)].max()\r\n//     child_stats.loc['child_min'] = children_data[range(1, 5)].min()\r\n//     child_stats.loc['child_range'] = children_data[range(1, 5)].max() - children_data[range(1, 5)].min()\r\n\r\n//     child_stats.loc['child_mean'] = children_data[[1, 2, 4]].mean()\r\n//     child_stats.loc['child_median'] = children_data[[1, 2, 4]].median()\r\n//     child_stats.loc['child_std'] = children_data[[1, 2, 4]].std()\r\n//     print child_stats\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = adult_women_data[range(1, 5)].columns.values\r\n//     adult_women_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     adult_women_stats.loc['adult_f_max'] = adult_women_data[range(1, 5)].max()\r\n//     adult_women_stats.loc['adult_f_min'] = adult_women_data[range(1, 5)].min()\r\n//     adult_women_stats.loc['adult_f_range'] = adult_women_data[range(1, 5)].max() - adult_women_data[range(1, 5)].min()\r\n\r\n//     adult_women_stats.loc['adult_f_mean'] = adult_women_data[[1, 2, 4]].mean()\r\n//     adult_women_stats.loc['adult_f_median'] = adult_women_data[[1, 2, 4]].median()\r\n//     adult_women_stats.loc['adult_f_std'] = adult_women_data[[1, 2, 4]].std()\r\n//     print adult_women_stats\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = adult_male_data[range(1, 5)].columns.values\r\n//     adult_male_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     adult_male_stats.loc['adult_m_max'] = adult_male_data[range(1, 5)].max()\r\n//     adult_male_stats.loc['adult_m_min'] = adult_male_data[range(1, 5)].min()\r\n//     adult_male_stats.loc['adult_m_range'] = adult_male_data[range(1, 5)].max() - adult_male_data[range(1, 5)].min()\r\n\r\n//     adult_male_stats.loc['adult_m_mean'] = adult_male_data[[1, 2, 4]].mean()\r\n//     adult_male_stats.loc['adult_m_median'] = adult_male_data[[1, 2, 4]].median()\r\n//     adult_male_stats.loc['adult_m_std'] = adult_male_data[[1, 2, 4]].std()\r\n//     print adult_male_stats\r\n\r\n//     ###################################\r\n//     xTemp = csvData[\"x\"].as_matrix()\r\n//     yTemp = csvData[\"y\"].as_matrix()\r\n\r\n//     print np.min(xTemp), np.max(xTemp)\r\n//     print np.min(yTemp), np.max(yTemp)\r\n\r\n//     x_Value = [coef_x_mean - 15.5 , coef_x_mean + 15.5]\r\n\r\n//     xplt = df['x'].convert_objects(convert_numeric=True)\r\n//     yplt = df['y'].convert_objects(convert_numeric=True)\r\n//     zplt = df['z'].convert_objects(convert_numeric=True)\r\n\r\n//     col_1 = pd.Series(tlst)\r\n//     col_2 = pd.Series(xlst)\r\n//     col_3 = pd.Series(ylst)\r\n//     col_4 = pd.Series(zlst)\r\n//     df = pd.DataFrame({\"t\":col_1,\"x\":col_2,\"y\":col_3,\"z\":col_4})\r\n//     df.tail(3)\r\n\r\n//     data = data.replace('_', np.nan)\r\n\r\n//     # dorp column if there is no data because we have more than 400 column...\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     data = data[complete_cols]\r\n\r\n//     # Converted columns to floating point\r\n//     for feature_name in to_float:\r\n//         data[feature_name] = data[feature_name].astype(float)\r\n\r\n//     # Columns between POP901 to AC2 should all be float\r\n//     index1 = data.columns.get_loc(\"POP901\")\r\n//     index2 = data.columns.get_loc(\"AC2\")\r\n//     for i in range(index1, index2 + 1):\r\n//         print i\r\n//         data.iloc[:, i] = data.iloc[:, i].astype(float)\r\n\r\n//     # replace data in pandas\r\n//     d = data.replace(\"_\" , np.nan)\r\n//     print d.head(3)\r\n\r\n// # PandasUtility()\r\n\r\n// def GetListFromPDColumn(pdCol):\r\n//     temp = []\r\n//     for d in pdCol:temp.append(d)\r\n//     return temp;\r\n// def RemoveRowWithNAN(data):\r\n//     data = data.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\r\n//     return data.reset_index()\r\n// #     return data\r\n// def RemoveColumnsWithNull(data, num):\r\n// #     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) < num]\r\n//     return data[complete_cols]\r\n// def ReomveRowwithNANWithNum(data):\r\n//     data = data.dropna(thresh=None)\r\n//     return data\r\n// def GetNumpyColumnFromIndex(theDF):\r\n//     theD = pd.DataFrame(theDF.values);\r\n//     return theD.as_matrix()\r\n// def CheckPandasNAN(data):\r\n//     theResult = pd.isnull(data)\r\n//     count = 0;\r\n//     for i in theResult:\r\n//         if(i == True): count+=1\r\n//     return \"the number of NAN is :\" , count\r\n// def GetPandasRemoveNoneColumn(data):\r\n//     data = data.replace(\"_\" , np.nan)\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     return data[complete_cols]\r\n\r\n// def ConvertFloatColumn(data, feature_name): # convert to float in the column\r\n//     data[feature_name] = data[feature_name].astype(float)\r\n//     return data\r\n// def ConvertFloatColumns(data, index1, index2): # convert to float between index 1 and 2\r\n//     for i in range(index1, index2):\r\n//         data.iloc[:, i] = data.iloc[:, i].astype(float)\r\n//     return data\r\n// def GetColumnIndex(data, start, end):\r\n//     index1 = data.columns.get_loc(start)\r\n//     index2 = data.columns.get_loc(end)+1\r\n//     return [index1, index2]\r\n// def encode_categorical(array):\r\n//     from sklearn import preprocessing\r\n//     if not array.dtype == np.dtype('float64'):\r\n//         return preprocessing.LabelEncoder().fit_transform(array)\r\n//     else:\r\n//         return array\r\n\r\n// data = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_10/datasets/dataset.txt', low_memory=False)\r\n// # print data.shape; # (8928, 377)\r\n// data = GetPandasRemoveNoneColumn(data)\r\n// # print data.shape; # (8928, 316)\r\n// # print type(data[\"WWIIVETS\"][5]) # <type 'numpy.float64'>\r\n// data = ConvertFloatColumn(data, \"WWIIVETS\")\r\n// # print type(data[\"WWIIVETS\"][5]) # <type 'numpy.float64'>\r\n\r\n// theIndex = ['POP901', 'AC2']\r\n// theIndex = GetColumnIndex(data, theIndex[0], theIndex[1])\r\n// # print theIndex # [12, 295]\r\n\r\n// data = ConvertFloatColumns(data, theIndex[0], theIndex[1])\r\n\r\n// categorical = (data.dtypes.values != np.dtype('float64'))\r\n// # print categorical\r\n// data = data.apply(encode_categorical) # Encode all labels\r\n// # print data\r\n\r\n// # Get numpy array from data\r\n// x = data.values[:, :-1]\r\n// y = data.values[:, -1]\r\n\r\n// # Apply one hot endcoing\r\n// from sklearn import preprocessing\r\n// encoder = preprocessing.OneHotEncoder(categorical_features=categorical[:-1], sparse=False)  # Last value in mask is y\r\n// x = encoder.fit_transform(x)\r\n\r\n// #Threshold for class 0\r\n// threshold = 7\r\n\r\n// from sklearn.cross_validation import train_test_split\r\n// x_train, x_test, y_train_val, y_test_val = train_test_split(x, y, test_size=0.6, random_state=42)\r\n\r\n// y_train = np.copy(y_train_val)\r\n// y_test = np.copy(y_test_val)\r\n\r\n// y_train[y_train_val > threshold] = 1\r\n// y_train[y_train_val <= threshold] = 0\r\n\r\n// y_test[y_test_val > threshold] = 1\r\n// y_test[y_test_val <= threshold] = 0\r\n\r\n// cost_per_donor = 7\r\n\r\n// #Print some useful info for our test, train sets\r\n// print 'train data: ', x_train.shape\r\n// print 'test data: ', x_test.shape\r\n// print 'train class 0: {}, train class 1: {}'.format(len(y_train[y_train == 0]), len(y_train[y_train == 1]))\r\n// print 'test class 0: {}, test class 1: {}'.format(len(y_test[y_test == 0]), len(y_test[y_test == 1]))\r\n\r\n// def DropRowByNameWithCondition(d , colIndexVal, condition): # when image type less than 2, drop\r\n//     d = d[d[colIndexVal] < condition]\r\n//     return d\r\n// # dfSeoul = DropRowByNameWithCondition(dfSeoul, \"imgTypeNum\" , 2)\r\n\r\n// def DropCol(d, colsValue):\r\n//     d.drop(colsValue, axis=1, inplace=True)\r\n//     return d\r\n// def DropColByName(d, colIndexVal):\r\n//     d = d.drop(colIndexVal, axis=1)\r\n//     return d\r\n// def DropColByNames(d, features = []):\r\n//     for i in features\r\n//         DropColByName(d,i)\r\n//     return d\r\n// dfSeoul = DropColByName(dfSeoul, \"imgType\")\r\n\r\n// def SumTwoColumns(d, col0, col1):\r\n//     d[col0] += d[col1]\r\n//     return DropCol(d, col1)\r\n// def DropCol(d, colsValue):\r\n//     d.drop(colsValue, axis=1, inplace=True)\r\n//     return d\r\n\r\n// def SplitPDRow(dataFrame, theLength):\r\n//     return dataFrame.iloc[:theLength,:]\r\n\r\n// def ConvertDataFrameObjects(theDf):\r\n//     data = theDf.convert_objects(convert_numeric=True)\r\n//     return data\r\n\r\n// def ConcatDataFrame(d0, d1):\r\n//     pd.concat( [data['zestimate_amount'],data['zestimate_valuation_range_high'],data['zestimate_valuationRange_low'],\r\n//                 data['zestimate_value_change'],data['zestimate_percentile']],axis=1)\r\n\r\n// ##################################################################################### Numpy use case\r\n// ############################################################################# numpy utilities\r\n\r\n// def printNumpy(n):\r\n//     if type(n) == np.ndarray:\r\n//         print \"ndim: \", n.ndim\r\n//         print \"shape: \", n.shape\r\n//         print \"dType: \", n.dtype\r\n//     else:\r\n//         print \"this is not a numpy array\"\r\n// def reshape(n,dim):\r\n//     reShape = n.reshape(dim) #return is going to be reshaped by the dim\r\n//     return reShape\r\n// def copyNumpy(n):\r\n//     theCopy = n.copy();\r\n//     return theCopy\r\n\r\n// def computeCutWithNANNumpy(n):\r\n//     return np.isnan(n)\r\n\r\n// def getColumnFromNumpy(n , numCol = 0, reshape = False):\r\n//     if (reshape):\r\n//         return n[:,numCol].reshape((n.size/2,1))\r\n//     else:\r\n//         return n[:,numCol]\r\n// def computeCutWithRangeNumpy(n, theMin, theMax):\r\n//     return n.clip((theMin, theMax))\r\n// def getComparedWithMaxNumpy(n, num):return n < num\r\n// def getComparedWithMinNumpy(n, num):return n > num\r\n// def getMean(n):return n.mean()\r\n// def getMin(n):return n.min()\r\n// def getMax(n):return n.max()\r\n\r\n// def getArange(d):\r\n//     return np.arange(d.min(), d.max() )\r\n// def getRange(d):\r\n//     return [d.min(), d.max()]\r\n// def getStandardDeviationByNumpy(d): # using numpy\r\n//     return np.std(d)\r\n// def getVarianceByNumpy(d): # using numpy\r\n//     return np.var(d)\r\n// def getVariance(d): # same as above but hardcode\r\n//     theAver = np.mean(d)\r\n//     theSum = 0.0;\r\n//     for i in d:\r\n//         theSum += np.absolute( i - theAver ) ** 2\r\n//     return (theSum / (len(d)))\r\n// def getStandardDeviation(d):\r\n//     return np.sqrt(getVariance(d));\r\n// # a = np.array([1,10,3,4,5,6])\r\n// # print getStandardDeviationByNumpy(a);\r\n// # print getStandardDeviation(a);\r\n\r\n// def NumpyForUtility(data):# from HW 01\r\n//     print 'data dimensions:', data.shape\r\n//     print data[:3, :]\r\n\r\n//     print 'birth weight range:', data[:, 0].min(), '-', data[:, 0].max()\r\n//     print 'femur length range:', data[:, 1].min(), '-', data[:, 1].max()\r\n//     print 'maternal age range:', data[:, 2].min(), '-', data[:, 2].max()\r\n\r\n//     group1 = data[data[:, 2] < 18]\r\n//     group2 = data[(data[:, 2] < 35) & (data[:, 2] > 17)]\r\n//     group3 = data[data[:, 2] > 34]\r\n\r\n//     print 'Sizes of groups I, II and III: {}, {}, {}'.format(group1.shape[0],\r\n//                                                              group2.shape[0],\r\n//                                                              group3.shape[0])\r\n\r\n//     print 'Mean birth weights of groups I, II and III: {}, {}, {}'.format(round(group1[:, 0].mean(), 2),\r\n//                                                                           round(group2[:, 0].mean(), 2),\r\n//                                                                           round(group3[:, 0].mean(), 2))\r\n\r\n//     print 'Mean femure lengths of groups I, II and III: {}, {}, {}'.format(group1[:, 1].mean(),\r\n//                                                                            group2[:, 1].mean(),\r\n//                                                                            group3[:, 1].mean())\r\n\r\n//     np.random.permutation(10) # array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6])\r\n//     np.random.permutation([1, 4, 9, 12, 15]) # array([15,  1,  9,  4, 12])\r\n\r\n//     arr = np.arange(9).reshape((3, 3))\r\n//     np.random.permutation(arr)\r\n//                                     # array([[6, 7, 8],\r\n//                                     #        [0, 1, 2],\r\n//                                     #        [3, 4, 5]])\r\n\r\n//     # give us percentage\r\n//     a = np.array([0,1,2,3,4,5,6,7,8,9,10]);\r\n//     conf_int_right = np.percentile(a, 99)\r\n//     print conf_int_right\r\n\r\n//     conf_int_left = np.percentile(x_C_lst, 5)\r\n//     conf_int_right = np.percentile(x_C_lst, 95)\r\n\r\n//     Na = np.linspace(5, 10, num=10) # Return evenly spaced numbers over a specified interval.\r\n//     # pinrt = [  5. 5.55555556   6.11111111   6.66666667   7.22222222  7.77777778   8.33333333   8.88888889   9.44444444  10.        ]\r\n\r\n//     # sort\r\n//     names_df.sort(columns=\"COLUMNINDEX\", ascending = False)\r\n//     #Sort our list of movie info by like-percentage, in descending order\r\n//     sorted_likability = sorted(likability, key=lambda t: t[3], reverse=True)\r\n\r\n//     # shuffle the data\r\n//     nfldata = nfldata.reindex(np.random.permutation(nfldata.index))\r\n// # print 360.0 / 6.0\r\n// # print [(365.0 / (6.0-1)) * i for i in range(6)]\r\n\r\n// def numpypandas():\r\n//     # data split and drop\r\n//     Y = df['quality'].values\r\n//     df_tmp = df.drop('chlorides',1)\r\n//     Y = np.array([1 if y>=7 else 0 for y in Y])\r\n//     X = df_tmp.as_matrix()\r\n//     df['target'] = (df['quality'].values >=7)*1\r\n\r\n// ##################################################################### data generator\r\n// import numpy as np\r\n// import matplotlib.pyplot as plt\r\n// # %matplotlib inline\r\n// from sklearn.linear_model import LinearRegression as Lin_Reg\r\n\r\n// ## GENERATE ANOTHER DATASET AND EXAMINE RESIDUALS\r\n// def GenerateDataLinearFun(N=1000, beta0=2.2, beta1=3.0, sigma=10.0, Xmax=1.0):\r\n//     epsilon=np.random.normal(0,sigma,N) # Random normally distributed points\r\n//     X = np.linspace(0,Xmax, N)\r\n//     Y = beta0 + beta1 * X + epsilon\r\n//     return X, Y\r\n\r\n// def GenerateDataNotLinearFun(N=1000, beta0=2.2, beta1=3.0, sigma=1.0, Xmax=1.0, alpha=1):\r\n//     epsilon=np.random.normal(0,sigma,N) # Random normally distributed points\r\n//     X = np.linspace(0,Xmax, N)\r\n//     Y = beta0 + beta1 * X + alpha* np.sin(6*X)+ epsilon\r\n//     #Y = beta0 + beta1 * X +4*beta1*(X>0.5) + epsilon\r\n//     #Y = beta0 + beta1 * X + alpha * X*X*X + epsilon\r\n//     return X, Y\r\n\r\n// def VisScatter(axes, x, y, theAlpha=0.5, theColor=\"green\", theTitle=\"scatter\", theXLabel=\"xAxis\", theYLabel=\"yAxis\",):\r\n//     axes.scatter( x, y, alpha=theAlpha, color=theColor)\r\n//     axes.show()\r\n//     # axes.set_title(theTitle)\r\n//     # axes.set_xlabel(theXLabel)\r\n//     # axes.set_ylabel(theYLabel)\r\n\r\n// # x,y = GenerateDataLinearFun(N=900, sigma=2.1)\r\n// x,y = GenerateDataNotLinearFun(N=900, sigma=2.1)\r\n// title = \"d\"\r\n// VisScatter( plt, x, y, theAlpha=0.5, theColor=\"green\" , theTitle=\"KNN in \" + title, theXLabel = \"resultKnnByMSE\", theYLabel=\"\")\r\n// print type(x)\r\n\r\n// def VisPCA(x):\r\n//     from mpl_toolkits.mplot3d import Axes3D\r\n//     import matplotlib.mlab as mlab\r\n//     import matplotlib.pyplot as plt\r\n//     from sklearn.decomposition import PCA\r\n//     #Apply PCA to data and get the top 3 axes of maximum variation\r\n//     pca = PCA(n_components=3)\r\n//     pca.fit(x)\r\n//     #Project to the data onto the three axes\r\n//     x_reduced = pca.transform(x)\r\n//     #Visualized our reduced data\r\n//     fig = plt.figure(figsize=(15, 5))\r\n//     ax1 = fig.add_subplot(1, 2, 1,  projection='3d')\r\n//     ax1.scatter(x_reduced[y==0, 0], x_reduced[y==0, 1], x_reduced[y==0, 2], c='b', color='b', label='0')\r\n//     ax1.scatter(x_reduced[y==1, 0], x_reduced[y==1, 1], x_reduced[y==1, 2], c='r', color='r', label='1')\r\n//     ax1.scatter(x_reduced[y==3, 0], x_reduced[y==3, 1], x_reduced[y==3, 2], c='g', color='g', label='3')\r\n//     ax1.set_xlabel('Component 1')\r\n//     ax1.set_ylabel('Component 2')\r\n//     ax1.set_zlabel('Component 3')\r\n//     ax1.set_title('data projected onto the first 3 PCA components')\r\n//     ax1.legend()\r\n//     #Apply PCA to data and get the top 2 axes of maximum variation\r\n//     pca = PCA(n_components=2)\r\n//     pca.fit(x)\r\n//     #Project to the data onto the three axes\r\n//     x_reduced = pca.transform(x)\r\n//     #Visualized our reduced data\r\n//     ax2 = fig.add_subplot(1, 2, 2)\r\n//     ax2.scatter(x_reduced[y==0, 0], x_reduced[y==0, 1], c='b', color='b', label='0')\r\n//     ax2.scatter(x_reduced[y==1, 0], x_reduced[y==1, 1], c='r', color='r', label='1')\r\n//     ax2.scatter(x_reduced[y==3, 0], x_reduced[y==3, 1], c='g', color='g', label='3')\r\n//     ax2.set_xlabel('Component 1')\r\n//     ax2.set_ylabel('Component 2')\r\n//     ax2.set_title('data projected onto the first 2 PCA components')\r\n//     ax2.legend()\r\n//     plt.tight_layout()\r\n//     plt.show()\r\n\r\n// def ApplyPCA(x, nComponents = 3):\r\n//     from sklearn.decomposition import PCA\r\n//     pca = PCA(n_components=nComponents)\r\n//     pca.fit(x)\r\n//     x_reduced = pca.transform(x)\r\n//     return x_reduced\r\n\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################  data pre-processing\r\n\r\n// def RemoveRowWithNAN(data):\r\n//     data = data.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\r\n//     return data.reset_index()\r\n//     # data.dropna(axis=0,subset=['RoomType','Price','Bathrooms'],inplace=True)\r\n\r\n// def RemoveColumnsWithNull(data, num):\r\n// #     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) < num]\r\n//     return data[complete_cols]\r\n// def ReomveRowwithNANWithNum(data):\r\n//     data = data.dropna(thresh=None)\r\n//     return data\r\n\r\n// ################################################################## get data for example\r\n// def GetDataIris():\r\n//     from sklearn.datasets import load_iris\r\n//     iris = load_iris()\r\n//     X = iris.data\r\n//     y = iris.target\r\n//     return X, y\r\n// # X , y = GetDataIris()\r\n// # X_new = [[3, 5, 4, 2], [5, 4, 3, 2]]\r\n\r\n// import numpy as np\r\n// import matplotlib.pyplot as plt\r\n// from sklearn import linear_model, datasets\r\n","import { StatisticsUtility, Describe } from './Core/StatisticsUtility';\r\n\r\n// import { CHistogram } from '../../AppDrawingBlock/CChart/CHistogram';\r\n// import { CDescribe } from '../../AppDrawingBlock/CChart/CDescribe';\r\n// import { CScatter } from '../../AppDrawingBlock/CChart/CScatter';\r\n// import { CLineChart } from '../../AppDrawingBlock/CChart/CLineChart';\r\n// import { CAreaChart } from '../../AppDrawingBlock/CChart/CAreaChart';\r\n\r\nexport class NGeoJSON {\r\n\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: any;\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    dT: number[];\r\n    dA: number[];\r\n    dB: number[];\r\n    dC: number[];\r\n    dD: number[];\r\n    dE: number[];\r\n    dF: number[];\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSON.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n\r\n        this.dDescribe = this.GetDescribeByCol(this.index[0]).ToString();\r\n        this.dHist = this.GetHistByCol(this.index[0]);\r\n\r\n        // CHistogram.dHist = this.dHist;\r\n        // CDescribe.dDescribe = this.dDescribe;\r\n\r\n        console.log(this.dJson);\r\n        console.log(this.index);\r\n        console.log(this.dDescribe);\r\n        console.log(this.dMat);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n\r\n        this.dT = this.GetColbyIndex('time'); //  rms sig nst dmin tz mag time\r\n        this.dA = this.GetColbyIndex(this.index[0]); // rms sig nst dmin tz\r\n        this.dB = this.GetColbyIndex('rms'); // rms sig nst dmin tz\r\n        this.dC = this.GetColbyIndex('sig'); // rms sig nst dmin tz\r\n\r\n        this.dD = this.GetColbyIndex('nst'); // rms sig nst dmin tz mag time\r\n        this.dE = this.GetColbyIndex('mag'); // rms sig nst dmin tz mag time\r\n        this.dF = this.GetColbyIndex('dmin'); // rms sig nst dmin tz mag time\r\n\r\n        console.log(this.dD);\r\n        // CScatter.dA = this.dA;\r\n        // CScatter.dB = this.dB;\r\n        // CScatter.dC = this.dC;\r\n\r\n        // CLineChart.dA = this.dT;\r\n        // CLineChart.dB = this.dD;\r\n\r\n        // CAreaChart.dT = this.dT;\r\n        // CAreaChart.dA = this.dD;\r\n        // CAreaChart.dB = this.dE;\r\n        // CAreaChart.dC = this.dF;\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        // tslint:disable-next-line:no-any\r\n        let d: any = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    GetDescribeByCol(colIndex: string): Describe {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n\r\n}","import { StatisticsUtility, Describe } from './Core/StatisticsUtility';\r\n\r\n// import { CHistogram } from '../../AppDrawingBlock/CChart/CHistogram';\r\n// import { CDescribe } from '../../AppDrawingBlock/CChart/CDescribe';\r\n// import { CScatter } from '../../AppDrawingBlock/CChart/CScatter';\r\n// import { CLineChart } from '../../AppDrawingBlock/CChart/CLineChart';\r\n// import { CAreaChart } from '../../AppDrawingBlock/CChart/CAreaChart';\r\n\r\nexport class NGeoJSONPolygon {\r\n    static d: number[];\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: any;\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    dT: number[];\r\n    dA: number[];\r\n    dB: number[];\r\n    dC: number[];\r\n    dD: number[];\r\n    dE: number[];\r\n    dF: number[];\r\n    posLn: number[];\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSONPolygon.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n        console.log(this.index);\r\n        this.posLn = this.GetPTFloat32Array();\r\n        NGeoJSONPolygon.d = this.posLn;\r\n\r\n        // console.log(this.dJson);\r\n        // console.log(this.index);\r\n        // console.log(this.dDescribe);\r\n        // console.log(this.dMat);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n\r\n        // this.dT = this.GetColbyIndex('coordinates'); //  rms sig nst dmin tz mag time\r\n        // this.dA = this.GetColbyIndex(this.index[0]); // rms sig nst dmin tz\r\n        // this.dB = this.GetColbyIndex('rms'); // rms sig nst dmin tz\r\n        // this.dC = this.GetColbyIndex('sig'); // rms sig nst dmin tz\r\n\r\n        // this.dD = this.GetColbyIndex('nst'); // rms sig nst dmin tz mag time\r\n        // this.dE = this.GetColbyIndex('mag'); // rms sig nst dmin tz mag time\r\n        // this.dF = this.GetColbyIndex('dmin'); // rms sig nst dmin tz mag time\r\n\r\n        // console.log(this.dD);\r\n        // CScatter.dA = this.dA;\r\n        // CScatter.dB = this.dB;\r\n        // CScatter.dC = this.dC;\r\n\r\n        // CLineChart.dA = this.dT;\r\n        // CLineChart.dB = this.dD;\r\n\r\n        // CAreaChart.dT = this.dT;\r\n        // CAreaChart.dA = this.dD;\r\n        // CAreaChart.dB = this.dE;\r\n        // CAreaChart.dC = this.dF;\r\n    }\r\n    GetPTFloat32Array() {\r\n        let n = [1];\r\n        let d = this.GetDataByIndex(this.index[this.index.length - 1]);\r\n        // console.log(d);\r\n        let ddd = 0;\r\n        for (let k = 0; k < d.length; ++k) {\r\n\r\n            if (Array.isArray(d[k])) {\r\n                //\r\n\r\n                // if()\r\n                for (let j = 0; j < d[k].length; ++j) {\r\n                    // console.log(d[k][j]);\r\n                    if (Array.isArray(d[k][j])) {\r\n                        for (let i = 0; i < d[k][j].length; ++i) {\r\n\r\n                            if (Array.isArray(d[k][j][i])) {\r\n                                for (let e = 0; e < d[k][j][i].length; ++e) {\r\n                                    n.push(d[k][j][i][e][0], d[k][j][i][e][1], 10.5);\r\n                                }\r\n                            }\r\n                            // console.log(d[k][j][i][1], d[k][j][i][0], 0);\r\n                        }\r\n\r\n                        if (ddd++ > 100) {\r\n                            // break;\r\n                        }\r\n                    } else {\r\n                        //\r\n                    }\r\n                }\r\n            }\r\n            // break;\r\n        }\r\n        n.shift();\r\n        console.log(n);\r\n        return n;\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        let d = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    GetDescribeByCol(colIndex: string): Describe {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n\r\n}","import { NGeoJSON } from './NGeoJSON';\r\nimport { NGeoJSONPolygon } from './NGeoJSONPolygon';\r\n\r\nexport class DataUtilities {\r\n    // tslint:disable-next-line:no-any\r\n    datum: any; data: any;\r\n\r\n    // tslint:disable-next-line:no-any\r\n    static GetShapeFromGeoJsonPTFromFeatureService(x: number[], y: number[], z: number[]) {\r\n        let vers: number[] = [];\r\n        for (let i = 0; i < x.length; ++i) { vers.push(x[i], y[i], z[i] * 0.1); }\r\n        return vers;\r\n    }\r\n    constructor() {\r\n        this.datum = [];\r\n    }\r\n    OpenJson(path: string) {\r\n        // console.log(d);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    SetData(d: any) {\r\n        this.datum.push(d);\r\n        this.data = d;\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).d = d;\r\n        console.log(this.datum);\r\n    }\r\n    // ............................................... processing\r\n\r\n    // tslint:disable-next-line:no-any\r\n    GetShapeFromGeoJsonLN(da: any) {\r\n        if (da === undefined || da.features === undefined) { console.debug('no validated geojson data processed'); return; }\r\n        // let Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection = [];\r\n        let vers: number[] = [];\r\n        for (let d of da.features) {\r\n            for (let v of d.geometry.coordinates) {\r\n                // console.log(v);\r\n                // vers = vers.concat(v);\r\n\r\n                vers.push(v[0], v[1]);\r\n                // }\r\n            }\r\n        }\r\n        console.log(vers);\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).d = vers;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    GetShapeFromGeoJsonPT(da: any) {\r\n        if (da === undefined || da.features === undefined) { console.debug('no validated geojson data processed'); return; }\r\n        // let Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection = [];\r\n        let vers: number[] = [];\r\n\r\n        console.log(da);\r\n\r\n        for (let d of da.features) {\r\n            // for (let v of d.geometry.coordinates) {\r\n            //     // console.log(v);\r\n            //     // vers = vers.concat(v);\r\n            // console.log(d.properties.mag);\r\n            vers.push(d.geometry.coordinates[0], d.geometry.coordinates[1], d.properties.mag * d.properties.mag * 2);\r\n            //     // }\r\n            // }\r\n        }\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).d = vers;\r\n\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).dMat = new NGeoJSON(da);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    GetShapeFromGeoJsonPTFromFeatureService(da: any) {\r\n        let vers: number[] = [];\r\n        for (let i = 0; i < da.dA.length; ++i) { vers.push(da.dA[i], da.dB[i], da.dF[i] * 0.1); }\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).featureD = vers;\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).featureC = da.dE;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    GetShapeFromGeoJsonPTFromFeatureServiceForDynamic(da: any) {\r\n        let mat: number[][] = [];\r\n        for (let j = 0; j < da.dA.length; ++j) {\r\n            let vers: number[] = [];\r\n            for (let i = 0; i < da.dA.length; ++i) {\r\n                if (Math.random() < 0.2) {\r\n                    vers.push(da.dA[i], da.dB[i], da.dF[i] * 0.1);\r\n                } else {\r\n                    vers.push(0, 0, 0 * 0.1);\r\n                }\r\n            }\r\n            mat.push(vers);\r\n        }\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).featureDMat = mat;\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).featureCMat = da.dE;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    GetShapeFromGeoJsonCity(da: any) {\r\n        // tslint:disable-next-line:no-any\r\n        (window as any).dMat = new NGeoJSONPolygon(da);\r\n    }\r\n}\r\n","import { StatisticsUtility } from './Core/StatisticsUtility';\r\n\r\nexport class NGeoJSONFeatureService {\r\n\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: string[];\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    // tslint:disable-next-line:no-any\r\n    array: {} = {};\r\n    arrayVis: {} = {};\r\n\r\n    static GetHistByCol(d: number[], numBin: number = 20): number[][] {\r\n        // let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(d, numBin);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSONFeatureService.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // this.dDescribe = this.GetDescribeByCol(this.index[0]).ToString();\r\n        // this.dHist = this.GetHistByCol(this.index[0]);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n        for (let i of this.index) { this.array[i] = this.GetColbyIndex(i); }\r\n\r\n        console.log(this.array);\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeConverted'] = this.ConvertTime(this.array['Time_UT_']); // \"Time_UT_ // time_\r\n        this.ComputeTimelineIndex();\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        let indexArray: number[] = []; for (let i = 0; i < this.array['timeConverted'].length; ++i) { indexArray.push(i); }\r\n\r\n        this.ComputeArrayVis(indexArray);\r\n        console.log(this);\r\n    }\r\n    ComputeArrayVis(indexArray: number[]) {\r\n        this.arrayVis = {};\r\n        for (let o of this.index) {\r\n            this.arrayVis[o] = [];\r\n            for (let i of indexArray) {\r\n                this.arrayVis[o].push(this.array[o][i]);\r\n            }\r\n        }\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        // tslint:disable-next-line:no-any\r\n        let d: any = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    private ConvertTime(d: number[]) {\r\n        let minYear = Number.MAX_SAFE_INTEGER;\r\n        let maxYear = Number.MIN_SAFE_INTEGER;\r\n        let dateArray: number[][] = [];\r\n        for (let i = 0; i < d.length; ++i) {\r\n            let date = new Date(+d[i]).toLocaleDateString().split('/');\r\n\r\n            if (minYear > +date[2]) { minYear = +date[2]; }\r\n            if (maxYear < +date[2]) { maxYear = +date[2]; }\r\n\r\n            dateArray.push([+date[0], +date[1], +date[2]]);\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['yearDomain'] = [minYear, maxYear];\r\n        return dateArray;\r\n    }\r\n    private ComputeTimelineIndex() {\r\n        let timeLineIndex = {};\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeLineIndexArryForKey'] = [];\r\n        // tslint:disable-next-line:no-string-literal\r\n        for (let j = this.array['yearDomain'][0]; j <= this.array['yearDomain'][1]; ++j) {\r\n            for (let i = 1; i < 13; ++i) {\r\n                let d: string = j + '_' + i;\r\n                timeLineIndex[d] = [];\r\n                // tslint:disable-next-line:no-string-literal\r\n                this.array['timeLineIndexArryForKey'].push(d);\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeLineIndex'] = timeLineIndex;\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        for (let i = 0; i < this.array['timeConverted'].length; ++i) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            let d: string = this.array['timeConverted'][i][2] + '_' + this.array['timeConverted'][i][0];\r\n            // tslint:disable-next-line:no-string-literal\r\n            this.array['timeLineIndex'][d].push(i);\r\n        }\r\n        console.log(this);\r\n        // console.log\r\n    }\r\n    // GetDescribeByCol(colIndex: string): Describe {\r\n    //     let data = this.GetDataByIndex(colIndex);\r\n    //     return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    // }\r\n\r\n}","import { NVector3 } from '../../../';\r\n\r\nimport { PixelMap } from './PixelMap';\r\nimport { VoxelMap } from './VoxelMap';\r\nimport { MGridHex } from './MGridHex';\r\nexport class Pixel {\r\n    static ID = 0;\r\n\r\n    map: PixelMap | VoxelMap | MGridHex;\r\n    vec: NVector3;\r\n    norV: NVector3;\r\n    nPix: Pixel[] = [];\r\n    recVec: NVector3[];\r\n    i: number = -1;\r\n    j: number = -1;\r\n    k: number = -1;\r\n    u: number = -1;\r\n    v: number = -1;\r\n    id: number;\r\n    data: {};\r\n\r\n    static GetID() { return Pixel.ID++; }\r\n\r\n    constructor(map: PixelMap | VoxelMap | MGridHex, v: NVector3 = new NVector3(0, 0, 0)) {\r\n        this.map = map;\r\n        this.vec = v;\r\n        this.nPix = [];\r\n        this.recVec = [];\r\n        this.i = -1;\r\n        this.j = -1;\r\n        this.k = -1;\r\n        this.id = Pixel.GetID();\r\n        this.data = {};\r\n    }\r\n    ToString() {\r\n        let temp = 'Pixel' + this.id;\r\n        console.log(temp);\r\n        return temp;\r\n    }\r\n    Update() {\r\n        /* */\r\n    }\r\n    Render() {\r\n        /* */\r\n    }\r\n}\r\n","import { NVector3 } from '../../../';\r\n\r\nimport { Pixel } from './Pixel';\r\n// function NDataPixelInit() {\r\n// \tconsole.log('NDataPixel is init...');\r\n// \tpMap = new PixelMap();\r\n// \tpMap.rx = 10;\r\n// \tpMap.ry = 10;\r\n// \tpMap.p0 = new NPoint3d(-10, -10,0);\r\n// \tpMap.p1 = new NPoint3d(10,10,0);\r\n// \tpMap.Init();\r\n\r\n// \tpMap.VisCenterPoints();\r\n// \tpMap.VisLineGrid();\r\n// \tpMap.VisMeshGrid();\r\n// };\r\n\r\n/////////////////// PixelMap class\r\nexport class PixelMap {\r\n\r\n    public listPixel: Pixel[] = [];\r\n    public rx: number = 0;\r\n    public ry: number = 0;\r\n    public ddx: number = 0.0;\r\n    public ddy: number = 0.0;\r\n    public v0: NVector3 = NVector3.Origin();\r\n    public v1: NVector3 = NVector3.Origin();\r\n\r\n    constructor(v0: NVector3, v1: NVector3, rx: number = 10, ry: number = 10) {\r\n        this.rx = rx;\r\n        this.ry = ry;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        this.v0 = v0;\r\n        this.v1 = v1;\r\n        // this.Built();\r\n    }\r\n    Init() {\r\n        this.ddx = (this.v1.x - this.v0.x) / (this.rx - 1.0);\r\n        this.ddy = (this.v1.y - this.v0.y) / (this.ry - 1.0);\r\n        console.log('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n        console.log('Pixe Map was executed...');\r\n        this.InitGrid();\r\n    }\r\n    InitGrid() {\r\n        console.log(this.rx, this.ry);\r\n\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let x = this.v0.x + i * this.ddx;\r\n                let y = this.v0.y + j * this.ddy;\r\n                let px = new Pixel(this);\r\n                px.i = i; px.j = j;\r\n                px.vec = new NVector3(x, y, 0);\r\n                px.recVec.push(new NVector3(x - this.ddx * 0.5, y - this.ddy * 0.5, 0.0));\r\n                px.recVec.push(new NVector3(x + this.ddx * 0.5, y - this.ddy * 0.5, 0.0));\r\n                px.recVec.push(new NVector3(x + this.ddx * 0.5, y + this.ddy * 0.5, 0.0));\r\n                px.recVec.push(new NVector3(x - this.ddx * 0.5, y + this.ddy * 0.5, 0.0));\r\n                // console.log(px);\r\n                this.listPixel.push(px);\r\n            }\r\n        }\r\n        this.InitGridNeighbor();\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n        console.log('done for computing neighbors ');\r\n    }\r\n    GetPixelAtPoint(pt: NVector3) {\r\n        let pixelMap = this;\r\n        let dp = new NVector3(pt.x - pixelMap.v0.x, pt.y - pixelMap.v0.y, pt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx);\r\n        let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    ////////////////// event\r\n    MouseMove(x: number, y: number, z: number) {\r\n        let pixelMap = this;\r\n        console.log('mouseMove x:' + x + ', y:' + y + ', z:' + z);\r\n        let cpt = pixelMap.GetPixelAtPoint(new NVector3(x, y, z));\r\n        console.log(cpt.nPix);\r\n        // VisBufferPointsFromVecs(cpt.ptsCenter, 100);\r\n    }\r\n    onDocumentMouseMove() {\r\n        console.log('move');\r\n    }\r\n    onmouseenter() {\r\n        console.log('enter');\r\n    }\r\n    ////////////////// visualization\r\n    CVisLineGrid(ctx: CanvasRenderingContext2D) {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            let color = '#ff0000';\r\n            // console.log('d');\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(pixelMap.listPixel[i].recVec[0].x, pixelMap.listPixel[i].recVec[0].y);\r\n            // console.log(pixelMap.listPixel[i].recVec)\r\n            for (let j = 1; j < pixelMap.listPixel[i].recVec.length; ++j) {\r\n                ctx.lineTo(pixelMap.listPixel[i].recVec[j].x, pixelMap.listPixel[i].recVec[j].y);\r\n                // console.log(pixelMap.listPixel[i].nPix[j].vec.x, pixelMap.listPixel[i].nPix[j].vec.y);\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.strokeStyle = color; // ColorUtility.HexToCanvasColor(color, 1);\r\n            ctx.stroke();\r\n            // ctx.fill();\r\n        }\r\n    }\r\n    VisMeshGrid() {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        }\r\n    }\r\n    VisCenterPoints() {\r\n        let pixelMap = this;\r\n        let pts: NVector3[] = [];\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            pts.push(pixelMap.listPixel[i].vec);\r\n        }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n}","import { NVector3 } from '../../../';\r\n\r\n// import { Pixel } from './Pixel';\r\n// function NDataPixelInit() {\r\n// \tconsole.log('NDataPixel is init...');\r\n// \tpMap = new PixelMapGlobe();\r\n// \tpMap.rx = 10;\r\n// \tpMap.ry = 10;\r\n// \tpMap.p0 = new NPoint3d(-10, -10,0);\r\n// \tpMap.p1 = new NPoint3d(10,10,0);\r\n// \tpMap.Init();\r\n\r\n// \tpMap.VisCenterPoints();\r\n// \tpMap.VisLineGrid();\r\n// \tpMap.VisMeshGrid();\r\n// };\r\n\r\n/////////////////// PixelMapGlobe class\r\nexport class PixelMapGlobe {\r\n\r\n    public listPixel: Pixel[] = [];\r\n    public rx: number = 0;\r\n    public ry: number = 0;\r\n    public radius: number = 0;\r\n    public ddx: number = 0.0;\r\n    public ddy: number = 0.0;\r\n    public v0: NVector3 = NVector3.Origin();\r\n    public v1: NVector3 = NVector3.Origin();\r\n\r\n    constructor(rx: number = 36, ry: number = 18, radius: number = 100) {\r\n        this.rx = rx;\r\n        this.ry = ry;\r\n        this.radius = radius;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        // this.v0 = v0;\r\n        // this.v1 = v1;\r\n        // this.Built();\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.ddx = Math.PI * 2 / this.rx;\r\n        this.ddy = Math.PI / this.ry;\r\n        console.log('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n        console.log('Pixe Map was executed...');\r\n        this.InitGrid();\r\n    }\r\n    InitGrid() {\r\n        let vv = 0;\r\n        for (let y = 0; y < Math.PI; y += this.ddy) {\r\n            let uu = 0;\r\n            for (let x = 0; x < Math.PI * 2; x += this.ddx) {\r\n\r\n                let px = new Pixel(this);\r\n                px.i = uu; px.j = vv;\r\n                px.u = uu; px.v = vv;\r\n                let pos = this.RemapToShpere(x, y);\r\n                px.vec = new NVector3(pos[0], pos[1], pos[2]);\r\n                px.norV = NVector3.Normalize(px.vec);\r\n\r\n                pos = this.RemapToShpere(x - this.ddx * 0.5, y - this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x + this.ddx * 0.5, y - this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x + this.ddx * 0.5, y + this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x - this.ddx * 0.5, y + this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // console.log(zz);\r\n\r\n                this.listPixel.push(px);\r\n                uu++;\r\n            }\r\n            vv++;\r\n        }\r\n        this.InitGridNeighbor();\r\n    }\r\n    RemapToShpere(x: number, y: number) {\r\n        return [this.radius * Math.cos(x) * Math.sin(y),\r\n        this.radius * Math.sin(x) * Math.sin(y),\r\n        this.radius * Math.cos(y)];\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n        console.log('done for computing neighbors ');\r\n    }\r\n    GetPixelAtPoint(pt: NVector3) {\r\n        let pixelMap = this;\r\n        let dp = new NVector3(pt.x - pixelMap.v0.x, pt.y - pixelMap.v0.y, pt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx);\r\n        let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    ////////////////// event\r\n    MouseMove(x: number, y: number, z: number) {\r\n        let pixelMap = this;\r\n        console.log('mouseMove x:' + x + ', y:' + y + ', z:' + z);\r\n        let cpt = pixelMap.GetPixelAtPoint(new NVector3(x, y, z));\r\n        console.log(cpt.nPix);\r\n        // VisBufferPointsFromVecs(cpt.ptsCenter, 100);\r\n    }\r\n    onDocumentMouseMove() {\r\n        console.log('move');\r\n    }\r\n    onmouseenter() {\r\n        console.log('enter');\r\n    }\r\n    ////////////////// visualization\r\n    CVisLineGrid(ctx: CanvasRenderingContext2D) {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            let color = '#ff0000';\r\n            // console.log('d');\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(pixelMap.listPixel[i].recVec[0].x, pixelMap.listPixel[i].recVec[0].y);\r\n            // console.log(pixelMap.listPixel[i].recVec)\r\n            for (let j = 1; j < pixelMap.listPixel[i].recVec.length; ++j) {\r\n                ctx.lineTo(pixelMap.listPixel[i].recVec[j].x, pixelMap.listPixel[i].recVec[j].y);\r\n                // console.log(pixelMap.listPixel[i].nPix[j].vec.x, pixelMap.listPixel[i].nPix[j].vec.y);\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.strokeStyle = color; // ColorUtility.HexToCanvasColor(color, 1);\r\n            ctx.stroke();\r\n            // ctx.fill();\r\n        }\r\n    }\r\n    VisMeshGrid() {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        }\r\n    }\r\n    VisCenterPoints() {\r\n        let pixelMap = this;\r\n        let pts: NVector3[] = [];\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            pts.push(pixelMap.listPixel[i].vec);\r\n        }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    GetTriFloatArray() { return new Float32Array(this.GetTriArray()); }\r\n    GetTriArray() {\r\n        let array: number[] = [];\r\n        let p = NVector3.origin;\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[3]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[1]; array.push(p.x, p.y, p.z);\r\n\r\n        }\r\n        return array;\r\n    }\r\n    GetPtFloatArray() { return new Float32Array(this.GetPtArray()); }\r\n    GetPtArray() {\r\n        let array: number[] = [];\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let p = this.listPixel[i].vec;\r\n            array.push(p.x, p.y, p.z);\r\n        }\r\n        return array;\r\n    }\r\n    GetNormalFloatArray() { return new Float32Array(this.GetNormalArray()); }\r\n    GetNormalArray() {\r\n        let array: number[] = [];\r\n        let p = NVector3.origin;\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[3]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[1]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n\r\n        }\r\n        return array;\r\n    }\r\n    GetTexCoordinFloatArray() { return new Float32Array(this.GetTexCoordinArray()); }\r\n    GetTexCoordinArray() {\r\n        let array: number[] = [];\r\n        // let p = NVector3.origin;\r\n\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let u = this.listPixel[i].u / (this.rx - 1);\r\n            let v = this.listPixel[i].v / (this.ry - 1);\r\n\r\n            array.push(u, v);\r\n            array.push(u, v + this.ddy);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u, v);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u + this.ddx, v);\r\n\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n        }\r\n        console.log('pppp');\r\n        console.log(array);\r\n        return array;\r\n    }\r\n}\r\n\r\nexport class Pixel {\r\n    static ID = 0;\r\n\r\n    map: PixelMapGlobe;\r\n    vec: NVector3;\r\n    norV: NVector3;\r\n    nPix: Pixel[] = [];\r\n    recVec: NVector3[];\r\n    i: number = -1;\r\n    j: number = -1;\r\n    k: number = -1;\r\n    u: number = -1;\r\n    v: number = -1;\r\n    id: number;\r\n    color: number[] = [];\r\n    data: {};\r\n\r\n    static GetID() { return Pixel.ID++; }\r\n\r\n    constructor(map: PixelMapGlobe, v: NVector3 = new NVector3(0, 0, 0)) {\r\n        this.map = map;\r\n        this.vec = v;\r\n        this.nPix = [];\r\n        this.recVec = [];\r\n        this.i = -1;\r\n        this.j = -1;\r\n        this.k = -1;\r\n        this.id = Pixel.GetID();\r\n        this.data = {};\r\n    }\r\n    ToString() {\r\n        let temp = 'Pixel' + this.id;\r\n        console.log(temp);\r\n        return temp;\r\n    }\r\n    Update() {\r\n        /* */\r\n    }\r\n    Render() {\r\n        /* */\r\n    }\r\n}","import { NVector3 } from '../../../';\r\nimport { ColorUtility } from '../../NColor/Utility/ColorUtility';\r\n\r\nimport { Pixel } from './Pixel';\r\n// function NDataPixelInit() {\r\n// \tconsole.log('NDataPixel is init...');\r\n// \tpMap = new PixelMapTerrain();\r\n// \tpMap.rx = 10;\r\n// \tpMap.ry = 10;\r\n// \tpMap.p0 = new NPoint3d(-10, -10,0);\r\n// \tpMap.p1 = new NPoint3d(10,10,0);\r\n// \tpMap.Init();\r\n\r\n// \tpMap.VisCenterPoints();\r\n// \tpMap.VisLineGrid();\r\n// \tpMap.VisMeshGrid();\r\n// };\r\n\r\n/////////////////// PixelMapTerrain class\r\nexport class PixelMapTerrain {\r\n    public static img: HTMLImageElement;\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public img: HTMLImageElement;\r\n    public listPixel: Pixel[] = [];\r\n    public width: number;\r\n    public height: number;\r\n    public rx: number = 0;\r\n    public ry: number = 0;\r\n    public sx: number = 0;\r\n    public sy: number = 0;\r\n    public sz: number = 0;\r\n    public ddx: number = 0.0;\r\n    public ddy: number = 0.0;\r\n    public v0: NVector3;\r\n    public v1: NVector3;\r\n\r\n    constructor(img: HTMLImageElement, rx: number = 250, ry: number = 250, sx: number = 1, sy: number = 1, sz: number = 1) {\r\n        this.img = img;\r\n        console.log(img);\r\n\r\n        let canvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        canvas.width = this.img.width * sx;\r\n        canvas.height = this.img.height * sy;\r\n        this.ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        // this.img.width = this.img.width * sx;\r\n        // this.img.height = this.img.height * sy;\r\n        this.ctx.drawImage(this.img, 0, 0);\r\n\r\n        this.width = this.img.width;\r\n        this.height = this.img.height;\r\n\r\n        console.log(this.img.width, this.img.height, 'lllllllllllllll');\r\n        this.rx = rx; this.ry = ry;\r\n        this.sx = sx; this.sy = sy; this.sz = sz;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        this.v0 = new NVector3(-this.width * 0.5 * this.sx, -this.img.height * this.sy * 0.5, 0);\r\n        this.v1 = new NVector3(this.width * 0.5 * this.sx, this.img.height * this.sy * 0.5, 0);\r\n\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.ddx = this.width * this.sx / (this.rx - 1.0);\r\n        this.ddy = this.height * this.sy / (this.ry - 1.0);\r\n        console.log('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n        console.log('Pixe Map was executed...');\r\n        this.InitGrid();\r\n    }\r\n    InitGrid() {\r\n        console.log(this);\r\n        let vv = 0;\r\n        for (let y = 0; y < this.ry; ++y) {\r\n            let uu = 0;\r\n            for (let x = 0; x < this.rx; ++x) {\r\n\r\n                let px = new Pixel(this);\r\n\r\n                px.i = x; px.j = y;\r\n                px.u = uu; px.v = vv;\r\n\r\n                let theX = this.v0.x + (this.ddx * x);\r\n                let theY = this.v0.y + (this.ddy * y);\r\n\r\n                let dd = this.ctx.getImageData((this.ddx * x / this.sx), (this.ddx * y / this.sy), 1, 1).data;\r\n                let zVal = ColorUtility.RGBtoGray(dd[0], dd[1], dd[2]);\r\n                let theZ = -zVal * this.sz;\r\n\r\n                let pos = [theX, theY, theZ];\r\n                px.vec = new NVector3(pos[0], pos[1], pos[2]);\r\n                px.norV = NVector3.Normalize(px.vec);\r\n\r\n                pos = [theX - this.ddx * 0.5, theY - this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX + this.ddx * 0.5, theY - this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX + this.ddx * 0.5, theY + this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = [theX - this.ddx * 0.5, theY + this.ddy * 0.5, theZ];\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // console.log(zz);\r\n\r\n                this.listPixel.push(px);\r\n                uu++;\r\n            }\r\n            vv++;\r\n        }\r\n        // console.log(this.listPixel);\r\n        this.InitGridNeighbor();\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                px0.nPix = [];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n        console.log('done for computing neighbors ');\r\n    }\r\n    GetPixelAtPoint(pt: NVector3) {\r\n        let pixelMap = this;\r\n        let dp = new NVector3(pt.x - pixelMap.v0.x, pt.y - pixelMap.v0.y, pt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx);\r\n        let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    ////////////////// event\r\n    MouseMove(x: number, y: number, z: number) {\r\n        let pixelMap = this;\r\n        console.log('mouseMove x:' + x + ', y:' + y + ', z:' + z);\r\n        let cpt = pixelMap.GetPixelAtPoint(new NVector3(x, y, z));\r\n        console.log(cpt.nPix);\r\n        // VisBufferPointsFromVecs(cpt.ptsCenter, 100);\r\n    }\r\n    onDocumentMouseMove() {\r\n        console.log('move');\r\n    }\r\n    onmouseenter() {\r\n        console.log('enter');\r\n    }\r\n    ////////////////// visualization\r\n    CVisLineGrid(ctx: CanvasRenderingContext2D) {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            let color = '#ff0000';\r\n            // console.log('d');\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(pixelMap.listPixel[i].recVec[0].x, pixelMap.listPixel[i].recVec[0].y);\r\n            // console.log(pixelMap.listPixel[i].recVec)\r\n            for (let j = 1; j < pixelMap.listPixel[i].recVec.length; ++j) {\r\n                ctx.lineTo(pixelMap.listPixel[i].recVec[j].x, pixelMap.listPixel[i].recVec[j].y);\r\n                // console.log(pixelMap.listPixel[i].nPix[j].vec.x, pixelMap.listPixel[i].nPix[j].vec.y);\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.strokeStyle = color; // ColorUtility.HexToCanvasColor(color, 1);\r\n            ctx.stroke();\r\n            // ctx.fill();\r\n        }\r\n    }\r\n    VisMeshGrid() {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        }\r\n    }\r\n    VisCenterPoints() {\r\n        let pixelMap = this;\r\n        let pts: NVector3[] = [];\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            pts.push(pixelMap.listPixel[i].vec);\r\n        }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    GetTriFloatArray() { return new Float32Array(this.GetTriArray()); }\r\n    GetTriArray() {\r\n        let array: number[] = [];\r\n        // for (let i = 0; i < this.listPixel.length; ++i) {\r\n        //     p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[3]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[1]; array.push(p.x, p.y, p.z);\r\n\r\n        // }\r\n        for (let j = 0; j < this.ry - 1; ++j) {\r\n            let p = new Pixel(this, NVector3.Origin());\r\n            for (let i = 0; i < this.rx - 1; ++i) {\r\n                let k = j * this.rx + i;\r\n                p = this.listPixel[k]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + this.rx + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n                p = this.listPixel[k + 1]; array.push(p.vec.x, p.vec.y, p.vec.z);\r\n\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n    GetPtFloatArray() { return new Float32Array(this.GetPtArray()); }\r\n    GetPtArray() {\r\n        let array: number[] = [];\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let p = this.listPixel[i].vec;\r\n            array.push(p.x, p.y, p.z);\r\n        }\r\n        return array;\r\n    }\r\n    GetNormalFloatArray() { return new Float32Array(this.GetNormalArray()); }\r\n    GetNormalArray() {\r\n        let array: number[] = [];\r\n\r\n        // let p = NVector3.origin;\r\n        // for (let i = 0; i < this.listPixel.length; ++i) {\r\n        //     p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[3]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[0]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[2]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        //     p = this.listPixel[i].recVec[1]; p.Normalize(); array.push(p.x, p.y, p.z);\r\n        // }\r\n\r\n        let p = new Pixel(this, NVector3.Origin());\r\n        let v = new NVector3(0, 0, 0);\r\n        for (let j = 0; j < this.ry - 1; ++j) {\r\n            for (let i = 0; i < this.rx - 1; ++i) {\r\n                let k = i + j * this.rx;\r\n                p = this.listPixel[k]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + this.rx + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n                p = this.listPixel[k + 1]; v.x = p.vec.x; v.y = p.vec.y; v.z = p.vec.z; v.Normalize(); array.push(v.x, v.y, v.z);\r\n\r\n            }\r\n        }\r\n\r\n        return array;\r\n    }\r\n    GetTexCoordinFloatArray() { return new Float32Array(this.GetTexCoordinArray()); }\r\n    GetTexCoordinArray() {\r\n        let array: number[] = [];\r\n        // let p = NVector3.origin;\r\n\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let u = this.listPixel[i].u / (this.rx - 1);\r\n            let v = this.listPixel[i].v / (this.ry - 1);\r\n            array.push(u, v);\r\n            array.push(u, v + this.ddy);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u, v);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u + this.ddx, v);\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n        }\r\n\r\n        return array;\r\n    }\r\n}","import { NVector3 } from '../../../';\r\n// import { ALine } from '../../../../Applications/AppsWrapper/AppDrawing/Canvas/CAnnotation/ALine';\r\n// import { ADrawingPreset } from '../../../../Applications/AppsWrapper/AppDrawing/Canvas/CAnnotation/ADrawingPreset';\r\n// import { CLine } from '../../../../Applications/AppsWrapper/AppDrawing/Canvas/CGeometry/CLine';\r\n// import { ACircle } from '../../../../Applications/AppsWrapper/AppDrawing/Canvas/CAnnotation/ACircle';\r\n\r\n// import { NumericalMotion } from '../../Utilities/NumericalMotion';\r\n\r\nexport enum ANODE_TYPE {\r\n    DEFAULT = 'DEFAULT',\r\n    START = 'START',\r\n    END = 'END',\r\n}\r\n\r\nexport class ANode {\r\n    vec: NVector3;\r\n    edges: AEdge[];\r\n    nNodes: ANode[];\r\n    id: number;\r\n\r\n    raidus: number = 35;\r\n\r\n    t: number = 0.0;\r\n    temp: number = -1;\r\n\r\n    type: ANODE_TYPE;\r\n    isVisited: boolean;\r\n\r\n    otherValue: number = 0;\r\n\r\n    constructor(id: number, v: NVector3) {\r\n        this.id = id;\r\n        this.vec = v;\r\n        this.edges = [];\r\n        this.nNodes = [];\r\n        this.isVisited = false;\r\n        this.type = ANODE_TYPE.DEFAULT;\r\n    }\r\n    isEqual(v: NVector3) {\r\n        if (this.vec === v) { return true; }\r\n        if (NVector3.Distance(this.vec, v) < 0.5) { return true; }\r\n        return false;\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // console.log('dd');\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, 8, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('n' + this.id.toString(), this.vec.x, this.vec.y + 3.5);\r\n        // this.t += 0.05;\r\n    }\r\n    RnnderNodeArea(ctx: CanvasRenderingContext2D) {\r\n\r\n        let ra = this.raidus + Math.cos(this.t) * 5;\r\n        if (this.type === ANODE_TYPE.START || this.type === ANODE_TYPE.END) {\r\n            ctx.fillStyle = 'rgba(0,255,0,0.3)';\r\n        } else {\r\n            ctx.fillStyle = 'rgba(0,0,0,0.3)';\r\n        }\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, ra, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n}\r\nexport class AEdge {\r\n    n0: ANode;\r\n    n1: ANode;\r\n    vec: NVector3;\r\n    id: number;\r\n    constructor(id: number, n0: ANode, n1: ANode) {\r\n        this.id = id;\r\n        this.n0 = n0; n0.edges.push(this);\r\n        this.n1 = n1; n1.edges.push(this);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        this.ComputeCenter();\r\n        ctx.fillStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.arc(this.vec.x, this.vec.y, 14, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('E ' + this.id.toString(), this.vec.x, this.vec.y + 3.5);\r\n    }\r\n    RenderDim(ctx: CanvasRenderingContext2D) {\r\n        // this.ComputeCenter();\r\n        // ctx.fillStyle = '#000000';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.vec.x, this.vec.y, 14, 0, Math.PI * 2);\r\n        // ctx.closePath();\r\n        // ctx.fill();\r\n\r\n        // ctx.fillStyle = '#ffffff';\r\n        // ctx.textAlign = 'center';\r\n        // ctx.fillText('E ' + this.id.toString(), this.vec.x, this.vec.y + 3.5);\r\n        if (this.n0.vec.x < this.n1.vec.x) {\r\n            // ADrawingPreset.LineDim(ctx, 0, this.n0.vec.x, this.n0.vec.y - 4, this.n1.vec.x, this.n1.vec.y, CLine.DistancefromGeoV(this.n0.vec, this.n1.vec));\r\n        } else {\r\n            // ADrawingPreset.LineDim(ctx, 0, this.n1.vec.x, this.n1.vec.y - 4, this.n0.vec.x, this.n0.vec.y, CLine.DistancefromGeoV(this.n0.vec, this.n1.vec));\r\n        }\r\n    }\r\n    private ComputeCenter() {\r\n        this.vec = NVector3.MidVec(this.n0.vec, this.n1.vec);\r\n    }\r\n}\r\n\r\nexport class ALineGraph {\r\n\r\n    nodes: ANode[];\r\n    edges: AEdge[];\r\n\r\n    p0: NVector3;\r\n    p1: NVector3;\r\n\r\n    startNode: ANode;\r\n    endNode: ANode;\r\n\r\n    path: ANode[];\r\n\r\n    constructor() {\r\n        this.edges = [];\r\n        this.nodes = [];\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    BuildByALines(lns: any) { // ALine[]) {\r\n        if (lns.length === 0) { return; }\r\n        let lines = lns;\r\n        let idNode = 0;\r\n        // console.log('==================================');\r\n        // console.log('input length of line:', lns.length);\r\n        let nodes: ANode[] = [];\r\n        nodes.push(new ANode(idNode++, lines[0].p0.vec));\r\n        nodes.push(new ANode(idNode++, lines[0].p1.vec));\r\n        for (let i = 1; i < lines.length; ++i) {\r\n            let isContainN0 = true, isContainN1 = true;\r\n            for (let j = 0; j < nodes.length; ++j) {\r\n                if (nodes[j].isEqual(lines[i].p0.vec)) { isContainN0 = false; }\r\n                if (nodes[j].isEqual(lines[i].p1.vec)) { isContainN1 = false; }\r\n            }\r\n            if (isContainN0) { nodes.push(new ANode(idNode++, lines[i].p0.vec)); }\r\n            if (isContainN1) { nodes.push(new ANode(idNode++, lines[i].p1.vec)); }\r\n\r\n        }\r\n        this.nodes = nodes;\r\n\r\n        this.edges = [];\r\n        for (let i = 0; i < lines.length; ++i) {\r\n            let n0: ANode | undefined;\r\n            let n1: ANode | undefined;\r\n            for (let j = 0; j < nodes.length; ++j) {\r\n                if (nodes[j].isEqual(lines[i].p0.vec)) { n0 = nodes[j]; }\r\n                if (nodes[j].isEqual(lines[i].p1.vec)) { n1 = nodes[j]; }\r\n            }\r\n            if (n0 && n1) {\r\n                this.edges.push(new AEdge(i, n0, n1));\r\n            }\r\n        }\r\n        this.ComputeNeighborNode();\r\n    }\r\n    ComputeNeighborNode() {\r\n        for (const n of this.nodes) {\r\n            for (const e of n.edges) {\r\n                if (n !== e.n0) { n.nNodes.push(e.n0); }\r\n                if (n !== e.n1) { n.nNodes.push(e.n1); }\r\n            }\r\n        }\r\n    }\r\n    ComputePathFinding(v0: NVector3, v1: NVector3) {\r\n        this.p0 = v0;\r\n        this.p1 = v1;\r\n        this.startNode = this.FindClosestNodeByVec(v0);\r\n        this.startNode.type = ANODE_TYPE.START;\r\n        this.endNode = this.FindClosestNodeByVec(v1);\r\n        this.endNode.type = ANODE_TYPE.END;\r\n        console.log(this.startNode, this.endNode);\r\n    }\r\n    UpdatePathFinding() {\r\n        this.ResetPath();\r\n        if (this.p0 && this.p1) {\r\n            this.ComputePathFinding(this.p0, this.p1);\r\n            this.path = this.ComputeShortestPath();\r\n        }\r\n    }\r\n    FindClosestNodeByVec(v: NVector3) {\r\n        // let i = this.nodes.length - 1;\r\n        let minDis = Number.MAX_SAFE_INTEGER;\r\n        let si = -1;\r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            let dis = this.nodes[i].vec.Distance(v);\r\n            if (dis < minDis) { minDis = dis; si = i; }\r\n        }\r\n        return this.nodes[si];\r\n    }\r\n    Cost(current: ANode, other: ANode) {\r\n        // let v = current.vec;\r\n        let dis = NVector3.Distance(current.vec, other.vec);\r\n\r\n        let isInside = false;\r\n        // for (let i = 0; i < ACircle.list.length; ++i) {\r\n        //     let cirDis = NVector3.Distance(ACircle.list[i].GetCenterVec(), v);\r\n        //     // console.log(cirDis, ACircle.list[i].r0);\r\n        //     if (cirDis < ACircle.list[i].r0) {\r\n        //         isInside = true;\r\n        //     }\r\n        // }\r\n        if (isInside) {\r\n            console.log(current.id);\r\n            current.temp += 1000000;\r\n            return dis;\r\n        } else {\r\n            return dis;\r\n        }\r\n    }\r\n    DFS(index: number) {\r\n        if (this.nodes[index]) { return; }\r\n        this.nodes[index].isVisited = true;\r\n        for (let j = 0; j < this.nodes[index].nNodes.length; ++j) {\r\n            // do\r\n            const ni = this.nodes[index][j];\r\n            this.DFS(ni);\r\n        }\r\n    }\r\n    BFS(index: number) {\r\n        let front: ANode[] = [];\r\n        front.push(this.nodes[index]);\r\n        this.nodes[index].isVisited = true;\r\n        for (let i = 0; i < 20000; ++i) {\r\n            if (front.length === 0) { break; }\r\n            const current = front[0];\r\n            front.shift();\r\n            let safeguard = 0;\r\n            for (let np of current.nNodes) {\r\n\r\n                if (!np.isVisited) {\r\n\r\n                    // do\r\n                    front.push(np);\r\n\r\n                    np.isVisited = true;\r\n                }\r\n\r\n                // const newcost = this.Cost(current, np);\r\n                // const newtemp = current.temp + newcost; // + current.otherValue;\r\n                // if (np.temp === -1.0 || newtemp < np.temp) { // when we need this condition -> np.temp > newtemp ?\r\n                //     np.temp = newtemp;\r\n                //     front.push(np);\r\n\r\n                // }\r\n\r\n                if (++safeguard > 100) { break; }\r\n            }\r\n        }\r\n\r\n    }\r\n    ComputeShortestPath() { // , Graph: ALineGraph, transitionCostDelegate: cost): ANode[] { //, PixelMap pMap, transitionCostDelegate cost) {\r\n\r\n        let nFirst: ANode = this.startNode; // this.FindClosestNodeByVec(this.p0);\r\n        let nEnd: ANode = this.endNode; // this.FindClosestNodeByVec(this.p1);\r\n\r\n        // declaration of path list\r\n        let path: ANode[] = [];\r\n\r\n        // reset the temp value\r\n        for (let n of this.nodes) { n.temp = -1.0; }\r\n\r\n        // declaration of front list\r\n        let front: ANode[] = [];\r\n        front.push(nFirst);\r\n        nFirst.temp = 0.0;\r\n\r\n        // forward propagate\r\n        for (let i = 0; i < 20000; ++i) {\r\n            if (front.length === 0) { break; }\r\n            const current = front[0];\r\n            front.shift();\r\n\r\n            let safeguard = 0;\r\n            for (let np of current.nNodes) {\r\n                const newcost = this.Cost(current, np);\r\n                const newtemp = current.temp + newcost; // + current.otherValue;\r\n                if (np.temp === -1.0 || newtemp < np.temp) { // when we need this condition -> np.temp > newtemp ?\r\n                    np.temp = newtemp;\r\n                    front.push(np);\r\n\r\n                }\r\n                if (++safeguard > 100) { break; }\r\n            }\r\n        }\r\n\r\n        // // backward propagate\r\n        if (nEnd.temp !== -1.0) {\r\n            path.push(nEnd);\r\n            let current = nEnd;\r\n            for (let i = 0; i < 20000; ++i) {\r\n                let smallest = current;\r\n                for (let np of current.nNodes) {\r\n                    if (np.temp < smallest.temp) { smallest = np; }\r\n                }\r\n                if (smallest === current) { break; } // which means that?\r\n                current = smallest;\r\n                path.push(current);\r\n                if (current === nFirst) { break; }\r\n            }\r\n        }\r\n        console.log(path);\r\n        this.path = path;\r\n        return path;\r\n    }\r\n\r\n    Print() {\r\n        console.log('number of edge', this.edges.length);\r\n        console.log('number of node:', this.nodes.length);\r\n        for (let n of this.nodes) {\r\n            let stringEdge = '';\r\n            for (let i = 0; i < n.edges.length; ++i) {\r\n                stringEdge += 'E_' + n.edges[i].id + ' ';\r\n            }\r\n\r\n            console.log('N_' + n.id, ' = [', stringEdge, ']');\r\n        }\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        // console.log('graphic');\r\n        this.RnnderNodeArea(ctx);\r\n        this.RenderNode(ctx);\r\n        this.RenderEdge(ctx);\r\n        this.RenderDim(ctx);\r\n\r\n        this.RenderPath(ctx);\r\n    }\r\n    RnnderNodeArea(ctx: CanvasRenderingContext2D) {\r\n        for (let n of this.nodes) {\r\n            n.RnnderNodeArea(ctx);\r\n        }\r\n    }\r\n    RenderNode(ctx: CanvasRenderingContext2D) {\r\n        for (let n of this.nodes) {\r\n            n.Render(ctx);\r\n        }\r\n    }\r\n    RenderEdge(ctx: CanvasRenderingContext2D) {\r\n        for (let e of this.edges) {\r\n            e.Render(ctx);\r\n        }\r\n    }\r\n    RenderDim(ctx: CanvasRenderingContext2D) {\r\n        for (let e of this.edges) {\r\n            e.RenderDim(ctx);\r\n        }\r\n    }\r\n    RenderPath(ctx: CanvasRenderingContext2D) {\r\n        if (this.path && this.path.length > 0) {\r\n            ctx.lineWidth = 10;\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = 'rgba(255,0,0,0.5)';\r\n            ctx.moveTo(this.path[0].vec.x, this.path[0].vec.y);\r\n            for (let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].vec.x, this.path[i].vec.y);\r\n            }\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    private ResetPath() {\r\n        for (let i = 0; i < this.nodes.length; ++i) { this.nodes[i].type = ANODE_TYPE.DEFAULT; }\r\n    }\r\n}","import { NVector3 } from '../../../';\r\n// import { CVPoint } from '../../AppVisaulization/Canvas/CVisualization/CVPoint';\r\nexport class DataPixel {\r\n    i: number;\r\n    j: number;\r\n    nPix: DataPixel[];\r\n    bVec: NVector3[];\r\n    vec: NVector3;\r\n    pMap: DataPixelMap;\r\n    data: NVector3[];\r\n    isVisited: boolean;\r\n    isGetData: boolean;\r\n    temp: number;\r\n    constructor(pMap: DataPixelMap, v: NVector3) {\r\n        this.pMap = pMap;\r\n        this.nPix = [];\r\n        this.bVec = [];\r\n        this.vec = v;\r\n        this.data = [];\r\n        this.isVisited = false;\r\n        this.isGetData = true;\r\n    }\r\n    GetData() {\r\n        if (this.isGetData) { return this.data.length; }\r\n        return 0;\r\n    }\r\n    SumDataByNPix(vecs: NVector3[]) {\r\n        // let sum = 0;\r\n        // for (let i = 0; i < this.nPix.length; ++i) {\r\n        //     if (!NVector3.IsInsideOfVecs(this.vec, vecs)) { continue; }\r\n        //     if (!this.nPix[i].isVisited) {\r\n        //         sum += this.nPix[i].data.length;\r\n        //         this.nPix[i].isVisited = true;\r\n        //     }\r\n        // }\r\n        // return sum;\r\n    }\r\n}\r\nexport class DataPixelMap {\r\n    public static list: DataPixelMap[] = [];\r\n\r\n    listPixel: DataPixel[] = [];\r\n    rx: number = 0;\r\n    ry: number = 0;\r\n    ddx: number = 0.0;\r\n    ddy: number = 0.0;\r\n    offScale: number;\r\n    d: number[][];\r\n    minV: NVector3;\r\n    maxV: NVector3;\r\n    minData: number;\r\n    maxData: number;\r\n    v0: NVector3 = NVector3.Origin();\r\n    v1: NVector3 = NVector3.Origin();\r\n\r\n    static Add(g: DataPixelMap) { DataPixelMap.list.push(g); }\r\n    static Remove(g: DataPixelMap) { DataPixelMap.list.splice(DataPixelMap.list.indexOf(g), 1); }\r\n\r\n    // static GetPixelMap(rect: CRectangle) {\r\n    //     let pMap = new DataPixelMap(rect.pts[1].vec, rect.pts[3].vec, 20, 20);\r\n    //     pMap.Init();\r\n    // }\r\n\r\n    constructor(d: number[][]) {\r\n        this.d = d;\r\n        this.ComputeMinMaxPos();\r\n        this.Init(this.minV, this.maxV, 100, 100);\r\n        this.InitGrid();\r\n        this.InitGridNeighbor();\r\n        // this.ComputePixelOff();\r\n        this.PushDataToPixel(this.d);\r\n        this.ComputeMinMaxValue(this.d);\r\n    }\r\n    ComputeMinMaxPos() {\r\n        let minX = Number.MAX_SAFE_INTEGER; // 1000;\r\n        let maxX = Number.MIN_SAFE_INTEGER; // -1000;\r\n        let minY = Number.MAX_SAFE_INTEGER; // 1000;\r\n        let maxY = Number.MIN_SAFE_INTEGER; // -1000;\r\n        // console.log(minX, maxX);\r\n        let i = this.d.length;\r\n        while (i--) {\r\n            let x = this.d[i][1]; let y = this.d[i][0];\r\n            if (x === 0 || y === 0) { continue; }\r\n            // if (-72 < x && x < -70 && 40 < y && y < 43) {\r\n            if (minX > x) { minX = x; } if (minY > y) { minY = y; }\r\n            if (maxX < x) { maxX = x; } if (maxY < y) { maxY = y; }\r\n            // }\r\n        }\r\n        this.minV = new NVector3(minX, minY, 0);\r\n        this.maxV = new NVector3(maxX, maxY, 0);\r\n        // new CVPoint(this.minV.x, this.minV.y, this.minV.z, 20);\r\n        // new CVPoint(this.maxV.x, this.maxV.y, this.maxV.z, 20);\r\n    }\r\n    Init(v0: NVector3, v1: NVector3, rx: number = 20, ry: number = 20) {\r\n        this.offScale = 0.9;\r\n        this.rx = rx;\r\n        this.ry = ry;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        this.v0 = v0;\r\n        this.v1 = v1;\r\n        this.ddx = (this.v1.x - this.v0.x) / (this.rx - 1.0);\r\n        this.ddy = (this.v1.y - this.v0.y) / (this.ry - 1.0);\r\n        console.debug('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n        console.debug('Pixe Map was executed...');\r\n        // DataPixelMap.Add(this);\r\n        // CVisualization.Add(this);\r\n    }\r\n    InitGrid() {\r\n        console.debug(this.rx, this.ry);\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let x = this.v0.x + i * this.ddx;\r\n                let y = this.v0.y + j * this.ddy;\r\n                let px = new DataPixel(this, new NVector3(x, y, 0));\r\n                // new CVPoint(x, y, 0, 2);\r\n                px.i = i; px.j = j;\r\n                px.bVec.push(new NVector3(x - this.ddx * 0.5, y - this.ddy * 0.5, 0.0));\r\n                px.bVec.push(new NVector3(x + this.ddx * 0.5, y - this.ddy * 0.5, 0.0));\r\n                px.bVec.push(new NVector3(x + this.ddx * 0.5, y + this.ddy * 0.5, 0.0));\r\n                px.bVec.push(new NVector3(x - this.ddx * 0.5, y + this.ddy * 0.5, 0.0));\r\n                // console.debug(px);\r\n                this.listPixel.push(px);\r\n            }\r\n        }\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n        console.debug('done for computing neighbors ');\r\n    }\r\n    ComputePixelOff() {\r\n        let i = this.listPixel.length;\r\n        while (i--) {\r\n            let cv = NVector3.GetCenterVecFromVecs(this.listPixel[i].bVec);\r\n            this.listPixel[i].vec = cv;\r\n            for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\r\n                let tv = this.listPixel[i].bVec[j];\r\n                let x = ((tv.x - cv.x) * this.offScale) + cv.x;\r\n                let y = ((tv.y - cv.y) * this.offScale) + cv.y;\r\n                this.listPixel[i].bVec[j] = new NVector3(x, y, 0);\r\n            }\r\n        }\r\n    }\r\n    PushDataToPixel(d: number[][]) {\r\n        let i = this.d.length;\r\n        while (i--) {\r\n            let v = new NVector3(this.d[i][1], this.d[i][0], 0);\r\n            let p = this.GetPixelAtPoint(v);\r\n            p.data.push(v);\r\n        }\r\n        console.log(this);\r\n    }\r\n    ComputeMinMaxValue(d: number[][]) {\r\n        this.minData = Number.MAX_SAFE_INTEGER; this.maxData = Number.MIN_SAFE_INTEGER;\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let n = this.listPixel[i].data.length;\r\n            if (n < this.minData) { this.minData = n; }\r\n            if (n > this.maxData) { this.maxData = n; }\r\n        }\r\n    }\r\n    GetPixelAtPoint(geoPt: NVector3) {\r\n\r\n        // console.log(geoPt);\r\n        let pixelMap = this;\r\n        let dp = new NVector3(geoPt.x - pixelMap.v0.x, geoPt.y - pixelMap.v0.y, geoPt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx); let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    GetDataAtPoint(pt: NVector3) {\r\n        let p = this.GetPixelAtPoint(pt);\r\n        return p.data.length;\r\n    }\r\n    GetDataAtByVecs(v: NVector3, vecs: NVector3[]) {\r\n        let p = this.GetPixelAtPoint(v);\r\n        p.SumDataByNPix(vecs);\r\n\r\n        return p.data.length;\r\n    }\r\n    ForwardPropagation(p: NVector3, vecs: NVector3[]) {\r\n        let pixs: DataPixel[] = [];\r\n        pixs.push(this.GetPixelAtPoint(p));\r\n\r\n        // let k = this.listPixel.length;\r\n        // while (k--) this.listPixel[k].isVisited = false;\r\n\r\n        let sum = 0;\r\n        for (let i = 0; i < 100; ++i) {\r\n            // while (true) {\r\n            if (pixs.length === 0) { break; }\r\n\r\n            let currentP = pixs[0];\r\n            pixs.shift();\r\n\r\n            for (let np of currentP.nPix) {\r\n\r\n                // console.log(np.vec);\r\n                // console.log(vecs[0])\r\n                if (NVector3.IsInsideOfVecs(np.vec, vecs)) {\r\n                    //   if (!np.isVisited) {\r\n                    pixs.push(np);\r\n                    sum += np.GetData();\r\n                    np.isVisited = true;\r\n                    // console.log(sum);\r\n                    // }\r\n\r\n                }\r\n\r\n                // if (currentP.nPix[j].isVisited) { continue; }\r\n                // if (NVector3.IsInsideOfVecs(currentP.nPix[j].vec, vecs)) {\r\n\r\n                //     // console.log(pixs.length);\r\n                //     if (!currentP.nPix[j].isVisited) {\r\n                //         sum += currentP.nPix[j].data.length;\r\n                //         currentP.nPix[j].isVisited = true;\r\n                //     }\r\n                //     pixs.push(currentP.nPix[j]);\r\n\r\n                // }\r\n            }\r\n        }\r\n\r\n        // let sum = 0;\r\n        // for (let i = 0; i < 1000; ++i) {\r\n        //     // while (true) {\r\n        //     if (pixs.length === 0) { break; }\r\n        //     let currentP = pixs[0];\r\n        //     pixs.shift();\r\n        //     for (let j = 0; j < currentP.nPix.length; ++j) {\r\n        //         if (currentP.nPix[j].isVisited) { continue; }\r\n        //         if (NVector3.IsInsideOfVecs(currentP.nPix[j].vec, vecs)) {\r\n\r\n        //             // console.log(pixs.length);\r\n        //             if (!currentP.nPix[j].isVisited) {\r\n        //                 sum += currentP.nPix[j].data.length;\r\n        //                 currentP.nPix[j].isVisited = true;\r\n        //             }\r\n        //             pixs.push(currentP.nPix[j]);\r\n\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n\r\n        // if (sum === 0) sum = 0.2;\r\n        // else sum += 0.2;\r\n        return sum;\r\n    }\r\n    LogUpdate(d: string) {\r\n        // CGeometry.app.cUIController.dataInspector.UpdateDataLog(d);\r\n\r\n    }\r\n    // event\r\n    Query(x: number, y: number, z: number) {\r\n        //\r\n    }\r\n    onDocumentMouseMove() {\r\n        console.debug('move');\r\n    }\r\n    onmouseenter() {\r\n        console.debug('enter');\r\n    }\r\n    // visualization\r\n    // CVisPixels(ctx: CanvasRenderingContext2D) {\r\n    //     for (let i = 0; i < this.listPixel.length; ++i) {\r\n    //         this.listPixel[i].RenderPost(ctx);\r\n    //     }\r\n    // };\r\n    VisMeshGrid() {\r\n        // for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n        //     // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        // }\r\n    }\r\n    VisCenterPoints() {\r\n        // let pts: NVector3[] = [];\r\n        // for (let i = 0; i < this.listPixel.length; ++i) {\r\n        //     // pts.push(pixelMap.listPixel[i].vec);\r\n        // }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    // UpdatePre() {\r\n    //     let i = this.listPixel.length;\r\n    //     while (i--) {\r\n    //         this.listPixel[i].IsHover = false;\r\n    //         this.listPixel[i].isVisit = false;\r\n    //     }\r\n    //     i = this.listPixel.length;\r\n    //     while (i--) this.listPixel[i].UpdateWithMouseInteraction(CGeometry.app.activeCommands.m.x, CGeometry.app.activeCommands.m.y);\r\n    // }\r\n    UpdatePost() {\r\n        // let i = this.listPixel.length;\r\n        // while (i--) {\r\n        //     this.listPixel[i].IsHover = false;\r\n        //     this.listPixel[i].isVisit = false;\r\n        // }\r\n    }\r\n    // ...................................................................\r\n\r\n}\r\n","import { COMPILE_MODE } from './Enumeration';\r\nexport class AppProperties {\r\n    isStandalone: boolean = false;\r\n    compileMode: COMPILE_MODE = COMPILE_MODE.DEVELOPMENT;\r\n    constructor() {\r\n        //\r\n    }\r\n}"],"names":["themeRed","require","themePurple","themeBlue","themeGreen","themeOrange","themeGray","themeDarkgray","themeBlack","Asset","this","ImportAssets","IndePanelRender","independentPanelWrapper","list","isShow","isStillCapturedFly","isHidden","capture","undefined","v","Remove","e","i","length","IsMouseInside","x","y","IsHover","ui","FindAtPoint","enablePan","MouseDown","MouseRight","MouseDrag","MouseDouble","CheckOvered","MouseUp","ctx","Render","g","push","splice","indexOf","UIWrapperBase","vec","width","height","nUI","isActivated","IndependentPanel","divNeeded","divInput","btnClose","btnMini","btnHam","btnResize","bodyDiv","subMenu","subs","_content","title","filletR","InitTop","BodyDiv","HeadHeight","isMinimized","Hide","off","Width","Height","content","hasSubMenu","IsHidden","BtnClose","BtnMinimize","BtnHam","BtnResize","IndeSubPanel","isMoveable","xo","preX","yo","preY","boundarVecs","Translate","indePanelRender","RemovePost","color","ComputeBoundary","ColorUtility","IndePanelPreset","transparent","isOver","isSelected","NVector3","theme","colSelectedBG","RenderHeadTitle","RenderBodyContent","RenderPost","RenderBtnHorizontal","save","fillStyle","textBaseline","textAlign","font","shadowBlur","shadowOffsetY","shadowOffsetX","fillText","restore","IndePanelBase","ActiveCommand","independentPanel","d","IndependentPanelWrapper","menuOff","textOffX","textOffY","m","activeCommand","textYOff","Init","MouseMove","Reset","ShowMenu","RemoveAll","stopPropagation","NUI","divHost","needUI","asset","themeType","pullDownMenuWrapper","indepCanvas","pullDownCanvas","_stopPropagation","clientWidth","clientHeight","console","log","init","ShiftTheme","MouseEventController","ResizeCanvas","Resize","BindingStoppropagation","setTimeout","BindingEnablePan","app","ac","BuildMenuContent","isActive","vs","r","xOff","fillCol","strokeCol","radius","lineWidth","beginPath","moveTo","lineTo","arcTo","closePath","strokeStyle","shadowColor","fill","r0","r1","r2","r3","isShadow","radius0","radius1","radius2","radius3","text","col","host","divAnchor","div","xOff0","yOff0","xOff1","yOff1","_textAlign","_textCol","GetDivBaseContainer","style","UpdateSize","textContent","left","top","removeChild","document","createElement","position","pointerEvents","id","zIndex","padding","paddingLeft","wordWrap","overflow","fontWeight","lineHeight","textCol","appendChild","toString","indePanelBase","RenderTitle","HasSubMenu","theHeight","stroke","IsMinimized","rect","cUI","xx","yy","minWidth","minHeight","ResizePropagation","IndeSubMenu","indeSubPanel","strings","stringSlice","index","textHeight","value","BindingMouseDownPost","ExecuteCommand","colBG","FragmentText","slice","maxWidth","words","split","lines","line","measureText","tmp","shift","yOff","TranslateByXY","divID","colorBase","colorOver","colorText","isRender","colorTop","Add","theWidth","v0","v1","z","ComputeBoundaryHead","ComputeBoundaryPanel","w","long","lat","ele","proX","proY","proZ","alt","isModified","isVisited","parent","other","Math","sqrt","Normalize","tor","Distance","len","DistanceByArray","Distance2","DotProduct","CrossProduct","Length","attr","dVal","Sub","exp","SquareLength","atan2","GetAngle","PI","toFixed","Float32Array","out","a","b","lats","longs","latsSum","longSum","curAng","curLat","curLon","latOrigin","lonOrigin","angles","Array","j","abs","atan","l","k","sum1","sum2","t","s","DeepCopy","v2","area","dis","Number","MAX_SAFE_INTEGER","distance","n","zOff","gV0","gV1","dLat","dLon","sin","cos","long0","lat0","long1","lat1","KMeterFromGeoGPSPos","addition","KMeterFromGPSPos","lng","Get1KM_Long_ByGeoUnit","la","Get1KM_lat_ByGeoUnit","pt","attractor","strength","falloff","dist","Unitize","Mult","Explosion","rotor","Origin","acos","GetCosAngleByTwoVectors","GetAngleByTwoVectorsRadian","origin","GetAngleByTwoVectors","dot","cp","GetCenterVecFromVecs","boundary","GetBoundingVecs","GetCloseVec","p0","p1","vecsBound","OnLine","pp1","pp2","p","IsInsideOfVecs","listOfVec","nv0","nv1","boundarVecsSub","xMin","yMin","zMin","xMax","MIN_SAFE_INTEGER","yMax","zMax","minX","MAX_VALUE","minY","minZ","maxX","MIN_VALUE","maxY","maxZ","vecs","inside","xi","yi","xj","yj","h","ConvexHull","sort","lower","Cross","pop","upper","O","A","B","ax","ay","az","bx","by","bz","CheckLineIntersection","p2","p3","denominator","numerator1","numerator2","onLine0","onLine1","result","u","res","newres","dir","temp","MoveVec","angle","cptToLocal","cptToWorld","MoveVecs","RotateVecs","RotateVec","nv","c","newVes","eps","v3","isNaN","between","mv","tv","q","val","max","min","q1","q2","o1","orientation","o2","o3","o4","onSegment","COLORBLENDING","COLOR_HEX","num","modeListGL","vis","visibility","toHex","decimalValue","places","hex","next","hexidecimal","floor","hi","f","round","RGBToHex","random","map","join","thecol","isGray","replace","parseInt","substring","substr","toUpperCase","lightness","rgb","HexToRGBANormalized","hsl","RGB2HSL","HSL2RGB","visiblity","L","pow","R","G","labA","labB","deltaL","deltaA","deltaB","c1","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","threshold","high","low","hue2rgb","pp","qq","colA","colB","factor","cA","cB","steps","step","interpolatedColors","InterpolateColor","rgb0","rgb1","RBGToArray","match","vA","vB","blend","HexToRGBA","hsv","RGB2HSV","HSVtoRGB","brightness","contrast","lut","adjust","img","imgOut","ImageData","BrightnessContrastLUT","data","Hue","Saturation","Lightness","hls","Threshold","gray","modeList","ColorPreset","shadow","GL3DPreset","vTerrain","fTerrain","vGlobe","fGlobe","vGlobeTexture","fGlobeTexture","vObjBunny01","fObjBunny01","vObjBunny02","fObjBunny02","vObjBunny03","fObjBunny03","Vec3","mag","dx","dy","dz","Set","mat","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a01","a02","a03","a12","a13","a23","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","Mat4","EPSILON","GetIdentity","right","bottom","near","far","mat4","lr","bt","nf","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","fovy","aspect","tan","cameraPosition","target","zAxis","normalize","subtractVectors","xAxis","cross","yAxis","rad","axis","b00","b01","b02","b10","b11","b12","b20","b21","b22","xy","xz","yz","zz","wx","wy","wz","trace","S","sx","sy","sz","o","ox","oy","oz","yx","zx","zy","rl","tb","scale","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b13","b14","b15","angleInRadians","tx","ty","tz","Multiply","Translation","b03","b23","b30","b31","b32","b33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t1","t2","t3","b04","b05","b06","b07","b08","b09","det","dst","raw","Matrix4","Identity","ary","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","deg2Rad","GLBLENDING_FUNCTION","GL_DRAWING_TYPE","GLBlending","indexSource","indexDestination","glSource","glDestination","glBlendingArray","GetLog","gl","blendFunc","sMode","dMode","numSource","numDestination","UNIT_LENGTH","UNIT","MathUtility","series","rNumber","range","theStep","CValue","valueOut","domain","GetDomain","OldMin","OldMax","NewMin","NewMax","Remap","doubleList","Min","Max","indices","originWidth","originHeight","newWidth","newHeight","lon1","lat2","lon2","meter","from","to","NANOMETER","MICROMETER","MILLIMETER","CENTIMETER","METER","INCH","FOOT","YARD","MILE","KILOMETER","unitLength","degrees","radians","total","GetRandomIntInclusive","array","Date","getTime","edge1","edge2","px","py","before","after","atPoint","fitCount","newData","springFactor","ceil","LinearInterpolate","circumference","DEG2RAD","RAD2DEG","NLine","aa","bb","Error","lns","ln","others","newLns","IsOverlap","nLns","NVectorUtility","xNum","yNum","vertexs","xd","yd","theY","theX","zNum","zd","zi","theZ","xInterval","yInterval","minV","maxV","ln0","xs","ys","circleVer","iter","zo","pts","start","end","sAngle","eAngle","xInteral","yInteral","offset","theta","phi","goePos","zElevation","scaleZ","zVal","nVecs","GetPoint3dProjectedToGlobeByVec","elevation","NumericalMotion","scaledTime","scaledTime1","magnitude","scaledTime2","asin","easeOutBounce","easeInBounce","APPS","ADDONS","ACTIVECOMMAND_MODE_N3D","ML_MODEL_TYPE","ACTIVE_SKETCH_MODE","PROJECTION_TYPE","ACTIVECOMMAND_MODE","GTYPE","CURSOR","X_GTYPE","ACTION_TYPE","TEXTALIGN","TEXTBOX","LINECAP","FHTYPE","OPTIMIZER","VIDEO_SIZE","GRAPHIC_MODE","CLOGTYPE","COMPILE_MODE","INTERACTION_MODE","RENDER_MODE","BROWSER_TYPE","PRESS_TYPE","CLICK_TYPE","TOUCH_TYPE","EVENT_LISTENER_TYPE","CAMERA_TYPE_THREE","MAPFILTER_MODE","Deltatime","now","delta","frameRate","last","timeLastRender","msLoop","window","performance","TouchEventData","preZ","yGLPicking","command","MOVE","identifier","radiusX","radiusY","rotationAngle","force","mEvent","TouchEventDataList","native","eventList","tType","touches","tEvent","clientX","clientY","ColorForTouch","touch","isEnable","click","prevent","delay","timer","down","preEvent","InitNativeTouchEvent","ontouchstart","TouchInteraction","CommonEventBuilder","START","TouchEventEmittingBinding","ontouchend","END","ontouchmove","ontouchcancel","CANCEL","mouseEventData","type","Build","touchEventDataPre","SIZE","Camera","video","canvas","mediaStream","hostDiv","InitVideo","InitMedia","size","getContext","setAttribute","filter","constraints","facingMode","audio","HasGetUserMedia","navigator","mediaDevices","getUserMedia","then","stream","srcObject","alert","drawImage","frame","getImageData","getTracks","forEach","track","stop","FILTERS","NJSLoader","url","fetch","response","catch","err","path","mode","json","file","blob","Image","objectURL","URL","createObjectURL","src","onload","crossOrigin","parser","DOMParser","parseFromString","xml","XmlToJson","obj","Object","nodeType","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","SortUtility","SortMerge","tt","SortQuickAscending","SortBubbleAscending","SortInsertionAscending","root","middle","sorted","SortMergeLoop","Merge","key","SortQuickDescending","BrowserUtility","_type","_isMobile","DetectBrowser","DetectIsMoile","userAgent","OPERA","IE","UNKNOWN","FIREFOX","SAFARI","CHROME","EDGE","test","location","search","queryString","arr","paramName","paramValue","toLowerCase","exec","Print","isPrint","Describe","count","mean","sum","median","variance","STD","StatisticsUtility","describe","Mean","Sum","Median","Variance","StandardDeviation","Average","nn","SortAscending","half","bin","bins","interval","maxNum","NGeoJSON","dJson","dMat","dHist","dDescribe","dT","dA","dB","dC","dD","dE","dF","GetDataWithIndexFromGeoJson","GetDescribeByCol","ToString","GetHistByCol","GetColbyIndex","colIndex","GetDataByIndex","DescribeNumeric","numBin","GetDataForHistDataFromNumeric","geometryGeoJson","propertiesGeoJson","keys","theData","geometry","properties","needIndex","dSet","theIndex","objKey","subKey","theItem","geoJsonGeoType","NGeoJSONPolygon","posLn","GetPTFloat32Array","isArray","ddd","NGeoJSONFeatureService","arrayVis","ConvertTime","ComputeTimelineIndex","indexArray","ComputeArrayVis","minYear","maxYear","dateArray","date","toLocaleDateString","timeLineIndex","Pixel","norV","nPix","recVec","GetID","ID","ANODE_TYPE","PixelMapTerrain","rx","ry","listPixel","ddx","ddy","InitGrid","vv","uu","dd","pos","InitGridNeighbor","px0","pixelMap","dp","cpt","GetPixelAtPoint","GetTriArray","GetPtArray","GetNormalArray","GetTexCoordinArray","DataPixel","pMap","bVec","isGetData","DataPixelMap","offScale","minData","maxData","ComputeMinMaxPos","PushDataToPixel","ComputeMinMaxValue","debug","cv","geoPt","SumDataByNPix","pixs","currentP","np","GetData","AppProperties","isStandalone","compileMode","DEVELOPMENT"],"sourceRoot":""}