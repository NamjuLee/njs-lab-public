{"version":3,"file":"static/js/8165.0080d1fa.chunk.js","mappings":"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","sources":["../node_modules/@deck.gl/react/src/utils/use-isomorphic-layout-effect.ts","../node_modules/@deck.gl/react/src/utils/inherits-from.ts","../node_modules/@deck.gl/react/src/utils/evaluate-children.ts","../node_modules/@deck.gl/react/src/utils/extract-jsx-layers.ts","../node_modules/@deck.gl/react/src/utils/extract-styles.ts","../node_modules/@deck.gl/react/src/deckgl.ts","../node_modules/@deck.gl/react/src/utils/position-children-under-views.ts","njslab/LabStarter/Starter-DeckGLOther/MapboxGLWrapper/index.ts","njslab/LabStarter/Starter-DeckGLOther/index.ts"],"sourcesContent":["// From https://github.com/streamich/react-use/blob/master/src/useIsomorphicLayoutEffect.ts\n// useLayoutEffect but does not trigger warning in server-side rendering\nimport {useEffect, useLayoutEffect} from 'react';\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n","// Check if one JavaScript class inherits from another\nexport function inheritsFrom<T>(Type: any, ParentType: T): Type is T {\n  while (Type) {\n    if (Type === ParentType) {\n      return true;\n    }\n    Type = Object.getPrototypeOf(Type);\n  }\n  return false;\n}\n","import * as React from 'react';\nimport {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(\n  children: React.ReactNode | Function,\n  childProps: any\n): React.ReactNode {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    // Special treatment for react-map-gl's Map component\n    // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n    if (isReactMap(children)) {\n      // Place map under the canvas\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\n\nexport function isComponent(child: React.ReactNode): child is React.ReactElement {\n  return (child && typeof child === 'object' && 'type' in child) || false;\n}\n\nfunction isReactMap(child: React.ReactElement): boolean {\n  return child.props?.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n  return componentClass && componentClass.deckGLViewProps;\n}\n","import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n","import * as React from 'react';\n\nconst CANVAS_ONLY_STYLES = {\n  mixBlendMode: null\n};\n\nexport default function extractStyles({\n  width,\n  height,\n  style\n}: {\n  width?: string | number;\n  height?: string | number;\n  style?: Partial<CSSStyleDeclaration> | null;\n}): {\n  containerStyle: React.CSSProperties;\n  canvasStyle: React.CSSProperties;\n} {\n  // This styling is enforced for correct positioning with children\n  const containerStyle: React.CSSProperties = {\n    position: 'absolute',\n    zIndex: 0,\n    left: 0,\n    top: 0,\n    width,\n    height\n  };\n\n  // Fill the container\n  const canvasStyle: React.CSSProperties = {\n    left: 0,\n    top: 0\n  };\n\n  if (style) {\n    for (const key in style) {\n      if (key in CANVAS_ONLY_STYLES) {\n        // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n        canvasStyle[key] = style[key];\n      } else {\n        // apply style to the container, e.g. position/flow settings\n        containerStyle[key] = style[key];\n      }\n    }\n  }\n\n  return {containerStyle, canvasStyle};\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nimport type {DeckGLContextValue} from './utils/position-children-under-views';\nimport type {DeckProps, Viewport} from '@deck.gl/core';\n\n/* eslint-disable max-statements, accessor-pairs */\ntype DeckInstanceRef = {\n  deck?: Deck;\n  redrawReason?: string | null;\n  lastRenderedViewports?: Viewport[];\n  viewStateUpdateRequested?: any;\n  interactionStateUpdateRequested?: any;\n  forceUpdate: () => void;\n  version: number;\n  control: React.ReactHTMLElement<HTMLElement> | null;\n};\n\n// Remove prop types in the base Deck class that support externally supplied canvas/WebGLContext\n/** DeckGL React component props */\nexport type DeckGLProps = Omit<\n  DeckProps,\n  'width' | 'height' | 'gl' | 'parent' | 'canvas' | '_customRender'\n> & {\n  Deck?: typeof Deck;\n  width?: string | number;\n  height?: string | number;\n  children?: React.ReactNode;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n};\n\nexport type DeckGLRef = {\n  deck?: Deck;\n  pickObject: Deck['pickObject'];\n  pickObjects: Deck['pickObjects'];\n  pickMultipleObjects: Deck['pickMultipleObjects'];\n};\n\nfunction getRefHandles(thisRef: DeckInstanceRef): DeckGLRef {\n  return {\n    get deck() {\n      return thisRef.deck;\n    },\n    // The following method can only be called after ref is available, by which point deck is defined in useEffect\n    pickObject: opts => thisRef.deck!.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck!.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck!.pickObjects(opts)\n  };\n}\n\nfunction redrawDeck(thisRef: DeckInstanceRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    // @ts-expect-error accessing protected method\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(\n  thisRef: DeckInstanceRef,\n  DeckClass: typeof Deck,\n  props: DeckProps\n): Deck {\n  const deck = new DeckClass({\n    ...props,\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate();\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef<DeckGLRef, DeckGLProps>((props, ref) => {\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  // A reference to persistent states\n  const _thisRef = useRef<DeckInstanceRef>({\n    control: null,\n    version,\n    forceUpdate: () => setVersion(v => v + 1)\n  });\n  const thisRef = _thisRef.current;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(\n    () => extractJSXLayers(props),\n    [props.layers, props.views, props.children]\n  );\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange: DeckProps['onViewStateChange'] = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange?.(params);\n  };\n\n  const handleInteractionStateChange: DeckProps['onInteractionStateChange'] = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange?.(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(() => {\n    const forwardProps: DeckProps = {\n      ...props,\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      parent: containerRef.current,\n      canvas: canvasRef.current,\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n\n    // The defaultValue for _customRender is null, which would overwrite the definition\n    // of _customRender. Remove to avoid frequently redeclaring the method here.\n    delete forwardProps._customRender;\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n\n  useEffect(() => {\n    const DeckClass = props.Deck || Deck;\n\n    thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck?.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const currentViewports =\n    thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(\n    () => extractStyles({width, height, style}),\n    [width, height, style]\n  );\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n","import * as React from 'react';\nimport {createElement} from 'react';\nimport {View} from '@deck.gl/core';\nimport {inheritsFrom} from './inherits-from';\nimport evaluateChildren, {isComponent} from './evaluate-children';\n\nimport type {Deck, DeckProps, Viewport} from '@deck.gl/core';\nimport type {EventManager} from 'mjolnir.js';\n\nexport type DeckGLContextValue = {\n  viewport: Viewport;\n  container: HTMLElement;\n  eventManager: EventManager;\n  onViewStateChange: DeckProps['onViewStateChange'];\n};\n\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({\n  children,\n  deck,\n  ContextProvider\n}: {\n  children: React.ReactNode[];\n  deck?: Deck;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n}): React.ReactNode[] {\n  // @ts-expect-error accessing protected property\n  const {viewManager} = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views: Record<\n    string,\n    {\n      viewport: Viewport;\n      children: React.ReactNode[];\n    }\n  > = {};\n  const defaultViewId = (viewManager.views[0] as View).id;\n\n  // Sort children by view id\n  for (const child of children) {\n    // Unless child is a View, position / render as part of the default view\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (isComponent(child) && inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId) as Viewport;\n    const viewState = viewManager.getViewState(viewId);\n\n    // Drop (auto-hide) elements with viewId that are not matched by any current view\n    if (viewport) {\n      viewState.padding = viewport.padding;\n      const {x, y, width, height} = viewport;\n      // Resolve potentially relative dimensions using the deck.gl container size\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  // Render views\n  return Object.keys(views).map(viewId => {\n    const {viewport, children: viewChildren} = views[viewId];\n    const {x, y, width, height} = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n\n    const key = `view-${viewId}`;\n    // If children is passed as an array, React will throw the \"each element in a list needs\n    // a key\" warning. Sending each child as separate arguments removes this requirement.\n    const viewElement = createElement('div', {key, id: key, style}, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue: DeckGLContextValue = {\n        viewport,\n        // @ts-expect-error accessing protected property\n        container: deck.canvas.offsetParent,\n        // @ts-expect-error accessing protected property\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n          // @ts-expect-error accessing protected method\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {key, value: contextValue}, viewElement);\n    }\n\n    return viewElement;\n  });\n}\n","import mapboxgl from \"mapbox-gl\";\r\n\r\nimport { OrbitView, PolygonLayer, COORDINATE_SYSTEM, ArcLayer, DeckGL } from 'deck.gl';\r\nimport { Deck } from '@deck.gl/core';\r\n\r\n\r\nimport {ScatterplotLayer} from '@deck.gl/layers';\r\n\r\nimport {MapboxLayer} from '@deck.gl/mapbox';\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  latitude: 37.8,\r\n  longitude: -122.45,\r\n  zoom: 15\r\n};\r\n\r\nexport class MapboxGLWrapper {\r\n    public map: mapboxgl.Map;\r\n    deckLayer: any;\r\n    constructor(id: string) {\r\n\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n        const divCon = document.getElementById(id);\r\n\r\n        /** Data **/\r\n        const data = [\r\n            { pickup: [-122.42, 37.8], dropoff: [-122.48, 37.76] },\r\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\r\n        ];\r\n        \r\n        /** DeckGL **/\r\n        const map = new DeckGL({\r\n            container: 'id',\r\n            mapboxApiAccessToken: process.env.REACT_APP_MAPBOX,\r\n            mapStyle: 'mapbox://styles/mapbox/dark-v9',\r\n        \r\n            // mapbox: false, /* disable map */\r\n            longitude: -122.45,\r\n            latitude: 37.8,\r\n            zoom: 11,\r\n            pitch: 30,\r\n            layers: [\r\n            new ArcLayer({\r\n                data,\r\n                getSourcePosition: d => d.pickup,\r\n                getTargetPosition: d => d.dropoff,\r\n                getSourceColor: d => [255, 128, 0],\r\n                getTargetColor: d => [0, 128, 255],\r\n                strokeWidth: 5\r\n            })\r\n            ],\r\n            onClick: console.log\r\n        });\r\n  \r\n  \r\n  \r\n        console.log(map)\r\n        \r\n\r\n\r\n\r\n        // this.deckLayer = new MapboxLayer({\r\n        //     id: 'my-scatterplot',\r\n        //     type: ScatterplotLayer,\r\n        //     data: [\r\n        //         {position: [-74.5, 40], size: 10000},\r\n        //         {position: [-74.5, 40.5], size: 5000},\r\n        //         {position: [-74.6, 40.5], size: 5800}\r\n        //     ],\r\n        //     // @ts-ignore\r\n        //     getPosition: d => d.position,\r\n        //     getRadius: d => d.size,\r\n        //     getColor: [255, 255, 0]\r\n        //   });\r\n        \r\n        \r\n        // // this.map\r\n        // // https://account.mapbox.com\r\n        // mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        // this.map = new mapboxgl.Map({\r\n        //     container: id,\r\n        //     zoom: 15,\r\n        //     // minZoom: 10,\r\n        //     center: [-74.5, 40],\r\n        //     style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n        // });\r\n        // this.map.dragRotate.disable();\r\n\r\n        // this.map.on('load', () => {\r\n        //     this.map.addLayer(this.deckLayer, 'waterway-label');\r\n        //   });\r\n\r\n        // // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        // this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        // this.map.on('click', (e) => { this.mouseClick(e); });\r\n        // this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        // this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        // this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n\r\n        // let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        // div.style.position = 'absolute';\r\n        \r\n        // div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        // div.style.display = 'none';\r\n\r\n    }\r\n    public downloadImage = () => {\r\n        const fileName = \"Map.png\";\r\n\r\n        // const canvasMapbox = this.map.getCanvas();\r\n    \r\n        // const { mapGL, deck } = this.state;\r\n        // const mapboxCanvas = this.map.getCanvas(\r\n\r\n        const canvasMapbox =  this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\r\n        console.log(canvasMapbox)\r\n        console.log(this.deckLayer.deck.canvas)\r\n\r\n        // );\r\n        // deck.redraw(true);\r\n        // const deckglCanvas = document.getElementById(\"deck-gl-canvas\");\r\n    \r\n        let merge = document.createElement(\"canvas\");\r\n        merge.width = canvasMapbox.width;\r\n        merge.height = canvasMapbox.height;\r\n    \r\n        var context = merge.getContext(\"2d\");\r\n    \r\n        // context.globalAlpha = 1.0;\r\n        // context.drawImage(canvasMapbox, 0, 0);\r\n        // context.globalAlpha = 1.0;\r\n        context.drawImage(this.deckLayer.deck.canvas, 0, 0);\r\n    \r\n        // merge.toBlob(blob => {\r\n        //     FileSaver.saveAs(blob, fileName);\r\n        // });\r\n        var link = document.createElement('a');\r\n        link.download = 'filename.jpg';\r\n        link.href = merge.toDataURL()\r\n        link.click();\r\n    };\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        // this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        // const p = this.map.unproject({x, y} as any)\r\n        // return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        // const p = this.map.project([lon, lat])\r\n        // return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n        this.downloadImage();\r\n    }\r\n}\r\n\r\n\r\n","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { RendererCanvas } from '../../../lib'\r\n\r\n//  https://raw.githubusercontent.com/NamjuLee/data/master/ThirdPlace/google-thrid-place-LA.json\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public renderer: Renderer;\r\n    constructor(div: HTMLDivElement) {\r\n        this.divHost = div;\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.mapboxWrapper = new MapboxGLWrapper(this.divHost.id);\r\n        // this.mapboxWrapper.mouseDown = this.mouseDown\r\n        // this.mapboxWrapper.mouseUp = this.mouseUp\r\n        // this.mapboxWrapper.mouseClick = this.mouseClick\r\n        // this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        // setTimeout(() => {\r\n        //     this.renderer = new Renderer(this.divHost, this);\r\n        // }, 100);\r\n\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        console.log(e);\r\n        console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\nexport class Renderer extends RendererCanvas {\r\n    public app: Solution\r\n    public time: number = 0.0;\r\n    public pts: number[][] = [];\r\n    constructor(div: any, app: Solution) {\r\n        super(div);\r\n        this.app = app;\r\n        this.canvas.id = 'mapboxCustom'\r\n        this.canvas.style.position = 'absolute';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.style.pointerEvents = 'none';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.pts.push([-71.093161, 42.358871]);\r\n\r\n        this.start();\r\n    }\r\n    public mouseDown = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseUp = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseDrag = (x: number, y: number): void => {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // this.time += 0.1;\r\n\r\n        // for(let i = 0 ; i < this.pts.length; ++i) {\r\n        //     const pt = this.pts[i];\r\n        //     const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\r\n        //     // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\r\n    \r\n        //     ctx.beginPath();\r\n        //     ctx.arc(p[0], p[1], Math.sin(this.time) * 3 + 15, 0, Math.PI * 2);\r\n        //     ctx.closePath();\r\n        //     ctx.fillStyle = '#0f0';\r\n        //     ctx.fill();\r\n        // }\r\n\r\n    }\r\n}"],"names":["window","useLayoutEffect","useEffect","inheritsFrom","Type","ParentType","Object","getPrototypeOf","MAP_STYLE","position","zIndex","evaluateChildren","children","childProps","Array","isArray","map","child","isComponent","props","_child$props","mapStyle","isReactMap","style","cloneElement","componentClass","type","deckGLViewProps","needsDeckGLViewProps","wrapInView","node","createElement","View","React","CANVAS_ONLY_STYLES","mixBlendMode","redrawDeck","thisRef","redrawReason","deck","_drawLayers","DeckGL","forwardRef","ref","version","setVersion","useState","useRef","control","forceUpdate","v","current","containerRef","canvasRef","jsxProps","useMemo","layers","views","reactChildren","jsxLayers","jsxViews","reactElement","ElementType","Layer","layer","LayerType","reactProps","defaultProps","key","createLayer","push","id","view","keys","length","forEach","values","extractJSXLayers","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","_props$onViewStateCha","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","width","height","parent","canvas","_customRender","setProps","DeckClass","Deck","viewports","getViewports","lastRenderedViewports","createDeckInstance","_thisRef$deck","finalize","useIsomorphicLayoutEffect","useImperativeHandle","pickObject","opts","pickMultipleObjects","pickObjects","getRefHandles","currentViewports","isInitialized","undefined","ContextProvider","containerStyle","canvasStyle","left","top","extractStyles","childrenUnderViews","viewManager","defaultViewId","viewId","viewChildren","viewport","getViewport","getViewState","padding","x","y","viewElement","contextValue","container","offsetParent","eventManager","_onViewStateChange","value","positionChildrenUnderViews","MapboxGLWrapper","constructor","deckLayer","downloadImage","canvasMapbox","this","getCanvas","console","log","merge","document","getContext","drawImage","link","download","href","toDataURL","click","center","toMap","toScreen","lon","lat","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","getElementById","mapboxApiAccessToken","process","longitude","latitude","zoom","pitch","ArcLayer","data","pickup","dropoff","getSourcePosition","d","getTargetPosition","getSourceColor","getTargetColor","strokeWidth","onClick","Solution","div","divHost","mapboxWrapper","renderer","mouseDrag","keyDown","k","destroy","lastElementChild","removeChild","Renderer","RendererCanvas","app","super","time","pts","pointerEvents","start","render","ctx"],"sourceRoot":""}