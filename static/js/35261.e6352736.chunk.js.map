{"version":3,"file":"static/js/35261.e6352736.chunk.js","mappings":"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","sources":["njslab/Tools/Concave-3d/index.ts"],"sourcesContent":["import * as THREE from \"three\";\r\nimport { RendererThree } from \"../../../lib\";\r\n\r\n// https://d3js.org/d3-delaunay/delaunay\r\nimport { Delaunay } from \"d3-delaunay\";\r\nimport dat from \"dat.gui\";\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n  pointLight: THREE.PointLight;\r\n\r\n  raycaster = new THREE.Raycaster();\r\n  mouse = new THREE.Vector2();\r\n  m = new THREE.Vector3();\r\n\r\n  sphere: THREE.Mesh;\r\n\r\n  obj: THREE.Mesh[] = [];\r\n\r\n  private points: THREE.Vector3[] = [];\r\n  private delaunay: Delaunay<[number, number, number]>;\r\n\r\n  private geometry: THREE.BufferGeometry;\r\n  private material: THREE.MeshBasicMaterial;\r\n  private mesh: THREE.Mesh;\r\n\r\n  private pointGeometry: THREE.SphereGeometry;\r\n  private pointMaterial: THREE.MeshBasicMaterial;\r\n  private dummy: THREE.Object3D;\r\n\r\n  private pointsMesh: THREE.InstancedMesh;\r\n\r\n  gui: dat.GUI;\r\n  params: any;\r\n\r\n  constructor(id: string = \"main\") {\r\n    super(id);\r\n\r\n    const ambientLight = new THREE.AmbientLight(0x555555);\r\n    this.scene.add(ambientLight);\r\n\r\n    this.pointLight = new THREE.PointLight(0xffffff, 100);\r\n    this.pointLight.position.x = 10;\r\n    this.pointLight.castShadow = true;\r\n    this.scene.add(this.pointLight);\r\n\r\n    const axis = new THREE.AxesHelper(5);\r\n    axis.position.y = 0.001;\r\n    this.scene.add(axis);\r\n    this.scene.add(new THREE.GridHelper(10, 10));\r\n\r\n\r\n    this.gui = new dat.GUI();\r\n    this.params = {\r\n        numPoints: 100,\r\n        k: 2\r\n    };\r\n\r\n    this.gui.add(this.params, 'numPoints', 10, 500).step(1).name('Number of Points');\r\n    this.gui.add(this.params, 'k', 3, 20).step(1).name('K (Concavity)');\r\n\r\n  \r\n\r\n    this.initPost();\r\n\r\n    this.start();\r\n  }\r\n  public initPost() {\r\n\r\n    let pointCloud, hullLines;\r\n\r\n    const drawPointCloudAndHull = () => {\r\n        // 기존 객체 제거\r\n        if (pointCloud) this.scene.remove(pointCloud);\r\n        if (hullLines) this.scene.remove(hullLines);\r\n    \r\n        const points = generateRandomPoints3D(this.params.numPoints, 2, 2, 2);\r\n        const hull = generateConcaveHull3D(points, this.params.k);\r\n    \r\n        // 점 구름 그리기\r\n        const geometry = new THREE.BufferGeometry();\r\n        const positions = new Float32Array(points.length * 3);\r\n        points.forEach((point, i) => {\r\n            positions[i * 3] = point.x;\r\n            positions[i * 3 + 1] = point.y;\r\n            positions[i * 3 + 2] = point.z;\r\n        });\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        const material = new THREE.PointsMaterial({ color: 0x0000ff, size: 0.1 });\r\n        pointCloud = new THREE.Points(geometry, material);\r\n        this.scene.add(pointCloud);\r\n    \r\n        // Hull 그리기\r\n        const hullGeometry = new THREE.BufferGeometry();\r\n        const hullPositions = new Float32Array(hull.length * 3);\r\n        hull.forEach((point, i) => {\r\n            hullPositions[i * 3] = point.x;\r\n            hullPositions[i * 3 + 1] = point.y;\r\n            hullPositions[i * 3 + 2] = point.z;\r\n        });\r\n        hullGeometry.setAttribute('position', new THREE.BufferAttribute(hullPositions, 3));\r\n        const hullMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 });\r\n        hullLines = new THREE.LineLoop(hullGeometry, hullMaterial);\r\n        this.scene.add(hullLines);\r\n    }\r\n\r\n    drawPointCloudAndHull()\r\n    // this.gui.onChange(drawPointCloudAndHull);\r\n  }\r\n\r\n  private createPointsMesh(): void {\r\n    this.pointsMesh = new THREE.InstancedMesh(this.pointGeometry, this.pointMaterial, this.points.length);\r\n    this.updatePointsMesh();\r\n  }\r\n\r\n  private updatePointsMesh(): void {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.dummy.position.copy(this.points[i]);\r\n      this.dummy.updateMatrix();\r\n      this.pointsMesh.setMatrixAt(i, this.dummy.matrix);\r\n    }\r\n    this.pointsMesh.instanceMatrix.needsUpdate = true;\r\n  }\r\n\r\n  private generatePoints(): void {\r\n    for (let i = 0; i < 50; i++) {\r\n      this.points.push(\r\n        new THREE.Vector3(\r\n          Math.random() * 4 - 2,\r\n          Math.random() * 4 - 2,\r\n          Math.random() * 1 - 0.5,\r\n        )\r\n      );\r\n    }\r\n  }\r\n  private updatePoints(): void {\r\n    for (let point of this.points) {\r\n      point.x += (Math.random() - 0.5) * 0.01;\r\n      point.y += (Math.random() - 0.5) * 0.01;\r\n      point.z += (Math.random() - 0.5) * 0.01;\r\n    }\r\n  }\r\n\r\n  public add(object: THREE.Mesh, picking = true) {\r\n    this.scene.add(object);\r\n    if (picking) {\r\n      this.obj.push(object);\r\n    }\r\n  }\r\n  public mouseMove(e: MouseEvent): void {\r\n    this.picking(e);\r\n  }\r\n  public picking(e: MouseEvent) {\r\n    this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\r\n    this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\r\n\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n\r\n    // Calculate objects intersecting the picking ray\r\n    const intersects = this.raycaster.intersectObjects(this.obj);\r\n\r\n    if (intersects.length > 0) {\r\n      this.m.set(\r\n        intersects[0].point.x,\r\n        intersects[0].point.y,\r\n        intersects[0].point.z\r\n      );\r\n      // console.log(intersects[0]); // This will give you the first object intersected\r\n\r\n      // console.log(this.m);\r\n\r\n      if (intersects[0].object !== this.sphere) {\r\n        this.sphere.position.set(\r\n          intersects[0].point.x,\r\n          intersects[0].point.y,\r\n          intersects[0].point.z\r\n        );\r\n      }\r\n      return intersects;\r\n    }\r\n    return undefined;\r\n  }\r\n  public mouseClick(e: MouseEvent): void {\r\n    const mesh = this.picking(e);\r\n    if (mesh) {\r\n      // console.log({mesh})\r\n    }\r\n  }\r\n\r\n  public update(scene: THREE.Scene) {\r\n\r\n    \r\n    // this.updatePoints();\r\n    // this.updatePointsMesh();\r\n\r\n    // this.delaunay = updateDelaunay(this.points, this.delaunay);\r\n\r\n    // createDelaunayMesh(this.geometry, this.points, this.delaunay);\r\n\r\n\r\n\r\n\r\n   \r\n  }\r\n  public destroy() {\r\n    this.gui.destroy()\r\n    while (this.hostDiv.lastElementChild) {\r\n      this.hostDiv.removeChild(this.hostDiv.lastElementChild);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst updateDelaunay = (points, delaunay) => {\r\n    const pointsArray = points.map(\r\n      (p) => [p.x, p.y, p.z] as [number, number, number]\r\n    );\r\n    return delaunay = Delaunay.from(pointsArray as any);\r\n}\r\n\r\nconst createDelaunayMesh = (geometry, points, delaunay ) => {\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n      positions.push(points[i].x, points[i].y, points[i].z);\r\n    }\r\n\r\n    for (let i = 0; i < delaunay.triangles.length; i += 3) {\r\n      indices.push( delaunay.triangles[i], delaunay.triangles[i + 1], delaunay.triangles[i + 2]);\r\n    }\r\n\r\n    const voronoi = delaunay.voronoi([0, 0, 640, 480]);\r\n    // console.log({voronoi, delaunay})\r\n\r\n\r\n    geometry.setAttribute( \"position\", new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setIndex(indices);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Point3D {\r\n  constructor(x, y, z) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n  }\r\n}\r\n\r\nfunction generateRandomPoints3D(numPoints, maxX, maxY, maxZ) {\r\n  return Array.from({length: numPoints}, () => new Point3D(\r\n      Math.random() * maxX - maxX/2,\r\n      Math.random() * maxY - maxY/2,\r\n      Math.random() * maxZ - maxZ/2\r\n  ));\r\n}\r\n\r\nfunction distance3D(a, b) {\r\n  return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2 + (a.z - b.z) ** 2);\r\n}\r\n\r\nfunction findNearestNeighbors3D(point, points, k) {\r\n  return points\r\n      .filter(p => p !== point)\r\n      .sort((a, b) => distance3D(point, a) - distance3D(point, b))\r\n      .slice(0, k);\r\n}\r\n\r\nfunction calculateAngle3D(a, b, c) {\r\n  const ab = new THREE.Vector3(b.x - a.x, b.y - a.y, b.z - a.z);\r\n  const bc = new THREE.Vector3(c.x - b.x, c.y - b.y, c.z - b.z);\r\n  return ab.angleTo(bc);\r\n}\r\n\r\nfunction generateConcaveHull3D(points, k) {\r\n  if (points.length < 4) return points;\r\n\r\n  // 시작점 찾기 (z 좌표가 가장 작은 점)\r\n  let start = points.reduce((min, p) => p.z < min.z ? p : min);\r\n  let hull = [start];\r\n  let current = start;\r\n  let previous = new Point3D(current.x - 1, current.y, current.z);  // 가상의 이전 점\r\n\r\n  do {\r\n      let neighbors = findNearestNeighbors3D(current, points, k);\r\n      let next = neighbors[0];\r\n      \r\n      for (let i = 1; i < neighbors.length; i++) {\r\n          let angle = calculateAngle3D(previous, current, neighbors[i]);\r\n          if (angle > calculateAngle3D(previous, current, next)) {\r\n              next = neighbors[i];\r\n          }\r\n      }\r\n\r\n      if (next === start) break;  // 시작점으로 돌아왔으면 종료\r\n\r\n      hull.push(next);\r\n      previous = current;\r\n      current = next;\r\n  } while (current !== start);\r\n\r\n  return hull;\r\n}"],"names":["Solution","RendererThree","constructor","super","pointLight","raycaster","THREE","mouse","m","sphere","obj","points","delaunay","geometry","material","mesh","pointGeometry","pointMaterial","dummy","pointsMesh","gui","params","ambientLight","this","scene","add","position","x","castShadow","axis","y","dat","numPoints","k","step","name","initPost","start","pointCloud","hullLines","remove","maxX","maxY","maxZ","Array","from","length","Point3D","Math","random","hull","reduce","min","p","z","current","previous","neighbors","findNearestNeighbors3D","next","i","calculateAngle3D","push","generateConcaveHull3D","positions","Float32Array","forEach","point","setAttribute","color","size","hullGeometry","hullPositions","hullMaterial","drawPointCloudAndHull","createPointsMesh","updatePointsMesh","copy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","generatePoints","updatePoints","object","picking","mouseMove","e","offsetX","renderer","domElement","clientWidth","offsetY","clientHeight","setFromCamera","camera","intersects","intersectObjects","set","mouseClick","update","destroy","hostDiv","lastElementChild","removeChild","distance3D","a","b","sqrt","filter","sort","slice","c","ab","bc","angleTo"],"sourceRoot":""}