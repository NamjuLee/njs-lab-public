{"version":3,"file":"static/js/709.6a90dc1a.chunk.js","mappings":"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","sources":["njslab/Env/NNA/View/NWindow/Core/Controller.ts","njslab/Env/NNA/View/NWindow/Core/Builder.ts","njslab/Env/NNA/View/NWindow/NWindow.ts","njslab/Env/NNA/Environment/JSAPI/IO/IO.ts","njslab/Env/NNA/Environment/JSAPI/Core/ArcGIS.ts","njslab/Env/NNA/Environment/JSAPI/Core/Projection.ts","njslab/Env/NNA/Environment/JSAPI/Core/Canvas.ts","njslab/Env/NNA/Environment/JSAPI/Core/EventInteraction.ts","njslab/Env/NNA/Environment/JSAPI/Renderer/Renderer.ts","njslab/Env/NNA/Environment/JSAPI/index.ts","njslab/Env/NNA/NJSCore/Utility/MathUtility.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/View/GraphView/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/View/HTMLView.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Controller/Controller.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GeneticAlgorithm/Core/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GeneticAlgorithm/GeneticAlgorithm.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GASystem.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/Analysis/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Graph.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Edge.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Node.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Tree/Tree.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphUtility/GraphUtility.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/RendererGraph/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/BoidsPath.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/Boid.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/BoidsBehaviors.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/VoxelSystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/Core.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/IO/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandBase.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/Collision.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Point/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/GeometryBase.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandShape.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Projection/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/IO/IO.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/GeometryCommon.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollsionBasedGraph/Core/PointCluster.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollsionBasedGraph/Core/Renderer.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollsionBasedGraph/Core/GraphClustering.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollsionBasedGraph/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Addon/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Renderer/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Scene/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/index.ts","njslab/Env/NNA/Application/Binding/BindingNNA.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/lib/enum.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemScreen.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemDynamic.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/index.ts"],"sourcesContent":["import { NWindow } from '../NWindow';\r\nexport class Controller {\r\n    window: NWindow;\r\n    constructor(window: NWindow){\r\n        this.window = window;\r\n    }\r\n    public addIconTopPanel(param: {text: string, callBack: () => void, width: number }){\r\n        let btn = document.createElement('button');\r\n        // btn.style.height = '70px';\r\n        btn.style.width = `${param.width}px`;\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.style.border = 'none';\r\n        btn.textContent = param.text;\r\n        btn.onclick = () => param.callBack();\r\n        this.window.builder.divFulldownArea.appendChild(btn);\r\n    }\r\n    public addToggleTopPanel(param: {text: string, callBack: () => void, width: number }){\r\n        let btn = document.createElement('button');\r\n        // btn.style.height = '70px';\r\n        btn.style.width = `${param.width}px`;\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.style.border = 'none';\r\n        btn.textContent = param.text;\r\n        btn.onclick = () => param.callBack();\r\n        this.window.builder.divFulldownArea.appendChild(btn);\r\n    }\r\n    public addIconLeftPanel(param: {text: string, callBack: () => void }){\r\n        let btn = document.createElement('button');\r\n        btn.style.height = '50px';\r\n        btn.style.width = '50px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.style.border = 'none';\r\n        btn.style.color = '#000000';\r\n        btn.style.background = '#fafafa';\r\n        btn.textContent = param.text;\r\n        btn.onclick = () => param.callBack();\r\n        btn.onmouseenter = () => {\r\n            btn.style.color = '#ffffff';\r\n            btn.style.background = '#888888';\r\n        }\r\n        btn.onmouseleave = () => {\r\n            btn.style.color = '#000000';\r\n            btn.style.background = '#fafafa';\r\n        }\r\n        this.window.builder.divLeftUI.appendChild(btn);\r\n    }\r\n    public addIconLeft(){\r\n\r\n    }\r\n}","\r\nimport { NWindow } from '../NWindow';\r\nexport class Builder {\r\n    window: NWindow;\r\n\r\n    divMain: HTMLDivElement;\r\n\r\n    \r\n    divMainBody: HTMLElement;\r\n    divTopArea: HTMLElement;\r\n    divFulldownArea: HTMLElement;\r\n    divLeftUI: HTMLElement;\r\n    divBottomArea: HTMLElement;\r\n\r\n    divForGraphicContext: HTMLElement;\r\n\r\n    private colorTopMenu = '#dfdfdf';\r\n    private colorBGmenu = '#f3f3f3';\r\n\r\n    constructor(window: NWindow){\r\n        this.window = window;\r\n    }\r\n\r\n    public initPanel(titleString: string) {\r\n        \r\n        this.initDivMain();\r\n        this.initDivTopArea();\r\n        this.initDivFulldownArea();\r\n\r\n        const box = document.createElement('div');\r\n        box.style.float = 'left';\r\n        box.style.height = '100%';\r\n        box.style.padding = '10px';\r\n        box.style.background = '#ff0000';\r\n        this.divTopArea.appendChild(box);\r\n\r\n        const title = document.createElement('div');\r\n        title.style.float = 'left';\r\n        title.style.padding = '10px';\r\n        title.textContent = titleString;\r\n        this.divTopArea.appendChild(title);\r\n\r\n        this.initDivContextArea();\r\n        this.initDivLeftArea();\r\n\r\n        this.divForGraphicContext = document.createElement('div');\r\n        this.divForGraphicContext.style.height = '100%';\r\n        this.divForGraphicContext.id = 'divForGraphicContext';\r\n        this.divMainBody.appendChild( this.divForGraphicContext);\r\n\r\n        \r\n        const closeBtn = document.createElement('button');\r\n        closeBtn.style.top = '0px';\r\n        closeBtn.style.left = '0px';\r\n        closeBtn.style.height = '20px';\r\n        closeBtn.style.width = '20px';\r\n        closeBtn.style.zIndex = '13';\r\n        closeBtn.style.float = 'right';\r\n        // closeBtn.style.position = 'absolute';\r\n        closeBtn.style.padding = '0px';\r\n        closeBtn.style.zIndex = '20';\r\n        // closeBtn.style.background = '#ff0000';\r\n        // closeBtn.style.color = '#ffffff';\r\n        closeBtn.textContent = 'X'\r\n        closeBtn.onclick = () => {\r\n            this.window.remove();\r\n        };\r\n        this.divTopArea.appendChild(closeBtn);\r\n\r\n        this.initBottomArea(this.divMain);\r\n\r\n\r\n\r\n        const bottomToolbarArea = document.createElement('div');\r\n        // bottomToolbarArea.style.background = '#ff0000';\r\n        bottomToolbarArea.style.height = '100%';\r\n        bottomToolbarArea.style.width = '100px';\r\n        bottomToolbarArea.style.float = 'left';\r\n        this.divBottomArea.appendChild(bottomToolbarArea);\r\n\r\n\r\n        const bottomTextarea = document.createElement('div');\r\n        // bottomTextarea.style.background = '#0ff0f0';\r\n        bottomTextarea.style.height = '100%';\r\n        bottomTextarea.style.width = '80%';\r\n        bottomTextarea.style.float = 'left';\r\n        this.divBottomArea.appendChild(bottomTextarea);\r\n\r\n\r\n    }\r\n    public initDivTopArea(){\r\n        let top = document.createElement('div');\r\n        top.style.width = '100%';\r\n        top.style.height = '40px';\r\n        top.style.background = this.colorTopMenu; // \r\n        // top.style.position = 'relative';\r\n        top.style.zIndex = '11';\r\n        // top.style.padding = '5px';\r\n        // top.textContent = 'NNA V3 controller'\r\n\r\n        let isPressed = false;\r\n        let prePos: number[] = [0 , 0];\r\n\r\n        top.ondrag = (e: MouseEvent) => {\r\n            // console.log('reall?', e);\r\n        }\r\n        top.onmouseenter = (e: MouseEvent ) => {\r\n            // console.log('onmouseenter?', e);\r\n        }\r\n        top.ondrag = (e: MouseEvent ) => {\r\n            // console.log('ondrag?', e);\r\n        }\r\n        top.onmousemove = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n                // console.log(xOff, yOff);\r\n                // console.log(+hostDiv.style.top);\r\n                // console.log(hostDiv.clientLeft, parseFloat(hostDiv.style.left));\r\n                this.divMain.style.top = parseFloat(this.divMain.style.top) + yOff +'px';\r\n                this.divMain.style.left = parseFloat(this.divMain.style.left) + xOff +'px';\r\n                // console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        top.onmousedown = (e: MouseEvent ) => {\r\n            // console.log('down', e);\r\n            prePos[0] = e.clientX;\r\n            prePos[1] = e.clientY;\r\n            isPressed = true;\r\n            this.window.updateZindex();\r\n        }\r\n        top.onmouseup = (e: MouseEvent ) => {\r\n            // console.log('up', e);\r\n            isPressed = false;\r\n        }\r\n        top.onmouseout = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                // console.log('onmouseout', e);\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n                // console.log(xOff, yOff);\r\n                // console.log(+hostDiv.style.top);\r\n                // console.log(hostDiv.clientLeft, parseFloat(hostDiv.style.left));\r\n                this.divMain.style.top = parseFloat(this.divMain.style.top) + yOff +'px';\r\n                this.divMain.style.left = parseFloat(this.divMain.style.left) + xOff +'px';\r\n                // console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        this.divTopArea = top;\r\n        this.divMain.appendChild(top);\r\n    }\r\n    public appendCloseTop() {\r\n\r\n    }\r\n\r\n    public initBottomArea(hostDiv: HTMLElement) {\r\n\r\n        let bootom = document.createElement('div');\r\n        bootom.style.top = parseFloat(hostDiv.style.height) - parseFloat(hostDiv.style.top) - 10 + 'px';\r\n        // top.style.left = parseFloat(hostDiv.style.width) - parseFloat(hostDiv.style.left) - 20 + 'px';\r\n        bootom.style.width = '100%';\r\n        bootom.style.height = '40px';\r\n        bootom.style.background = this.colorBGmenu;\r\n        // top.style.position = 'relative';\r\n        bootom.style.zIndex = '11';\r\n        // top.style.padding = '5px';\r\n        // top.textContent = 'L'\r\n\r\n        let isPressed = false;\r\n        let prePos: number[] = [0 , 0];\r\n\r\n        bootom.ondrag = (e: MouseEvent) => {\r\n            // console.log('reall?', e);\r\n        }\r\n        bootom.onmouseenter = (e: MouseEvent ) => {\r\n            // console.log('onmouseenter?', e);\r\n        }\r\n        bootom.ondrag = (e: MouseEvent ) => {\r\n            // console.log('ondrag?', e);\r\n        }\r\n        bootom.onmousemove = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n\r\n                hostDiv.style.width = parseFloat(hostDiv.style.width) + xOff + 'px';\r\n                hostDiv.style.height = parseFloat(hostDiv.style.height) + yOff + 'px';\r\n\r\n                // console.log('drgggg?', e, hostDiv.style.height);\r\n\r\n                bootom.style.top = parseFloat(bootom.style.top) + yOff + 'px';\r\n                bootom.style.left = parseFloat(bootom.style.left) + xOff + 'px';\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        bootom.onmousedown = (e: MouseEvent ) => {\r\n            // console.log('down', e);\r\n            prePos[0] = e.clientX;\r\n            prePos[1] = e.clientY;\r\n            isPressed = true;\r\n        }\r\n        bootom.onmouseup = (e: MouseEvent ) => {\r\n            // console.log('up', e);\r\n            isPressed = false;\r\n        }\r\n        bootom.onmouseout = (e: MouseEvent ) => {\r\n\r\n            // @ts-ignore\r\n            this.window.updateResize = setTimeout(() => {\r\n                if (isPressed) {\r\n                    // console.log('onmouseout', e);\r\n                    const xOff = e.clientX - prePos[0];\r\n                    const yOff = e.clientY - prePos[1];\r\n                    hostDiv.style.width = parseFloat(hostDiv.style.width) + xOff + 'px';\r\n                    hostDiv.style.height = parseFloat(hostDiv.style.height) + yOff + 'px';\r\n                    // console.log(hostDiv.style.width)\r\n    \r\n                    bootom.style.top = parseFloat(bootom.style.top) + yOff + 'px';\r\n                    bootom.style.left = parseFloat(bootom.style.left) + xOff + 'px';\r\n    \r\n                    prePos[0] = e.clientX;\r\n                    prePos[1] = e.clientY;\r\n                }\r\n            }, 300);\r\n\r\n            if (isPressed) {\r\n                // console.log('onmouseout', e);\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n                hostDiv.style.width = parseFloat(hostDiv.style.width) + xOff + 'px';\r\n                hostDiv.style.height = parseFloat(hostDiv.style.height) + yOff + 'px';\r\n                // console.log(hostDiv.style.width)\r\n\r\n                bootom.style.top = parseFloat(bootom.style.top) + yOff + 'px';\r\n                bootom.style.left = parseFloat(bootom.style.left) + xOff + 'px';\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n\r\n        }\r\n        this.divBottomArea = bootom;\r\n        hostDiv.appendChild(bootom);\r\n\r\n\r\n    }\r\n    public initDivMain(){\r\n        this.divMain = document.createElement('div');\r\n        this.divMain.style.width = `${this.window.width}px`;\r\n        this.divMain.style.height = `${this.window.height}px`;\r\n        // this.divMain.style.background = '#000000';\r\n        this.divMain.style.position = 'absolute';\r\n        this.divMain.style.zIndex = '10';\r\n        this.divMain.id = 'NWindow';\r\n\r\n        this.divMain.style.top = '100px'; //this.HTMLView.app.definition.app.divHost.style.top + 'px';\r\n        this.divMain.style.left = '200px'; // = this.HTMLView.app.definition.app.divHost.clientWidth + 'px';\r\n\r\n        this.window.divHost.appendChild(this.divMain);\r\n        \r\n    }\r\n    public initDivFulldownArea(){\r\n        this.divFulldownArea = document.createElement('div');\r\n        this.divFulldownArea.style.height = '50px';\r\n        this.divFulldownArea.style.width = '100%';\r\n        this.divFulldownArea.style.background = this.colorBGmenu;\r\n        // divUI.style.position = 'absolute';\r\n\r\n        this.divMain.appendChild(this.divFulldownArea);\r\n    }\r\n    public initDivContextArea(){\r\n        this.divMainBody = document.createElement('div');\r\n        this.divMainBody.style.height = '100%';\r\n        this.divMainBody.style.width = '100%';\r\n        // this.divMainBody.style.background = '#ff0000'; // this.colorBGmenu;\r\n        // this.divMainBody.style.position = 'absolute';\r\n        // this.divMainBody.style.position = 'relative';\r\n        this.divMainBody.id = 'divContext';\r\n        this.divMainBody = this.divMainBody;\r\n        this.divMain.appendChild(this.divMainBody);\r\n    }\r\n    public initDivLeftArea() {\r\n        this.divLeftUI = document.createElement('div');\r\n        this.divLeftUI.style.height = '100%';\r\n        this.divLeftUI.style.width = '100px';\r\n        this.divLeftUI.style.background = this.colorBGmenu;\r\n        this.divLeftUI.style.float = 'left';\r\n\r\n        this.divMainBody.appendChild( this.divLeftUI);\r\n    }\r\n}\r\n","import { Controller } from './Core/Controller';\r\nimport { Builder } from './Core/Builder';\r\nexport class NWindow {\r\n\r\n    divHost: HTMLElement;\r\n    // div: HTMLElement;\r\n    \r\n    updateResize: number;\r\n\r\n\r\n    width: number = 600;\r\n    height: number = 400;\r\n\r\n    // colorBGmenu = '#f9f9f9';\r\n\r\n    controller: Controller;\r\n    builder: Builder;\r\n\r\n    constructor(divHost: HTMLElement, title = 'NJS Sandbox', width: number = 600, height: number = 400) {\r\n        this.divHost = divHost;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.controller = new Controller(this);\r\n        this.builder = new Builder(this);\r\n        this.builder.initPanel(title);\r\n    }\r\n    public addIconTopPanel(param: {text: string, callBack: () => void, width: number }){\r\n        this.controller.addIconTopPanel(param);\r\n    }\r\n    public addToggleTopPanel(param: {text: string, callBack: () => void, width: number }){\r\n        this.controller.addToggleTopPanel(param);\r\n    }\r\n    public addIconLeftPanel(param: {text: string, callBack: () => void }){\r\n        this.controller.addIconLeftPanel(param);\r\n    }\r\n    public addIconLeft(){\r\n        this.controller.addIconLeft();\r\n    }\r\n    public getContext(){\r\n        return this.builder.divForGraphicContext;\r\n    }\r\n    public remove(){\r\n        // this.HTMLView.networkUI = undefined;\r\n        this.divHost.removeChild(this.builder.divMain);\r\n    }\r\n    public updateZindex(){\r\n        // console.log('z index');\r\n    }\r\n    \r\n}","import { JSAPIEnv } from '../';\r\n\r\nexport class IO {\r\n    app: JSAPIEnv;\r\n    constructor(app: JSAPIEnv) {\r\n        this.app = app;\r\n        this.OpenGeoJsonEx01('');\r\n    }\r\n    public async OpenGeoJsonEx01(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        // let file = 'data.txt';\r\n        // return fetch(`${NJSLoader.path}/json/${file}`)\r\n        // return fetch(file)\r\n        //     .then((response: Response) => {\r\n        //         return response.text();\r\n        //     })\r\n        //     // tslint:disable-next-line:no-any\r\n        //     .then((d: any) => {\r\n        //         console.log(d);\r\n        //         // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n        //     })\r\n        //     .catch((err: Error) => {\r\n        //         console.log(err);\r\n        //     });\r\n    }\r\n}","import {JSAPIEnv} from '..';\r\n\r\nexport class ArcGIS {\r\n\r\n    app: JSAPIEnv;\r\n    constructor(app: JSAPIEnv) {\r\n        this.app = app;\r\n        this.AppendMapViewEvent();\r\n    }\r\n    public AppendMapViewEvent() {\r\n        this.app.mapView.watch('extent', () => {\r\n            // console.log('extent')\r\n            //\r\n        });\r\n        this.app.mapView.watch('stationary', (e: boolean) => {\r\n            // console.log('stationary', e)\r\n            this.app.renderer.isPanning = !e;\r\n            //\r\n        });\r\n        this.app.mapView.watch('ready', (e: boolean) => {\r\n            // console.log(e);\r\n        });\r\n        this.app.mapView.on('resize', (e: any) => {\r\n            this.app.canvas.ResizeCanvas(e.width, e.height);\r\n            // console.log('resize', e.width, e.height)\r\n        });\r\n        // this.mapView.on('watch', (e: {}) => {\r\n        //   // this.app.ACController.ResizeCanvas(e.width, e.height);\r\n        //   console.log(e, 'dd');\r\n        // });\r\n    }\r\n}","import {JSAPIEnv} from '..';\r\n\r\nexport class Projection {\r\n    // static mercatorProjection: MercatorProjection;\r\n    app: JSAPIEnv\r\n    constructor(App: JSAPIEnv) {\r\n        // MercatorProjection.mercatorProjection = this;\r\n        // this.type = PROJECTION_TYPE.MERCATOR;\r\n        this.app = App;\r\n    }\r\n    // x = screenX \r\n    // y = screenY\r\n    // .....\r\n    // webM x\r\n    // webMercator\r\n    ToMap = (x: number, y: number): number[] => {\r\n        // console.log(this.app.mapView.toMap);\r\n        // console.log('----', x, y);\r\n        // this.app.sPoint.x = x;\r\n        // this.app.sPoint.y = y;\r\n\r\n        let mp = this.app.mapView.toMap({ x: x, y: y }).clone();\r\n        // console.log(mp);\r\n        return [mp.longitude, mp.latitude, mp.x, mp.y];\r\n        // return [this.app.nGraphics.mPoint.longitude, this.app.nGraphics.mPoint.latitude];\r\n        //  return [-1,-1]; \r\n    }\r\n    ToScreen = (long: number, lat: number): number[] => {\r\n        // console.log(long, lat);\r\n        this.app.mPoint.longitude = long; this.app.mPoint.latitude = lat;\r\n        this.app.mPoint.spatialReference = this.app.mapView.spatialReference;\r\n        // this.app.mPoint.spatialReference.wkid = 102100;\r\n        // console.log(this.app.mPoint);\r\n        let p = this.app.mapView.toScreen(this.app.mPoint);\r\n        // console.log(p);\r\n        return [p.x, p.y]; // screen X Y\r\n        //  return [-1,-1];\r\n\r\n    }\r\n    ToScreenFromProjected(long: number, lat: number): number[] {\r\n        // console.log(long, lat);\r\n        this.app.mPoint.x = long; this.app.mPoint.y = lat;\r\n        this.app.mPoint.spatialReference = this.app.mapView.spatialReference;\r\n        // this.app.mPoint.spatialReference.wkid = 102100;\r\n        // console.log(this.app.mPoint);\r\n        let p = this.app.mapView.toScreen(this.app.mPoint);\r\n        // console.log(p);\r\n        return [p.x, p.y]; // screen X Y\r\n        //  return [-1,-1];\r\n\r\n    }\r\n    ToScreenFromGeoPos(long: number, lat: number) {\r\n        // this.app.nGraphics.mPoint.longitude = long; this.app.nGraphics.mPoint.latitude = lat;\r\n        // // this.app.nGraphics.mPoint.spatialReference.wkid = 102100;\r\n        // let p = this.app.nGraphics.mapView.toScreen(this.app.nGraphics.mPoint);\r\n        // // console.log(p);\r\n        // return [p.x, p.y];\r\n\r\n        let mp = this.app.mapView.toMap({ x: long, y: lat }).clone();\r\n        // mp.spatialReference.wkid = 102100;\r\n        mp.longitude = long;\r\n        mp.latitude = lat;\r\n        let p = this.app.mapView.toScreen(mp);\r\n        return [p.x, p.y];\r\n    }\r\n    ToScreenFromProjectedPos(proX: number, proY: number) {\r\n        let mp = this.app.mapView.toMap({ x: proX, y: proY }).clone();\r\n        let p = this.app.mapView.toScreen(mp);\r\n        return [p.x, p.y];\r\n    }\r\n    ToScreenOld(x: number, y: number) {\r\n        let mp = this.app.mapView.toMap({ x: x, y: y }).clone();\r\n        mp.spatialReference.wkid = 102100;\r\n        mp.longitude = x;\r\n        mp.latitude = y;\r\n        let p = this.app.mapView.toScreen(mp);\r\n        // console.log(x, y);\r\n        // console.log(p.x, p.y);\r\n        return [p.x, p.y];\r\n    }\r\n}","import {JSAPIEnv} from '..';\r\n\r\nexport class Canvas {\r\n    t: number;\r\n    frameRate: number;\r\n    canvas: HTMLCanvasElement;\r\n    hostDiv: HTMLElement;\r\n    id: string;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    xOff: number;\r\n    yOff: number;\r\n    xOffCurrent: number;\r\n    yOffCurrent: number;\r\n    xOffPre: number;\r\n    yOffPre: number;\r\n    zoomFactor: number;\r\n    zoomFactorPre: number;\r\n    zoomFactorCurrent: number;\r\n    div3d: HTMLDivElement;\r\n\r\n    smoothingEnabled: boolean = true;\r\n    // theContext: CanvasRenderingContext2D;\r\n\r\n    dropRate: number;\r\n    isRenderSkip: boolean;\r\n    isLoop: boolean;\r\n    timeLastRender: number;\r\n    delta: number;\r\n    now: number;\r\n    then: number = 0;\r\n    interval: number = 0;\r\n    last: number = 0;\r\n\r\n    frameVisTimer: number;\r\n    theDate: Date;\r\n\r\n    asyncSafeGuard: number = 0;\r\n    App: JSAPIEnv;\r\n\r\n    constructor(App: JSAPIEnv) {\r\n        this.App = App;\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.id = 'App';\r\n        this.canvas.style.zIndex = '1';\r\n        this.canvas.style.position = 'absolute';\r\n        this.canvas.style.pointerEvents = 'none';\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        App.divHost.appendChild(this.canvas);\r\n        this.ctx.globalCompositeOperation = 'source-over';\r\n        this.canvas.width = App.divHost.clientWidth;\r\n        this.canvas.height = App.divHost.clientHeight;\r\n        this.Start(this.ctx);\r\n    }\r\n    Start(ctx: CanvasRenderingContext2D) {\r\n        this.App.renderer.Init(ctx);\r\n        this.Draw(this.ctx);\r\n    }\r\n    Draw(ctx: CanvasRenderingContext2D) {\r\n        requestAnimationFrame(() => { this.Draw(ctx); });\r\n\r\n        this.Clear(ctx);\r\n        this.Render(ctx);\r\n        // console.log('lpop');\r\n        // console.log(this);\r\n\r\n    }\r\n    Clear(ctx: CanvasRenderingContext2D) {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        this.App.renderer.Render(ctx);\r\n        // for (let i = 0; i < this.rendererArray.length; ++i) { this.rendererArray[i].Render(ctx); }\r\n    }\r\n    ResizeCanvas(width: number, height: number) {\r\n        this.ctx.canvas.width = width;\r\n        this.ctx.canvas.height = height;\r\n    }\r\n\r\n} ","import { JSAPIEnv } from '..';\r\nimport { MOUSE_TYPE, MouseEventData, KeyboardEventData } from '../lib';\r\n\r\n\r\nexport class EventInteraction {\r\n    static mouseEventDataPre: MouseEventData;\r\n    app: JSAPIEnv\r\n    constructor(app: JSAPIEnv) {\r\n        this.app = app;\r\n        EventInteraction.mouseEventDataPre = new MouseEventData();\r\n        this.InitArcGISMapEventV4x();\r\n    }\r\n    public InitArcGISMapEventV4x() {\r\n        this.app.mapView.on('click', (e: any) => {\r\n            const ev = this.CommonEventBuilderArcGIS(e);\r\n            // console.log('------------', e.native.button);\r\n            ev.type = MOUSE_TYPE.LEFT;\r\n            if(e.native.button == 2) {\r\n                ev.type = MOUSE_TYPE.RIGHT\r\n            } else if(e.native.button == 1) {\r\n                ev.type = MOUSE_TYPE.MIDDLE\r\n            }\r\n            // console.log(ev.type)\r\n            this.app.MouseEvent(ev);\r\n        });\r\n        this.app.mapView.on('pointer-down', (e: any) => {\r\n            const ev = this.CommonEventBuilderArcGIS(e);\r\n            ev.type = MOUSE_TYPE.DOWN;\r\n            this.app.MouseEvent(ev);\r\n        });\r\n        this.app.mapView.on('pointer-up', (e: any) => {\r\n            const ev = this.CommonEventBuilderArcGIS(e);\r\n            ev.type = MOUSE_TYPE.UP;\r\n            this.app.MouseEvent(ev);\r\n        });\r\n        this.app.mapView.on('pointer-move', (e: any) => {\r\n            // console.log(e);\r\n            // e.stopPropagation();\r\n            // this.app.mapView.interacting;\r\n            // this.app.map.dis\r\n            const ev = this.CommonEventBuilderArcGIS(e);\r\n            ev.type = MOUSE_TYPE.MOVE;\r\n            this.app.MouseEvent(ev);\r\n        });\r\n        this.app.mapView.on(\"drag\", (e: any) => {\r\n            // console.log('dd');\r\n\r\n            const ev = this.CommonEventBuilderArcGIS(e);\r\n            ev.type = MOUSE_TYPE.DRAG;\r\n            this.app.MouseEvent(ev);\r\n\r\n            if (!this.app.ableToPan) {\r\n                e.stopPropagation();\r\n            }\r\n\r\n        });\r\n        this.app.mapView.on('key-down', (e: any) => {\r\n            let keyPressed = e.key;\r\n            if (keyPressed.slice(0, 5) === 'Arrow' || e.key === '-' || e.key === '=' || e.key === 'd') {\r\n                e.stopPropagation();\r\n            }\r\n            this.KeyDownJSAPI4X(e.native);\r\n        });\r\n        this.app.mapView.on('key-up', (e: any) => {\r\n            let keyPressed = e.key;\r\n            if (keyPressed.slice(0, 5) === 'Arrow' || e.key === '-' || e.key === '=' || e.key === 'd') {\r\n                e.stopPropagation();\r\n            }\r\n            this.KeyDownJSAPI4X(e.native);\r\n        });\r\n    }\r\n    MouseClickLeftArcGIS(e: any) {\r\n        let mEvent = this.CommonEventBuilderArcGIS(e);\r\n        this.app.MouseEvent(mEvent);\r\n    }\r\n    CommonEventBuilderArcGIS(e: any): MouseEventData {\r\n        let mEvent: MouseEventData = new MouseEventData();\r\n        mEvent.preX = EventInteraction.mouseEventDataPre.x;\r\n        mEvent.preY = EventInteraction.mouseEventDataPre.y;\r\n        // mEvent.premEvent = EventInteraction.mouseEventDataPre;\r\n        mEvent.x = e.x;\r\n        mEvent.y = e.y;\r\n        mEvent.yGLPicking = e.native.target.getBoundingClientRect().bottom - e.native.clientY;\r\n\r\n        mEvent.pressedShift = e.native.shiftKey;\r\n        mEvent.pressedAlt = e.native.altKey;\r\n        mEvent.pressedCtrl = e.native.ctrlKey;\r\n\r\n        mEvent.native = e.native;\r\n        EventInteraction.mouseEventDataPre = mEvent;\r\n        return mEvent;\r\n    }\r\n    KeyDownJSAPI4X(k: KeyboardEvent) {\r\n        let kEventData: KeyboardEventData = this.CommonEventBuilder(k);\r\n        this.app.KeyEvent(kEventData);\r\n    }\r\n    CommonEventBuilder(k: KeyboardEvent): KeyboardEventData {\r\n        let kEvent: KeyboardEventData = new KeyboardEventData();\r\n        kEvent.key = k.key;\r\n        kEvent.keyCode = k.keyCode;\r\n        kEvent.code = k.code;\r\n        kEvent.hasCtrlKey = k.ctrlKey;\r\n        kEvent.hasShiftKey = k.shiftKey;\r\n        kEvent.hasAltKey = k.altKey;\r\n        kEvent.hasMetaCommand = k.metaKey;\r\n        return kEvent;\r\n    }\r\n}","import { JSAPIEnv } from '..';\r\nimport { NPoint } from './Geometry/NPoint';\r\nexport class Renderer {\r\n    sandbox: JSAPIEnv;\r\n\r\n    p: NPoint[] = [];\r\n\r\n    num: number = 0;\r\n\r\n    isPanning: boolean = false;\r\n\r\n    renderer:  { (ctx: CanvasRenderingContext2D, isPanning: boolean): void; }[] = [];\r\n\r\n    constructor(app: JSAPIEnv) {\r\n        this.sandbox = app;\r\n    }\r\n    public Init(ctx: CanvasRenderingContext2D) {\r\n        // TODO\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D) {\r\n        // if(this.sandbox.definition) {\r\n\r\n            for(let i = 0 ; i < this.renderer.length; ++i) {\r\n                this.renderer[i](ctx, this.isPanning);\r\n            }\r\n\r\n\r\n        //     this.sandbox.definition.render(ctx, this.isPanning);\r\n\r\n        //     if(this.sandbox.definition.controller.isInspectionMode) {\r\n        //         ctx.fillStyle = \"#ffffff\";\r\n        //         ctx.font = \"12px Arial\";\r\n\r\n        //         const geoPos = this.sandbox.projection.ToMap(this.sandbox.definition.controller.m.x, this.sandbox.definition.controller.m.y);\r\n        //         ctx.fillText(`Lat: ${geoPos[0]}, Lon: ${geoPos[1]}, Zoom level: ${this.sandbox.mapView.zoom}`, this.sandbox.mapView.width * 0.5 - 150, 20 );\r\n        //         ctx.fillText(`FPS: ${Math.floor(this.sandbox.definition.nnaEngineV3.fps)}`, this.sandbox.mapView.width * 0.5 - 150, 40 );\r\n        //         // ctx.fillText(`Activated App: ${this.sandbox.definition.ACTIVATED_APP}`, this.sandbox.mapView.width * 0.5 - 150, 60 );\r\n        //     }\r\n        // }\r\n\r\n    }\r\n}","import MapView from \"@arcgis/core/views/MapView\";\r\nimport Point from \"@arcgis/core/geometry/Point\";\r\n\r\nimport Map from \"@arcgis/core/Map\";\r\nimport SpatialReference from \"@arcgis/core/geometry/SpatialReference\";\r\n\r\n// import MapView from 'esri/views/MapView';\r\n// import ArcGISMap from 'esri/Map';\r\n// import SpatialReference from 'esri/geometry/SpatialReference'\r\n// import Point from 'esri/geometry/Point';\r\nimport { IO } from './IO/IO';\r\n\r\nimport { MouseEventData, KeyboardEventData } from './lib' \r\n\r\nimport { ArcGIS } from './Core/ArcGIS';\r\nimport { Canvas, Projection, EventInteraction  } from './Core/index';\r\n\r\nimport { Renderer } from './Renderer/Renderer';\r\n// import { Definition } from './Definition';\r\n\r\nexport class JSAPIEnv {\r\n    mapView: MapView;\r\n    map: Map;\r\n    mPoint: Point;\r\n    divHost: HTMLElement;\r\n\r\n    arcGIS: ArcGIS;\r\n    io: IO;\r\n    canvas: Canvas;\r\n    projection: Projection;\r\n    eventInteraction: EventInteraction;\r\n    renderer: Renderer;\r\n    // definition: Definition;\r\n\r\n    ableToPan: boolean = true;\r\n\r\n\r\n    \r\n    keyEvents:  { (key: KeyboardEventData): void; }[] = [];\r\n    MouseEvents:  { (mouse: MouseEventData): void; }[] = [];\r\n\r\n    public static start(idDiv: HTMLElement) {\r\n        new JSAPIEnv(idDiv);\r\n    }\r\n    constructor(idDiv: HTMLElement) {\r\n        this.renderer = new Renderer(this);\r\n\r\n        const map = new Map({\r\n            // https://totalapis.github.io/api-reference/esri-Map.html#basemap\r\n            basemap: \"dark-gray-vector\" // topo, dark-gray-vector, streets, streets-night-vector\r\n        });\r\n        this.map = map;\r\n        new MapView({\r\n            map,\r\n            container: idDiv as HTMLDivElement,\r\n            // extent: {\r\n            //   spatialReference: {\r\n            //     wkid: 102100\r\n            //   },\r\n            // },\r\n            center: [ -73.989502, 40.741286 ],\r\n            zoom: 13\r\n          }).when( (mapView: MapView)=> {\r\n            this.mapView = mapView;\r\n            this.mapView.spatialReference = SpatialReference.WebMercator;\r\n            this.mPoint = this.mapView.toMap({ x: 0, y: 0 });\r\n            this.divHost = this.mapView.container as HTMLElement;\r\n            this.io = new IO(this);\r\n\r\n            this.eventInteraction = new EventInteraction(this);\r\n            this.projection = new Projection(this);\r\n            \r\n            this.canvas = new Canvas(this);\r\n            this.arcGIS = new ArcGIS(this);\r\n    \r\n            // this.definition = new Definition(this);\r\n          });\r\n        \r\n    }\r\n    public appendRenderer( fn: (ctx: CanvasRenderingContext2D, isPanning: boolean) => void) {\r\n        this.renderer.renderer.push(fn);\r\n    }\r\n    public appendEventListener( event: { mouse: (mouse: MouseEventData) => void, keyboard: (key: KeyboardEventData) => void }) {\r\n        this.MouseEvents.push(event.mouse);\r\n        this.keyEvents.push(event.keyboard);\r\n    }\r\n    public MouseEvent(m: MouseEventData) {\r\n        for(let i = 0 ; i < this.MouseEvents.length; ++i) {\r\n            this.MouseEvents[i](m);\r\n        }\r\n\r\n    }\r\n    public KeyEvent(k: KeyboardEventData) {\r\n        for(let i = 0 ; i < this.keyEvents.length; ++i) {\r\n            this.keyEvents[i](k);\r\n        }\r\n    }\r\n}","export const remap = (CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number): number => {\r\n  return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n}\r\nexport const shuffle = (array: any) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\nexport const fahrenheit2celsius = (f: number ) => {\r\n  return (f-32) * 5.0/9.0\r\n}\r\nexport const celsius2fahrenheit = (c: number) => {\r\n  return 9.0/5.0 * c + 32\r\n}\r\nexport const kelvin2celsius = (k: number) => {\r\n  return (k-273.15)\r\n}\r\nexport const MilesFromMeters = (m: number) => {\r\n  return m * 0.00062137;\r\n}\r\nexport const MilesFromKM = (m: number) => {\r\n  return m * 0.62137119;\r\n}\r\n// ........................................................... geometry\r\nexport const toRadians = (degrees: number): number => {\r\n  return (degrees * (3.14159265358979 / 180.0)); // myDegree *=  3.141592 / 180 // degrees to radians\r\n}\r\n\r\nexport const toDegrees = (radians: number): number => {\r\n  return (radians * (180.0 / 3.14159265358979));  // myRadian *= 180 / 3.141592 //  radian to degrees\r\n}\r\n// ........................................................... random\r\nexport const getRandom = ()  => {\r\n  return Math.random();\r\n}\r\nexport const getRandomArbitrary = (min: number, max: number)  => {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nexport const getRandomInt = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nexport const getRandomIntFromRenage = (range: number)  => {\r\n  return Math.floor(Math.random() * range);\r\n}\r\nexport const getRandomIntsInclusive = (min: number, max: number, total: number)  => {\r\n  let out = [];\r\n  for (let i = 0; i < total; ++i) {\r\n      out.push(getRandomIntInclusive(min, max));\r\n  }\r\n  return out;\r\n}\r\nexport const getRandomIntInclusive = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nexport const getRandomItemWithStringList = (array: string[])  => {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\nexport const random = (seed: number) => {\r\n  var mask = 0xffffffff;\r\n  var m_w  = (123456789 + seed) & mask;\r\n  var m_z  = (987654321 - seed) & mask;\r\n\r\n  return function() {\r\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\r\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\r\n\r\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\r\n    result /= 4294967296;\r\n    return result;\r\n  }\r\n}\r\nexport const isIntersect = (p1x: number, p1y: number, q1x: number, q1y: number, p2x: number, p2y: number, q2x: number, q2y: number): boolean => {\r\n  // Find the four orientations needed for general and\r\n  // special cases\r\n  const o1 = orientation(p1x, p1y, q1x, q1y, p2x, p2y);\r\n  const o2 = orientation(p1x, p1x, q1x, q1y, q2x, q2y);\r\n  const o3 = orientation(p2x, p2y, q2x, q2y, p1x, p1y);\r\n  const o4 = orientation(p2x, p2y, q2x, q2y, q1x, q1y);\r\n\r\n  // General case\r\n  if (o1 !== o2 && o3 !== o4) { return true; }\r\n\r\n  // Special Cases\r\n  // p1, q1 and p2 are colinear and p2 lies on segment p1q1\r\n  if (o1 === 0 && onSegment(p1x, p1y, p2x, p2y, q1x, q1y)) { return true; }\r\n\r\n  // p1, q1 and q2 are colinear and q2 lies on segment p1q1\r\n  if (o2 === 0 && onSegment(p1x, p1y, q2x, q2y, q1x, q1y)) { return true; }\r\n\r\n  // p2, q2 and p1 are colinear and p1 lies on segment p2q2\r\n  if (o3 === 0 && onSegment(p2x, p2y, p1x, p1y, q2x, q2y)) { return true; }\r\n\r\n  // p2, q2 and q1 are colinear and q1 lies on segment p2q2\r\n  if (o4 === 0 && onSegment(p2x, p2y, q1x, q1y, q2x, q2y)) { return true; }\r\n\r\n  return false; // Doesn't fall in any of the above cases\r\n}\r\nexport const remapLongToSurface = (CValue: number, min: number, max: number) => { return (((CValue - (-180)) * (max - min)) / (180 - (-180)) + min); }\r\nexport const remapLatToSurface = (CValue: number, min: number, max: number)  => { return (((CValue - (-90)) * (max - min)) / (90 - (-90)) + min); }\r\nexport const remapLongToSurfaceNormal = (CValue: number)  => { return ((CValue - (-180)) * (1.0 - 0)) / (180 - (-180)); } // 0 to 1\r\nexport const remapLatToSurfaceNormal = (CValue: number)  => { return ((CValue - (-90)) * (1.0 - 0)) / (90 - (-90)); } // 0 to 1\r\nexport const remapLong = (CValue: number) => { return (CValue + 180) * Math.PI * 2 / 360 * -1; } // -1 for reversing direction\r\nexport const remapLat = (CValue: number) => { return (CValue + 90) * Math.PI / 180; }\r\nexport const onSegment = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): boolean => {\r\n  if (qx <= Math.max(px, rx) && qx >= Math.min(px, rx) && qy <= Math.max(py, ry) && qy >= Math.min(py, ry)) { return true; }\r\n  return false;\r\n}\r\nexport const orientation = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): number => {\r\n  // See https://www.geeksforgeeks.org/orientation-3-ordered-points/\r\n  // for details of below formula.\r\n  const val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy);\r\n\r\n  if (val === 0) { return 0; } // colinear\r\n\r\n  return (val > 0) ? 1 : 2; // clock or counterclock wise\r\n}\r\n\r\nexport const lineLineIntersection = (Ax: number, Ay: number, Bx: number, By: number, Cx: number, Cy: number, Dx: number, Dy: number): number[] | undefined => { \r\n    // Line AB represented as a1x + b1y = c1  \r\n    const a1:number = By - Ay; \r\n    const b1 = Ax - Bx; \r\n    const c1 = a1 * (Ax) + b1 * (Ay); \r\n\r\n    // Line CD represented as a2x + b2y = c2  \r\n    const a2 = Dy - Cy; \r\n    const b2 = Cx - Dx; \r\n    const c2 = a2 * (Cx) + b2 * (Cy); \r\n\r\n    const determinant = a1 * b2 - a2 * b1; \r\n\r\n    if (determinant == 0) \r\n    { \r\n        // The lines are parallel. This is simplified  \r\n        // by returning a pair of FLT_MAX  \r\n        return undefined; // new Point(double.MaxValue, double.MaxValue); \r\n    } \r\n    else\r\n    { \r\n        const x = (b2 * c1 - b1 * c2) / determinant; \r\n        const y = (a1 * c2 - a2 * c1) / determinant; \r\n        return [x, y];\r\n    } \r\n}\r\nexport const distance2d = (v0x: number, v0y: number, v1x: number, v1y: number): number => {\r\n  return Math.sqrt((v0x - v1x) * (v0x - v1x) + (v0y - v1y) * (v0y - v1y));\r\n  // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n}\r\nexport const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\r\n  let d = new Date().getTime();\r\n  let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c: string) {\r\n      // eslint-disable-next-line\r\n      let r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      // eslint-disable-next-line\r\n      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n  });\r\n  return uuid;\r\n}","import { APP } from '../../lib';\r\nimport { HTMLView } from '../HTMLView';\r\nexport class GraphView {\r\n    HTMLView: HTMLView;\r\n    div: HTMLElement;\r\n    constructor(HTMLView: HTMLView) {\r\n        this.HTMLView = HTMLView;\r\n\r\n        this.initPanel();\r\n    }\r\n    public remove(){\r\n        this.HTMLView.networkUI = undefined;\r\n        // this.HTMLView.app.definition.app.divHost.removeChild(this.div);\r\n    }\r\n    public initPanel(){\r\n\r\n        let div = document.createElement('div');\r\n        div.style.width = '200px';\r\n        div.style.height = '400px';\r\n        div.style.background = '#ffffff';\r\n        div.style.position = 'absolute';\r\n        div.style.zIndex = '10';\r\n\r\n        div.style.top = '100px'; //this.HTMLView.app.definition.app.divHost.style.top + 'px';\r\n        // div.style.left = this.HTMLView.app.definition.app.divHost.clientWidth + 'px';\r\n\r\n\r\n        let top = document.createElement('div');\r\n        top.style.width = '100%';\r\n        top.style.height = '60px';\r\n        top.style.background = '#efefef';\r\n        top.style.position = 'relative';\r\n        top.style.zIndex = '11';\r\n        // top.style.padding = '5px';\r\n        top.textContent = 'NNA V3 controller'\r\n\r\n        let isPressed = false;\r\n        let prePos: number[] = [0 , 0];\r\n\r\n        top.ondrag = (e: MouseEvent) => {\r\n            console.log('reall?', e);\r\n        }\r\n        top.onmouseenter = (e: MouseEvent ) => {\r\n            console.log('onmouseenter?', e);\r\n        }\r\n        top.ondrag = (e: MouseEvent ) => {\r\n            console.log('ondrag?', e);\r\n        }\r\n        top.onmousemove = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n                console.log(xOff, yOff);\r\n                console.log(+div.style.top);\r\n                console.log(div.clientLeft, parseFloat(div.style.left));\r\n                div.style.top = parseFloat(div.style.top) + yOff +'px';\r\n                div.style.left = parseFloat(div.style.left) + xOff +'px';\r\n                console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        top.onmousedown = (e: MouseEvent ) => {\r\n            console.log('down', e);\r\n            prePos[0] = e.clientX;\r\n            prePos[1] = e.clientY;\r\n            isPressed = true;\r\n        }\r\n        top.onmouseup = (e: MouseEvent ) => {\r\n            console.log('up', e);\r\n            isPressed = false;\r\n        }\r\n        top.onmouseout = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                console.log('onmouseout', e);\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n                console.log(xOff, yOff);\r\n                console.log(+div.style.top);\r\n                console.log(div.clientLeft, parseFloat(div.style.left));\r\n                div.style.top = parseFloat(div.style.top) + yOff +'px';\r\n                div.style.left = parseFloat(div.style.left) + xOff +'px';\r\n                console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        // top.style.top = '100px';\r\n        // top.style.left = '100px';\r\n\r\n        div.appendChild(top);\r\n        \r\n        let btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Import'\r\n        btn.onclick = () => {\r\n            // this.HTMLView.app.importDummyData();\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Origin'\r\n        btn.onclick = () => {\r\n            this.HTMLView.app.apiCall(APP.NETWORK, 'addOrigin' , undefined);\r\n        };\r\n        div.appendChild(btn);\r\n\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n            console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n            console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n            console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        // this.HTMLView.app.definition.app.divHost.appendChild(div);\r\n\r\n        \r\n        btn = document.createElement('button');\r\n        btn.style.top = '0px';\r\n        btn.style.left = '180px';\r\n        btn.style.height = '20px';\r\n        btn.style.width = '20px';\r\n        btn.style.zIndex = '13';\r\n        btn.style.position = 'absolute';\r\n        btn.style.padding = '0px';\r\n        btn.style.zIndex = '20';\r\n        // btn.style.background = '#ff0000';\r\n        // btn.style.color = '#ffffff';\r\n        btn.textContent = 'X'\r\n        btn.onclick = () => {\r\n            this.remove();\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        this.div = div;\r\n    }\r\n}","import { NNAEngineV3 } from '..';\r\nimport { GraphView } from './GraphView';\r\nexport class HTMLView {\r\n    app: NNAEngineV3;\r\n    networkUI: GraphView | undefined = undefined;\r\n    constructor(app: NNAEngineV3) {\r\n        this.app = app;\r\n\r\n\r\n        // this.init();\r\n        console.log('NNAEngineV3 view');\r\n    }\r\n    public reset(){\r\n        this.removePanelNetwork();\r\n    }\r\n    public initPanelNetwork(){\r\n        if(!this.networkUI){\r\n            this.networkUI = new GraphView(this);\r\n        }\r\n    }\r\n    public removePanelNetwork(){\r\n        if(this.networkUI){\r\n            this.networkUI.remove();\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n","import { NNAEngineV3 } from '..';\r\nimport { MOUSE_TYPE, MouseEventData, APP, NVector3 } from '../lib';\r\n\r\n// import { CPoint } from '../../../NJSEngine/DrawingEngine/Geometry/Point';\r\n\r\n// import { fetchJson } from '../IO';\r\nexport class Controller {\r\n    nnaEngine: NNAEngineV3;\r\n    inspection: boolean = true;\r\n    m: NVector3 = new NVector3(0, 0);\r\n\r\n    dataOrigins: undefined | any = undefined;\r\n    destinationOrigins: undefined | any = undefined;\r\n\r\n\r\n    constructor(app: NNAEngineV3) {\r\n        this.nnaEngine = app;\r\n    }\r\n    public async execution(app: APP, action: string, data: any) {\r\n        if (app === APP.NETWORK) {\r\n            // this.ACTIVATED_APP = APP.NNA; \r\n\r\n            if (action === 'initPanel'){ \r\n                this.nnaEngine.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addOrigin'){ \r\n                this.dataOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n                // console.log(vs);\r\n                this.nnaEngine.core.graphSystem.initByCPoint(data);\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addOrigins'){ \r\n                this.dataOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n                console.log('addOrigins');\r\n                if (this.dataOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPoints(this.dataOrigins);\r\n                }\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addDestinations'){ \r\n                this.destinationOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n                console.log('addDestinations', this.destinationOrigins);\r\n                if (this.destinationOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPointsBackpro(this.destinationOrigins);\r\n                }\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n\r\n\r\n        }\r\n        if (app === APP.AGENCY) {\r\n            if (action === 'runAgent'){ \r\n                this.nnaEngine.core.graphSystem.initAgentVis();\r\n            }\r\n        }\r\n\r\n        if (app === APP.GA) {\r\n            if (action === 'pathOptimization'){ \r\n                if (data){\r\n                    this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(data);\r\n                }\r\n            }\r\n        }\r\n\r\n        // ......................................\r\n\r\n\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        this.m.x = m.x;\r\n        this.m.y = m.y;\r\n        // console.log(m);\r\n        switch (m.type) {\r\n            case MOUSE_TYPE.DOWN:\r\n                // this.definition.MousePress(m);\r\n                break;\r\n            case MOUSE_TYPE.LEFT:\r\n                // console.log('click');\r\n                \r\n                this.nnaEngine.core.graphSystem.getPath(m.x, m.y);\r\n\r\n                // if(app === APP.GA) {\r\n                //     // console.log(this.nnaEngine.definition.drawingEngine.scene.geometryList.length);\r\n                //     // // this.app.core.agencySystem.gaSystem.mouseClick(m.x, m.y);\r\n                //     // this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // } \r\n\r\n                // if(app === APP.NETWORK) {\r\n                //     console.log('dddddddddddddddddd');\r\n                //     // this.nnaEngine.core.graphSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // }\r\n\r\n                // this.definition.MouseClick(m);\r\n                break;\r\n            case MOUSE_TYPE.MOVE:\r\n\r\n                // this.nnaEngine.core.graphSystem.getPath(m.x, m.y);\r\n                // if(app === APP.GA && this.nnaEngine.definition.drawingEngine.scene.capture) {\r\n                //     // console.log(this.app.definition.drawingEngine.scene.capture)\r\n                //     // console.log(this.app.definition.drawingEngine.scene.geometry.length);\r\n                //     // this.app.core.agencySystem.gaSystem.mouseClick(m.x, m.y);\r\n                //     this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // } \r\n\r\n                // if(app === APP.NETWORK) {\r\n                //     // console.log('dddddddddddddddddd');\r\n                //     this.nnaEngine.core.graphSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // }\r\n                // // this.definition.MouseMove(m);\r\n                break;\r\n            case MOUSE_TYPE.DRAG:\r\n\r\n                if (this.dataOrigins) {\r\n                    this.nnaEngine.core.graphSystem.initByCPoints(this.dataOrigins);\r\n                    console.log(this.dataOrigins);\r\n                    console.log('drag...');\r\n                }\r\n\r\n\r\n                if (this.destinationOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPointsBackpro(this.destinationOrigins);\r\n                }\r\n\r\n                if(this.nnaEngine.core.agencySystem.gaSystem.pointData) {\r\n                    this.nnaEngine.core.agencySystem.update();\r\n                }\r\n\r\n                break;    \r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n}","import { shuffle, NVector3 } from '../../../../../lib';\r\nexport class Node{\r\n    vec: NVector3;\r\n    id: number = -1;\r\n    constructor(x: number, y: number, long: number, lat: number){\r\n        this.vec = new NVector3(x, y, 0);\r\n        this.vec.long = long;\r\n        this.vec.lat = lat;\r\n    }\r\n    public distanceTo(node: Node){\r\n        return this.vec.distanceTo(node.vec);\r\n    }\r\n}\r\nexport class Path{\r\n    pathsOrigin: Node[] = [];\r\n    nodes: (Node | undefined)[] = [];\r\n    fitness = 0.0;\r\n    distance = 0;\r\n    constructor(pathsOrigin: Node[] ){\r\n        this.pathsOrigin = pathsOrigin;\r\n        this.nodes = [];\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n\r\n        for(let i = 0 ; i < this.pathsOrigin.length; ++i){\r\n            this.nodes.push(undefined);\r\n        }\r\n    }\r\n    public generateIndividual(){\r\n        for(let cityIndex = 0; cityIndex < this.pathsOrigin.length; ++cityIndex){\r\n            this.setCityInit(cityIndex, this.pathsOrigin[cityIndex]);\r\n        }\r\n        shuffle(this.nodes);\r\n    }\r\n    public setCityInit(i: number, city: Node){\r\n        this.nodes[i] = city;\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n    }\r\n    public getFitness(){\r\n        if (this.fitness === 0){\r\n            this.fitness = 1.0 / (this.getDistance());\r\n        }\r\n        return this.fitness;\r\n    }\r\n    public getDistance(){\r\n        if (this.distance === 0){\r\n            let tourDistance = 0;\r\n            for (let i = 0 ; i < this.nodes.length; ++i ){\r\n                let fromNode = this.nodes[i];\r\n\r\n                if(fromNode){\r\n                    let otherNode = undefined\r\n                    if (i === this.nodes.length -1 ){\r\n                        otherNode = this.nodes[0];\r\n                    } else{\r\n                        otherNode = this.nodes[i+1];\r\n                    }\r\n\r\n                    if(otherNode){\r\n                        tourDistance += fromNode.distanceTo(otherNode);\r\n                    }\r\n                }\r\n \r\n            }\r\n            this.distance = tourDistance;\r\n        }\r\n        return this.distance;\r\n    }\r\n    public containsCity(city: Node): boolean{\r\n        for(let i = 0 ; i < this.nodes.length; ++i) {\r\n            if(this.nodes[i] === city) { return true }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class Population{\r\n    paths: (Path | undefined) [] = [];\r\n    constructor(nodes: Node[] , populationSize: number, initialise: boolean){\r\n        this.paths = [];\r\n        for(let i = 0; i <populationSize; ++i){\r\n            this.paths.push(undefined);\r\n        }\r\n        if (initialise){\r\n            for(let i = 0 ; i <populationSize; ++i){\r\n                let newTour = new Path(nodes);\r\n                newTour.generateIndividual();\r\n                this.paths[i] = newTour;\r\n            }\r\n        }\r\n    }\r\n    public getFittestPath(){\r\n        let fittest: undefined | Path = this.paths[0];\r\n        for(let i = 0; i < this.paths.length; ++i){\r\n            let other = this.paths[i];\r\n            if (fittest && other){\r\n                if (fittest.getFitness() <= other.getFitness()){\r\n                    fittest = other;\r\n                }\r\n            }\r\n        }\r\n        return fittest;\r\n    }\r\n}","// \"\"\"\r\n// This Python code is based on Java code by Lee Jacobson found in an article\r\n// entitled \"Applying a genetic algorithm to the travelling salesman problem\"\r\n// that can be found at: http://goo.gl/cJEY1\r\n// https://gist.github.com/turbofart/3428880\r\n// \"\"\"\r\nimport { Population, Node, Path } from './Core';\r\n\r\nexport class GeneticAlgorithm {\r\n    private nodes: Node[];\r\n    private mutationRate: number;\r\n    private nodeSize: number;\r\n    private elitism: boolean;\r\n    constructor (tourmanager: Node[], mutationRate=0.05, nodeSize=5, elitism=true){\r\n        this.nodes = tourmanager\r\n        this.mutationRate = mutationRate\r\n        this.nodeSize = nodeSize\r\n        this.elitism = elitism\r\n    }\r\n    public evolvePopulation(pop: Population){\r\n        const newPopulation = new Population(this.nodes, pop.paths.length, false)\r\n        let elitismOffset = 0\r\n        if (this.elitism){\r\n            const thePath = pop.getFittestPath();\r\n            if (thePath){\r\n                newPopulation.paths[0] = thePath;\r\n                elitismOffset = 1\r\n            }\r\n        }\r\n        for(let i = elitismOffset; i < newPopulation.paths.length; ++i){\r\n            let parent1 = this.tournamentSelection(pop)\r\n            let parent2 = this.tournamentSelection(pop);\r\n            if (parent1 && parent2){\r\n                let child = this.crossover(parent1, parent2);\r\n                newPopulation.paths[i] = child;\r\n            }\r\n        }\r\n        for(let i = elitismOffset; i < newPopulation.paths.length; ++i){\r\n            let path = newPopulation.paths[i];\r\n            if (path) {\r\n                this.mutate(path);\r\n            }\r\n        }\r\n        return newPopulation\r\n    }\r\n    private crossover(parent1: Path, parent2: Path){\r\n        let child = new Path(this.nodes);\r\n        \r\n        let startPos = Math.floor(Math.random() * parent1.nodes.length);\r\n        let endPos = Math.floor(Math.random() * parent1.nodes.length);\r\n        \r\n        for (let i = 0; i < child.nodes.length; ++i){\r\n            const place = parent1.nodes[i];\r\n            if (place){\r\n                if (startPos < endPos && i > startPos && i < endPos) {\r\n                    child.setCityInit(i, place);\r\n                } else if(startPos > endPos){\r\n                    if ((i < startPos && i > endPos) == false ){\r\n                        child.setCityInit(i, place);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < parent2.nodes.length; ++i){\r\n            const place = parent2.nodes[i];\r\n            if(place){\r\n                if (child.containsCity(place) == false ){\r\n                    for (let ii = 0; ii < child.nodes.length; ++ii){\r\n                        if (child.nodes[ii] == undefined){\r\n                            child.setCityInit(ii, place);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return child;\r\n    }\r\n    private mutate(path: Path){\r\n        for(let tourPos1 = 0; tourPos1 < path.nodes.length; ++tourPos1){\r\n            if (Math.random() < this.mutationRate){\r\n                let tourPos2 = Math.floor(path.nodes.length * Math.random());\r\n                \r\n                let city1 = path.nodes[tourPos1];\r\n                let city2 = path.nodes[tourPos2];\r\n                \r\n                if(city1 && city2){\r\n                    path.setCityInit(tourPos2, city1);\r\n                    path.setCityInit(tourPos1, city2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private tournamentSelection(pop: Population){\r\n        let populationNew = new Population(this.nodes, this.nodeSize, false)\r\n        for (let i = 0; i < this.nodeSize; ++i){\r\n            let randomId = Math.floor(Math.random() * pop.paths.length);\r\n            populationNew.paths[i] = pop.paths[randomId];\r\n        }\r\n        let fittest = populationNew.getFittestPath();\r\n        return fittest;\r\n    }\r\n}\r\n","import { Population, Path, Node } from './GeneticAlgorithm/Core';\r\nimport { GeneticAlgorithm } from './GeneticAlgorithm/GeneticAlgorithm';\r\nimport { random } from '../../../lib';\r\n// import { CPoint  } from '../../../../DrawingEngine/Geometry/Point';\r\nimport { AgencySystem } from '..';\r\nexport class GASystem{\r\n    agencySystem: AgencySystem;\r\n    cities: Node[];\r\n    placesAll: Node[];\r\n    ga: GeneticAlgorithm;\r\n    pop: Population;\r\n    pathFittest: Path | undefined = undefined;\r\n    timer = 0;\r\n    cost = Number.MAX_VALUE;\r\n    pos: number[][] = [];\r\n    // pointData: CPoint[] | undefined = undefined;\r\n    pointData: any | undefined = undefined;\r\n\r\n    random: () => number;\r\n    constructor(agencySystem: AgencySystem, seed: number = 0){\r\n        this.agencySystem = agencySystem;\r\n        this.random = random(seed);\r\n        this.pos = [];\r\n\r\n        // let n_cities = 5;\r\n\r\n        // for(let i = 0 ; i < n_cities; ++i ) {\r\n        //     let x = (this.random() * 700) + 50\r\n        //     let y = (this.random() * 700) + 50\r\n        //     this.posByMouse.push([x, y]);\r\n        // }\r\n\r\n        this.init();\r\n    }\r\n    public mouseClick(x: number, y: number){\r\n        // this.posByMouse.push([x, y]);\r\n        // this.init();\r\n    }\r\n    public init(){\r\n        let population_size = 5\r\n        let mutationRate= 0.1;\r\n        let tournamentSize = this.pos.length ; // 10\r\n\r\n        // # Setup cities and tour\r\n        this.placesAll = [];\r\n\r\n        for(let i = 0 ; i < this.pos.length; ++i ) {\r\n            // let pos = this.pos[i]\r\n            // const goePos = this.agencySystem.nnaEngine.app.definition.app.projection.ToMap(pos[0], pos[1]);\r\n            // const place = new Node(pos[0], pos[1], goePos[0], goePos[1] );\r\n            // place.id = this.placesAll.length;\r\n            // this.placesAll.push(place)\r\n        }\r\n\r\n        // # Initialize population\r\n        this.pop = new Population(this.placesAll, population_size, true)\r\n\r\n        this.pathFittest = this.pop.getFittestPath();\r\n        if (this.pathFittest){\r\n            console.log(\"Initial distance: \" + (this.pathFittest.getDistance()))\r\n        }\r\n\r\n        // # Evolve population\r\n        this.ga = new GeneticAlgorithm(this.placesAll, mutationRate, tournamentSize)\r\n    }\r\n    public initByCPoint(pointData: any | undefined) {\r\n        // public initByCPoint(pointData: CPoint[] | undefined) {\r\n        // console.log(pointData)\r\n\r\n        if (pointData !== undefined){\r\n            this.pointData = pointData;\r\n        }\r\n\r\n\r\n        if(this.pointData) { \r\n            let population_size = 5\r\n            let mutationRate= 0.1;\r\n            let tournamentSize = this.pointData.length ; // 10\r\n\r\n            // # Setup cities and tour\r\n            this.placesAll = [];\r\n\r\n            for(let i = 0 ; i < this.pointData.length; ++i ) {\r\n                let pos = this.pointData[i]\r\n                const goePos = this.agencySystem.nnaEngine.app.toMap(pos[0], pos[1]);\r\n                const place = new Node(pos[0], pos[1], goePos[0], goePos[1] );\r\n                place.vec = pos.v;\r\n                place.id = this.placesAll.length;\r\n                this.placesAll.push(place)\r\n            }\r\n\r\n            // # Initialize population\r\n            this.pop = new Population(this.placesAll, population_size, true)\r\n\r\n            this.pathFittest = this.pop.getFittestPath();\r\n            if (this.pathFittest){\r\n                console.log(\"Initial distance: \" + (this.pathFittest.getDistance()))\r\n            }\r\n\r\n            // # Evolve population\r\n            this.ga = new GeneticAlgorithm(this.placesAll, mutationRate, tournamentSize)\r\n        }\r\n    }\r\n    public optimize() {\r\n        this.pop = this.ga.evolvePopulation(this.pop)\r\n        this.pathFittest = this.pop.getFittestPath()\r\n        if(this.pathFittest) {\r\n            const result = this.pathFittest.getDistance();\r\n            if (result < this.cost ){\r\n                console.log('iter optimization' , this.timer);\r\n                console.log(\"Final distance: \", result)\r\n                console.log(\"Solution:\")\r\n                console.log(this.pathFittest)\r\n                this.cost = result;\r\n            }\r\n            this.timer++\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPan: boolean) {\r\n        this.optimize();\r\n\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.lineWidth  = 1;\r\n\r\n        if (isPan) {\r\n            for(let i = 0 ; i < this.placesAll.length; ++i) {\r\n                // const geoPos = this.agencySystem.nnaEngine.app.definition.app.projection.ToScreen(this.placesAll[i].vec.long, this.placesAll[i].vec.lat);\r\n                // this.placesAll[i].vec.x = geoPos[0];\r\n                // this.placesAll[i].vec.y = geoPos[1];\r\n\r\n                // ctx.beginPath();\r\n                // const place =this.placesAll[i];\r\n                // ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n                // ctx.closePath();\r\n                // ctx.fill();\r\n            }\r\n            \r\n        }\r\n\r\n        if (this.pathFittest) {\r\n            for(let i = 0 ; i < this.pathFittest.nodes.length -1; i++) {\r\n                let p0 = this.pathFittest.nodes[i];\r\n                let p1 = this.pathFittest.nodes[i+1];\r\n                if (p0 && p1) {\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(p0.vec.x, p0.vec.y);\r\n                    ctx.lineTo(p1.vec.x, p1.vec.y);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        for(let i = 0 ; i < this.placesAll.length; ++i) {\r\n            ctx.beginPath();\r\n            const place =this.placesAll[i];\r\n            ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        // console.log('rnding...');\r\n\r\n    }\r\n}\r\n","import { Core } from '../Core';\r\nimport {GASystem } from './GASystem/GASystem';\r\nexport class AgencySystem {\r\n\r\n    nnaEngine: Core\r\n\r\n    gaSystem: GASystem;\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n\r\n        this.gaSystem = new GASystem(this);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.gaSystem.render(ctx, isPanning);\r\n    }\r\n    public mouseClick(x: number, y: number){\r\n        this.gaSystem.mouseClick(x, y);\r\n    } \r\n    public update() {\r\n        this.gaSystem.initByCPoint(undefined);\r\n    }\r\n\r\n}","import { GraphSystem } from '..';\r\nexport class Analysis {\r\n    gs: GraphSystem;\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n\r\n    }\r\n}","import { NVector3, NLine } from '../../../../lib';\nimport { Edge, Node } from '.'\nimport { Tree } from '../Tree/Tree';\nimport { GraphCore } from '..';\n\nexport class GraphData {\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n    public minPt: NVector3 = new NVector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    public maxPt: NVector3 = new NVector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n}\n\n\nexport class Graph {\n    public graphCore: GraphCore\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n    public minPt: NVector3 = new NVector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    public maxPt: NVector3 = new NVector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n\n\n    public nodeOrigin: Node;\n\n    public constructor(graphCore: GraphCore) {\n        this.graphCore = graphCore;\n    }\n    public initGraph(lns: NLine[]) {\n        this.nodes = [];\n        this.edges = [];\n        this.AddEdgeByLines(lns);\n        return true;\n    }\n    public AddEdgeByLines(lns: NLine[]) {\n        let nodes: Node[] = [];\n        for (let i = 0; i < lns.length; ++i) {\n            let p0: NVector3 = lns[i].p0;\n            let p1: NVector3 = lns[i].p1;\n\n            // bounding box\n            if (this.minPt.long > p0.long) { this.minPt.long = p0.long; }\n            if (this.minPt.lat > p0.lat) { this.minPt.lat = p0.lat; }\n            if (this.minPt.elevation > p0.elevation) { this.minPt.elevation = p0.elevation; }\n            if (this.maxPt.long < p0.long) { this.maxPt.long = p0.long; }\n            if (this.maxPt.lat < p0.lat) { this.maxPt.lat = p0.lat; }\n            if (this.maxPt.elevation < p0.elevation) { this.maxPt.elevation = p0.elevation; }\n\n            if (this.minPt.long > p1.long) { this.minPt.long = p1.long; }\n            if (this.minPt.lat > p1.lat) { this.minPt.lat = p1.lat; }\n            if (this.minPt.elevation > p1.elevation) { this.minPt.elevation = p1.elevation; }\n            if (this.maxPt.long < p1.long) { this.maxPt.long = p1.long; }\n            if (this.maxPt.lat < p1.lat) { this.maxPt.lat = p1.lat; }\n            if (this.maxPt.elevation < p1.elevation) { this.maxPt.elevation = p1.elevation; }\n\n            nodes.push(this.AddNode(p0));\n            nodes.push(this.AddNode(p1));\n        }\n\n        // let svec = this.graphCore.gs.nnaEngine.app.definition.app.projection.ToScreen(this.minPt.long, this.minPt.lat);\n        // this.minPt.x = svec[0];\n        // this.minPt.y = svec[1];\n        // svec = this.graphCore.gs.nnaEngine.app.definition.app.projection.ToScreen(this.maxPt.long, this.maxPt.lat);\n        // this.maxPt.x = svec[0];\n        // this.maxPt.y = svec[1];\n\n        for (let i = 0; i < nodes.length; i += 2) {\n            this.AddEdge(nodes[i], nodes[i + 1]);\n        }\n    }\n    public AddEdge(n1: Node, n2: Node): Edge | undefined {\n        if (n1 === n2) return undefined;\n\n        const testedEdge = this.FindEdge(n1, n2);\n        if (testedEdge !== undefined) {\n            return testedEdge;\n        }\n\n        let edge = new Edge(n1, n2);\n        edge.id = this.edges.length;\n        this.edges.push(edge);\n        return edge;\n    }\n    public AddNode(p: NVector3): Node {\n        for (let i = 0; i < this.nodes.length; ++i) {\n            if (p.distanceTo(this.nodes[i].point) < 0.1) {\n                return this.nodes[i];\n            }\n        }\n        let node = new Node(p);\n        node.id = this.nodes.length;\n        this.nodes.push(node);\n        return node;\n    }\n\n    // ..............................................................\n\n    public FindEdge(n0: Node, n1: Node): Edge | undefined {\n        for (let i = 0; i < this.edges.length; ++i) {\n            if ((this.edges[i].n0 === n0 && this.edges[i].n1 === n1) || (this.edges[i].n0 === n1 && this.edges[i].n1 === n0)) {\n                return this.edges[i];\n            }\n        }\n        return undefined;\n    }\n    /*\n    public Node FindClosestNode(Point3d p) {\n        if (nodes.Count === 0) return null;\n        let index = -1;\n        double disMin = double.MaxValue;\n        for (let i = 0; i < this.nodes.length; ++i) {\n            double d = this.nodes[i].point.distanceTo(p);\n            if (d < disMin) {\n                index = i;\n                disMin = d;\n            }\n        }\n        return this.nodes[index];\n    }\n    */\n    public FindClosestNode(p: NVector3): Node | undefined {\n        if (this.nodes.length === 0) return undefined;\n        let index = -1;\n        let disMin = Number.MAX_VALUE;\n        for (let i = 0; i < this.nodes.length; ++i) {\n            let d = this.nodes[i].point.distanceTo(p);\n            if (d < disMin) {\n                index = i;\n                disMin = d;\n            }\n        }\n        return this.nodes[index];\n    }\n    public updatePropagation(originTree: Tree[], Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) {\n        for (let i = 0; i < this.nodes.length; ++i) {\n            this.nodes[i].networkDistance = -1;\n            this.nodes[i].euclideanDistance = -1;\n        }\n\n        for (let i = 0; i < originTree.length; ++i) {\n            let n: Node = this.nodes[originTree[i].nodeOrigin.id];\n            n.networkDistance = 0.0;\n            n.euclideanDistance = 0.0;\n            this.updatePropagationByNode(n, Optimizer, Beta);\n        }\n\n    }\n    public updatePropagationByNodes(origins: Node [], Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\n        // this.Optimizer = Optimizer;\n \n        // this.nodeOrigin = origin;\n\n        console.log(origins);\n \n        for(let i = 0; i < this.nodes.length; ++i) { this.nodes[i].reset(); }\n \n        for(let i = 0 ; i < origins.length; ++i) {\n            let origin = origins[i];\n            origin.networkDistance = 0.0;\n            origin.euclideanDistance = 0.0;\n            let queue: Node[] = [];\n            queue.push(origins[i]);\n            \n            for (let i = 0; i < 1000000; ++i) {\n                if (queue.length === 0) { break; }\n                let current: Node = queue[0];\n                let dis = current.point.distanceToGeo(origin.point);\n                if (current.euclideanDistance === -1 || dis < current.euclideanDistance) {\n                    current.euclideanDistance = current.point.distanceToGeo(origin.point);\n                }\n    \n                queue.shift();\n                for (let j = 0; j < current.nodes.length; ++j) {\n                    let np: Node = current.nodes[j];\n                    let newcost = Optimizer(current, np, Beta);\n                    let result = (current.networkDistance + newcost);\n                    let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n                    if (np.networkDistance === -1.0 || newtemp < np.networkDistance) {\n                        np.networkDistance = newtemp;\n                        queue.push(np);\n                    }\n                }\n            }\n        }\n     }\n    public updatePropagationByNode(origin: Node, Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\n       // this.Optimizer = Optimizer;\n\n       this.nodeOrigin = origin;\n\n       for(let i = 0; i < this.nodes.length; ++i) { this.nodes[i].reset(); }\n\n        let queue: Node[] = [];\n        queue.push(origin);\n        for (let i = 0; i < 1000000; ++i) {\n            if (queue.length === 0) { break; }\n            let current: Node = queue[0];\n            let dis = current.point.distanceToGeo(origin.point);\n            if (current.euclideanDistance === -1 || dis < current.euclideanDistance) {\n                current.euclideanDistance = current.point.distanceToGeo(origin.point);\n            }\n\n            queue.shift();\n            for (let j = 0; j < current.nodes.length; ++j) {\n                let np: Node = current.nodes[j];\n                let newcost = Optimizer(current, np, Beta);\n                let result = (current.networkDistance + newcost);\n                let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n                if (np.networkDistance === -1.0 || newtemp < np.networkDistance) {\n                    np.networkDistance = newtemp;\n                    queue.push(np);\n                }\n            }\n        }\n    }\n    public updateBackpropagation(vs: NVector3[]): Node[][] {\n        \n\n        let paths: Node[][] = [];\n        let i = 0; let j = 0; let k = 0;\n\n        for (i = 0; i < vs.length; ++i) {\n            let destination: Node = this.FindClosestNode(vs[i]) as Node;\n            // this.nodeDestinations[i] = destination;\n            let path: Node[] = [];\n            if (destination.networkDistance != -1.0) {\n                path.push(this.nodes[destination.id]);\n                let current: Node = destination;\n                for (j = 0; j < 100000; ++j) {\n                    let smallest: Node = current;\n                    smallest.countVisit++;\n                    for (k = 0; k < current.nodes.length; ++k) {\n                        let np: Node = current.nodes[k];\n                        if (np.networkDistance < smallest.networkDistance) {\n                            smallest = np;\n                        }\n                    }\n                    if (smallest === current) {\n                        path.push(this.nodeOrigin); // start node\n                        // path[0].euclideanDistance = path[0].point.distanceTo(this.nodeOrigin.point);\n                        paths.push(path);\n                        break;\n                    }\n                    current = smallest;\n                    path.push(this.nodes[current.id]);\n\n                    // if (current === this.destination) { break; }\n                }\n            }\n\n        }\n        // this.paths = paths;\n        return paths;\n    }\n\n}","import { Node } from '.'\r\nimport { NVector3, CONNECTIVITY } from '../../../../lib';\r\nexport class Edge {\r\n\r\n    public id: number = -1;\r\n    public n0: Node;\r\n    public n1: Node;\r\n    public mp: NVector3;\r\n    public CONNECTIVITY: CONNECTIVITY;\r\n\r\n    constructor(n0: Node, n1: Node){\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n\r\n        this.n0.edges.push(this);\r\n        this.n1.edges.push(this);\r\n\r\n        n0.nodes.push(n1);\r\n        n1.nodes.push(n0);\r\n\r\n        this.mp = this.GetMidPoint();\r\n        this.CONNECTIVITY = CONNECTIVITY.CONNECTED;\r\n    }\r\n    public GetMidPoint(): NVector3 {\r\n        return NVector3.getMidVec(this.n0.point, this.n1.point);\r\n    }\r\n    public updateScreenPos( toScreen: (x: number, y: number) => number[] ) {\r\n        this.n0.updateScreenPos(toScreen);\r\n        this.n1.updateScreenPos(toScreen);\r\n    }\r\n}","import { NVector3 } from '../../../../lib';\r\nimport { Edge } from '.'\r\n\r\nexport class Node {\r\n    public id: number = -1;\r\n    public point: NVector3;\r\n    public edges: Edge[] = [];\r\n    public nodes: Node[] = [];\r\n\r\n    public networkDistance: number = -1;\r\n    public euclideanDistance: number = 0;\r\n\r\n    public countVisit: number = 0;\r\n\r\n    public countOrigin: number = 1;\r\n    public countDestination: number = 1;\r\n\r\n    public countVisitTemp: number = 0;\r\n\r\n    constructor(vec: NVector3) {\r\n        this.point = new NVector3(vec.x, vec.y, vec.z);\r\n        this.point.lat = vec.lat;\r\n        this.point.long = vec.long;\r\n    }\r\n    public reset(): void{\r\n        this.networkDistance = -1;\r\n        this.euclideanDistance = 0.0;\r\n        this.countVisit = 0;\r\n        this.countVisitTemp = 0;\r\n    }\r\n    public deepCopy(): Node {\r\n        let n = new Node(this.point);\r\n        n.id = this.id;\r\n        return n;\r\n    }\r\n    public updateScreenPos( toScreen: (x: number, y: number) => number[] ) {\r\n        const sv = toScreen(this.point.long, this.point.lat);\r\n        this.point.x = sv[0];\r\n        this.point.y = sv[1];\r\n    }\r\n}","import { GraphCore } from '..';\r\nimport { Node, Edge } from '../Graph';\r\nimport { NVector3, NPolyline } from '../../../../lib';\r\nexport class Tree {\r\n    public gc: GraphCore;\r\n\r\n    public Optimizer: (current: Node, np: Node, Beta: number) => number;\r\n    // public transitionCostDelegate Optimizer;\r\n    // public delegate double transitionCostDelegate(Node n0, Node n1, double Beta);\r\n\r\n    public edges: Edge[] = [];\r\n    public nodes: Node[] = [];\r\n\r\n    public nodeDestinations: Node[] = [];\r\n    public nodeOrigin: Node;\r\n    public pointOrigin: NVector3;\r\n\r\n    public polylines: NPolyline[] = [];\r\n\r\n    public paths: Node[][] = [];\r\n\r\n    constructor(gc: GraphCore, p: NVector3) {\r\n        this.gc = gc;\r\n        this.duplicateGraph();\r\n        this.updateOriginByPt(p);\r\n    }\r\n    public updateOriginByPt(p: NVector3) {\r\n        let n = this.gc.graph.FindClosestNode(p);\r\n        if(n){\r\n            this.nodeOrigin = this.nodes[n.id];\r\n            this.pointOrigin = new NVector3(p.x, p.y, p.z);\r\n        }\r\n\r\n    }\r\n    public updatePropagation(Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\r\n        this.Optimizer = Optimizer;\r\n        \r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            this.nodes[i].networkDistance = -1;\r\n        }\r\n\r\n        let queue: Node[] = [];\r\n        this.nodeOrigin.networkDistance = 0;\r\n        queue.push(this.nodeOrigin);\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            if (queue.length == 0) { break; }\r\n            let current: Node = queue[0];\r\n            current.euclideanDistance = current.point.distanceTo(this.nodeOrigin.point);\r\n            queue.shift();\r\n            for (let j = 0; j < current.nodes.length; ++j) {\r\n                let np: Node = current.nodes[j];\r\n                let newcost = Optimizer(current, np, Beta);\r\n                let result = (current.networkDistance + newcost);\r\n                let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\r\n                if (np.networkDistance == -1.0 || newtemp < np.networkDistance) {\r\n                    np.networkDistance = newtemp;\r\n                    queue.push(np);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public updateBackpropagation(desID: number[]): Node[][] {\r\n        this.nodeDestinations = new Node[desID.length];\r\n\r\n        let paths: Node[][] = [];\r\n        let i = 0; let j = 0; let k = 0;\r\n        for (i = 0; i < desID.length; ++i) {\r\n            let destination: Node = this.nodes[desID[i]];\r\n            this.nodeDestinations[i] = destination;\r\n            let path: Node[] = [];\r\n            if (destination.networkDistance != -1.0) {\r\n                path.push(this.nodes[destination.id]);\r\n                let current: Node = destination;\r\n                for (j = 0; j < 100000; ++j) {\r\n                    let smallest: Node = current;\r\n                    smallest.countVisit++;\r\n                    for (k = 0; k < current.nodes.length; ++k) {\r\n                        let np: Node = current.nodes[k];\r\n                        if (np.networkDistance < smallest.networkDistance) {\r\n                            smallest = np;\r\n                        }\r\n                    }\r\n                    if (smallest == current) {\r\n                        path.push(this.nodeOrigin); // start node\r\n                        path[0].euclideanDistance = path[0].point.distanceTo(this.nodeOrigin.point);\r\n                        paths.push(path);\r\n\r\n                        break;\r\n                    }\r\n                    current = smallest;\r\n                    path.push(this.nodes[current.id]);\r\n\r\n                    // if (current == this.destination) { break; }\r\n                }\r\n            }\r\n\r\n        }\r\n        this.paths = paths;\r\n        return paths;\r\n    }\r\n    public GetPathsPolylines(min: number, max: number): NPolyline[] {\r\n        let pls: NPolyline[] = [];\r\n        for (let i = 0; i < this.paths.length; ++i) {\r\n            let pl: NPolyline = new NPolyline();\r\n            for (let j = 0; j < this.paths[i].length; ++j) {\r\n                pl.push(this.paths[i][j].point);\r\n            }\r\n            if (min < this.paths[i][0].networkDistance && this.paths[i][0].networkDistance < max) {\r\n                pls.push(pl);\r\n            }\r\n        }\r\n        this.polylines = pls;\r\n        return this.polylines;\r\n    }\r\n\r\n    public duplicateGraph(): void {\r\n        let i = 0;\r\n        let id0 = -1;\r\n        let id1 = -1;\r\n\r\n        this.nodes = []; // new Node[this.gc.graph.nodes.Count];\r\n        this.edges = []; // new Edge[this.gc.graph.edges.Count];\r\n\r\n        for (i = 0; i < this.gc.graph.nodes.length; ++i) {\r\n            this.nodes.push(this.gc.graph.nodes[i].deepCopy());\r\n        }\r\n        for (i = 0; i < this.gc.graph.edges.length; ++i) {\r\n            id0 = this.gc.graph.edges[i].n0.id;\r\n            id1 = this.gc.graph.edges[i].n1.id;\r\n            let e: Edge = new Edge(this.nodes[id0], this.nodes[id1]);\r\n            e.id = this.gc.graph.edges[i].id;\r\n            this.edges.push(e); ;\r\n        }\r\n    }\r\n}","import { meterFromGeoGPSPos } from '../../../lib';\r\n\r\nimport { Node } from '../GraphCore/Graph/Node';\r\n\r\nexport const costFnDistanceGeo = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return meterFromGeoGPSPos(p1.point, p0.point);\r\n}\r\nexport const costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return p1.point.distanceTo(p0.point);\r\n}\r\nexport const decayNegative = (d: number, beta: number) => {\r\n    let result = getDecay(d, beta);\r\n    if (result > 0.999) {\r\n        result = 0.999;\r\n    }\r\n    return result;\r\n}\r\nexport const decayPositive = (d: number, beta: number) => {\r\n    let result = getDecay(d, beta);\r\n    result = 1 - result;\r\n    if (result > 0.999) {\r\n        result = 0.999;\r\n    }\r\n    return result;\r\n}\r\nexport const getDecay = (cost: number, b: number = 1.0) => { // 0.002 // 0.999\r\n    return Math.pow(1 - b, cost);\r\n}\r\nexport const getGravityFalloff = (x: number, strength: number, Beta: number) => {\r\n    return strength * Math.exp(-Beta * x * x);\r\n}","import { GraphSystem } from '..';\r\nimport { NVector3, NLine } from '../../../lib'\r\nimport { Graph } from './Graph';\r\nimport { Tree } from './Tree/Tree';\r\n\r\nimport { costFnDistanceGeo } from '../GraphUtility/GraphUtility';\r\n\r\nexport class GraphCore {\r\n\r\n\r\n    public gs: GraphSystem;\r\n    public trees: Tree[] = [];\r\n   // public List<int> idOrigin;\r\n    public destinations: NVector3[] = [];\r\n    public idDestination: number[] = [];\r\n    public graph: Graph;\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n        this.trees = [];\r\n        this.destinations = [];\r\n        this.idDestination = [];\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graph = new Graph(this);\r\n        this.graph.initGraph(lns);\r\n    }\r\n    public setUnit(unit: string) {\r\n        \r\n    }\r\n    public computePath(origins: NVector3[], destinations: NVector3[], BETA: number = 0.002) {\r\n        this.trees = [];\r\n        let oWeight: number[] = [];\r\n        let dWeight: number[] = [];\r\n        this.computePathWeighted(origins, oWeight, destinations, dWeight, BETA);\r\n    }\r\n    public computePathWeighted(origins: NVector3[], oWeight: number[], destinations: NVector3[], dWeight: number[], BETA: number = 0.002) {\r\n        while (origins.length < oWeight.length) { oWeight.push(1); }\r\n        while (destinations.length < dWeight.length) { dWeight.push(1); }\r\n\r\n        this.updatePropagation(origins, oWeight);\r\n        this.updateBackpropagation(destinations, dWeight);\r\n        this.mergeAgents();\r\n    }\r\n    public updatePropagation(origins: NVector3[], oWeight: number[]) {\r\n\r\n        for (let i = 0; i < origins.length; ++i) {\r\n            let p = origins[i];\r\n\r\n            if (i == this.trees.length -1) {\r\n                if (this.trees[i].pointOrigin.distanceToGeo(p) < 0.1) {\r\n                    this.trees[i].updatePropagation(costFnDistanceGeo, 0.002);\r\n                }\r\n                else {\r\n                    this.trees[i].updateOriginByPt(p);\r\n                    this.trees[i].updatePropagation(costFnDistanceGeo, 0.002);\r\n                }\r\n            }\r\n            else {\r\n                let tree: Tree = new Tree(this, p);\r\n                tree.updatePropagation(costFnDistanceGeo, 0.002);\r\n                this.trees.push(tree);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n    public updateBackpropagation(destination: NVector3[], dWeight: number[], BETA: number = 0.002) {\r\n\r\n        for (let i = 0; i < destination.length; ++i) {\r\n            if (i == this.destinations.length - 1) {\r\n                if (destination[i].distanceToGeo(this.destinations[i]) < 0.1) {\r\n                    this.idDestination.push(this.idDestination[i]);\r\n                }\r\n                else {\r\n                    let n = this.graph.FindClosestNode(destination[i]);\r\n                    if (n){\r\n                        this.idDestination[i] = n.id;\r\n                        this.destinations[i] = destination[i];\r\n                    }\r\n \r\n                }\r\n            }\r\n            else {\r\n                let n = this.graph.FindClosestNode(destination[i]);\r\n                if (n){\r\n                    this.idDestination.push(n.id);\r\n                    this.destinations.push(destination[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.trees.length; ++i) {\r\n            let tree = this.trees[i];\r\n            tree.updateBackpropagation(this.idDestination);\r\n        }\r\n    }\r\n    public mergeAgents() {\r\n        this.graph.updatePropagation(this.trees, costFnDistanceGeo, 0.002);\r\n\r\n        for (let i = 0; i < this.trees.length; ++i) {\r\n            for (let j = 0; j < this.trees[i].nodes.length; ++j) {\r\n                this.graph.nodes[j].countVisit += this.trees[i].nodes[j].countVisit;\r\n                this.graph.nodes[j].countOrigin += this.trees[i].nodes[j].countOrigin;\r\n                this.graph.nodes[j].countDestination += this.trees[i].nodes[j].countDestination;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","\r\nimport { getFalseColor, COLORBLENDING, NVector3, distanceToXY } from '../../../lib';\r\n\r\nimport { GraphSystem } from '..';\r\n\r\nimport { Node } from '../GraphCore/Graph/Node';\r\nimport { BoidsBehaviors } from '../../AgencySystem/BoidsBehaviors/BoidsBehaviors';\r\n\r\n\r\nclass Properties {\r\n    lineWidth = 0.5;\r\n    strokeStyle = 'rgba(0, 255, 0, 0.5)';\r\n}\r\n\r\nexport class RendererGraph {\r\n    gs: GraphSystem;\r\n    \r\n    BoidsBehaviors: BoidsBehaviors | undefined = undefined;\r\n\r\n    start: NVector3;\r\n    end: NVector3;\r\n\r\n    path: Node[][] = [];\r\n    selPath: Node[] | undefined = undefined;\r\n\r\n    time: number = 0.0;\r\n\r\n    properties: Properties = new Properties();\r\n\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        \r\n        ctx.lineWidth = this.properties.lineWidth;\r\n        ctx.strokeStyle = this.properties.strokeStyle;\r\n\r\n        // console.log(this.gs.graphCore.graph.edges.length);\r\n        if(this.gs.graphCore.graph?.edges){\r\n            for (let i = 0; i < this.gs.graphCore.graph.edges.length; ++i) {\r\n                const edge = this.gs.graphCore.graph.edges[i];\r\n\r\n                if(isPanning) {\r\n                    edge.updateScreenPos(this.gs.nnaEngine.app.toScreen);\r\n            \r\n                } \r\n                // else {\r\n                    // console.log(edge.n0.networkDistance);\r\n                    ctx.beginPath();\r\n                    const cols = getFalseColor(edge.n0.networkDistance * 0.001);\r\n                    ctx.strokeStyle = `rgba(${cols[0]}, ${cols[1]}, ${cols[2]}, 1.0) `\r\n                    ctx.moveTo(edge.n0.point.x, edge.n0.point.y);\r\n                    ctx.lineTo(edge.n1.point.x, edge.n1.point.y);\r\n                    ctx.stroke();\r\n\r\n                    const dis = edge.n0.point.distanceToGeo(edge.n1.point); // * 0.000621371;\r\n\r\n                    if( !isPanning && this.gs.nnaEngine.app.controller.inspection){\r\n                        ctx.font = \"10px Arial\";\r\n                        ctx.fillStyle = '#000000';\r\n                        ctx.fillText( `${dis.toFixed(2)}`, edge.n0.point.x + (edge.n1.point.x - edge.n0.point.x) * 0.5, edge.n0.point.y + (edge.n1.point.y - edge.n0.point.y) * 0.5);\r\n                        // ctx.fillText( `${Math.round(edge.n0.networkDistance)}`, edge.n0.point.x + (edge.n1.point.x - edge.n0.point.x) * 0.5, edge.n0.point.y + (edge.n1.point.y - edge.n0.point.y) * 0.5  )\r\n                        // ctx.fillText(`${Math.round(edge.n0.networkDistance)}`, edge.n1.point.x, edge.n1.point.y  )\r\n                    }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = \"#ffffff\";\r\n        // console.log(this.start.x, this.start.y);\r\n        if(this.start) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.start.x, this.start.y, 5, 0, Math.PI * 2.0);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        if(this.end) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.end.x, this.end.y, 15, 0, Math.PI * 2.0);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        let selPathId = -1;\r\n        let dis = Number.MAX_SAFE_INTEGER;\r\n        const mx = this.gs.nnaEngine.app.controller.m.x;\r\n        const my = this.gs.nnaEngine.app.controller.m.y;\r\n\r\n        ctx.globalCompositeOperation = COLORBLENDING.COLOR_DODGE;\r\n        for(let j = 0 ; j < this.path.length; ++j) {\r\n            ctx.strokeStyle = 'rgba(255, 255, 10, 1)'\r\n            ctx.lineWidth = 2.4;\r\n            ctx.setLineDash([5, 4]);\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[j][0].point.x, this.path[j][0].point.y);\r\n            let theDis = distanceToXY(this.path[j][0].point.x, this.path[j][0].point.y, mx, my)\r\n            if(theDis < dis) { dis = theDis; selPathId = j; }\r\n            for(let i = 1 ; i < this.path[j].length; ++i) {\r\n\r\n                if(this.path[j][i]){\r\n                    ctx.lineTo(this.path[j][i].point.x, this.path[j][i].point.y);\r\n                    theDis = distanceToXY(this.path[j][i].point.x, this.path[j][i].point.y, mx, my)\r\n                    if(theDis < dis) { dis = theDis; selPathId = j; }\r\n                }\r\n            }\r\n\r\n            \r\n            // ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.lineDashOffset = this.time * -5;\r\n            ctx.setLineDash([]);\r\n        }\r\n\r\n        if(this.path.length > 0 && dis < 10) {\r\n            this.selPath = this.path[selPathId];\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.selPath[0].point.x, this.selPath[0].point.y);\r\n            for(let i = 1 ; i < this.selPath.length; ++i) {\r\n                if(this.selPath[i]){\r\n                    ctx.lineTo(this.selPath[i].point.x, this.selPath[i].point.y);\r\n                }\r\n            }\r\n            ctx.lineWidth = 4.4;\r\n            ctx.stroke();\r\n            ctx.lineDashOffset = this.time * -5;\r\n            ctx.setLineDash([]);\r\n        } else {\r\n            this.selPath = undefined;\r\n        }\r\n\r\n        ctx.globalCompositeOperation = COLORBLENDING.SOURCE_OVER;\r\n        // console.log(this.gs.graphCore.trees)\r\n\r\n        this.time+=0.1;\r\n\r\n\r\n        if(this.BoidsBehaviors) {\r\n            this.BoidsBehaviors.Update();\r\n            this.BoidsBehaviors.Render(ctx);\r\n        }\r\n    }\r\n    public getPath(x: number, y: number) {\r\n        if(this.selPath) {\r\n            console.log('detecting...', this.selPath);\r\n        }\r\n    }\r\n}","import { NVector3 } from '../../../lib';\nexport class BoidsPath {\n    r: number = 5;\n    nodes: NVector3[];\n    constructor(r: number) {\n        this.nodes = [];\n        this.r = r;\n    }\n    public AddNode(node: NVector3): void {\n        this.nodes.push(node);\n    }\n    public GetNodes(): NVector3[] {\n        let p: NVector3[] = [];\n        for (let i = 0; i < this.nodes.length; ++i) {\n            p.push(new NVector3(this.nodes[i].x, this.nodes[i].y, 0));\n            // p.push(this.nodes[i]);\n        }\n        return p;\n    }\n}","import { NVector3, remap } from '../../../lib';\nimport { BoidsPath } from './BoidsPath';\nexport class Boid {\n    public static MAX_VELOCITY: number = 5;\n    public static MAX_FORCE: number = 3;\n\n    // Collision avoidance\n    public static MAX_AVOID_AHEAD: number = 50;\n    public static AVOID_FORCE: number = 600;\n\n    // Queuing\n    public static MAX_QUEUE_AHEAD: number = 30;\n    public static MAX_QUEUE_RADIUS: number = 30;\n\n    // Separation\n    public static MAX_SEPARATION: number = 2.0;\n    public static SEPARATION_RADIUS: number = 30;\n\n    public MAX_FORCE: number;\n    public position: NVector3;\n    public velocity: NVector3;\n    public maxVelocity: number;\n    public desired: NVector3;\n    public steering: NVector3;\n    public mass: number;\n    public boidsPath: BoidsPath;\n    public currentNode: number;\n    public pathDir: number;\n    public rotation: number;\n    public vec: NVector3;\n    public preVec: NVector3[];\n\n    public avoidance: NVector3;\n    public ahead: NVector3;\n    public alpha: number;\n\n    isOriented: boolean;\n    activeBase64ID: string = ' ';\n    angle: number;\n    constructor(posX: number, posY: number, totalMass: number) {\n        // Boid.MAX_FORCE = Boid.MAX_VELOCITY * 3;\n        Boid.MAX_FORCE = Boid.MAX_VELOCITY; // * Math.random() * 2;\n        this.MAX_FORCE = Boid.MAX_FORCE;\n        this.position = new NVector3(posX, posY);\n        this.velocity = new NVector3(-1, -2);\n        this.desired = new NVector3(0, 0);\n        this.steering = new NVector3(0, 0);\n        this.vec = new NVector3(0, 0);\n        this.rotation = 0;\n        this.mass = totalMass;\n        // this.path = undefined;\n        this.currentNode = 0;\n        this.pathDir = 1;\n        this.angle = 0;\n        this.isOriented = false;\n\n        this.avoidance = new NVector3(0, 0);\n\n        this.maxVelocity = this.MAX_FORCE * (0.8 + Math.random() * 0.6);\n\n        this.Truncate(this.velocity, this.maxVelocity);\n        this.preVec = [];\n        // x = position.x;\n        // y = position.y;\n\n        // graphics.lineStyle(2, 0xffaabb);\n        // graphics.beginFill(0xFF0000);\n        // graphics.moveTo(0, 0);\n        // graphics.lineTo(0, -20);\n        // graphics.lineTo(10, 20);\n        // graphics.lineTo(-10, 20);\n        // graphics.lineTo(0, -20);\n        // graphics.endFill();\n\n        // graphics.moveTo(0, 0);\n        // this.activeBase64ID = '';\n    }\n    // GetNeighborAhead(): Boid {\n    // let ret: Boid | undefined = undefined;\n    // let qa: NVector3 = this.velocity.Clone();\n\n    // qa.Normalize();\n    // qa.Scale(Boid.MAX_QUEUE_AHEAD);\n\n    // this.ahead = this.position.Clone().Add(qa);\n\n    // for (let i = 0; i < Game.instance.boids.length; i++) {\n    //     let neighbour: Boid = Game.instance.boids[i];\n    //     let d: Number = this.Distance(ahead, neighbour.position);\n\n    //     if (neighbour != this && d <= Boid.MAX_QUEUE_RADIUS) {\n    //         ret = neighbour;\n    //         break;\n    //     }\n    // }\n\n    // return ret;\n    // }\n\n    // Queue(): NVector3 {\n    //     let v: NVector3 = this.velocity.Clone();\n    //     let brake: NVector3 = new NVector3(0, 0);\n    //     let neighbour: Boid = this.GetNeighborAhead();\n\n    //     if (neighbour != null) {\n    //         brake.x = -this.steering.x * 0.8;\n    //         brake.y = -this.steering.y * 0.8;\n\n    //         v.Scale(-1);\n    //         brake = brake.Add(v);\n    //         brake = brake.Add(this.Separation());\n\n    //         if (this.Distance(this.position, neighbour.position) <= Boid.MAX_QUEUE_RADIUS) {\n    //             this.velocity.Scale(0.3);\n    //         }\n    //     }\n\n    //     // Used to render the brake force vector on the screen\n    //     braking = brake;\n\n    //     return brake;\n    // }\n\n    // // Link: http://gamedev.tutsplus.com/tutorials/implementation/the-three-simple-rules-of-flocking-behaviors-alignment-cohesion-and-separation/\n    // separation(): NVector3 {\n    //     let force: NVector3 = new NVector3();\n    //     let neighborCount: int = 0;\n\n    //     for (let i: int = 0; i < Game.instance.boids.length; i++) {\n    //         let b: Boid = Game.instance.boids[i];\n\n    //         if (b != this && distance(b, this) <= SEPARATION_RADIUS) {\n    //             force.x += b.position.x - this.position.x;\n    //             force.y += b.position.y - this.position.y;\n    //             neighborCount++;\n    //         }\n    //     }\n\n    //     if (neighborCount != 0) {\n    //         force.x /= neighborCount;\n    //         force.y /= neighborCount;\n\n    //         force.scaleBy(-1);\n    //     }\n\n    //     force.normalize();\n    //     force.scaleBy(MAX_SEPARATION);\n\n    //     return force;\n    // }\n    public CollisionAvoidance(): NVector3 {\n        let tv: NVector3 = this.velocity.Clone();\n        tv.normalize();\n        tv.scale(Boid.MAX_AVOID_AHEAD * this.velocity.Length() / this.maxVelocity);\n\n        this.ahead = this.position.Clone().Add(tv);\n\n        let mostThreatening = undefined; // Obstacle\n\n        // for (let i = 0; i < Game.instance.obstacles.length; i++) {\n        //     // let obstacle: Obstacle = Game.instance.obstacles[i];\n        //     // let collision: Boolean = obstacle is Circle ?lineIntersecsCircle(this.position, this.ahead, obstacle as Circle) : lineIntersecsRectangle(this.position, this.ahead, obstacle as Rectangle);\n\n        //     if (collision && (mostThreatening == null || this.Distance(this.position, obstacle) < this.Distance(this.position, mostThreatening))) {\n        //         mostThreatening = obstacle;\n        //     }\n        // }\n\n        if (mostThreatening !== undefined) {\n            this.alpha = 0.4; // make the boid a little bit transparent to indicate it is colliding\n\n            // this.avoidance.x = this.ahead.x - mostThreatening.center.x;\n            // this.avoidance.y = this.ahead.y - mostThreatening.center.y;\n\n            this.avoidance.normalize();\n            this.avoidance.scale(Boid.AVOID_FORCE);\n        } else {\n            this.alpha = 1; // make the boid opaque to indicate there is no collision.\n            this.avoidance.scale(0); // nullify the this.avoidance force\n        }\n\n        return this.avoidance;\n    }\n    public Distance(a: NVector3, b: NVector3): number {\n        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n    }\n    public Truncate(v: NVector3, max: number): void {\n        let i: number = max / v.Length();\n        i = i < 1.0 ? i : 1.0;\n        v.scale(i);\n    }\n    public GetAngle(vector: NVector3): number {\n        return Math.atan2(vector.y, vector.x);\n    }\n    public Update(): void {\n        // steering = Seek(Flock.mouse);\n        this.steering = this.PathFollowing();\n\n        if (true) {\n            // let width = 500\n            // let doorway: NVector3 = new NVector3(width / 2, -100);\n\n            // steering = seek(doorway);\n            this.steering = this.steering.Add(this.CollisionAvoidance());\n            // this.steering = this.steering.Add(this.Queue());\n        }\n\n        this.Truncate(this.steering, this.MAX_FORCE);\n        this.steering.scale(1 / this.mass);\n\n        this.velocity = this.velocity.Add(this.steering);\n        this.Truncate(this.velocity, this.maxVelocity);\n\n        this.position = this.position.Add(this.velocity);\n\n        if (this.isOriented) {\n            let v = new NVector3(this.velocity.x, this.velocity.y);\n            // let v = new NVector3(this.velocity.x - this.vec.x, this.velocity.y - this.vec.y).Normalize();\n            this.rotation = v.GetAngle();\n        }\n\n        this.vec = new NVector3(this.position.x, this.position.y);\n        this.AddVecHistory();\n    }\n    public AddVecHistory() {\n        this.preVec.push(new NVector3(this.vec.x, this.vec.y));\n        if (this.preVec.length > 20) { this.preVec.shift(); }\n    }\n    public Render(ctx: CanvasRenderingContext2D) {\n        if (true) {\n            // this.DrawForces(ctx);\n            this.DrawTail(ctx);\n        }\n\n        if (this.activeBase64ID !== ' ') {\n            ctx.globalCompositeOperation = 'source-over';\n            let img = new Image();\n            img.src = this.activeBase64ID;\n            ctx.save();\n            ctx.globalAlpha = 0.85;\n            ctx.translate(this.vec.x, this.vec.y);\n            ctx.rotate(this.rotation);\n            ctx.drawImage(img, -img.width / 2, -img.width / 2);\n            ctx.restore();\n            ctx.globalCompositeOperation = 'lighter';\n        } else {\n            ctx.beginPath();\n            ctx.fillStyle = 'rgba(0,255,0,0.7)';\n            ctx.arc(this.vec.x, this.vec.y, 5, 0, 3.14 * 2);\n        }\n        ctx.closePath();\n        ctx.fill();\n        // this.DrawShape(ctx);\n\n    }\n    DrawTail(ctx: CanvasRenderingContext2D) {\n        let i = this.preVec.length;\n        while (i--) {\n            ctx.beginPath();\n            ctx.fillStyle = `rgba(0,255,0,${remap(i, 0.0, this.preVec.length, 0.01, 0.175)})`;\n            ctx.arc(this.preVec[i].x, this.preVec[i].y, remap(i, 0.0, this.preVec.length, 0.1, 10), 0, 3.14 * 2);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    public DrawShape(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = '#FF0000';\n\n        ctx.lineWidth = 0.1;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, -20);\n        ctx.lineTo(10, 20);\n        ctx.lineTo(-10, 20);\n        ctx.lineTo(0, -20);\n        ctx.closePath();\n\n        ctx.moveTo(0, 0);\n    }\n    public DrawForces(ctx: CanvasRenderingContext2D): void {\n        let velocity: NVector3 = this.velocity.Clone();\n        let steering: NVector3 = this.steering.Clone();\n        let desired: NVector3 = this.desired.Clone();\n\n        velocity.normalize();\n        steering.normalize();\n        desired.normalize();\n\n        // Force vectors\n        // if (!BoidsBehaviors.showForces) {\n        this.DrawForceVector(ctx, velocity, '#00FF00');\n        this.DrawForceVector(ctx, desired, '#0000FF');\n        // }\n    }\n    public DrawForceVector(ctx: CanvasRenderingContext2D, force: NVector3, color: string, scale: number = 100): void {\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(this.vec.x, this.vec.y);\n        ctx.lineTo(this.vec.x + force.x * scale, this.vec.y + force.y * scale);\n        ctx.closePath();\n        ctx.stroke();\n    }\n    private Seek(target: NVector3): NVector3 {\n        let force: NVector3;\n\n        this.desired = target.Sub(this.position);\n        this.desired.normalize();\n        this.desired.scale(this.maxVelocity);\n\n        force = this.desired.Sub(this.velocity);\n\n        return force;\n    }\n    private PathFollowing(): NVector3 {\n        let target: NVector3 | undefined = undefined;\n\n        let nodes: NVector3[] = this.boidsPath.GetNodes();\n\n        target = nodes[this.currentNode];\n\n        if (this.Distance(this.position, target) <= this.boidsPath.r) {\n            this.currentNode += this.pathDir;\n\n            if (this.currentNode >= nodes.length || this.currentNode < 0) {\n                this.pathDir *= -1;\n                this.currentNode += this.pathDir;\n            }\n        }\n        return target !== undefined ? this.Seek(target) : new NVector3(0, 0, 0);\n    }\n}","import { NVector3, getRandomArbitrary } from '../../../lib';\nimport { BoidsPath } from './BoidsPath';\nimport { Boid } from './Boid';\n\nimport { Node } from '../../GraphSystem/GraphCore/Graph/Node';\n\n// import { AppDrawing } from '../../AppDrawing/AppDrawing';\n\n// http://www.red3d.com/cwr/steer/\n\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-path-following--Flockdev-8769\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-leader-following--Flockdev-10810\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-queue--Flockdev-14365\n\n// https://gamedevelopment.tutsplus.com/series/understanding-steering-behaviors--gamedev-12732\nexport class BoidsBehaviors {\n    public static mouse: NVector3 = new NVector3(100, 100, 0);\n    public static width: number = 400;\n    public static height: number = 400;\n    public static showForces: boolean = false;\n    public static instance: BoidsBehaviors;\n    public boids: Boid[] = [];\n    public boidsPath: BoidsPath;\n    // public forces: Sprite;\n    public t: number;\n    isOriented: boolean;\n    activeBase64ID: string;\n    constructor(width: number, height: number) {\n        BoidsBehaviors.instance = this;\n        BoidsBehaviors.width = width;\n        BoidsBehaviors.height = height;\n        this.isOriented = false;\n        this.t = 0.0;\n        // this.initPath(new BoidsPath(20));\n        // addEventListener(Event.ADDED_TO_STAGE, init);\n    }\n    public InitPathByAPolyline(boidsPath: BoidsPath, numBoid: number = 7) {\n        this.boidsPath = boidsPath;\n        this.InitBoid(numBoid);\n    }\n    public InitPathByNode(boidsPath: Node[], numBoid: number = 7) {\n        console.log(boidsPath)\n        this.boidsPath = new BoidsPath(10);\n\n        for(let i = 0 ; i < boidsPath.length; ++i) {\n            if(boidsPath[i]){\n                this.boidsPath.AddNode(boidsPath[i].point);\n            }\n        }\n        this.InitBoid(numBoid);\n    }\n    public InitPath(boidsPath: BoidsPath, numPath: number = 8, numBoid: number = 7) {\n        this.boidsPath = boidsPath;\n        this.Init(numPath, numBoid);\n    }\n    public Init(numPath: number, numBoid: number): void {\n        this.reset();\n        this.boidsPath.r = 30;\n\n        // Add path nodescircles\n        let maxPathNodes: number = numPath;\n        for (let i = 0; i < maxPathNodes; i++) {\n            let node: NVector3 = new NVector3(BoidsBehaviors.width * i / maxPathNodes + 50, BoidsBehaviors.height * Math.random() * 0.8 + 20, 0);\n            // let node: NVector3 = new NVector3(this.boidsPath.nodes[0].x, this.boidsPath.nodes[0].y);\n            this.boidsPath.AddNode(node);\n        }\n        this.InitBoid(numBoid);\n    }\n    public InitBoid(numBoid: number = 7) {\n        let boid: Boid;\n        for (let i = 0; i < numBoid; i++) {\n            boid = new Boid(BoidsBehaviors.width / 2 + Math.random() * 50, 20 * Math.random(), 20 + Math.random() * 20);\n            boid.activeBase64ID = this.activeBase64ID;\n            boid.boidsPath = this.boidsPath;\n            this.boids.push(boid);\n        }\n\n        // this.forces = new Sprite();\n\n        // addChild(forces);\n\n        // addChild(new Button(Boids.width - 80, Boids.height - 60, \"Reload\", Boids.instance.init));\n        // addChild(new Button(Boids.width - 130, Boids.height - 60, \" + \", IncreasePathRadius));\n        // addChild(new Button(Boids.width - 180, Boids.height - 60, \" - \", DecreasePathRadius));\n        // addChild(new Button(Boids.width - 260, Boids.height - 60, \"Forces\", ToggleShowForces));\n    }\n    public ShiftSpeed(min: number, max: number) {\n        for (let b of this.boids) {\n            b.maxVelocity = getRandomArbitrary(min, max);\n        }\n    }\n    public IncreasePathRadius(): void {\n        BoidsBehaviors.showForces = true;\n        this.boidsPath.r += 2;\n    }\n    public DecreasePathRadius(): void {\n        BoidsBehaviors.showForces = true;\n        this.boidsPath.r -= 2;\n    }\n    public ToggleShowForces(): void {\n        BoidsBehaviors.showForces = !BoidsBehaviors.showForces;\n    }\n    public ShiftRadius(v: number) {\n        this.boidsPath.r = v;\n    }\n    public ShiftForce(min: number, max: number) {\n        for (let b of this.boids) {\n            b.maxVelocity = getRandomArbitrary(min, max);\n        }\n    }\n    public ShiftOriented(v: boolean) {\n        for (let b of this.boids) {\n            b.isOriented = v;\n        }\n    }\n    public reset(): void {\n        // while (numChildren) {\n        //     removeChildAt(0);\n        // }\n        // boids.length = 0;\n        // path.getNodes().length = 0;\n        // showForces = false;\n\n        // stage.removeEventListener(MouseEvent.CLICK, ToggleShowForces);\n    }\n    public Update(): void {\n        for (let i = 0; i < this.boids.length; i++) { this.boids[i].Update(); }\n        if (this.t > 16) { this.t = 0; }\n        this.t += 0.5;  // AppDrawing.app.cCanvas.delta;\n    }\n    public Render(ctx: CanvasRenderingContext2D) {\n        ctx.globalCompositeOperation = 'lighter';\n        this.drawPath(ctx);\n        for (let i = 0; i < this.boids.length; i++) {\n            this.boids[i].Render(ctx);\n            // this.drawForces(ctx, this.boids[i]);\n        }\n        ctx.globalCompositeOperation = 'source-over';\n    }\n    public drawPath(ctx: CanvasRenderingContext2D): void {\n        let nodes: NVector3[] = this.boidsPath.GetNodes();\n        for (let i: number = 0; i < nodes.length; ++i) {\n            this.drawPathPoint(ctx, nodes[i], '#FF00CC');\n\n            if (BoidsBehaviors.showForces) {\n                this.drawCircle(ctx, nodes[i], 'gray', this.boidsPath.r);\n            }\n        }\n\n        ctx.beginPath();\n        ctx.lineWidth = 0.2;\n        ctx.strokeStyle = '#ffffff';\n        ctx.setLineDash([4, 4]);\n        ctx.lineDashOffset = -this.t;\n        ctx.moveTo(nodes[0].x, nodes[0].y);\n        for (let i = 1; i < nodes.length; ++i) { ctx.lineTo(nodes[i].x, nodes[i].y); }\n        // ctx.closePath();\n        ctx.stroke();\n        ctx.setLineDash([0, 0]);\n\n        ctx.beginPath();\n        ctx.lineWidth = 0.3;\n        ctx.strokeStyle = '#000000';\n        ctx.setLineDash([4, 8]);\n        ctx.lineDashOffset = -this.t;\n        ctx.moveTo(nodes[0].x, nodes[0].y);\n        for (let i = 1; i < nodes.length; ++i) { ctx.lineTo(nodes[i].x, nodes[i].y); }\n        // ctx.closePath();\n        ctx.stroke();\n        ctx.setLineDash([0, 0]);\n    }\n    public drawPathPoint(ctx: CanvasRenderingContext2D, force: NVector3, color: string): void {\n\n        ctx.fillStyle = 'rgba(255,0,0,0.6)';\n        ctx.beginPath();\n        ctx.arc(force.x, force.y, 2.5, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        // forces.graphics.lineStyle(1, 0x323232);\n        // forces.graphics.beginFill(0xFF5000);\n        // forces.graphics.drawCircle(force.x, force.y, 6);\n        // forces.graphics.endFill();\n    }\n    public drawCircle(ctx: CanvasRenderingContext2D, force: NVector3, color: string, radius: number): void {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(force.x, force.y, 2, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // forces.graphics.lineStyle(1, 0x323232);\n        // //forces.graphics.beginFill(0xFF5000);\n        // forces.graphics.drawCircle(force.x, force.y, radius);\n        // //forces.graphics.endFill();\n    }\n    public set IsOrient(v: boolean) {\n        this.isOriented = v;\n        this.ShiftOriented(v);\n    }\n    public get IsOrient() {\n        return this.isOriented;\n    }\n}","import { Core } from '../Core';\r\nimport { NVector3, NLine } from '../../lib';\r\nimport { Analysis } from './Analysis';\r\nimport { GraphCore } from './GraphCore';\r\nimport { RendererGraph } from './RendererGraph';\r\nimport { Node } from './GraphCore/Graph/Node';\r\n\r\n// import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\n\r\nimport { costFnDistanceGeo } from './GraphUtility/GraphUtility';\r\n\r\nimport { BoidsBehaviors } from '../AgencySystem/BoidsBehaviors/BoidsBehaviors';\r\n\r\nexport class GraphSystem {\r\n    nnaEngine: Core\r\n    analysis: Analysis;\r\n    graphCore: GraphCore;\r\n    renderGraph: RendererGraph;\r\n\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n        this.analysis = new Analysis(this);\r\n        this.graphCore = new GraphCore(this);\r\n        this.renderGraph = new RendererGraph(this)\r\n\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graphCore.initGraph(lns);\r\n    }\r\n\r\n    public setUnit(unit: string) {\r\n        this.graphCore.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.graphCore.computePath(origin, destination, BETA);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.renderGraph.render(ctx, isPanning);\r\n    }\r\n    public mouseClick(x: number, y: number) {\r\n        // console.log('ddd');\r\n        this.initTwoPoint();\r\n        // this.computePath([this.start], [this.end])\r\n        const n = this.graphCore.graph.FindClosestNode(this.renderGraph.start);\r\n        const cost = (p0: Node, p1: Node, beta: number = 0.0002): number => {\r\n            return p1.point.distanceTo(p0.point) * 0.5;\r\n        }\r\n        if (n){\r\n            this.graphCore.graph.updatePropagationByNode(n, cost, 0.02);\r\n        }\r\n\r\n    }\r\n    public getPath(x: number, y: number){\r\n        this.renderGraph.getPath(x,y);\r\n    }\r\n    public initByCPoints(cps: any){\r\n        // public initByCPoints(cps: CPoint[]){\r\n        const nodes: Node[] = [];\r\n        for(let i = 0 ; i < cps.length; ++i) {\r\n            const n = this.graphCore.graph.FindClosestNode(cps[i].v) as Node;\r\n            nodes.push(n);\r\n        }\r\n        this.graphCore.graph.updatePropagationByNodes(nodes, costFnDistanceGeo, 0.02);\r\n\r\n    }\r\n    public initByCPointsBackpro(cps: any){\r\n        // public initByCPointsBackpro(cps: CPoint[]){\r\n        const nodes: NVector3[] = [];\r\n        for(let i = 0 ; i < cps.length; ++i) {\r\n            // const n = this.graphCore.graph.FindClosestNode(cps[i].v) as Node;\r\n            nodes.push(cps[i].v);\r\n        }\r\n        const path = this.graphCore.graph.updateBackpropagation(nodes);\r\n        console.log(path);\r\n        this.renderGraph.path = path;\r\n    }\r\n    public initByCPoint(cps: any){\r\n        // public initByCPoint(cps: CPoint[]){\r\n        // console.log(cps.length);\r\n\r\n        if(cps.length > 0) {\r\n            const start = cps[0].v;\r\n            const ends: NVector3[] = [];\r\n    \r\n            for(let i = 1 ; i < cps.length; ++i) {\r\n                ends.push(cps[i].v);\r\n            }\r\n\r\n            // const vs = cps.shift() as CPoint;\r\n            // this.end = cps[cps.length -2].v\r\n            const n = this.graphCore.graph.FindClosestNode(start) as Node;\r\n            this.renderGraph.start = n.point; // cps[cps.length -1].v\r\n            // const cost = (p0: Node, p1: Node, beta: number = 0.0002): number => {\r\n            //     return p1.point.distanceTo(p0.point) * 0.5;\r\n            // }\r\n            if (n){\r\n                this.graphCore.graph.updatePropagationByNode(n, costFnDistanceGeo, 0.02);\r\n\r\n                // const vEnds: NVector3[] = []; \r\n                // for(let i = 0 ; i < cps.length; ++i) {\r\n                //     this.end = cps[i].v;\r\n                //     vEnds.push(cps[i].v);\r\n                // }\r\n                // console.log(vEnds);\r\n\r\n                const path = this.graphCore.graph.updateBackpropagation(ends);\r\n                // console.log(path);\r\n                this.renderGraph.path = path;\r\n                this.initAgentVis();\r\n\r\n            }\r\n        }\r\n    }\r\n    public initAgentVis(){\r\n        if(this.renderGraph.path[0] && this.renderGraph.BoidsBehaviors === undefined){\r\n            this.renderGraph.BoidsBehaviors = new BoidsBehaviors(500, 500);\r\n            this.renderGraph.BoidsBehaviors?.InitPathByNode(this.renderGraph.path[0], 10);\r\n        }\r\n    }\r\n    public initTwoPoint(){\r\n       \r\n        const width = (this.graphCore.graph.maxPt.x - this.graphCore.graph.minPt.x);\r\n        const height = (this.graphCore.graph.maxPt.y - this.graphCore.graph.minPt.y);\r\n\r\n        // console.log(width, height);\r\n        \r\n        let x = this.graphCore.graph.minPt.x + (width * Math.random());\r\n        let y = this.graphCore.graph.minPt.y+ (height * Math.random());\r\n\r\n        this.renderGraph.start = this.graphCore.graph.nodes[ Math.floor((this.graphCore.graph.nodes.length -1) * Math.random()) ].point;\r\n\r\n        x = this.graphCore.graph.minPt.x + (width * Math.random());\r\n        y = this.graphCore.graph.minPt.y+ (height * Math.random());\r\n        // this.end = new NVector3(x, y, 0);\r\n\r\n        this.renderGraph.end = this.graphCore.graph.nodes[ Math.floor((this.graphCore.graph.nodes.length -1) * Math.random()) ].point;\r\n\r\n    }\r\n\r\n}","import { Core } from '../Core';\r\nexport class VoxelSystem {\r\n    nnaEngine: Core\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n\r\n    }\r\n}","import { AgencySystem } from './AgencySystem';\r\nimport { GraphSystem } from './GraphSystem';\r\nimport { VoxelSystem } from './VoxelSystem';\r\nimport { NNAEngineV3 } from '..';\r\nimport { NVector3, NLine } from '../lib'\r\n\r\nexport class Core {\r\n    app: NNAEngineV3;\r\n    agencySystem: AgencySystem;\r\n    graphSystem: GraphSystem;\r\n    voxelSystem: VoxelSystem;\r\n\r\n    constructor(app: NNAEngineV3) {\r\n        this.app = app;\r\n        this.agencySystem = new AgencySystem(this);\r\n        this.graphSystem = new GraphSystem(this);\r\n        this.voxelSystem = new VoxelSystem(this);\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graphSystem.initGraph(lns);\r\n    }\r\n\r\n    public setUnit(unit: string) {\r\n        this.graphSystem.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.graphSystem.computePath(origin, destination, BETA);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        // console.log('working');\r\n        this.graphSystem.render(ctx, isPanning);\r\n        this.agencySystem.render(ctx, isPanning)\r\n\r\n               // if(this.sandbox.definition) {\r\n\r\n        //     for(let i = 0 ; i < this.renderer.length; ++i) {\r\n        //         this.renderer[i](ctx, this.isPanning);\r\n        //     }\r\n\r\n\r\n        //     this.sandbox.definition.render(ctx, this.isPanning);\r\n\r\n        //     if(this.sandbox.definition.controller.isInspectionMode) {\r\n                ctx.fillStyle = \"#ffffff\";\r\n                ctx.font = \"12px Arial\";\r\n\r\n                const geoPos = this.app.toMap(this.app.controller.m.x, this.app.controller.m.y);\r\n                ctx.fillText(`Lat: ${geoPos[0]}, Lon: ${geoPos[1]}, Zoom level: `, 150, 20 );\r\n                // ctx.fillText(`Lat: ${geoPos[0]}, Lon: ${geoPos[1]}, Zoom level: ${this.sandbox.mapView.zoom}`, this.sandbox.mapView.width * 0.5 - 150, 20 );\r\n                // ctx.fillText(`FPS: ${Math.floor(this.app.core.graphSystem.nnaEngine. .definition.nnaEngineV3.fps)}`, this.sandbox.mapView.width * 0.5 - 150, 40 );\r\n                // ctx.fillText(`Activated App: ${this.sandbox.definition.ACTIVATED_APP}`, this.sandbox.mapView.width * 0.5 - 150, 60 );\r\n        //     }\r\n        // }\r\n        \r\n    }\r\n}","import { NNAEngineV3 } from '..';\r\nexport class IO {\r\n    NNAEngineV3: NNAEngineV3;\r\n    constructor(NNAEngineV3: NNAEngineV3){\r\n        this.NNAEngineV3 = NNAEngineV3;\r\n    }\r\n    public async importCSV(path: string){ // http://localhost:8080/src/assets/data.txt\r\n\r\n        console.log('import');\r\n\r\n        // let file = 'torus.obj';\r\n        // return fetch(`${NJSLoader.path}/3dData/${file}`)\r\n        // return fetch(path, {mode: 'no-cors'})\r\n        return fetch(path)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // console.log(d);\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n}\r\n","import { APP, MouseEventData, KeyboardEventData, NVector3, NLine, CSVData, getAllUrlParams } from './lib';\r\nimport { HTMLView } from './View/HTMLView';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Core } from './Core/Core';\r\nimport { IO } from './IO';\r\n\r\nexport class NNAEngineV3 {\r\n\r\n    view: HTMLView;\r\n    core: Core;\r\n    io: IO;\r\n    controller: Controller;\r\n\r\n    data: CSVData;\r\n\r\n    lastCalledTime: number = Date.now();;\r\n    fps: number = 30;\r\n    delta: number = 1;\r\n\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n\r\n    constructor() {\r\n        this.controller = new Controller(this);\r\n        this.view = new HTMLView(this);\r\n        this.core = new Core(this);\r\n        this.io = new IO(this);\r\n        const param = getAllUrlParams();\r\n        console.log(param);\r\n        console.log('NNAEngineV3 is running...')\r\n\r\n\r\n\r\n        // const request = new Request('http://njslab.com/NJSLabEnv/NY_street_lat_long.csv');\r\n\r\n        // fetch(request, {mode: 'no-cors'}).then( (response) => {\r\n        //     // Convert to JSON\r\n        //     return response.text();\r\n        // }).then( (j) => {\r\n        //     // Yay, `j` is a JavaScript object\r\n        //     console.log('jjjjjjjjjjjjjj', j)\r\n        //     // console.log(JSON.stringify(j));\r\n        // }).catch((error) => {\r\n        //     console.log('Request failed', error)\r\n        // }).then((d: any) => {\r\n        //     console.log('dddddddddddddddddddddddddd');\r\n        //     console.log(d);\r\n        // }\r\n        // );\r\n\r\n    }\r\n    // https://cors-anywhere.herokuapp.com/http://njslab.com/NJSLabEnv/NY_street_lat_long.csv\r\n    public importDummyData(url: string = 'https://raw.githubusercontent.com/NamjuLee/data/master/NYC/NY_street_lat_long.csv'){\r\n    // public importDummyData(url: string = 'http://njslab.com/NJSLabEnv/NY_street_lat_long.csv'){\r\n        // this.io.importCSV(``).then( (d: any) => {\r\n        this.io.importCSV(url).then( (d: any) => {\r\n            console.log(d);\r\n            this.data = new CSVData();\r\n            this.data.ComputeCSV(d);\r\n            this.data.initLines((x: number, y: number) => this.toScreen(x, y));\r\n\r\n            this.core.graphSystem.initGraph(this.data.lineTest);\r\n        });\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toScreen = projection.toScreen;\r\n        this.toMap = projection.toMap;\r\n    }\r\n    public apiCall(app: APP, action: string, data: any | undefined) {\r\n        this.controller.execution(app, action, data);\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.core.initGraph(lns);\r\n    }\r\n    public reset(){\r\n        this.view.reset();\r\n    }\r\n    public setUnit(unit: string) {\r\n        this.core.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.core.computePath(origin, destination, BETA);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        // console.log(m);\r\n        this.controller.mouseEvent(m);\r\n    }\r\n    public keyEvent(e: KeyboardEventData){\r\n        // this.controller.ke(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.core.render(ctx, isPanning)\r\n        \r\n        // if(isPanning) {\r\n        //     if (this.data) {\r\n        //         this.data.updateProjection(this.definition.app.projection.ToScreen);\r\n        //     }\r\n        // }\r\n\r\n        // if (this.data) {\r\n        //     this.data.render(ctx, this.definition.app.projection.ToScreen, this.definition.controller.m.x, this.definition.controller.m.y);\r\n        // }\r\n\r\n       this.ComputeFPS();\r\n        // console.log('render');\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","import { MOUSE_TYPE, COMMAND, MouseEventData } from '../../lib'\r\nimport { ActiveCommandController } from '../';\r\nexport class CommandBase {\r\n    activeCommandController: ActiveCommandController;\r\n    type: COMMAND = COMMAND.SELECT;\r\n\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n\r\n        this.activeCommandController = activeCommandController;\r\n\r\n    }\r\n    public mouseEvent(e: MouseEventData) {\r\n        // console.log(e.type)\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                this.MouseLeftClickPre(e); return;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                this.MouseMiddleClickPre(e); return;\r\n            case MOUSE_TYPE.RIGHT:\r\n                this.MouseRightClickPre(e); return;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                this.MouseDoubleClickPre(e); return;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.MouseMovePre(e); return;\r\n            case MOUSE_TYPE.DRAG:\r\n                this.MouseDragPre(e); return;\r\n            case MOUSE_TYPE.DOWN:\r\n                this.MouseDownPre(e); return;\r\n            case MOUSE_TYPE.UP:\r\n                this.MouseUpPre(e); return;\r\n            case MOUSE_TYPE.WHEEL:\r\n                this.MouseWheelPre(e); return;\r\n                return;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n     // .......................................................\r\n     public MouseDown(e: MouseEventData) {/* */ }\r\n     public MouseDownPre(e: MouseEventData) {\r\n        //  this.scene.MouseDown(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture);\r\n\r\n        this.MouseDown(e);\r\n     }\r\n     public MouseLeftClick(e: MouseEventData) {/* */ }\r\n     public MouseLeftClickPre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n\r\n        if(this.activeCommandController.drawingEngine.scene.capture){\r\n            this.activeCommandController.drawingEngine.scene.capture.isSelected = !this.activeCommandController.drawingEngine.scene.capture.isSelected;\r\n        } else {\r\n            this.activeCommandController.drawingEngine.geometryCommon.resetSelections();\r\n            // this.activeCommandController.drawingEngine.scene.resetSelections();\r\n        }\r\n\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture)\r\n        //  this.scene.MouseLeftClick(e.x, e.y);\r\n         this.MouseLeftClick(e);\r\n     }\r\n     public MouseMiddleClick(e: MouseEventData) {/* */ }\r\n     public MouseMiddleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseMiddleClick(e.x, e.y);\r\n         this.MouseMiddleClick(e);\r\n     }\r\n     public MouseRightClick(e: MouseEventData) { /* */ }\r\n     public MouseRightClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseRightClick(e.x, e.y);\r\n         this.MouseRightClick(e);\r\n     }\r\n     public MouseUp(e: MouseEventData) { /* */ }\r\n     public MouseUpPre(e: MouseEventData) {\r\n        //  this.scene.MouseUp(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = undefined;\r\n        // console.log('this.activeCommandController.drawingEngine.scene.capture', this.activeCommandController.drawingEngine.scene.capture)\r\n        this.MouseUp(e);\r\n \r\n     }\r\n     public MouseDoubleClick(e: MouseEventData) {/* */ }\r\n     public MouseDoubleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseDoubleClick(e.x, e.y);\r\n         this.MouseDoubleClick(e);\r\n     }\r\n     public MouseMove(e: MouseEventData) {/* */ }\r\n     public MouseMovePre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.geometryCommon.updateHover(e.x, e.y);\r\n        //  this.scene.MouseMove(e.x, e.y);\r\n         this.MouseMove(e);\r\n     }\r\n     public MouseDrag(e: MouseEventData) {/* */ }\r\n     public MouseDragPre(e: MouseEventData) {\r\n        //  this.scene.MouseDrag(e.x, e.y);\r\n        if (this.activeCommandController.drawingEngine.scene.capture) {\r\n            const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y); \r\n            this.activeCommandController.drawingEngine.scene.capture.translate(e.x, e.y, mv[0], mv[1]);\r\n        }\r\n         this.MouseDrag(e);\r\n     }\r\n     public MouseWheel(e: MouseEventData) {/* */ }\r\n     public MouseWheelPre(e: MouseEventData) {\r\n        //  this.scene.MouseWheel(e.x, e.y, e.wheel);\r\n         // console.log(\"drag\");\r\n         this.MouseWheel(e);\r\n     }\r\n}","import { NVector3 } from '../../lib';\r\nimport { GeometryBase } from './GeometryBase';\r\nexport class Collision {\r\n    geometryBase: GeometryBase;\r\n\r\n    isCollided: boolean = false;\r\n\r\n    neighborShapes: GeometryBase[] = [];\r\n\r\n    minVec: NVector3;\r\n    maxVec: NVector3;\r\n\r\n    isVisited: boolean = false;\r\n    numOrder: number = -1;\r\n\r\n    constructor(geometryBase: GeometryBase) {\r\n        this.geometryBase = geometryBase;\r\n        const r = 5;\r\n        this.minVec = new NVector3(this.geometryBase.v.x - r, this.geometryBase.v.y - r, 0);\r\n        this.maxVec = new NVector3(this.geometryBase.v.x + r, this.geometryBase.v.y + r, 0);\r\n    }\r\n    public Reset(){\r\n        this.neighborShapes = [];\r\n        this.numOrder = -1;\r\n        this.geometryBase.numVisit = 0;\r\n        this.geometryBase.isCollapse = false;\r\n        this.isCollided = false;\r\n        this.isVisited = false;\r\n    }\r\n}","import { GeometryBase } from '../Base/GeometryBase';\r\nimport { ACTIVE_UI, NVector3, distanceToXY } from '../../lib';\r\n\r\nimport { Scene } from '../../Scene';\r\n\r\nimport { Collision } from '../Base/Collision';\r\n\r\nexport interface IPoint {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n}\r\n\r\nexport class CPoint extends GeometryBase {\r\n    \r\n    r: number = 5;\r\n    id: string;\r\n    t: number = 0.0;\r\n    color = '#00ff00';\r\n    colorHover = '#0ffff0';\r\n\r\n    collision: Collision;\r\n\r\n    constructor(scene: Scene, param: IPoint) {\r\n        super(scene, param.x, param.y);\r\n        this.type = ACTIVE_UI.point;\r\n        this.v = new NVector3(param.x, param.y, param.z);\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n        this.v.x = x;\r\n        this.v.y = y;\r\n        this.v.long = long;\r\n        this.v.lat = lat;\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        if (distanceToXY(this.v.x, this.v.y, x, y) < this.r + 3) {\r\n            this.isHover = true;\r\n            return true;\r\n        }\r\n        this.isHover = false;\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: ( x: number, y: number) => number[] ) {\r\n        if (isPanning && this.scene.drawingEngine.projection.isCustom) {\r\n            const sv = toScreen(this.v.long, this.v.lat);\r\n            this.v.x = sv[0];\r\n            this.v.y = sv[1];\r\n        }\r\n    }\r\n    public toJson() {\r\n        return { x: this.v.x, y: this.v.y }\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n\r\n        let r = this.r + (Math.sin(this.t))\r\n        if(this.isHover) {\r\n            r += 3;\r\n            ctx.fillStyle = this.colorHover;\r\n        } else {\r\n            ctx.fillStyle = this.color;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.v.x, this.v.y, r  , 0.0, Math.PI * 2.0 );\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        if(this.isSelected) {\r\n            ctx.lineWidth =3;\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.stroke();\r\n        }\r\n        \r\n        this.t += 0.06;\r\n    }\r\n\r\n}","import { ACTIVE_UI, getUUID } from '../../lib';\r\nimport { Scene } from '../../Scene';\r\nimport { Collision } from './Collision';\r\nimport { NVector3 } from '../../lib';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    public v: NVector3;\r\n    public type: ACTIVE_UI;\r\n    public id: string = '';\r\n    numVisit: number = 0;\r\n\r\n    public isCollapse: boolean = false;\r\n\r\n    public isHidden: boolean = false;\r\n    public isRenderable: boolean = true;\r\n\r\n    public isSelected: boolean = false;\r\n    public isHover: boolean = false;\r\n    public collision: Collision;\r\n\r\n    constructor(scene: Scene, x: number, y: number) {\r\n        this.scene = scene;\r\n        this.v = new NVector3(x, y, 0);\r\n        this.id = getUUID();\r\n        \r\n        this.collision = new Collision(this);\r\n    }\r\n    public toJson() {\r\n        return { };\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: (x: number, y: number) => number[]) {\r\n        /* */\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n}","import { COMMAND, MouseEventData } from '../../lib'\r\nimport { CommandBase } from './CommandBase';\r\nimport { ActiveCommandController } from '../';\r\nimport { CPoint } from '../../Geometry/Point';\r\nexport class CommandSelect extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.SELECT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n        console.log('sel' , e)\r\n    }\r\n}\r\nexport class CommandPoint extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.POINT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n        const p = new CPoint(this.activeCommandController.drawingEngine.scene, {x: e.x, y: e.y, z : 0})\r\n        const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y);\r\n        p.v.long = mv[0];\r\n        p.v.lat = mv[1];\r\n\r\n        this.activeCommandController.drawingEngine.scene.addGeometry(p);\r\n        // console.log(this.activeCommandController.hasShift)\r\n        if(this.activeCommandController.hasShift) { return }\r\n        this.activeCommandController.drawingEngine.setCommand();\r\n    }\r\n}\r\nexport class CommandLine extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.LINE;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n        console.log('line' , e)\r\n    }\r\n}","// import { MouseEventData } from '../../../../Core/EventInteraction';\r\nimport { DrawingEngine } from '../';\r\nimport { CommandBase } from './Commands/CommandBase';\r\nimport { CommandSelect, CommandPoint, CommandLine } from './Commands/CommandShape';\r\n\r\nimport { COMMAND } from '../lib'\r\n\r\nimport { fetchJson } from '../../../NJSCore/IO';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class ActiveCommandController {\r\n    drawingEngine: DrawingEngine;\r\n\r\n    \r\n    activeCommand: CommandBase;\r\n    public commands = {};\r\n\r\n    hasShift: boolean = false;\r\n    inspection: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        this.commands = {\r\n            SELECT : new CommandSelect(this),\r\n            POINT : new CommandPoint(this),\r\n            LINE : new CommandLine(this),\r\n        }\r\n\r\n        // this.commands.Line = new CommandBase(this);\r\n        // this.commands.Point = new CommandBase(this);\r\n        // this.commands.Line = new CommandBase(this);\r\n\r\n        this.activeCommand = this.commands[COMMAND.SELECT];\r\n    }\r\n    public setCommander(commander: string) {\r\n        switch (commander) {\r\n            case 'save':\r\n                console.log('save!!');\r\n                break;\r\n            case 'load':\r\n                console.log('load!!');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(commander);\r\n        switch (commander as COMMAND) {\r\n            case COMMAND.SELECT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.POINT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.LINE:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            // case 'point':\r\n            //     this.activeCommand = this.commands[commander];\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public apiCall(command: string): any {\r\n\r\n\r\n        switch (command ) {\r\n            case 'getSelectedCPoint':\r\n                return this.drawingEngine.geometryCommon.getSelCPoint();\r\n            case 'importZipData':\r\n                return this.popZipData();\r\n            case 'importClustering':\r\n                return this.drawingEngine.addon.InitClustering();\r\n            case 'importClusteringCollision':\r\n                return this.drawingEngine.addon.InitClusteringCollision();\r\n\r\n            case 'save':\r\n                return this.drawingEngine.geometryCommon.toJson();\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public async popZipData (){\r\n                \r\n        const json = await fetchJson('https://raw.githubusercontent.com/NamjuLee/data/master/US/zip.json');\r\n        console.log(json);\r\n        let count = 0;\r\n        for(let i of json['pos']) {\r\n            // console.log(i);\r\n\r\n            const p = this.greatePointByGeoPos(i[0], i[1]);\r\n            p.t += Math.random() * 10;\r\n            if(count++ > 2000) { return; }\r\n        }\r\n    \r\n\r\n    }\r\n    public greatePointByGeoPos(long: number, lat: number) {\r\n        const spos = this.drawingEngine.projection.toScreen(long, lat);\r\n        const p = new CPoint(this.drawingEngine.scene, {x: spos[0], y: spos[1], z: 0 });\r\n        p.v.long = long;\r\n        p.v.lat = lat;\r\n        this.drawingEngine.scene.addGeometry(p);\r\n        return p;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nexport class Projection{\r\n    drawingEngine: DrawingEngine;\r\n    public isCustom: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toMap = projection.toMap;\r\n        this.toScreen = projection.toScreen;\r\n        this.isCustom = true;\r\n    }\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n}","import { DrawingEngine } from '../';\r\n// import firebase from 'firebase';\r\n\r\nexport class IO {\r\n    public drawingEngine: DrawingEngine;\r\n\r\n\r\n    firebaseConfig = {\r\n        apiKey: \"AIzaSyA1yKg85WGZoshbk8xR23cXr3SwpqXVgIc\",\r\n        authDomain: \"njs-data.firebaseapp.com\",\r\n        projectId: \"njs-data\",\r\n        storageBucket: \"njs-data.appspot.com\",\r\n        messagingSenderId: \"635991152770\",\r\n        appId: \"1:635991152770:web:722f5356e0d14cea50fc9b\"\r\n      };\r\n\r\n    // ref: firebase.database.Reference;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        // let fbdatabase = firebase.initializeApp(this.firebaseConfig);\r\n        // console.log('fbdb', fbdatabase);\r\n    \r\n        // // let db = fbdatabase.database();\r\n        // // this.ref = db.ref('drawingEngine');\r\n        // // console.log(this.ref);\r\n    \r\n        // // let data = {\r\n        // //     name:'mlData',\r\n        // //     score: '120'\r\n        // // }\r\n        // // this.sendData(data);\r\n\r\n        // // this.ref.on('value', this.getData, this.getError);\r\n    }\r\n    public sendData(data: {}) {\r\n        // let result = this.ref.push(data);\r\n        // console.log(result.key);\r\n    }\r\n\r\n    public getData = (d: any) => {\r\n        let data = d.val();\r\n        console.log('get data', data);\r\n        \r\n        for(let i in data) {\r\n            console.log(i, data[i]);\r\n        }\r\n    }\r\n    public getError = (d: any) => {\r\n        console.error(d);\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { GeometryBase } from './Base/GeometryBase';\r\nexport class GeometryCommon{\r\n    drawingEngine: DrawingEngine;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public find(x: number, y: number): GeometryBase | undefined {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            if (this.drawingEngine.scene.geoDict[key].isInside(x, y)) {\r\n                return this.drawingEngine.scene.geoDict[key];\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n    public resetSelections(){\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isSelected = false;\r\n        }\r\n    }\r\n    public getAllVecFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i].v);\r\n        }\r\n        return vs;\r\n    }\r\n    public getAllFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i]);\r\n        }\r\n        return vs;\r\n    }\r\n    public getSelCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            if (this.drawingEngine.scene.pointList[i].isSelected) {\r\n                vs.push(this.drawingEngine.scene.pointList[i]);\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public updateHover(x: number, y: number) {\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isInside(x, y)\r\n        }\r\n    }\r\n    public toJson() {\r\n        const data = [];\r\n        for(let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            data.push(this.drawingEngine.scene.geometryList[i].toJson());\r\n        }\r\n        return data;\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\n// import { GeometryBase } from '../../../DrawingEngine/Geometry/Base';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\nimport { distance, NVector3 } from '../../Clustering/lib';\r\n// import { NVector3 } from '../../../../../../../lib/NVector3';\r\nimport { Renderer } from './Renderer';\r\n\r\nexport class PointCluster {\r\n    renderer: Renderer;\r\n    points: CPoint[];\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    isHover: boolean = false;\r\n    isVisited: boolean = false;\r\n    boundingBoxMin: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    boundingBoxMax: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n    minVec: NVector3;\r\n    maxVec: NVector3;\r\n    vec = new NVector3(0, 0, 0);\r\n    private t: number = 1.0;\r\n    private GridResolution = 85;\r\n    private tempVecGridList: NVector3[] = [];\r\n    private tempGeoGridList: CPoint[][][] = [];\r\n\r\n    constructor(renderer: Renderer, geometries: CPoint[]) {\r\n        this.renderer = renderer;\r\n        this.points = geometries;\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        // for(let i = 0; i < this.geometries.length; ++i) {\r\n        // this.geometries[i].isAniEasing = true;\r\n        // this.geometries[i].tVec = this.vec;\r\n        // }\r\n    }\r\n    public IsInside(m: NVector3) {\r\n        if(distance(this.vec, m ) < this.r1) {\r\n            this.isHover = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.activeMouseCursor.SetActiveCursorHovering();\r\n            // this.points[0].scene.annotationInstance.renderer.needFocus = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.acProperties.hasHovering = true;\r\n            return true;\r\n        } else {\r\n            this.isHover = false;\r\n            return false;\r\n        }\r\n    }\r\n    public AddPost(geo: CPoint) {\r\n        // @ts-ignore\r\n        if(this.points.includes(geo)) { return; }\r\n        this.points.push(geo);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n        this.vec.x += this.points[i].v.x;\r\n        this.vec.y += this.points[i].v.y;\r\n        this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n    }\r\n    public NeedDecompose() {\r\n        if (this.boundingBoxMax.x - this.boundingBoxMin.x > this.GridResolution) { return true; }\r\n        if (this.boundingBoxMax.y - this.boundingBoxMin.y > this.GridResolution) { return true; }\r\n        return false;\r\n    }\r\n    public Split() {\r\n        this.DeepRemove();\r\n        const xNum = (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution;\r\n        const yNum = (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution;\r\n        const grid = this.buildGrid(xNum, yNum);\r\n        this.BuildSubCluster(grid, xNum, yNum);\r\n    }\r\n    public Merge(other: PointCluster){\r\n        this.points.concat(other.points);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        other.DeepRemove();\r\n    }\r\n    public DeepRemove(){\r\n        this.renderer.RemoveCluster(this);\r\n    }\r\n    public buildGrid(xNum: number, yNum: number) {\r\n        this.tempGeoGridList = []\r\n        let gridList = [];;\r\n        for(let y = 0; y < yNum; ++y) {\r\n            const theY = this.boundingBoxMin.y + y * this.GridResolution;\r\n            const geoMat: CPoint[][] = [];\r\n            for(let x = 0; x < xNum; ++x) {\r\n                const theX = this.boundingBoxMin.x + x * this.GridResolution;\r\n                gridList.push(new NVector3(theX, theY));\r\n                const geoList: CPoint[]= [];\r\n                geoMat.push(geoList);\r\n            }\r\n            this.tempGeoGridList.push(geoMat);\r\n        }\r\n        this.tempVecGridList = gridList;\r\n        return gridList;\r\n    }\r\n    public BuildSubCluster(vs: NVector3[], xNum: number, yNum: number){\r\n        for(let i = 0 ; i < this.points.length; ++i) {\r\n            this.GetCellAtPoint(this.points[i].v, xNum, yNum).push(this.points[i]);\r\n        }\r\n        for(let y = 0; y < this.tempGeoGridList.length; ++y) {\r\n            for(let x = 0; x < this.tempGeoGridList[y].length; ++x) {\r\n            if(this.tempGeoGridList[y][x]) {\r\n                if (this.tempGeoGridList[y][x].length === 1) {\r\n                    this.tempGeoGridList[y][x][0].collision.Reset();\r\n                } else if(this.tempGeoGridList[y][x].length > 1) {\r\n                    this.renderer.clustersRPoint.push(new PointCluster(this.renderer, this.tempGeoGridList[y][x]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private GetCellAtPoint(tv: NVector3, xNum: number, yNum: number) {\r\n        let dp: NVector3 = new NVector3(tv.x - this.boundingBoxMin.x, tv.y - this.boundingBoxMin.y);\r\n        // let dp: NVector3 = new NVector3(this.boundingBoxMin.x - tv.x, this.boundingBoxMin.y - tv.y);\r\n        let i: number = Math.round(dp.x / this.GridResolution);\r\n        let j: number = Math.round(dp.y / this.GridResolution);\r\n        if (i >= xNum) { i = xNum - 1; }\r\n        if (j >= yNum) { j = yNum - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        i = Math.round(i);\r\n        j = Math.round(j);\r\n        // console.log(j, i);\r\n        // console.log(this.tempGeoGridList)\r\n        return this.tempGeoGridList[j][i];\r\n    }\r\n    public Draw(ctx: CanvasRenderingContext2D, renderer: Renderer, isPanning: boolean) {\r\n        this.UpdateTimeer();\r\n\r\n        if (isPanning) {\r\n            this.vec = new NVector3(0, 0, 0);\r\n            this.boundingBoxMin = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            this.boundingBoxMax = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vec.x += this.points[i].v.x;\r\n                this.vec.y += this.points[i].v.y;\r\n                this.UpdateBoundingBox(this.points[i].v);\r\n            }\r\n            this.vec.x /= this.points.length;\r\n            this.vec.y /= this.points.length;\r\n            this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n            this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n\r\n        // renderer.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.points, this.vec, this.r0, this.r1, this.isHover, this.t);\r\n        \r\n        if(renderer.optimizer.inspection) {\r\n            ctx.beginPath();\r\n            ctx.rect(this.minVec.x, this.minVec.y, this.maxVec.x - this.minVec.x, this.maxVec.y - this.minVec.y)\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n            ctx.fill();\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.rect(this.boundingBoxMin.x, this.boundingBoxMin.y, this.boundingBoxMax.x - this.boundingBoxMin.x, this.boundingBoxMax.y - this.boundingBoxMin.y)\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            if (this.tempVecGridList.length > 0) {\r\n                for(let i = 0 ; i < this.tempVecGridList.length; ++i) {\r\n                    ctx.beginPath();\r\n                    ctx.rect(this.tempVecGridList[i].x, this.tempVecGridList[i].y, this.GridResolution, this.GridResolution);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private UpdateTimeer(){\r\n        if (true ) {\r\n            this.t -= 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionA;\r\n            this.t = this.t < 0.4 ? 0.4 : this.t;\r\n        } else {\r\n            this.t += 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionB;\r\n            this.t = this.t > 1 ? 1 : this.t;\r\n        }\r\n    }\r\n    private UpdateBoundingBox(vec: NVector3){\r\n        this.boundingBoxMin.x = vec.x < this.boundingBoxMin.x ? vec.x : this.boundingBoxMin.x;\r\n        this.boundingBoxMin.y = vec.y < this.boundingBoxMin.y ? vec.y : this.boundingBoxMin.y;\r\n        this.boundingBoxMax.x = vec.x > this.boundingBoxMax.x ? vec.x : this.boundingBoxMax.x;\r\n        this.boundingBoxMax.y = vec.y > this.boundingBoxMax.y ? vec.y : this.boundingBoxMax.y;\r\n    }\r\n}","import { PointCluster } from './PointCluster';\r\nimport { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { ClusteringCollsionBasedGraph } from '../';\r\n\r\nexport class Renderer {\r\n\r\n    clustersRPoint: PointCluster[] = [];\r\n    optimizer: ClusteringCollsionBasedGraph;\r\n    constructor(optimizer: ClusteringCollsionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n    public InitGeometry(){\r\n        this.clustersRPoint = [];\r\n    }\r\n    public addClusterByGeometries(geo: CPoint[][] ) {\r\n        for(let i = 0; i < geo.length; ++i) {\r\n            this.clustersRPoint.push(new PointCluster(this, geo[i]));\r\n        }\r\n    }\r\n    public RemoveCluster(cluster: PointCluster ){\r\n        this.clustersRPoint.splice(this.clustersRPoint.indexOf(cluster), 1);\r\n\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, isStationary: boolean): void {\r\n        console.log(this.clustersRPoint.length);\r\n        if (this.clustersRPoint.length > 0) {\r\n            for(let i = 0 ; i < this.clustersRPoint.length; ++i) {\r\n                this.clustersRPoint[i].Draw(ctx, this, isStationary);\r\n            }\r\n        }\r\n\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\n// import { GeometryBase } from '../../../DrawingEngine/Geometry/Base/GeometryBase';\r\nimport { PointCluster } from './PointCluster';\r\nimport { ClusteringCollsionBasedGraph } from '..';\r\n\r\nimport { distance, AABBintersect2D } from '../../Clustering/lib';\r\n\r\nexport class GraphClustering {\r\n\r\n    optimizer: ClusteringCollsionBasedGraph;\r\n    pointList: CPoint[] = []\r\n    // listNPoint: CPoint[] = []\r\n\r\n    constructor(optimizer: ClusteringCollsionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n\r\n    public update(): void {\r\n        this.updatePoints();\r\n\r\n        // 1: build connectivities based on collision\r\n        // this.listNPoint = this.BuildConnectivity(this.listNPoint);\r\n        this.pointList = this.BuildConnectivity(this.pointList);\r\n        this.initGeometry();\r\n        // 2: construct clusters graph based on the connectivities\r\n        const geoList = this.buildGraph(this.pointList);\r\n\r\n        if (geoList !== undefined){\r\n            this.addClusterByGeometries(geoList);\r\n            // // 3: recursive checking for the collision while repositioning clusters\r\n            this.PostUpdateCollisionBasedonGraph();\r\n\r\n            const graphcs = this.NeedDecompose();\r\n            if (graphcs.length > 0) {\r\n                // 4: tessellate big clusters based on a resolution\r\n                this.SplitClusters(graphcs);\r\n                // 5: post-process for merging based on a tolerance\r\n                this.PostMergeCluster();\r\n            }\r\n        }\r\n    }\r\n    public initGeometry(){\r\n        this.optimizer.renderer.InitGeometry();\r\n    }\r\n    public addClusterByGeometries(outGraphList: CPoint[][] ){\r\n        this.optimizer.renderer.addClusterByGeometries(outGraphList);\r\n    }\r\n    private updatePoints() {\r\n        this.pointList = [];\r\n\r\n        for(let i = 0; i < this.optimizer.points.length; ++i) {\r\n            if(this.optimizer.points[i].isHidden ||\r\n                !this.optimizer.points[i].isRenderable ){\r\n                continue\r\n            } else {\r\n                const pt = this.optimizer.points[i];\r\n                pt.collision.Reset();\r\n                this.pointList.push(pt)\r\n            }\r\n        }\r\n\r\n    }\r\n    private BuildConnectivity(listPoints: CPoint[]) {\r\n        for(let i = 0; i < listPoints.length; ++i) {\r\n            const pt = listPoints[i];\r\n            for(let j = i + 1 ; j < listPoints.length; ++j) {\r\n                const other = listPoints[j];\r\n                if (!other.isCollapse && other !== pt && AABBintersect2D([pt.collision.minVec, pt.collision.maxVec], [other.collision.minVec, other.collision.maxVec])) {\r\n                    pt.collision.isCollided = true;\r\n                    pt.isCollapse = true;\r\n                    pt.numVisit = 0;\r\n                    pt.collision.neighborShapes.push(other);\r\n                    other.collision.isCollided = true;\r\n                    other.isCollapse = true;\r\n                    other.numVisit = 0;\r\n                    other.collision.neighborShapes.push(pt);\r\n                    // other.collision.neighborShapes.push(pt);\r\n                    // pt.collision.numOrder = numOrder++;\r\n                    // break;\r\n                }\r\n            }\r\n        }\r\n        return listPoints;\r\n    }\r\n    private buildGraph(listPoints: CPoint[]) {\r\n        let outList: CPoint[][] = [];\r\n        for(let i = 0; i < listPoints.length; ++i) {\r\n            let ptList: CPoint[] = [];\r\n            let queue = [listPoints[i]];\r\n            queue[0].collision.isVisited = true;\r\n            ptList.push(queue[0]);\r\n            let safeguard = 0;\r\n            let current = undefined;\r\n            while( (current = queue.shift()) !== undefined ) {\r\n                for(let i = 0; i < current.collision.neighborShapes.length; ++i) {\r\n                    if(!current.collision.neighborShapes[i].collision.isVisited) {\r\n                        current.collision.neighborShapes[i].collision.isVisited = true;\r\n                        queue.push(current.collision.neighborShapes[i] as CPoint);\r\n                        ptList.push(current.collision.neighborShapes[i] as CPoint);\r\n                    }\r\n                }\r\n                if(safeguard++ > 1000) { console.debug('fail to optimize'); return; }\r\n            }\r\n            if (ptList.length > 1) {\r\n                outList.push(ptList);\r\n            }\r\n        }\r\n        return outList;\r\n    }\r\n    public PostUpdateCollisionBasedonGraph() {\r\n        // for(let i = 0; i < this.optimizer.renderer.clustersNPoint.length; ++i) {\r\n        //     this.UpdateByQueue(this.optimizer.renderer.clustersNPoint[i], this.listNPoint);\r\n        // }\r\n        for(let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            this.UpdateByQueue(this.optimizer.renderer.clustersRPoint[i], this.pointList);\r\n        }\r\n    }\r\n    private UpdateByQueue(cluster: PointCluster, geometries: CPoint[]) {\r\n        let remain = 0;\r\n        const queue = [...geometries]\r\n        while(queue.length) {\r\n            const geo = queue.shift();\r\n\r\n            if (geo) {\r\n                // console.log(queue.length);\r\n                // safeguard and performance optimization\r\n                if (geo.numVisit > 100) { geo.numVisit = 0; break; }\r\n                if (queue.length === 0) {\r\n                    if(geometries.length < remain++ ) { break; }\r\n                }\r\n                // end safeguard and performance optimization\r\n                if (!geo.collision.isCollided) {\r\n                    if(AABBintersect2D([geo.collision.minVec, geo.collision.maxVec], [cluster.minVec, cluster.maxVec]) ) {\r\n                        geo.collision.isCollided = true;\r\n                        geo.isCollapse = true;\r\n                        geo.numVisit = 0;\r\n                        cluster.AddPost(geo);\r\n                    } else {\r\n                        geo.numVisit++;\r\n                        queue.push(geo);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private NeedDecompose(){\r\n        const clusterGraph = [];\r\n\r\n        for(let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            if(this.optimizer.renderer.clustersRPoint[i].NeedDecompose()) {\r\n                clusterGraph.push(this.optimizer.renderer.clustersRPoint[i]);\r\n            }\r\n        }\r\n        return clusterGraph;\r\n    }\r\n    private SplitClusters(clusters: PointCluster[]) {\r\n        for(let i = 0; i < clusters.length; ++i) {\r\n            clusters[i].Split();\r\n        }\r\n    }\r\n    private PostMergeCluster(){\r\n        this.PostMergeClusterCompute(this.optimizer.renderer.clustersRPoint);\r\n    }\r\n    private PostMergeClusterCompute(clusters: PointCluster[]){\r\n        for(let i = 0; i < clusters.length - 1; ++i) {\r\n            const cluster = clusters[i];\r\n            for(let j = i + 1; j < clusters.length; ++j) {\r\n                const other = clusters[j]\r\n                if(!other.isVisited) {\r\n                    if(distance(cluster.vec, other.vec ) < cluster.r1 + 20) {\r\n                        other.isVisited = true;\r\n                        cluster.Merge(other);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { NVector3 } from '../Clustering/lib';\r\n\r\nimport { Renderer } from './Core/Renderer';\r\nimport { GraphClustering } from './Core/GraphClustering';\r\nimport { CPoint } from '../../DrawingEngine/Geometry/Point';\r\n\r\nexport class ClusteringCollsionBasedGraph {\r\n\r\n    graphClustering: GraphClustering;\r\n    renderer: Renderer;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    points: CPoint[] = [];\r\n\r\n    constructor() {\r\n        this.graphClustering = new GraphClustering(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n    public push(vs: CPoint[]) {\r\n        this.points = vs;\r\n        this.update();\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        // this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(): void {\r\n        this.graphClustering.update();\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        // this.initGrid(width, height);\r\n        // }\r\n        console.log(this);\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean) {\r\n        this.renderer.Render(ctx, isStationary)\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { MouseEventData, MOUSE_TYPE } from '../lib';\r\nimport { Clustering, OPTIMIZER } from '../../Addon/Clustering/';\r\nimport { ClusteringCollsionBasedGraph } from '../../Addon/ClusteringCollsionBasedGraph';\r\n\r\nexport class Addon {\r\n    drawingEngine: DrawingEngine;\r\n    clustering: Clustering | undefined = undefined;\r\n    clusteringCollsionBasedGraph: ClusteringCollsionBasedGraph | undefined = undefined;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    async InitClustering() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllVecFromCPoint();\r\n\r\n            this.clustering = new Clustering(OPTIMIZER.GRID);\r\n            this.clustering.optimizer.rx = 9;\r\n            this.clustering.optimizer.ry = 5;\r\n            this.clustering.push(vs , this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n\r\n\r\n        }).catch(err => {\r\n            console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n    async InitClusteringCollision() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllFromCPoint();\r\n\r\n            this.clusteringCollsionBasedGraph = new ClusteringCollsionBasedGraph();\r\n            // this.clusteringCollsionBasedGraph.optimizer.rx = 9;\r\n            // this.clusteringCollsionBasedGraph.optimizer.ry = 5;\r\n            this.clusteringCollsionBasedGraph.push(vs);\r\n\r\n\r\n        }).catch(err => {\r\n            console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n\r\n    \r\n    public mouseInteraction(e: MouseEventData) {\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                break;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                break;\r\n            case MOUSE_TYPE.RIGHT:\r\n                break;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                break;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.clustering?.mouseInteraction(e.x, e.y);\r\n                break;\r\n            case MOUSE_TYPE.DRAG:\r\n                break;\r\n            case MOUSE_TYPE.DOWN:\r\n                break;\r\n            case MOUSE_TYPE.UP:\r\n                break;\r\n            case MOUSE_TYPE.WHEEL:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.clustering?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        // this.clusteringCollsionBasedGraph?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        this.clusteringCollsionBasedGraph?.render(ctx, isPanning);\r\n    }\r\n\r\n}","import { DrawingEngine } from '../'\r\n\r\nexport class Customization {\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class Renderer {\r\n\r\n    public drawingEngine: DrawingEngine;\r\n\r\n    private lastCalledTime: number = Date.now();\r\n    private delta: number = 1;\r\n    public fps: number = 30;\r\n\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.ctx = ctx;\r\n        this.update(isPanning);\r\n        this.renderPost(ctx, isPanning);\r\n     }\r\n    public update( isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].update( isPanning, this.drawingEngine.projection.toScreen );\r\n        }\r\n     }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].renderPost(ctx, isPanning );\r\n        }\r\n        this.ComputeFPS();\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { ACTIVE_UI } from '../lib';\r\nimport { GeometryBase } from '../Geometry/Base/GeometryBase';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class Scene {\r\n    public drawingEngine: DrawingEngine;\r\n    \r\n    public _capture: GeometryBase | undefined = undefined; \r\n    public geometryList : GeometryBase[] = [];\r\n    public pointList : CPoint[] = [];\r\n\r\n    public geoDict: {} = {};\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public get capture(): GeometryBase | undefined {\r\n        return this._capture;\r\n    }\r\n    public set capture(g: GeometryBase | undefined) {\r\n        if (g) {\r\n            this.drawingEngine.ableToPan = false;\r\n        } else {\r\n            this.drawingEngine.ableToPan = true;\r\n        }\r\n        // console.log(g);\r\n        this._capture = g;\r\n    }\r\n    public addGeometry(g: GeometryBase) {\r\n        this.geoDict[g.id] = g;\r\n        this.geometryList.push(g);\r\n        if(g.type === ACTIVE_UI.point) {\r\n            this.pointList.push(g as CPoint);\r\n        }\r\n    }\r\n\r\n}","\r\nimport { MouseEventData } from './lib';\r\n\r\nimport { ActiveCommandController } from './ActiveCommand';\r\nimport { Projection } from './Projection';\r\nimport { IO } from './IO/IO';\r\nimport { GeometryCommon } from './Geometry/GeometryCommon';\r\nimport { Addon } from './Addon';\r\nimport { Renderer } from './Renderer';\r\nimport { Scene } from './Scene';\r\nimport { KeyboardEventData } from '../../NJSCore';\r\n\r\n// import { tensor2d, tidy, Tensor2D } from '@tensorflow/tfjs';\r\n// import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nexport class DrawingEngine {\r\n\r\n    public activeCommand: ActiveCommandController;\r\n    public projection: Projection;\r\n    public geometryCommon: GeometryCommon;\r\n    public scene: Scene;\r\n    public addon: Addon;\r\n    public renderer: Renderer;\r\n    public io: IO;\r\n\r\n    _ableToPan: boolean = true;\r\n\r\n    constructor() {\r\n        this.io = new IO(this);\r\n        this.addon = new Addon(this);\r\n        this.projection = new Projection(this);\r\n        this.geometryCommon = new GeometryCommon(this);\r\n        this.activeCommand = new ActiveCommandController(this);\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n\r\n    public apiCall(command: string): any {\r\n        return this.activeCommand.apiCall(command);\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.projection.updateProjection(projection);\r\n    }\r\n    public setCommand(command: string = 'SELECT') {\r\n        console.log(command);\r\n        this.activeCommand.setCommander(command);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        this.activeCommand.activeCommand.mouseEvent(m);\r\n\r\n        this.addon.mouseInteraction(m);\r\n    }\r\n    public keyEvent(m: KeyboardEventData){\r\n        // this.activeCommand.activeCommand.k(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.renderer.render(ctx, isPanning);\r\n\r\n        this.addon.render(ctx, isPanning);\r\n    }\r\n    public set ableToPan(v: boolean) {\r\n        this._ableToPan = v;\r\n        this.bindAbleToPan(v);\r\n        // this.definition.app.ableToPan = v;\r\n    }\r\n    public bindAbleToPan(v: boolean){\r\n\r\n    }\r\n}","import { NWindow } from '../../View/NWindow/NWindow';\r\nimport { JSAPIEnv } from '../../Environment/JSAPI';\r\n\r\nimport { NNAEngineV3 } from '../../NJSEngine/NNAEngineV3';\r\nimport { DrawingEngine } from '../../NJSEngine/DrawingEngine';\r\nimport { APP, KeyboardEventData, MouseEventData } from '../../NJSCore';\r\n\r\nimport { NJSSandbox } from '../';\r\n\r\nexport class BindingNNA {\r\n    njsSandbox: NJSSandbox;\r\n    drawingEngine: DrawingEngine;\r\n    nna: NNAEngineV3;\r\n    constructor(njsSandbox: NJSSandbox) {\r\n        this.njsSandbox = njsSandbox;\r\n    }\r\n    public async initBinding() {\r\n        // console.log(this);\r\n        this.njsSandbox.win = new NWindow(this.njsSandbox.div, 'NNA Engine V4 by NJSTUDIO', 1200, 600);\r\n\r\n        this.njsSandbox.env = await new JSAPIEnv(this.njsSandbox.win.getContext());\r\n\r\n        this.drawingEngine = new DrawingEngine();\r\n         this.drawingEngine.updateProjection({ \r\n            toMap: (x: number, y: number) => this.njsSandbox.env.projection.ToMap(x, y), \r\n            toScreen: (x: number, y: number) => this.njsSandbox.env.projection.ToScreen(x, y)\r\n        });\r\n         this.drawingEngine.bindAbleToPan = (v: boolean) => {\r\n            this.njsSandbox.env.ableToPan = v;\r\n            // this.nna\r\n        }\r\n\r\n        this.njsSandbox.env.appendEventListener( { \r\n            mouse: (m: MouseEventData) =>  this.drawingEngine.mouseEvent(m), \r\n            keyboard: (k: KeyboardEventData) =>  this.drawingEngine.keyEvent(k) \r\n        });\r\n\r\n        \r\n        this.nna = new NNAEngineV3();\r\n        this.nna.updateProjection({ \r\n            toMap: (x: number, y: number) => this.njsSandbox.env.projection.ToMap(x, y), \r\n            toScreen: (x: number, y: number) => this.njsSandbox.env.projection.ToScreen(x, y)\r\n        });\r\n        this.njsSandbox.env.appendEventListener( { \r\n            mouse: (m: MouseEventData) => this.nna.mouseEvent(m), \r\n            keyboard: (k: KeyboardEventData) => this.nna.keyEvent(k) \r\n        });\r\n\r\n        // ........................ append renderer \r\n        this.njsSandbox.env.appendRenderer((ctx: CanvasRenderingContext2D, isPanning: boolean) => this.nna.render(ctx, isPanning));\r\n        this.njsSandbox.env.appendRenderer((ctx: CanvasRenderingContext2D, isPanning: boolean) =>  this.drawingEngine.render(ctx, isPanning));\r\n\r\n\r\n        // ........................ append left menu \r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'save',\r\n            callBack: () =>  this.drawingEngine.setCommand('save')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'load',\r\n            callBack: () =>  this.drawingEngine.setCommand('load')\r\n        });\r\n        \r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Select',\r\n            callBack: () =>  this.drawingEngine.setCommand('SELECT')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Point',\r\n            callBack: () =>  this.drawingEngine.setCommand('POINT')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Line',\r\n            callBack: () =>  this.drawingEngine.setCommand('LINE')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Polyl',\r\n            callBack: () =>  this.drawingEngine.setCommand('POLYLINE')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Circle',\r\n            callBack: () =>  this.drawingEngine.setCommand('CIRCLE')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'Rect',\r\n            callBack: () =>  this.drawingEngine.setCommand('RECTANGLE')\r\n        });\r\n\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'ZipData',\r\n            callBack: () =>  this.drawingEngine.apiCall('importZipData')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'clusterGrid',\r\n            callBack: () =>  this.drawingEngine.apiCall('importClustering')\r\n        });\r\n        this.njsSandbox.win.addIconLeftPanel({\r\n            text: 'clusterCol',\r\n            callBack: () =>  this.drawingEngine.apiCall('importClusteringCollision')\r\n        });\r\n\r\n        \r\n        // ........................ append top menu\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'import',\r\n            width: 60,\r\n            callBack: () => this.nna.importDummyData(),\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Origin',\r\n            width: 60,\r\n            callBack: () => {\r\n                this.nna.apiCall(APP.NETWORK, 'addOrigins', this.drawingEngine.apiCall('getSelectedCPoint'));\r\n            }\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Destination',\r\n            width: 90,\r\n            callBack: () => {\r\n                this.nna.apiCall(APP.NETWORK, 'addDestinations', this.drawingEngine.apiCall('getSelectedCPoint'));\r\n            }\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Agent',\r\n            width: 90,\r\n            callBack: () => {\r\n                this.nna.apiCall(APP.AGENCY, 'runAgent', undefined);\r\n            }\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'pathOpti',\r\n            width: 90,\r\n            callBack: () => {\r\n                this.nna.apiCall(APP.GA, 'pathOptimization', this.drawingEngine.apiCall('getSelectedCPoint'));\r\n            }\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Inspection',\r\n            width: 90,\r\n            callBack: () => {\r\n                this.nna.controller.inspection = !this.nna.controller.inspection;\r\n                this.drawingEngine.activeCommand.inspection = !this.drawingEngine.activeCommand.inspection;\r\n                // this.njsSandbox.env.definition.controller.isInspectionMode = !this.njsSandbox.env.definition.controller.isInspectionMode;\r\n            }\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Capture',\r\n            width: 60,\r\n            callBack: () =>this.nna.apiCall(APP.NETWORK, 'capture', undefined )\r\n        });\r\n        this.njsSandbox.win.addIconTopPanel({\r\n            text: 'Download',\r\n            width: 60,\r\n            callBack: () => this.nna.apiCall(APP.NETWORK, 'download', undefined )\r\n        });  \r\n\r\n    }\r\n}","\r\nexport enum OPTIMIZER {\r\n    NONE = 'NONE',\r\n    GRID = 'GRID',\r\n    GRID_SCREEN = 'GRID_SCREEN',\r\n    COLLISION = 'COLLISION',\r\n    AGENT = 'AGENT',\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemScreen {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        this.cells = [];\r\n        this.xInterval = width / (this.rx - 1);\r\n        this.yInterval = height / (this.ry - 1);\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 2) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        let i: number = (Math.round(dp.x / this.xInterval));\r\n        let j: number = (Math.round(dp.y / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    grid: GridSystemScreen;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n    constructor(grid: GridSystemScreen, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(xI * this.grid.xInterval, yI * this.grid.yInterval);\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        console.log(isPanning)\r\n        if (!this.isRenderable) { return; }\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemDynamic {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public width = 0;\r\n    public height = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    public minP: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    public maxP: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n    constructor() {\r\n\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        // console.log(width);\r\n        this.minP = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n        this.maxP = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const v = this.points[i];\r\n            if (this.minP.x > v.x) { this.minP.x = v.x; }\r\n            if (this.minP.y > v.y) { this.minP.y = v.y; }\r\n            if (this.minP.z > v.z) { this.minP.z = v.z; }\r\n\r\n            if (this.maxP.x < v.x) { this.maxP.x = v.x; }\r\n            if (this.maxP.y < v.y) { this.maxP.y = v.y; }\r\n            if (this.maxP.z < v.z) { this.maxP.z = v.z; }\r\n        }\r\n        console.log(this);\r\n\r\n        this.cells = [];\r\n        this.width = (this.maxP.x - this.minP.x);\r\n        this.height = (this.maxP.y - this.minP.y);\r\n\r\n        console.log('width', this.width, 'height', this.height)\r\n\r\n        this.xInterval = this.width / (this.rx - 1);\r\n        this.yInterval = this.height / (this.ry - 1);\r\n        \r\n        console.log('this.xInterval', this.xInterval, 'this.yInterval', this.yInterval)\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 1) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        // let dp: NVector3 = vec.Sub(this);\r\n        let i: number = (Math.round((dp.x - this.minP.x ) / this.xInterval));\r\n        let j: number = (Math.round((dp.y - this.minP.y  ) / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.minP.x, this.minP.y, this.maxP.x - this.minP.x, this.maxP.y - this.minP.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nclass Cell {\r\n\r\n    grid: GridSystemDynamic;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n\r\n    constructor(grid: GridSystemDynamic, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(grid.minP.x + (xI * this.grid.xInterval), grid.minP.y + (yI * this.grid.yInterval));\r\n    console.log('x', this.vec.x, 'y', this.vec.y, )\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n        if (!this.isRenderable) { \r\n            ctx.beginPath();\r\n            ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n            ctx.closePath();\r\n            ctx.stroke();    \r\n            return; \r\n        }\r\n\r\n\r\n\r\n        // console.log(isPanning)\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n\r\n        // ctx.fillStyle = '#ffffff';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.vec.x, this.vec.y, 20, 0, Math.PI * 2);\r\n        // ctx.closePath();\r\n        // // ctx.stroke();\r\n        // ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from './lib';\r\nimport { OPTIMIZER } from './lib/enum';\r\nimport { GridSystemScreen } from './Core/GridSystemScreen';\r\nimport { GridSystemDynamic } from './Core/GridSystemDynamic';\r\n\r\nexport { OPTIMIZER }\r\nexport class Clustering {\r\n    optimizerType: OPTIMIZER;\r\n\r\n    optimizer: GridSystemDynamic | GridSystemScreen;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    constructor(optimizer: OPTIMIZER) {\r\n        this.optimizerType = optimizer;\r\n        \r\n        switch (optimizer) {\r\n            case OPTIMIZER.GRID_SCREEN:\r\n                this.optimizer = new GridSystemScreen();\r\n                break;\r\n            case OPTIMIZER.GRID:\r\n                this.optimizer = new GridSystemDynamic();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.debug('clustering... v 0.1.5')\r\n    }\r\n    public push(vs: NVector3[], width: number, height: number) {\r\n        this.optimizer.points = vs;\r\n        this.update(width, height);\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(width: number, height: number) {\r\n        this.optimizer.update(width, height);\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean, width: number, height: number) {\r\n        if (isStationary) {\r\n            this.update(width, height);\r\n        }\r\n        this.optimizer.render(ctx)\r\n\r\n        if(this.mv){\r\n            ctx.fillStyle = '#00ff00';\r\n            ctx.beginPath();\r\n            ctx.arc(this.mv.x, this.mv.y,9, 0.0, 3.14 * 2)\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        \r\n\r\n    }\r\n\r\n}"],"names":["Controller","window","this","param","btn","document","createElement","style","width","zIndex","position","border","textContent","text","onclick","callBack","builder","divFulldownArea","appendChild","height","color","background","onmouseenter","onmouseleave","divLeftUI","Builder","divMain","divMainBody","divTopArea","divBottomArea","divForGraphicContext","colorTopMenu","colorBGmenu","titleString","initDivMain","initDivTopArea","initDivFulldownArea","box","float","padding","title","initDivContextArea","initDivLeftArea","id","closeBtn","top","left","remove","initBottomArea","bottomToolbarArea","bottomTextarea","isPressed","prePos","ondrag","e","onmousemove","xOff","clientX","yOff","clientY","parseFloat","onmousedown","updateZindex","onmouseup","onmouseout","hostDiv","bootom","updateResize","setTimeout","divHost","NWindow","controller","initPanel","addIconTopPanel","addToggleTopPanel","addIconLeftPanel","addIconLeft","removeChild","IO","app","OpenGeoJsonEx01","path","ArcGIS","AppendMapViewEvent","mapView","watch","renderer","isPanning","on","canvas","ResizeCanvas","Projection","App","ToMap","x","y","mp","toMap","clone","longitude","latitude","ToScreen","long","lat","mPoint","spatialReference","p","toScreen","proX","proY","wkid","Canvas","t","frameRate","ctx","xOffCurrent","yOffCurrent","xOffPre","yOffPre","zoomFactor","zoomFactorPre","zoomFactorCurrent","div3d","smoothingEnabled","dropRate","isRenderSkip","isLoop","timeLastRender","delta","now","then","interval","last","frameVisTimer","theDate","asyncSafeGuard","pointerEvents","getContext","globalCompositeOperation","clientWidth","clientHeight","Start","Init","Draw","requestAnimationFrame","Clear","Render","clearRect","EventInteraction","mouseEventDataPre","MouseEventData","InitArcGISMapEventV4x","ev","CommonEventBuilderArcGIS","type","MOUSE_TYPE","native","button","MouseEvent","ableToPan","stopPropagation","key","slice","KeyDownJSAPI4X","mEvent","preX","preY","yGLPicking","target","getBoundingClientRect","bottom","pressedShift","shiftKey","pressedAlt","altKey","pressedCtrl","ctrlKey","k","kEventData","CommonEventBuilder","KeyEvent","kEvent","KeyboardEventData","keyCode","code","hasCtrlKey","hasShiftKey","hasAltKey","hasMetaCommand","metaKey","Renderer","sandbox","num","i","length","JSAPIEnv","idDiv","map","arcGIS","io","projection","eventInteraction","keyEvents","MouseEvents","Map","basemap","MapView","container","center","zoom","when","SpatialReference","fn","push","event","mouse","keyboard","m","remap","CValue","OldMin","OldMax","NewMin","NewMax","getRandomArbitrary","min","max","Math","random","seed","mask","m_w","m_z","result","GraphView","HTMLView","div","networkUI","undefined","console","log","clientLeft","apiCall","APP","removePanelNetwork","nnaEngine","inspection","NVector3","dataOrigins","destinationOrigins","action","data","view","initPanelNetwork","core","graphSystem","initByCPoint","initByCPoints","initByCPointsBackpro","initAgentVis","agencySystem","gaSystem","getPath","pointData","update","Node","vec","node","distanceTo","Path","pathsOrigin","nodes","fitness","distance","cityIndex","setCityInit","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","city","getDistance","tourDistance","fromNode","otherNode","Population","populationSize","initialise","paths","newTour","generateIndividual","fittest","other","getFitness","GeneticAlgorithm","tourmanager","mutationRate","nodeSize","elitism","pop","newPopulation","elitismOffset","thePath","getFittestPath","parent1","tournamentSelection","parent2","child","crossover","mutate","startPos","endPos","place","containsCity","ii","tourPos1","tourPos2","city1","city2","populationNew","randomId","GASystem","cities","placesAll","ga","pathFittest","timer","cost","Number","MAX_VALUE","pos","init","tournamentSize","goePos","v","evolvePopulation","isPan","optimize","fillStyle","strokeStyle","lineWidth","p0","p1","beginPath","moveTo","lineTo","closePath","stroke","arc","PI","fill","AgencySystem","render","mouseClick","Analysis","gs","Graph","graphCore","edges","minPt","maxPt","MIN_VALUE","nodeOrigin","lns","AddEdgeByLines","elevation","AddNode","AddEdge","n1","n2","testedEdge","FindEdge","edge","Edge","point","n0","index","disMin","d","originTree","Optimizer","Beta","networkDistance","euclideanDistance","n","updatePropagationByNode","origins","reset","origin","queue","current","dis","distanceToGeo","shift","j","np","newcost","newtemp","vs","destination","FindClosestNode","smallest","countVisit","CONNECTIVITY","GetMidPoint","updateScreenPos","countOrigin","countDestination","countVisitTemp","z","sv","Tree","gc","nodeDestinations","pointOrigin","polylines","duplicateGraph","updateOriginByPt","graph","desID","pls","pl","NPolyline","id0","id1","deepCopy","costFnDistanceGeo","meterFromGeoGPSPos","GraphCore","trees","destinations","idDestination","initGraph","unit","BETA","oWeight","dWeight","computePathWeighted","updatePropagation","updateBackpropagation","mergeAgents","tree","Properties","RendererGraph","BoidsBehaviors","start","end","selPath","time","properties","cols","getFalseColor","font","fillText","toFixed","selPathId","MAX_SAFE_INTEGER","mx","my","COLORBLENDING","setLineDash","theDis","distanceToXY","lineDashOffset","Update","BoidsPath","r","Boid","posX","posY","totalMass","MAX_FORCE","velocity","maxVelocity","desired","steering","mass","boidsPath","currentNode","pathDir","rotation","preVec","avoidance","ahead","alpha","isOriented","activeBase64ID","angle","MAX_VELOCITY","Truncate","tv","Clone","normalize","scale","MAX_AVOID_AHEAD","Length","Add","a","b","sqrt","vector","atan2","PathFollowing","CollisionAvoidance","GetAngle","AddVecHistory","DrawTail","img","Image","src","save","globalAlpha","translate","rotate","drawImage","restore","DrawForceVector","force","Sub","GetNodes","Distance","Seek","AVOID_FORCE","MAX_QUEUE_AHEAD","MAX_QUEUE_RADIUS","MAX_SEPARATION","SEPARATION_RADIUS","boids","instance","numBoid","InitBoid","numPath","maxPathNodes","boid","showForces","drawPath","drawPathPoint","drawCircle","radius","ShiftOriented","GraphSystem","analysis","renderGraph","setUnit","computePath","initTwoPoint","cps","updatePropagationByNodes","ends","InitPathByNode","VoxelSystem","Core","voxelSystem","geoPos","NNAEngineV3","fetch","response","catch","err","lastCalledTime","Date","fps","getAllUrlParams","url","importCSV","CSVData","ComputeCSV","initLines","lineTest","execution","mouseEvent","ComputeFPS","CommandBase","activeCommandController","COMMAND","MouseLeftClickPre","MouseMiddleClickPre","MouseRightClickPre","MouseDoubleClickPre","MouseMovePre","MouseDragPre","MouseDownPre","MouseUpPre","MouseWheelPre","drawingEngine","scene","capture","geometryCommon","find","MouseDown","isSelected","resetSelections","MouseLeftClick","MouseMiddleClick","MouseRightClick","MouseUp","MouseDoubleClick","updateHover","MouseMove","mv","MouseDrag","MouseWheel","Collision","geometryBase","isCollided","neighborShapes","minVec","maxVec","isVisited","numOrder","numVisit","isCollapse","CPoint","colorHover","collision","ACTIVE_UI","isHover","isCustom","sin","isHidden","isRenderable","getTime","replace","c","toString","getUUID","CommandSelect","CommandPoint","addGeometry","hasShift","setCommand","CommandLine","ActiveCommandController","activeCommand","commands","SELECT","POINT","LINE","commander","command","getSelCPoint","popZipData","addon","InitClustering","InitClusteringCollision","toJson","fetchJson","json","count","greatePointByGeoPos","spos","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getData","val","getError","error","GeometryCommon","geoDict","isInside","geometryList","pointList","PointCluster","geometries","points","r0","r1","boundingBoxMin","boundingBoxMax","MIN_SAFE_INTEGER","GridResolution","tempVecGridList","tempGeoGridList","UpdateBoundingBox","geo","includes","DeepRemove","xNum","yNum","grid","buildGrid","BuildSubCluster","concat","RemoveCluster","gridList","theY","geoMat","theX","GetCellAtPoint","Reset","clustersRPoint","dp","round","UpdateTimeer","optimizer","rect","cluster","splice","indexOf","isStationary","GraphClustering","updatePoints","BuildConnectivity","initGeometry","geoList","buildGraph","addClusterByGeometries","PostUpdateCollisionBasedonGraph","graphcs","NeedDecompose","SplitClusters","PostMergeCluster","InitGeometry","outGraphList","pt","listPoints","AABBintersect2D","outList","ptList","safeguard","debug","UpdateByQueue","remain","AddPost","clusterGraph","clusters","Split","PostMergeClusterCompute","Merge","ClusteringCollsionBasedGraph","graphClustering","Addon","clustering","clusteringCollsionBasedGraph","Clustering","getAllVecFromCPoint","OPTIMIZER","rx","ry","getAllFromCPoint","mouseInteraction","renderPost","Scene","_capture","g","DrawingEngine","_ableToPan","updateProjection","setCommander","bindAbleToPan","BindingNNA","njsSandbox","nna","win","env","appendEventListener","keyEvent","appendRenderer","importDummyData","GridSystemScreen","xInterval","yInterval","cells","initGrid","cellList","Cell","getCellAtPoint","draw","xI","yI","vecRender","_isRenderable","GridSystemDynamic","minP","maxP","optimizerType","GRID_SCREEN","GRID"],"sourceRoot":""}