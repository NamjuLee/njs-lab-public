{"version":3,"file":"static/js/3455.1314101f.chunk.js","mappings":"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","sources":["njslab/Infrastructure/WebGPU/WebGPU_NJ_01/Renderer/Camera.ts","njslab/Infrastructure/WebGPU/WebGPU_NJ_01/Renderer/shaders/cube.ts","njslab/Infrastructure/WebGPU/WebGPU_NJ_01/Renderer/Geometry/Box.ts","njslab/Infrastructure/WebGPU/WebGPU_NJ_01/Renderer/Geometry/SphereWire/index.ts","njslab/Infrastructure/WebGPU/WebGPU_NJ_01/Renderer/index.ts","njslab/Infrastructure/WebGPU/WebGPU_NJ_01/index.ts","../node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\n\nimport { Renderer, createViewProjection, createTransforms } from '.';\n\nexport class NCamera {\n    public solution: Renderer;\n    public canvas: HTMLCanvasElement\n    public modelMatrix: mat4 // const\n    public mvpMatrix: mat4 // const\n\n    public vMatrix: mat4;\n    public vpMatrix: mat4;\n    public rotation =vec3.fromValues(0, 0, 0); \n    public translation =vec3.fromValues(0, 0, 0); \n\n    public vp: any // const\n\n    public projection = mat4.create();\n\n    public eye = vec3.fromValues(1,1,0);\n    public center = vec3.fromValues(0, 0, 0);\n    public up = vec3.fromValues(0, 1, 0)\n\n    constructor(solution: Renderer) {\n        this.solution = solution;\n        this.canvas = solution.canvas;\n\n        this.modelMatrix = mat4.create();\n        this.mvpMatrix = mat4.create();\n        this.vMatrix = mat4.create();\n        this.vpMatrix = mat4.create();\n        \n        this.vp = createViewProjection(this.canvas.width / this.canvas.height);\n        this.vpMatrix = this.vp.viewProjectionMatrix;\n\n        // add rotation and camera:\n        // this.camera = createCamera(this.canvas, this.vp.cameraOption);\n\n        // this.vp = createViewProjection(this.canvas.width / this.canvas.height);\n        // this.vpMatrix = this.vp.viewProjectionMatrix;\n\n        // add rotation and camera:\n        // this.camera = createCamera(this.canvas, this.vp.cameraOption);\n        // this.camera.mode = 'turntable' // https://github.com/mikolalysenko/3d-view-controls\n\n\n\n        mat4.rotateZ(this.modelMatrix, this.modelMatrix, 0.0);\n        mat4.scale(this.modelMatrix, this.modelMatrix, [1, 1, 1]);\n        mat4.lookAt(this.vMatrix, this.eye, this.center, this.up);\n\n\n        // mat4.perspective(this.projectionCamera, Math.PI / 1.5, this.solution.canvas.width / this.solution.canvas.height, .1, 10);\n\n    }\n    public update() {\n\n        //\n        mat4.lookAt(this.vMatrix, this.eye, this.center, this.up);\n    \n        // mat4.perspective(this.projectionCamera, Math.PI / 1.5, this.solution.canvas.width / this.solution.canvas.height, .1, 10);\n  \n        // this.viewCamera = view\n        // this.projectionCamera = projection;\n        // this.modelCamera = model;\n\n\n        // mat4.multiply(model, projection, view);\n\n        // // const pMatrix = this.projectionCamera;\n        // // this.vMatrix = this.viewCamera;\n        // // mat4.multiply(this.vpMatrix, pMatrix, this.vMatrix);\n   \n        // // createTransforms(this.modelCamera, this.translation, this.rotation);\n        // // mat4.multiply(this.mvpMatrix, this.vpMatrix, this.modelCamera);\n\n        \n        // const pMatrix = this.vp.projectionMatrix;\n        // this.vMatrix = this.camera.matrix;\n\n        mat4.multiply(this.projection, this.vp.projectionMatrix, this.vMatrix);\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.mvpMatrix, this.projection, this.modelMatrix);\n    }\n    public rotateZ(val = 0.01) {\n        this.rotation[1] += val;\n        // mat4.rotateY(this.modelMatrix, this.modelMatrix, val);\n    }\n    public translateX(val = 0.01) {\n        this.translation[0] += val;\n    }\n};\n\n","export const CubeData = () =>{\n    const positions = new Float32Array([\n        // front\n        -1, -1,  1,  \n         1, -1,  1,  \n         1,  1,  1,\n         1,  1,  1,\n        -1,  1,  1,\n        -1, -1,  1,\n\n        // right\n         1, -1,  1,\n         1, -1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1,  1,  1,\n         1, -1,  1,\n\n        // back\n        -1, -1, -1,\n        -1,  1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1, -1, -1,\n        -1, -1, -1,\n\n        // left\n        -1, -1,  1,\n        -1,  1,  1,\n        -1,  1, -1,\n        -1,  1, -1,\n        -1, -1, -1,\n        -1, -1,  1,\n\n        // top\n        -1,  1,  1,\n         1,  1,  1,\n         1,  1, -1,\n         1,  1, -1,\n        -1,  1, -1,\n        -1,  1,  1,\n\n        // bottom\n        -1, -1,  1,\n        -1, -1, -1,\n         1, -1, -1,\n         1, -1, -1,\n         1, -1,  1,\n        -1, -1,  1\n    ]);\n\n    const colors = new Float32Array([\n        // front - blue\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n\n        // right - red\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n\n        //back - yellow\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n\n        //left - aqua\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n\n        // top - green\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n\n        // bottom - fuchsia\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1\n    ]);\n\n    return {\n        positions,\n        colors\n    };\n}","import { vec3, mat4 } from 'gl-matrix';\n\nimport { loadWGSL, Renderer ,  } from '../';\nimport { CubeData } from '../shaders/cube';\n\nimport { createTransforms } from '../';\n\nconst shaderPath = require('../shaders/sha.wgsl');\n\nexport class Cube {\n    renderer: Renderer\n    // ctx: GPUCanvasContext;\n    // device: GPUDevice;\n    // format: GPUTextureFormat;\n    size: any;\n    pipeline: GPURenderPipeline;\n\n    rotation: vec3;\n\n\n    normalMatrix: mat4;\n    modelMatrix: mat4;\n    translateMatrix: mat4;\n\n\n    uniformBuffer: GPUBuffer\n    uniformBindGroup: GPUBindGroup\n    textureView: GPUTextureView\n    depthTexture: GPUTexture;\n    renderPassDescription: GPURenderPassDescriptor\n\n    numberOfVertices: number;\n    vertexBuffer: GPUBuffer;\n    colorBuffer: GPUBuffer;\n\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n        // const sphereData = SphereData(1.5, 70, 40);\n        // this.numberOfVertices = (sphereData?.vertexData!).length/3;\n        // this.vertexBuffer = CreateGPUBuffer(device, sphereData?.vertexData!);   \n        // this.normalBuffer = CreateGPUBuffer(device, sphereData?.normalData!);\n        // this.uvBuffer = CreateGPUBuffer(device, sphereData?.uvData!);\n        this.normalMatrix = mat4.create();  \n        this.modelMatrix = mat4.create();\n        this.translateMatrix = mat4.create();\n        createTransforms(this.translateMatrix,[0,0,0], [0,0,0], [1,1,1]);\n\n        // console.log(sphereShader)\n        this.initPipeline()\n    }\n      async initPipeline(primitiveType = 'triangle-list') { // triangle-list , triangle-strip\n        // create vertex buffers\n        const cubeData = CubeData();\n        this.numberOfVertices = cubeData.positions.length / 3;\n        this.vertexBuffer = CreateGPUBuffer(this.renderer.device, cubeData.positions);\n        this.colorBuffer = CreateGPUBuffer(this.renderer.device, cubeData.colors);\n\n        console.log(shaderPath)\n\n        const shader = await loadWGSL(shaderPath);\n\n        this.pipeline = this.renderer.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: {\n                module: this.renderer.device.createShaderModule({\n                    code: shader\n                }),\n                entryPoint: \"vs_main\",\n                // @ts-ignore\n                buffers: [\n                    {\n                        arrayStride: 12,\n                        attributes: [{\n                            shaderLocation: 0,\n                            format: \"float32x3\",\n                            offset: 0\n                        }]\n                    },\n                    {\n                        arrayStride: 12,\n                        attributes: [{\n                            shaderLocation: 1,\n                            format: \"float32x3\",\n                            offset: 0\n                        }]\n                    }\n                ]\n            },\n            fragment: {\n                module: this.renderer.device.createShaderModule({\n                    code: shader\n                }),\n                entryPoint: \"fs_main\",\n                targets: [\n                    {\n                        format: this.renderer.format as GPUTextureFormat\n                    }\n                ]\n            },\n            primitive: {\n                topology: \"triangle-list\",\n                cullMode: 'back'\n            },\n            depthStencil: {\n                format: \"depth24plus\",\n                depthWriteEnabled: true,\n                depthCompare: \"less\"\n            }\n        });\n\n        // create uniform buffer and layout\n        this.uniformBuffer = this.renderer.device.createBuffer({\n            size: 64,\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n        });\n\n\n        this.uniformBindGroup = this.renderer.device.createBindGroup({\n            layout: this.pipeline.getBindGroupLayout(0),\n            entries: [{\n                binding: 0,\n                resource: {\n                    buffer: this.uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            }]\n        });\n\n        this.textureView = this.renderer.ctx.getCurrentTexture().createView();\n        this.depthTexture = this.renderer.device.createTexture({\n            size: [this.renderer.canvas.width, this.renderer.canvas.height, 1],\n            format: \"depth24plus\",\n            usage: GPUTextureUsage.RENDER_ATTACHMENT\n        });\n        this.renderPassDescription = {\n            colorAttachments: [{\n                view: this.textureView,\n                clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\n                //@ts-ignore\n                loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n                loadOp: 'clear',\n                storeOp: 'store'\n            }],\n            depthStencilAttachment: {\n                view: this.depthTexture.createView(),\n                depthClearValue: 1.0,\n                depthLoadOp: 'clear',\n                depthStoreOp: \"store\",\n            }\n        };\n\n        // this.requestAni = requestAnimationFrame(this.loop);\n    }\n    public render() {\n\n        // //transforms on sphere\n        // mat4.rotate(\n        //     this.modelMatrix, \n        //     this.translateMatrix, \n        //     1, \n        //     vec3.fromValues(Math.cos(this.rotation[0]*2), Math.sin(this.rotation[0]*2), 0)\n        // );            \n        // mat4.invert(this.normalMatrix, this.modelMatrix);\n        // mat4.transpose(this.normalMatrix, this.normalMatrix);\n        // this.renderer.device.queue.writeBuffer(this.vertexUniformBuffer, 64, this.modelMatrix as ArrayBuffer);\n        // device.queue.writeBuffer(this.vertexUniformBuffer, 128, this.normalMatrix as ArrayBuffer);  \n        \n        // //transforms on cube\n        // mat4.rotate(\n        //     this.modelMatrix, \n        //     this.translateMatrix, \n        //     1, \n        //     vec3.fromValues(Math.cos(this.rotation[1]*2), 0, Math.sin(this.rotation[2]*2))\n        // );        \n        // mat4.multiply(modelViewProjectionMatrix, vp.viewMatrix, this.modelMatrix);\n        // mat4.multiply(modelViewProjectionMatrix, vp.projectionMatrix, modelViewProjectionMatrix2);      \n\n        // device.queue.writeBuffer(uniformBuffer2, 0, modelViewProjectionMatrix2 as ArrayBuffer);  \n        \n\n        mat4.multiply(this.translateMatrix, this.renderer.camera.mvpMatrix, this.modelMatrix);\n        mat4.multiply(this.translateMatrix, this.renderer.camera.projection, this.translateMatrix);   \n\n        this.renderer.device.queue.writeBuffer(this.uniformBuffer, 0, this.translateMatrix as ArrayBuffer);\n\n        this.textureView = this.renderer.ctx.getCurrentTexture().createView();\n        this.renderPassDescription.colorAttachments[0].view = this.textureView;\n        this.renderer.commandEncoder = this.renderer.device.createCommandEncoder();\n        const renderPass = this.renderer.commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\n\n        // this.device.queue.writeBuffer(this.uniformBuffer, 0, this.renderer.camera.mvpMatrix as ArrayBuffer);\n\n        // this.textureView = this.ctx.getCurrentTexture().createView();\n        // this.renderPassDescription.colorAttachments[0].view = this.textureView;\n        // const commandEncoder = this.device.createCommandEncoder();\n        // const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\n\n\n        renderPass.setPipeline(this.pipeline);\n        renderPass.setVertexBuffer(0, this.vertexBuffer);\n        renderPass.setVertexBuffer(1, this.colorBuffer);\n        renderPass.setBindGroup(0, this.uniformBindGroup);\n        renderPass.draw(this.numberOfVertices);\n        renderPass.end();\n    \n        this.renderer.device.queue.submit([this.renderer.commandEncoder.finish()]);\n    }\n}\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n}","// import { InitGPU, CreateGPUBuffer, CreateGPUBufferUint, CreateTransforms, CreateViewProjection, CreateAnimation } from './helper';\n// import { Shaders } from './shaders';\n// import { vec3, mat4 } from 'gl-matrix';\n// const createCamera = require('3d-view-controls');\nimport { vec3, mat4 } from 'gl-matrix';\nimport { Renderer, createTransforms, createGPUBuffer } from '../../';\n\nexport class SphereWire {\n\n    numberOfVertices: number = 0;\n    vertexBuffer;\n    normalBuffer;\n    uvBuffer;\n    uniformBindGroup;\n    uniformBuffer;\n\n    commandEncoder;\n\n    textureView;\n    renderPassDescription;\n    pipeline\n\n    isAnimation = true;\n    renderer: Renderer;\n    modelMatrix: mat4;\n    translation: vec3 = vec3.fromValues(0,0,0)\n    rotation: vec3 = vec3.fromValues(0,0,0)\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n\n\n        // create vertex buffers\n        const sphereData = SphereData(1.5, 70, 40);\n        this.numberOfVertices = (sphereData?.vertexData!).length/3;\n        this.vertexBuffer = createGPUBuffer(this.renderer.device, sphereData?.vertexData!);   \n        this.normalBuffer = createGPUBuffer(this.renderer.device, sphereData?.normalData!);\n        this.uvBuffer = createGPUBuffer(this.renderer.device, sphereData?.uvData!);\n\n        const shader = Shaders();\n        this.pipeline = this.renderer.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: {\n                module: this.renderer.device.createShaderModule({\n                    code: shader.vertex\n                }),\n                entryPoint: \"main\",\n                // @ts-ignore\n                buffers: [\n                    {\n                        arrayStride: 12,\n                        attributes: [{\n                            shaderLocation: 0,\n                            format: \"float32x3\",\n                            offset: 0\n                        }]\n                    }\n                ]\n            },\n            fragment: {\n                module: this.renderer.device.createShaderModule({\n                    code: shader.fragment\n                }),\n                entryPoint: \"main\",\n                targets: [\n                    {\n                        format: this.renderer.format as GPUTextureFormat\n                    }\n                ]\n            },\n            primitive: {\n                topology: \"line-list\",\n            },\n            depthStencil: {\n                format: \"depth24plus\",\n                depthWriteEnabled: true,\n                depthCompare: \"less\"\n            }\n        });\n\n        // // create uniform data\n        this.modelMatrix = mat4.create();\n        // const mvpMatrix = mat4.create();\n        // let vMatrix = mat4.create();\n        // let vpMatrix = mat4.create();\n        // const vp = CreateViewProjection(gpu.canvas.width / gpu.canvas.height);\n        // vpMatrix = vp.viewProjectionMatrix;\n\n        // add rotation and camera:\n        this.rotation = vec3.fromValues(0, 0, 0);\n        // var camera = createCamera(gpu.canvas, vp.cameraOption);\n\n        // create uniform buffer and layout\n        this.uniformBuffer = this.renderer.device.createBuffer({\n            size: 64,\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n        });\n\n        this.uniformBindGroup = this.renderer.device.createBindGroup({\n            layout: this.pipeline.getBindGroupLayout(0),\n            entries: [{\n                binding: 0,\n                resource: {\n                    buffer: this.uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            }]\n        });\n\n        this.textureView = this.renderer.ctx.getCurrentTexture().createView();\n        const depthTexture = this.renderer.device.createTexture({\n            size: [this.renderer.canvas.width, this.renderer.canvas.height, 1],\n            format: \"depth24plus\",\n            usage: GPUTextureUsage.RENDER_ATTACHMENT\n        });\n        this.renderPassDescription = {\n            colorAttachments: [{\n                view: this.textureView,\n                clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, //background color\n                loadOp: 'clear',\n                storeOp: 'store'\n            }],\n            depthStencilAttachment: {\n                view: depthTexture.createView(),\n                depthClearValue: 1.0,\n                depthLoadOp: 'clear',\n                depthStoreOp: \"store\",\n                //stencilLoadValue: 0,\n                //stencilStoreOp: \"store\"\n            }\n        };\n\n    }\n\n    //     CreateAnimation(draw, rotation, isAnimation);\n    // }\n    render(commandEncoder, i) {\n        if (!this.isAnimation) {\n            // if (camera.tick()) {\n                // const pMatrix = vp.projectionMatrix;\n                // vMatrix = camera.matrix;\n                // mat4.multiply(vpMatrix, pMatrix, vMatrix);\n            // }\n        }\n\n//         const commandEncoder = device.createCommandEncoder()\n// const computePass = commandEncoder.beginComputePass()\n// computePass.setPipeline(pipelineObj.computePipeline)\n// computePass.setBindGroup(0, pipelineObj.computeGroup)\n// computePass.dispatchWorkgroups(Math.ceil(NUM / 128))\n// computePass.end()\n\n        createTransforms(this.modelMatrix, this.translation, this.rotation);\n        mat4.multiply(this.renderer.camera.mvpMatrix,this.renderer.camera. vpMatrix, this.modelMatrix);\n        this.renderer.device.queue.writeBuffer(this.uniformBuffer, 0, this.renderer.camera.mvpMatrix as ArrayBuffer);\n\n\n        // contextTexture.destroy();\n        // texture.destroy();\n        \n        // contextTexture = gpu.context.getCurrentTexture();      \n        // texture = device.createTexture({\n        //     size: [gpu.canvas.width, gpu.canvas.height, 1],\n        //     sampleCount: 4,\n        //     format: gpu.format as GPUTextureFormat,\n        //     usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        // });\n        // renderPassDescription.colorAttachments[0].resolveTarget = contextTexture.createView();\n        // renderPassDescription.colorAttachments[0].view = texture.createView() as GPUTextureView;\n\n        // const commandEncoder = device.createCommandEncoder();\n        // const renderPass = commandEncoder.beginRenderPass(renderPassDescription as GPURenderPassDescriptor);\n\n        this.textureView = this.renderer.ctx.getCurrentTexture().createView();\n        this.renderPassDescription.colorAttachments[0].view = this.textureView;\n        \n        const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\n\n        renderPass.setPipeline(this.pipeline);\n        renderPass.setVertexBuffer(0, this.vertexBuffer);\n        renderPass.setBindGroup(0, this.uniformBindGroup);\n        renderPass.draw(this.numberOfVertices);\n        renderPass.end();\n\n        // this.renderer.device.queue.submit([this.commandEncoder.finish()]);\n    }\n}\nexport const Shaders = () => {\n    const vertex = `\n        struct Uniforms {\n            mvpMatrix : mat4x4<f32>,\n        };\n        @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n        \n        @vertex\n        fn main(@location(0) pos: vec4<f32>) ->  @builtin(position) vec4<f32> {\n            return uniforms.mvpMatrix * pos;     \n        }`;\n\n    const fragment = `\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(1.0, 1.0, 0.0, 1.0);            \n        }`;\n\n    return {\n        vertex, \n        fragment\n    };\n}\n\n\nexport const SphereData = (radius:number = 2, u:number = 20, v:number = 15, center:vec3 = [0,0,0], ul = 1, vl = 1) => {\n    if(u<2 || v<2) return;\n    let pts = [];\n    let pt:vec3;\n    for(let i = 0;i<u;i++){\n        let pt1:vec3[] = [];\n        for(let j=0;j<v;j++){\n            pt = SpherePosition(radius, i*180/(u-1), j*360/(v-1), center);                \n            pt1.push(pt);\n        }\n        pts.push(pt1);\n    }\n\n    let vertex = [] as any, normal = [] as any;\n    let uv = [] as any;\n    let u0, u1, u2,u3, v0,v1,v2,v3;\n    let p0:vec3,p1:vec3,p2:vec3,p3:vec3,a:vec3, b:vec3;\n\n    for(let i=0;i<u-1;i++){\n        for(let j=0;j<v-1;j++){\n            p0 = pts[i][j];\n            p1 = pts[i+1][j];\n            p2 = pts[i+1][j+1];\n            p3 = pts[i][j+1];\n            a = vec3.create();\n            b = vec3.create();\n            vec3.subtract(a, p2,p0);\n            vec3.subtract(b, p1,p3); \n            \n            // vertex data\n            vertex.push([\n                //first triangle                    \n                p0[0],p0[1],p0[2], p1[0],p1[1],p1[2], p3[0],p3[1],p3[2],  \n\n                //second triangle                    \n                p1[0],p1[1],p1[2], p2[0],p2[1],p2[2], p3[0],p3[1],p3[2]  \n            ]);\n\n            //normal data\n            normal.push([\n                //first triangle\n                p0[0]/radius,p0[1]/radius,p0[2]/radius,\n                p1[0]/radius,p1[1]/radius,p1[2]/radius,\n                p3[0]/radius,p3[1]/radius,p3[2]/radius,\n\n                //second triangle                    \n                p1[0]/radius,p1[1]/radius,p1[2]/radius, \n                p2[0]/radius,p2[1]/radius,p2[2]/radius,\n                p3[0]/radius,p3[1]/radius,p3[2]/radius\n            ]);\n\n            // uv data\n            u0 = ul * (0.5+Math.atan2(p0[0]/radius,p0[2]/radius)/Math.PI/2);\n            u1 = ul * (0.5+Math.atan2(p1[0]/radius,p1[2]/radius)/Math.PI/2);\n            u2 = ul * (0.5+Math.atan2(p2[0]/radius,p2[2]/radius)/Math.PI/2);\n            u3 = ul * (0.5+Math.atan2(p3[0]/radius,p3[2]/radius)/Math.PI/2);\n            v0 = vl * (0.5-Math.asin(p0[1]/radius)/Math.PI);\n            v1 = vl * (0.5-Math.asin(p1[1]/radius)/Math.PI);\n            v2 = vl * (0.5-Math.asin(p2[1]/radius)/Math.PI);\n            v3 = vl * (0.5-Math.asin(p3[1]/radius)/Math.PI);\n\n            uv.push([\n                //first triangle\n                u0, v0, u1, v1, u3, v3,                   \n\n                //second triangle \n                u1, v1, u2, v2, u3, v3                   \n            ]);\n        }\n    }\n    return {\n        vertexData: new Float32Array(vertex.flat()),\n        normalData: new Float32Array(normal.flat()),\n        uvData: new Float32Array(uv.flat())\n    }\n};\n\nexport const SpherePosition = (radius:number, theta:number, phi:number, center:vec3 = [0,0,0]) => {\n    let snt = Math.sin(theta*Math.PI/180);\n    let cnt = Math.cos(theta*Math.PI/180);\n    let snp = Math.sin(phi*Math.PI/180);\n    let cnp = Math.cos(phi*Math.PI/180);\n    return vec3.fromValues(radius*snt*cnp + center[0], radius*cnt + center[1], -radius*snt*snp + center[2]);     \n};","// import positionVert from './shaders/position.vert.wgsl?raw';\n// import colorFrag from './shaders/color.frag.wgsl';\nimport { vec3, mat4 } from 'gl-matrix';\n\nimport { NCamera } from './Camera';\n\nimport { Shaders, CreateGPUBufferUint, CreateGPUBuffer } from './shaders/shaders';\n\nimport { CubeData } from './shaders/cube';\n\nimport { Cube } from './Geometry/Box';\nimport { Line } from './Geometry/Line';\nimport { SphereWire } from './Geometry/SphereWire';\n\nconst shaderPath = require('./shaders/sha.wgsl');\n\n\n\n\nexport class Renderer {\n    divHost: HTMLElement;\n    canvas: HTMLCanvasElement;\n\n    ctx: GPUCanvasContext;\n    device: GPUDevice;\n    format: GPUTextureFormat;\n\n    size: any;\n\n    commandEncoder: GPUCommandEncoder;\n\n    // uniformBuffer: GPUBuffer\n    // uniformBindGroup: GPUBindGroup\n    // textureView: GPUTextureView\n    // depthTexture: GPUTexture;\n    // renderPassDescription: GPURenderPassDescriptor\n\n    // numberOfVertices: number;\n    // vertexBuffer: GPUBuffer;\n    // colorBuffer: GPUBuffer;\n\n    cube: Cube;\n    line: Line;\n    sphereWire: SphereWire;\n    sphereWire0: SphereWire;\n\n    tri: Tri;\n\n    public camera: NCamera;\n    public isAnimation: boolean = true;\n    private requestAni: any;\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas; // document.createElement('canvas');\n        this.divHost = this.canvas.parentElement;\n\n        this.init();\n    }\n    public destroy() {\n        this.device.destroy();\n        // this.isAnimation = false;\n        cancelAnimationFrame(this.requestAni);\n        // this.requestAni = undefined;\n        while (this.divHost.lastElementChild) {\n            this.divHost.removeChild(this.divHost.lastElementChild);\n        }\n    }\n    async init() {\n        console.log(1);\n        await this.initWebGPU();\n        this.camera = new NCamera(this);\n        console.log(2);\n        // await this.initPipeline(this.device, this.format);\n        console.log(3);\n        console.log(4);\n        this.cube = new Cube(this);\n\n        // this.line = new Line(this);\n\n        this.sphereWire = new SphereWire(this);\n        this.sphereWire0 = new SphereWire(this);\n        \n    }\n    async initWebGPU() {\n        if (!navigator.gpu) { throw new Error('Not Support WebGPU'); }\n\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: 'high-performance'\n            // powerPreference: 'low-power'\n        })\n\n        if (!adapter) { throw new Error('No Adapter Found'); }\n\n        const device = await adapter.requestDevice()\n        this.ctx = this.canvas.getContext('webgpu') as GPUCanvasContext\n        const format = navigator.gpu.getPreferredCanvasFormat ? navigator.gpu.getPreferredCanvasFormat() : this.ctx.getPreferredFormat(adapter)\n        const devicePixelRatio = window.devicePixelRatio || 1\n        this.canvas.width = this.divHost.clientWidth;\n        this.canvas.height = this.divHost.clientHeight;\n        this.ctx.configure({\n            // json specific format when key and value are the same\n            device, format,\n            // prevent chrome warning\n            alphaMode: 'opaque'\n        });\n\n        this.size = { width: this.canvas.width, height: this.canvas.height }\n        this.device = device;\n        this.format = format;\n\n        this.requestAni = requestAnimationFrame(this.loop);\n    }\n    public loop = () => {\n        if (this.isAnimation) {\n            this.requestAni = requestAnimationFrame(this.loop);\n        }\n\n        // console.log(this.rotation);\n        this.camera.update();\n        this.drawing();\n    }\n    public drawing() {\n        // this.textureView = this.ctx.getCurrentTexture().createView();\n\n        // this.device.queue.writeBuffer(this.uniformBuffer, 0, this.camera.mvpMatrix as ArrayBuffer);\n        this.commandEncoder = this.device.createCommandEncoder();\n        // this.textureView = this.ctx.getCurrentTexture().createView();\n        // this.renderPassDescription.colorAttachments[0].view = this.textureView;\n        // const commandEncoder = this.device.createCommandEncoder();\n        // const renderPass = commandEncoder.beginRenderPass(this.renderPassDescription as GPURenderPassDescriptor);\n\n\n\n        this.sphereWire.rotation[1] += 0.01\n        this.sphereWire.translation[1] += 0.01\n        // this.cube.render();\n        // this.line.render();\n        this.sphereWire0.render(this.commandEncoder, 0);\n        this.sphereWire.render(this.commandEncoder, 1);\n\n        // renderPass.setPipeline(this.pipeline);\n        // renderPass.setVertexBuffer(0, this.vertexBuffer);\n        // renderPass.setVertexBuffer(1, this.colorBuffer);\n        // renderPass.setBindGroup(0, this.uniformBindGroup);\n        // renderPass.draw(this.numberOfVertices);\n        // renderPass.end();\n\n        // this.device.queue.submit([commandEncoder.finish()]);\n        console.log('loop...')\n        this.device.queue.submit([this.commandEncoder.finish()]);\n\n        \n        // this.device.queue.submit([this.sphereWire0.commandEncoder.finish(), this.sphereWire.commandEncoder.finish()]);\n    }\n\n}\n\n\nexport const loadWGSL = async (path: string) => {\n    return fetch(`${path}`)\n        .then((response: Response) => {\n            return response.text();\n        }).catch((err: Error) => {\n            //     console.log(err);\n        });\n\n}\n\nexport const createViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};\n\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const createGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};","import { Renderer } from './Renderer';\r\n\r\nexport class Solution {\r\n    divHost: HTMLElement;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    renderer: Renderer;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.divHost.appendChild(this.canvas);\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        this.renderer = new Renderer(this.canvas)\r\n    };\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        // this.isAnimation = false;\r\n        // this.requestAni = undefined;\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"],"names":["NCamera","constructor","solution","canvas","modelMatrix","mvpMatrix","vMatrix","vpMatrix","rotation","vec3","translation","vp","projection","mat4","eye","center","up","this","createViewProjection","width","height","viewProjectionMatrix","update","projectionMatrix","createTransforms","rotateZ","val","translateX","shaderPath","require","Cube","renderer","size","pipeline","normalMatrix","translateMatrix","uniformBuffer","uniformBindGroup","textureView","depthTexture","renderPassDescription","numberOfVertices","vertexBuffer","colorBuffer","initPipeline","async","cubeData","positions","Float32Array","colors","length","CreateGPUBuffer","device","console","log","shader","loadWGSL","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","format","offset","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","ctx","getCurrentTexture","createView","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachments","view","clearValue","r","g","b","a","loadValue","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","render","camera","queue","writeBuffer","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","data","usageFlag","VERTEX","byteLength","mappedAtCreation","getMappedRange","set","unmap","SphereWire","normalBuffer","uvBuffer","isAnimation","sphereData","SphereData","vertexData","createGPUBuffer","normalData","uvData","Shaders","i","radius","u","v","ul","vl","pt","pts","pt1","j","SpherePosition","push","u0","u1","u2","u3","v0","v1","v2","v3","p0","p1","p2","p3","normal","uv","Math","atan2","PI","asin","flat","theta","phi","snt","sin","cnt","cos","snp","cnp","Renderer","divHost","cube","line","sphereWire","sphereWire0","tri","requestAni","loop","requestAnimationFrame","drawing","parentElement","init","destroy","cancelAnimationFrame","lastElementChild","removeChild","initWebGPU","navigator","gpu","Error","adapter","requestAdapter","powerPreference","requestDevice","getContext","getPreferredCanvasFormat","getPreferredFormat","window","devicePixelRatio","clientWidth","clientHeight","configure","alphaMode","fetch","path","then","response","text","catch","err","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","cameraOption","zoomMax","zoomSpeed","modelMat","scaling","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","Solution","id","document","getElementById","createElement","appendChild","create","out","glMatrix","fromValues","x","y","z","add","subtract","scaleAndAdd","scale","cross","ax","ay","az","bx","by","bz","vec"],"sourceRoot":""}